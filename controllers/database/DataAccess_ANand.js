var config = require('./config');
var jwt = require('jsonwebtoken');
var dbConn = require('./dbConnection');
var con = dbConn.createMysqlConn();
var async = require('async');
var logger = require('inspire').logger;
const bcrypt = require('bcrypt');
const saltRounds = 10;
var slaDaoAccess = require('./slaDAO');
const SLA_URL = global.gConfig.SLA_URL;
const MAIL_URL = global.gConfig.MAIL_URL;
const REPORT_URL = global.gConfig.REPORT_URL;
const REDIS_HOST = global.gConfig.REDIS_HOST;
const REDIS_PORT = global.gConfig.REDIS_PORT;
const SECRET_TOKEN = global.gConfig.SECRET_TOKEN;
const util = require('../util');
const MAX_FILE = 10;


const request = require('superagent');

const btoa = require('btoa');
var atob = require('atob');

var mongodburl = global.gConfig.MONGODB_URL;
const ENVIRONMENT = global.gConfig.config_id;
const slaveCon = dbConn.createMysqlConnReport();
// if (ENVIRONMENT === 'development') {
//     slaveCon = dbConn.createMysqlConnReport();
// }else{
//     slaveCon = dbConn.createMysqlConn();
// }
var mongojs = require('mongojs');
var db = mongojs(mongodburl);
var notification = db.collection('notification');
var url = db.collection('url');

// var redis = require("redis"),
//     client = redis.createClient(REDIS_PORT, REDIS_HOST);
let socket;
getSocketUrl();

let count = 0;
let RETRY = 1;
db.on('error', function (err) {
    // util.logData('database error');
    // util.logData(JSON.stringify(err));
});

function getSocketUrl() {
    url.find(function (err, urls) {
        if (err) {
            util.logData(err);
        } else {
            if (urls.length > 0) {
                console.log("socket url >>> ", urls[0].socket_url1)
                socket = require('socket.io-client')(urls[0].socket_url1, { forceNew: true, autoConnect: true });
                socket.on('connect', function () {
                    util.logData('\n Socket Connected :');

                });
                socket.on('disconnect', function (reason) {
                    util.logData('\n Socket DisConnected')
                    util.logData(reason)
                });
                socket.on('connect_error', function (data) {
                    util.logData("connect_error:" + data);
                    if (count < RETRY) {
                        count++;
                        util.logData('Trying to connect 2');
                        socket = require('socket.io-client')(urls[1].socket_url2, { forceNew: true, autoConnect: true });
                    }
                });
            }
        }
    })

}


const TOKEN_EXP_TIME = 30 * 60 * 1000; // in milli

function preventSqlInjection(data) {
    let arr = {};
    for (key in data) {
        // if(data[key] !== 'string'){
        //     arr[key] = data[key];
        // }else{
        //     arr[key] = con.escape(data[key]);
        // }
        arr[key] = data[key];
    }
    return arr;
}

function hrCalculation(strTime, edTime) {
    if (strTime == null) {
        strTime = "00:00";
    }

    if (edTime == null) {
        edTime = "00:00";
    }
    var startTime = new Date('2012/10/09 ' + strTime);
    var endTime = new Date('2012/10/09 ' + edTime);
    var difference = endTime.getTime() - startTime.getTime(); // This will give difference in milliseconds
    var resultInMinutes = Math.round(difference / 60000);
    return resultInMinutes;

}


function insertClientDB(data, cb) {
    data.clientCode = data.clientCode.toLowerCase();
    var sql1 = "select count(id) cnt from CLIENT where DeleteFlag = '0' and ( keyEmail = '" + data.keyEmail + "' or keyMobile = '" + data.keyMobile + "' or clientCode='" + data.clientCode + "' ) ";
    con.query(sql1, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            var sql = "";
            if (result1[0].cnt == 0) {
                var sdt = new Date(data.startDate).toISOString().slice(0, 19).replace('T', ' ');
                var totHr = hrCalculation(data.sunHourStart, data.sunHourEnd) + hrCalculation(data.monHourStart, data.monHourEnd) + hrCalculation(data.tueHourStart, data.tueHourEnd)
                    + hrCalculation(data.wedHourStart, data.wedHourEnd) + hrCalculation(data.thurHourStart, data.thurHourEnd) + hrCalculation(data.friHourStart, data.friHourEnd) + hrCalculation(data.satHourStart, data.satHourEnd);

                if (!data.endDate) {
                    sql = "INSERT INTO CLIENT (NAME,keyPerson,keyEmail,keyMobile,zone,startDate,cliAddr,BASE_FLAG,createbyid,spocName,spocEmail,spocNumber,sunChck,sunHourStart,sunHourEnd,monChck,monHourStart,monHourEnd,tueChck,tueHourStart,tueHourEnd,wedChck,wedHourStart,wedHourEnd,thurChck,thurHourStart,thurHourEnd,friChck,friHourStart,friHourEnd,satChck,satHourStart,satHourEnd,weeklyworkinghour,clientCode,upload_path,sub_client) VALUES (" +
                        "'" + data.name + "','" + data.keyPerson + "','" + data.keyEmail + "','" + data.keyMobile + "','" + data.zone + "',(select ADDTIME('" + sdt + "','5:30:0.000000')),'" + data.cliAddr + "','false','1','" + data.spocName + "','" + data.spocEmail + "','" + data.spocNumber + "','" + data.sunChck + "','" + data.sunHourStart + "','" + data.sunHourEnd + "','" + data.monChck + "','" + data.monHourStart + "','" + data.monHourEnd + "','" + data.tueChck + "','" + data.tueHourStart + "','" + data.tueHourEnd + "','" + data.wedChck + "','" + data.wedHourStart + "','" + data.wedHourEnd + "','" + data.thurChck + "','" + data.thurHourStart + "','" + data.thurHourEnd + "','" + data.friChck + "','" + data.friHourStart + "','" + data.friHourEnd + "','" + data.satChck + "','" + data.satHourStart + "','" + data.satHourEnd + "'," + totHr + ",'" + data.clientCode + "','" + data.uploadpath + "','" + data.sub_client + "')";
                } else {
                    var edt = new Date(data.endDate).toISOString().slice(0, 19).replace('T', ' ');
                    sql = "INSERT INTO CLIENT (NAME,keyPerson,keyEmail,keyMobile,zone,startDate,endDate,cliAddr,BASE_FLAG,createbyid,spocName,spocEmail,spocNumber,sunChck,sunHourStart,sunHourEnd,monChck,monHourStart,monHourEnd,tueChck,tueHourStart,tueHourEnd,wedChck,wedHourStart,wedHourEnd,thurChck,thurHourStart,thurHourEnd,friChck,friHourStart,friHourEnd,satChck,satHourStart,satHourEnd,weeklyworkinghour,clientCode,upload_path,sub_client) VALUES (" +
                        "'" + data.name + "','" + data.keyPerson + "','" + data.keyEmail + "','" + data.keyMobile + "','" + data.zone + "',(select ADDTIME('" + sdt + "','5:30:0.000000')),(select ADDTIME('" + edt + "','5:30:0.000000')),'" + data.cliAddr + "','false','1','" + data.spocName + "','" + data.spocEmail + "','" + data.spocNumber + "','" + data.sunChck + "','" + data.sunHourStart + "','" + data.sunHourEnd + "','" + data.monChck + "','" + data.monHourStart + "','" + data.monHourEnd + "','" + data.tueChck + "','" + data.tueHourStart + "','" + data.tueHourEnd + "','" + data.wedChck + "','" + data.wedHourStart + "','" + data.wedHourEnd + "','" + data.thurChck + "','" + data.thurHourStart + "','" + data.thurHourEnd + "','" + data.friChck + "','" + data.friHourStart + "','" + data.friHourEnd + "','" + data.satChck + "','" + data.satHourStart + "','" + data.satHourEnd + "'," + totHr + ",'" + data.clientCode + "','" + data.uploadpath + "','" + data.sub_client + "')";
                }
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        var str = "insert into CLIENT_EnableDayTime (clientid, sunchck, sunhourstart, sunhourend, monchck, monhourstart, monhourend, tuechck, tuehourstart, tuehourend, wedchck, wedhourstart, wedhourend, thurchck, thurhourstart, thurhourend, frichck, frihourstart, frihourend, satchck, sathourstart, sathourend, weeklyworkinghour) " +
                            " select id, sunChck, sunHourStart, sunHourEnd, monChck, monHourStart, monHourEnd, tueChck, tueHourStart, tueHourEnd, " +
                            " wedChck, wedHourStart, wedHourEnd, thurChck, thurHourStart, thurHourEnd, friChck, friHourStart, friHourEnd, satChck, satHourStart, satHourEnd,weeklyworkinghour from CLIENT where id = " + result.insertId + " ";
                        con.query(str, function (err2, result2) {
                            if (err2) {
                                logData(err2);
                                cb(err2, null);
                            } else {
                                cb(null, true, result.insertId);
                            }
                        });
                    }
                });
            } else {
                cb(null, false, "Duplicate Client Name");
            }
        }
    });

}


function insertClientUserRoleDB(data, cb) {
    var str = "select id from CLIENTUSERROLE where CLIENTID = " + data.clientId + " and ROLEID = " + data.roleId + " and DeleteFlag = '0' ";
    con.query(str, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length == 0) {
                var sql = "INSERT INTO CLIENTUSERROLE (ROLEID,CLIENTID,createbyid) VALUES (" +
                    data.roleId + "," + data.clientId + "," + data.createdBy + ")";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });

}

function insertUserDB(data, cb) {
    var sql1 = "select id  from USER where (login_name = ? and CLIENTID=? and DeleteFlag = ? ) ";

    con.query(sql1, [data.login_name.toLowerCase(), data.clientId, 0], function (err1, result1) {
        logData("--------------------->" + sql1);
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length === 0) {
                bcrypt.hash(data.password, saltRounds, function (err, hash) {
                    if (err) {
                        logData(err);
                    } else {
                        var sql = "INSERT INTO USER (NAME,CLIENTID,login_name,USERMAIL,USERMOBILENO,PASSWORD,createbyid,address,user_type) VALUES (?,?,?,?,?,'" + hash + "',?,?,?)";
                        con.query(sql, [data.name, data.clientId, data.login_name.toLowerCase(), data.email, data.mobile, data.user_id, data.address, data.userType], function (err, result) {
                            logData("---------009------>" + sql);
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                cb(null, true, result.insertId);
                            }
                        });
                    }
                })
            } else {
                cb(null, false, "Duplicate Login Name");
            }
        }
    });
}

function insertRoleUserDB(data, cb) {
    var str = "Select id from ROLEUSER where CLIENTID =" + data.CLIENTID + " and ROLEID =" + data.ROLEID + " and USERID=" + data.user_id + " and DeleteFlag = '0'";
    con.query(str, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length === 0) {
                var sql = "INSERT INTO ROLEUSER (CLIENTID,ROLEID,USERID,createbyid,createdate,DeleteFlag) VALUES (" +
                    data.CLIENTID + "," + data.ROLEID + "," + data.user_id + "," + data.createbyid + ",'" + data.createdate + "','0')";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });

}

function insertModuleClientDB(data, cb) {
    function insert(callback) {
        var str = "Select id from MODULECLIENT where CLIENTID = " + data.clientId + " and MODULEID = " + data.moduleId + " and DeleteFlag = '0'";
        con.query(str, function (err1, result1) {
            if (err1) {
                logData(err1);
                cb(err1, null);
            } else {
                var sdt = new Date(data.startDate).toISOString().slice(0, 19).replace('T', ' ');

                let sql = "";
                if (result1.length === 0) {
                    var str11 = "SELECT id,date_format (endDate,'%Y-%m-%d %T') endDate    FROM CLIENT where id =" + data.clientId + " and DeleteFlag = '0' ";
                    con.query(str11, function (err11, result11) {
                        if (err11) {
                            logData(err11);
                            cb(err11, null);
                        } else {
                            logData('1222222222222' + JSON.stringify(result11) + '===========' + data.endDate);
                            if (data.endDate != null) {
                                var edt = new Date(data.endDate).toISOString().slice(0, 19).replace('T', ' ');
                                sql = "INSERT INTO MODULECLIENT (CLIENTID,MODULEID,FROMDATE,DEACTIVEDATE) VALUES (" +
                                    data.clientId + "," + data.moduleId + ",'" + sdt + "','" + edt + "')";
                            } else {
                                if (result11.length != 0 && result11[0].endDate != null && result11[0].endDate != "") {
                                    logData('data=============111' + JSON.stringify(result11[0]));
                                    sql = "INSERT INTO MODULECLIENT (CLIENTID,MODULEID,FROMDATE,DEACTIVEDATE) VALUES (" +
                                        data.clientId + "," + data.moduleId + ",'" + sdt + "','" + result11[0].endDate + "')";
                                } else {
                                    logData('data=============222' + JSON.stringify(result11[0]));
                                    sql = "INSERT INTO MODULECLIENT (CLIENTID,MODULEID,FROMDATE) VALUES (" +
                                        data.clientId + "," + data.moduleId + ",'" + sdt + "')";
                                }
                            }
                            con.query(sql, function (err, result) {
                                logData('result========' + JSON.stringify(result));
                                if (err) {
                                    logData(err);
                                    callback(err, null);
                                } else {
                                    var str2 = "Select a.id,b.MODULENAME from tbl_client_menu_details a, MODULE b where a.client_id =" + data.clientId + " and a.module_id =" + data.moduleId + " and a.module_id = b.id and a.DeleteFlag = '0' and b.DeleteFlag='0'";
                                    con.query(str2, function (err2, result2) {
                                        if (err2) {
                                            logData('err2' + err2);
                                            cb(err2, null);
                                        } else {
                                            logData('res2' + JSON.stringify(result2));
                                            if (result2.length === 0) {
                                                if (data.moduleId === 1 || data.moduleId === '1') {
                                                    /*copyMenu({clientId: data.clientId}, function (err4) {
                                                        if (err) {
                                                            callback(err3, null);
                                                        } else {
                                                            callback(null, result.insertId);
                                                        }
                                                    })*/
                                                    request
                                                        .get(SLA_URL + '/updateDynamicMenuReCreateController')
                                                        .query({ client_id: data.clientId }) // query string
                                                        .end((err, resp) => {
                                                            if (err) {
                                                                logData(err);
                                                                callback(err, null);
                                                            } else {
                                                                callback(null, result.insertId);
                                                                logData('updateDynamicMenuReCreateController--' + JSON.stringify(resp));
                                                            }
                                                        });
                                                } else {
                                                    let sql4 = "select MODULENAME from MODULE where id =" + data.moduleId + " and DeleteFlag='0'";
                                                    con.query(sql4, function (err4, result4) {
                                                        if (err4) {
                                                            logData(err4);
                                                            callback(err4, null);
                                                        } else {
                                                            let sql3 = "INSERT INTO tbl_client_menu_details (client_id,module_id,parent_menu_id,menu_desc,sequence_no,leafnode) VALUES (" +
                                                                data.clientId + "," + data.moduleId + ",0,'" + result4[0].MODULENAME + "'," + data.sequence + ",'false')";

                                                            con.query(sql3, function (err3, result3) {
                                                                if (err3) {
                                                                    logData(err3);
                                                                    callback(err3, null);
                                                                } else {
                                                                    logData('insert sql=', JSON.stringify(result3))
                                                                    callback(null, result.insertId);
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                            } else {
                                                logData('insert idddddddddddd=' + result.insertId);
                                                callback(null, result.insertId);
                                            }

                                        }
                                    });
                                }
                            });
                        }
                    });
                } else {
                    callback(null, "Duplicate Client Module Mapping");
                }
            }
        });

    }


    function getbaseClientId(callback) {
        let sql = "SELECT id FROM  CLIENT WHERE BASE_FLAG='true'";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result[0].id);
            }
        });
    }

    async.parallel([insert, getbaseClientId], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[0] === 'Duplicate Client Module Mapping') {
                cb(null, false, results[0])
            } else {
                let baseId = results[1];
                let sql = 'select URLID,createbyid from MODULEURLMAP where CLIENTID=' + baseId + ' and MODULEID=' + data.moduleId + ' and DeleteFlag="0"';
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            let count = 0;
                            for (let i = 0; i < result.length; i++) {
                                let sql = 'insert into MODULEURLMAP (CLIENTID,MODULEID,URLID,createbyid) ' +
                                    'values(' + data.clientId + ',' + data.moduleId + ',' + result[i].URLID + ',' + result[i].createbyid + ');'
                                con.query(sql, function (err) {
                                    if (err) {
                                        logData(err);
                                        cb(err, null);
                                    } else {
                                        count++;
                                        if (count === result.length) {
                                            cb(null, true, results[0]);
                                        }

                                    }
                                });
                            }
                        } else {
                            cb(null, false, "No URL mapped with this module.You can proceed but can not create menu");
                        }
                    }
                });
            }

        }
    })
}


function copyMenu(data, cb) {
    let sql = 'select * from tbl_client_menu_details where client_id=1 and module_id=1';
    con.query(sql, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            let count = 0;
            for (let i = 0; i < result.length; i++) {
                let sql1 = " Insert into tbl_client_menu_details (client_id,module_id,parent_menu_id ,menu_desc, sequence_no,leafnode,url_id) values(" + data.clientId + " ," + result[i].module_id + "," + result[i].parent_menu_id + ",'" + result[i].menu_desc + "'," + result[i].sequence_no + "," + result[i].leafnode + "," + result[i].url_id + ") ";
                con.query(sql1, function (err, result1) {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        count++;
                        if (count === result.length) {
                            cb(null, "DONE");
                        }
                    }
                })
            }
        }
    });
}


function insertModuleClientUserRoleMapDB(data, cb) {
    var str = "Select id from MODULECLIENTUSERROLEMAP where clientId =" + data.clientId + " and moduleId =" + data.moduleId + " and roleId =" + data.roleId + " and DeleteFlag = '0' ";
    con.query(str, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length == 0) {
                var sql = "INSERT INTO MODULECLIENTUSERROLEMAP (clientId,moduleId,roleId,createbyid,createdate) VALUES (" +
                    data.clientId + "," + data.moduleId + "," + data.roleId + "," + data.createbyid + ",'" + data.createdate + "')";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });

}

function insertModuleClientUserMapDB(data, cb) {
    var str = "Select id from MODULECLIENTUSERMAP where client_id =" + data.client_id + " and module_id =" + data.module_id + " and role_id=" + data.role_id + "  and user_id=" + data.user_id + " and DeleteFlag = '0' ";
    con.query(str, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length == 0) {
                var sql = "INSERT INTO MODULECLIENTUSERMAP (module_id,client_id,user_id,role_id,createbyid,createdate) VALUES (" +
                    data.module_id + "," + data.client_id + "," + data.user_id + "," + data.role_id + "," + data.createbyid + ",'" + data.createdate + "')";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });

}

function insertVendorDB(data, cb) {
    var str = "Select id from VENDOR where CLIENTID = " + data.CLIENTID + " and NAME =" + data.NAME + " and DeleteFlag = '0'  ";
    con.query(str, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length == 0) {
                var sql = "INSERT INTO VENDOR (NAME,CLIENTID,ACTIVE,KeyPersonName,KeyPersonMailId,KeyPersonAddr,KeyPersonCell,createbyid,createdate) VALUES (" +
                    "'" + data.NAME + "'," + data.CLIENTID + ",'" + data.ACTIVE + "','" + data.KeyPersonName + "','" + data.KeyPersonMailId + "','" + data.KeyPersonAddr + "','" + data.KeyPersonCell + "'," + data.createbyid + ",'" + data.createdate + "')";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });

}


function allClientsDB(cb) {
    var str = 'SELECT id,NAME as name ,startDate,endDate FROM  CLIENT where BASE_FLAG="false" and DeleteFlag="0"';
    con.query(str, function (err, done, fields) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    })
}


function allRolesDB(cb) {
    var str = "SELECT id, ROLENAME as name,ROLEDESC as roleDesc,SUPERADMINFLAG as superAdmin FROM USERROLE where DeleteFlag='0'";
    con.query(str, function (err, done, fields) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            for (var i = 0; i < done.length; i++) {
                done[i].superAdmin = stringToBool(done[i].superAdmin)
            }
            cb(null, true, done);
        }
    })
}


function allUrlKeyDB(cb) {
    var str = "select MODULEURLMAP.id,MODULE.MODULENAME as moduleName,URLKEY.URL as url,URLKEY.URLDESCRIPTION as urlDesc,URLKEY.URLKEY as urlKey from MODULEURLMAP INNER JOIN MODULE INNER JOIN URLKEY ON MODULEURLMAP.MODULEID=MODULE.id AND MODULEURLMAP.URLID=URLKEY.id AND MODULEURLMAP.DeleteFlag='0'";
    con.query(str, function (err, done, fields) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

            cb(null, true, done);
        }
    })
}

function allUrlDB(data, cb) {
    var str = "SELECT URL FROM  URLKEY WHERE URLKEY='" + data.URLKEY + "' and DeleteFlag='0'";
    con.query(str, function (err, done, fields) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    })
}

function allMappedModuleDB(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select MODULECLIENT.id , MODULE.MODULENAME as module,CLIENT.NAME as client," +
                " MODULECLIENT.FROMDATE as startDate, MODULECLIENT.DEACTIVEDATE as endDate" +
                " from  MODULECLIENT,MODULE,CLIENT WHERE MODULECLIENT.id > " + offset +
                " AND  MODULECLIENT.CLIENTID=CLIENT.id AND" +
                " MODULECLIENT.MODULEID=MODULE.id  AND MODULECLIENT.DeleteFlag='0'" +
                "  ORDER BY MODULECLIENT.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (select MODULECLIENT.id , MODULE.MODULENAME as module,CLIENT.NAME as client," +
                " MODULECLIENT.FROMDATE as startDate, MODULECLIENT.DEACTIVEDATE as endDate" +
                " from  MODULECLIENT INNER JOIN MODULE INNER JOIN CLIENT ON MODULECLIENT.id < " +
                offset + " and MODULECLIENT.CLIENTID=CLIENT.id AND" +
                " MODULECLIENT.MODULEID=MODULE.id AND MODULECLIENT.DeleteFlag='0' ORDER BY MODULECLIENT.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(*) count from  MODULECLIENT where MODULECLIENT.DeleteFlag='0'";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function allModulesByClientIdDB(data, cb) {
    var str = 'SELECT MODULE.id,MODULE.MODULENAME as name FROM MODULECLIENT,MODULE where MODULECLIENT.CLIENTID=' + data.clientId + ' and MODULECLIENT.MODULEID=MODULE.id and MODULECLIENT.DeleteFlag="0" and MODULECLIENT.DeleteFlag="0"';
    con.query(str, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

            cb(null, true, details);
        }
    })
}

function allUrlByModuleClientDB(data, cb) {
    var str = "select URLKEY,URL from MODULEURLMAP INNER JOIN URLKEY ON MODULEURLMAP.CLIENTID=" + data.clientId + " AND MODULEURLMAP.MODULEID=" + data.moduleId + " AND MODULEURLMAP.URLID=URLKEY.id AND MODULEURLMAP.DeleteFlag='0'";
    con.query(str, function (err, done, fields) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    })
}


function allUserCreationListDB(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT CLIENT.name as client,USER.id,USER.login_name,USER.NAME as name,USERMAIL as email,USERMOBILENO as mobile,address  FROM " +
                " CLIENT,USER where USER.id > " + offset + " and CLIENT.id=USER.CLIENTID AND USER.DeleteFlag='0' ORDER BY USER.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT CLIENT.name as client,USER.id,USER.login_name,USER.NAME as name,USERMAIL as email,USERMOBILENO as mobile,address  FROM " +
                " CLIENT,USER where USER.id < " + offset + " and CLIENT.id=USER.CLIENTID AND USER.DeleteFlag='0' ORDER BY USER.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(USER.id) count FROM USER where USER.DeleteFlag='0';";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getModuleUrl(data, cb) {
    var str = 'SELECT URLKEY.id , URLKEY as `urlKey`,URL as `url`,URLDESCRIPTION as `urlDesc` FROM MODULEURLMAP,URLKEY WHERE MODULEURLMAP.CLIENTID="' + data.clientId + '" AND MODULEURLMAP.MODULEID="' + data.moduleId + '" AND MODULEURLMAP.URLID = URLKEY.id AND MODULEURLMAP.DeleteFlag="0"';
    util.logData(str)
    con.query(str, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getClientDetails(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    for (var i = 0; i < results.dataObj.length; i++) {
                        results.dataObj[i].sunChck = stringToBool(results.dataObj[i].sunChck);
                        results.dataObj[i].monChck = stringToBool(results.dataObj[i].monChck);
                        results.dataObj[i].tueChck = stringToBool(results.dataObj[i].tueChck);
                        results.dataObj[i].wedChck = stringToBool(results.dataObj[i].wedChck);
                        results.dataObj[i].thurChck = stringToBool(results.dataObj[i].thurChck);
                        results.dataObj[i].friChck = stringToBool(results.dataObj[i].friChck);
                        results.dataObj[i].satChck = stringToBool(results.dataObj[i].satChck);
                        results.dataObj[i].startDate = convertDate(results.dataObj[i].startDate);
                        if (results.dataObj[i].endDate != null) {
                            results.dataObj[i].endDate = convertDate(results.dataObj[i].endDate);
                        }

                    }
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT c.id,d.zone_name as zone, c.NAME, c.keyPerson, c.keyEmail, c.keyMobile, concat(c.startDate,"") startDate, ' +
                ' concat(c.endDate,"") endDate, c.cliAddr, c.prefix, c.BASE_FLAG, c.createbyid, c.createdate, c.modifybyid, c.modifydate, ' +
                ' c.DeleteFlag, c.DeleteDate, c.spocName, c.spocEmail, c.spocNumber, c.sunChck, c.sunHourStart, c.sunHourEnd, c.monChck, ' +
                ' c.monHourStart, c.monHourEnd, c.tueChck, c.tueHourStart, c.tueHourEnd, c.wedChck, c.wedHourStart, c.wedHourEnd, c.thurChck, ' +
                ' c.thurHourStart, c.thurHourEnd, c.friChck, c.friHourStart, c.friHourEnd, c.satChck, c.satHourStart, c.satHourEnd, ' +
                ' c.delete_by_id, c.weeklyworkinghour, c.clientCode, c.upload_path, c.sub_client from CLIENT c, zone d where c.id > ' + offset + ' and c.zone=d.zone_id and c.BASE_FLAG="false" ' +
                ' AND c.DeleteFlag="0" ORDER BY c.id ASC LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'select * from (SELECT c.id,d.zone_name as zone, c.NAME, c.keyPerson, c.keyEmail, c.keyMobile, concat(c.startDate,"") startDate, ' +
                ' concat(c.endDate,"") endDate, c.cliAddr, c.prefix, c.BASE_FLAG, c.createbyid, c.createdate, c.modifybyid, c.modifydate, ' +
                ' c.DeleteFlag, c.DeleteDate, c.spocName, c.spocEmail, c.spocNumber, c.sunChck, c.sunHourStart, c.sunHourEnd, c.monChck, ' +
                ' c.monHourStart, c.monHourEnd, c.tueChck, c.tueHourStart, c.tueHourEnd, c.wedChck, c.wedHourStart, c.wedHourEnd, c.thurChck, ' +
                ' c.thurHourStart, c.thurHourEnd, c.friChck, c.friHourStart, c.friHourEnd, c.satChck, c.satHourStart, c.satHourEnd, ' +
                ' c.delete_by_id, c.weeklyworkinghour, c.clientCode, c.upload_path, c.sub_client from CLIENT c, zone d where c.id < ' + offset + ' and c.zone=d.zone_id and c.BASE_FLAG="false" ' +
                ' AND c.DeleteFlag="0" ORDER BY c.id DESC LIMIT ' + page_size + ')z ORDER BY z.id  ASC;';
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(*) count from CLIENT c where c.BASE_FLAG="false" ' +
            ' AND c.DeleteFlag="0" ';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function stringToBool(value) {
    if (value === 'true' || value === 'True' || value === 'TRUE') {
        return true;
    } else {
        return false;
    }
}

function convertDate(date) {

    return new Date(date);
}

function getMappedURL(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT MODULEURLMAP.id,URLKEY as `urlKey`,URL as `url`,URLDESCRIPTION as `urlDesc`," +
                " MODULENAME as module,NAME as client FROM MODULEURLMAP,URLKEY,MODULE,CLIENT WHERE" +
                " MODULEURLMAP.id > " + offset + " AND MODULEURLMAP.CLIENTID=CLIENT.id AND MODULEURLMAP.MODULEID=MODULE.id and  MODULEURLMAP.URLID = URLKEY.id AND " +
                " MODULEURLMAP.DeleteFlag='0' ORDER BY MODULEURLMAP.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT MODULEURLMAP.id,URLKEY as `urlKey`,URL as `url`,URLDESCRIPTION as `urlDesc`," +
                " MODULENAME as module,NAME as client FROM MODULEURLMAP,URLKEY,MODULE,CLIENT WHERE MODULEURLMAP.id < " + offset + " AND MODULEURLMAP.CLIENTID=CLIENT.id " +
                " AND MODULEURLMAP.MODULEID=MODULE.id AND MODULEURLMAP.URLID = URLKEY.id  AND " +
                " MODULEURLMAP.DeleteFlag='0' ORDER BY MODULEURLMAP.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;  ";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(id) count FROM MODULEURLMAP WHERE MODULEURLMAP.DeleteFlag='0'";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getMappedRoleWithClient(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT CLIENTUSERROLE.id,NAME as client,ROLENAME as role from USERROLE,CLIENT,CLIENTUSERROLE where" +
                " CLIENTUSERROLE.id > " + offset + " and CLIENTUSERROLE.CLIENTID =CLIENT.id and CLIENTUSERROLE.ROLEID =USERROLE.id  AND CLIENTUSERROLE.DeleteFlag='0'" +
                " ORDER BY CLIENTUSERROLE.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT CLIENTUSERROLE.id,NAME as client,ROLENAME as role from USERROLE,CLIENT,CLIENTUSERROLE where" +
                "  CLIENTUSERROLE.id < " + offset + " and CLIENTUSERROLE.CLIENTID =CLIENT.id AND  CLIENTUSERROLE.ROLEID =USERROLE.id  AND CLIENTUSERROLE.DeleteFlag='0' ORDER BY CLIENTUSERROLE.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(id) count from CLIENTUSERROLE where CLIENTUSERROLE.DeleteFlag='0'";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function login(data, cb) {

    var str = 'SELECT PASSWORD,CLIENTID as clientId,id FROM USER where USERMAIL="' + data.username + '" and DeleteFlag=0;';
    con.query(str, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                // util.logData(JSON.stringify(details.length));
                // let dbEncryptPassword = details[0].PASSWORD;
                // delete details[0].PASSWORD;
                // let dbPassword = CryptoJS.AES.decrypt(dbEncryptPassword, SECRET_TOKEN).toString(CryptoJS.enc.Utf8);
                // let userPassword = CryptoJS.AES.decrypt(data.password, SECRET_TOKEN).toString(CryptoJS.enc.Utf8)
                // if (dbPassword === userPassword) {
                //
                //     cb(null, true, details[0]);
                // } else {
                //     cb(null, false, "Sorry...Invalid Credentials");
                // }
                // delete details[0].PASSWORD;


                bcrypt.compare(data.password, details[0].PASSWORD).then(function (res) {
                    if (res) {
                        delete details[0].PASSWORD;
                        cb(null, true, details[0]);
                    } else {
                        cb(null, false, "Sorry...Invalid Credentials");
                    }
                });

            } else {
                cb(null, false, "Sorry...Invalid Credentials");
            }
        }
    })
}

function getUserClientWise(data, cb) {
    var str = 'select a.id,a.name,a.address,a.USERMAIL as email ,a.PASSWORD as password,a.USERMOBILENO as mobile from' +
        ' USER a where  a.CLIENTID = ' + data.client_id + ' AND DeleteFlag="0"';
    con.query(str, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length === 0) {
                cb(null, { "value": "error" });
            } else
                cb(null, true, details);
        }
    })
}


function insertUserRoleMapping(data, cb) {
    let sql = "SELECT id FROM ROLEUSER where CLIENTID=? and ROLEID=? and USERID=? and DeleteFlag=0";
    con.query(sql, [data.client_id, data.role_id, data.refer_user_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, false, "Duplicate data");
            } else {
                var sql = "INSERT INTO ROLEUSER (CLIENTID,ROLEID,USERID) VALUES (" + data.client_id + "," + data.role_id +
                    "," + data.refer_user_id + " )";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            }
        }
    });
}

function getUserRolesMap(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var baseFlag = data.baseFlag;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";
    var str1 = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            if (stringToBool(baseFlag)) {
                str = 'select a.id,c.name user_name, b.name client_name, d.ROLENAME role_name ' +
                    ' from ROLEUSER a, CLIENT b,USER c ,USERROLE d ' +
                    ' where a.id > ' + offset + ' and a.CLIENTID = b.id ' +
                    ' and a.ROLEID = d.id' +
                    ' and a.userid = c.id ' +
                    ' and a.DeleteFlag = "0" ' +
                    ' and b.DeleteFlag = "0" ' +
                    ' and c.DeleteFlag = "0" ' +
                    ' and d.DeleteFlag = "0" ORDER BY a.id ASC LIMIT ' + page_size;
            } else {
                str = 'select a.id,c.name user_name, b.name client_name, d.ROLENAME role_name ' +
                    ' from ROLEUSER a, CLIENT b,USER c ,USERROLE d ' +
                    ' where a.id > ' + offset + ' and a.CLIENTID=' + data.clientId + ' and  a.userid = c.id ' +
                    ' and a.CLIENTID = b.id ' +
                    ' and a.ROLEID = d.id' +
                    ' and a.DeleteFlag = "0" ' +
                    ' and b.DeleteFlag = "0" ' +
                    ' and c.DeleteFlag = "0" ' +
                    ' and d.DeleteFlag = "0" ' +
                    ' ORDER BY a.id ASC LIMIT ' + page_size;
            }
        } else if (paginationType == 'prev') {
            if (stringToBool(baseFlag)) {
                str = 'SELECT * from (select a.id,c.name user_name, b.name client_name, d.ROLENAME role_name ' +
                    ' from ROLEUSER a, CLIENT b,USER c ,USERROLE d ' +
                    ' where a.id < ' + offset + ' and a.CLIENTID = b.id and a.userid = c.id ' +
                    ' and a.ROLEID = d.id' +
                    ' and a.DeleteFlag = "0" ' +
                    ' and b.DeleteFlag = "0" ' +
                    ' and c.DeleteFlag = "0" ' +
                    ' and d.DeleteFlag = "0" ' +
                    ' ORDER BY a.id DESC LIMIT ' + page_size + ')z ORDER BY z.id  ASC';
            } else {
                var str = 'SELECT * from (select a.id,c.name user_name, b.name client_name, d.ROLENAME role_name ' +
                    ' from ROLEUSER a, CLIENT b,USER c ,USERROLE d ' +
                    ' where a.CLIENTID=' + data.clientId + ' and a.id < ' + offset + ' and a.userid = c.id ' +
                    ' and a.CLIENTID = b.id ' +
                    ' and a.ROLEID = d.id' +
                    ' and a.DeleteFlag = "0" ' +
                    ' and b.DeleteFlag = "0" ' +
                    ' and c.DeleteFlag = "0" ' +
                    ' and d.DeleteFlag = "0" ' +
                    ' ORDER BY a.id DESC LIMIT ' + page_size + ')z ORDER BY z.id  ASC';
            }
        }

        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        if (stringToBool(baseFlag)) {
            str1 = 'select count(id) count' +
                ' from ROLEUSER a ' +
                ' where a.DeleteFlag = "0"  ';

        } else {
            str1 = 'select count(id) count from ROLEUSER a ' +
                ' where a.CLIENTID=' + data.clientId +
                ' and a.DeleteFlag = "0" '
        }
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function mapModuleRole(data, cb) {
    let d = 0;
    for (let i = 0; i < data.menuId.length; i++) {
        var sql = "Select * from MODULECLIENTUSERROLEMAP where clientId = ? and moduleId = ? and roleId= ? and menuId= ? and DeleteFlag = '0' ";
        con.query(sql, [data.client_id, data.module_id, data.role_id, data.menuId[i]], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result.length === 0) {
                    var sql1 = "INSERT into MODULECLIENTUSERROLEMAP (clientId,moduleId,roleId,menuId,createdby) values(?,?,?,?,?)";
                    con.query(sql1, [data.client_id, data.module_id, data.role_id, data.menuId[i], data.createdBy], function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {
                            cb(null, true, "Insert successfully");
                        }
                    });
                } else {
                    d++;
                    if (data.menuId.length === d) {
                        cb(null, false, 'Duplicate data');
                    }
                }
            }
        });
    }
}

function getModuleRolesMapping(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT a.id,tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                'b.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP a,MODULE,' +
                'tbl_client_menu_details,USERROLE b,CLIENT where a.id > ' + offset + ' and' +
                ' a.clientId=CLIENT.id and a.moduleId=MODULE.id and a.menuId=tbl_client_menu_details.id' +
                ' and a.roleId=b.id  and a.deleteFlag="0" LIMIT ' + page_size;

        } else if (paginationType == 'prev') {
            str = 'SELECT * from (SELECT a.id,' +
                ' tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                ' b.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP a,MODULE,' +
                ' tbl_client_menu_details,USERROLE b,CLIENT where a.id < ' + offset +
                ' and a.clientId=CLIENT.id and a.moduleId=MODULE.id and' +
                ' a.menuId=tbl_client_menu_details.id and a.roleId=b.id' +
                ' and a.deleteFlag="0"' +
                ' ORDER BY a.id DESC LIMIT ' + page_size + ')z ORDER BY z.id  ASC';
        }

        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        // var str1 = 'SELECT count(id) count from MODULECLIENTUSERROLEMAP a where a.deleteFlag="0"';
        var str1 = 'SELECT count(a.id) count from MODULECLIENTUSERROLEMAP a,MODULE,' +
            'tbl_client_menu_details,USERROLE b,CLIENT where ' +
            ' a.clientId=CLIENT.id and a.moduleId=MODULE.id and a.menuId=tbl_client_menu_details.id' +
            ' and a.roleId=b.id  and a.deleteFlag="0";';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getActions(cb) {
    var str = 'select * from action';
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getUserdetails(data, cb) {
    var str = 'SELECT CLIENT.name as client,CLIENT.logo,upload_path,USER.login_name,USER.id,USER.NAME as name,USER.USERMAIL email,USER.USERMOBILENO mobile,USER.CLIENTID as clientId,CLIENT.BASE_FLAG as baseFlag FROM CLIENT,USER where USER.id=?  AND USER.CLIENTID = CLIENT.id AND CLIENT.DeleteFlag="0" And USER.DeleteFlag="0" ;';
    // let start = Date.now();
    util.logData("\npath getUserdetails 1 :Inside ");

    con.query(str, [data.user_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                result[0].baseFlag = stringToBool(result[0].baseFlag);
                if (result[0].baseFlag) {
                    cb(null, true, result);
                } else {
                    let sql2 = 'SELECT a.id , a.ROLENAME as name,a.SUPERADMINFLAG isAdmin FROM USERROLE a,ROLEUSER b where b.USERID=? and b.ROLEID=a.id and b.DeleteFlag=0 and a.DeleteFlag=0;'
                    con.query(sql2, [data.user_id], function (err, result2) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (result2.length > 0) {
                                result[0].roleId = result2[0].id;
                                result[0].roleName = result2[0].name;
                                result[0].isAdmin = stringToBool(result2[0].isAdmin) + "";
                                let sql = "select a.supportGroupLevelId as groupId, b.LEVELSHORTDESC grpName, b.group_level level from supportGroupUser a, SUPPORTGROUPLEVEL b where a.supportGroupLevelId = b.id and a.userId=" + data.user_id + " and a.DeleteFlag='0' and b.DeleteFlag=0 order by b.group_level desc ";
                                // let start1 = Date.now();
                                con.query(sql, function (err, result1) {
                                    if (err) {
                                        logData(err);
                                        cb(err, null);
                                    } else {
                                        if (result1.length > 0) {
                                            // result[0].groupId = result1[0].groupId;
                                            result[0].groupId = result1;
                                            //logData('asd---------------'+JSON.stringify(result[0]));
                                            cb(null, true, result);

                                        } else {
                                            cb(null, true, result);
                                        }
                                    }
                                });
                            } else {
                                cb(null, false, "User is not mapped with any role")
                            }
                        }
                    });
                }
            } else {
                cb(null, false, "User Details Not Found")
            }
        }
    });
}

function createUsrActionMapping(data, cb) {
    let count = 0;
    for (let i = 0; i < data.actionIds.length; i++) {
        var str = "Select id from roleAction where clientId =" + data.clientId + " and roleId =" + data.roleId + " and actionId=" + data.actionIds[i] + " and DeleteFlag = '0'";
        con.query(str, function (err1, result1) {
            if (err1) {
                logData(err1);
                cb(err1, null);
            } else {
                if (result1.length == 0) {
                    let sql = 'insert into roleAction (roleId,clientId,actionId,createById) values (' + data.roleId + ',' + data.clientId + ',' + data.actionIds[i] + ',' + data.createdBy + ');';
                    con.query(sql, function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            count++;
                            if (data.actionIds.length === count) {
                                cb(null, true, result.insertId);
                            }
                        }
                    });
                } else {
                    cb(null, false, "Duplicate data");
                }
            }
        });

    }
}

function getUsrActionMapping(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            var str = 'SELECT roleAction.id,USERROLE.ROLENAME as role,' +
                ' CLIENT.NAME as client, action.name as action FROM CLIENT,' +
                ' roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and ' +
                ' roleAction.roleId=USERROLE.id and roleAction.actionId=action.id  and roleAction.id > ' + offset +
                ' ORDER BY roleAction.id LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            var str = 'SELECT * from (SELECT roleAction.id,USERROLE.ROLENAME as role,' +
                ' CLIENT.NAME as client, action.name as action FROM CLIENT,' +
                ' roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and ' +
                ' roleAction.roleId=USERROLE.id and roleAction.actionId=action.id and roleAction.id < ' + offset +
                ' ORDER BY roleAction.id DESC LIMIT ' + page_size + ')a ORDER BY a.id  ASC;';
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(*) count FROM CLIENT,' +
            ' roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and ' +
            ' roleAction.roleId=USERROLE.id and roleAction.actionId=action.id';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function setAdminUserAuth(data, cb) {
    let count = 0;
    for (let i = 0; i < data.length; i++) {
        let dltStr = 'delete from adminAuth where userId=' + data[i].userId + ';';
        let str = 'insert into adminAuth (userId,moduleId,addFlag,editFlag,deleteFlag,viewFlag,createdById) ' +
            ' values (' + data[i].userId + ', "' + data[i].id + '","' + data[i].addChecked + '","' + data[i].editChecked + '","' + data[i].deleteChecked + '","' + data[i].viewChecked + '",' + data[i].createdBy + ');';
        con.query(dltStr, function (err, result1) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                con.query(str, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        count++;
                        if (count === data.length) {
                            cb(null, true, "OK");
                        }
                    }
                });
            }
        })
    }
}

function getUserAuthorization(data, cb) {
    getUserdetails({ user_id: data.user_id }, function (err, success, details) {
        if (err) {
            cb(err, null);
        } else {
            if (success) {
                var str = 'select addFlag,editFlag,deleteFlag,viewFlag from adminAuth where deletedFlag="0" and userId="' + data.user_id + '"and moduleId="' + data.module + '"';
                util.logData(str)
                con.query(str, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            for (var i = 0; i < result.length; i++) {
                                result[i].addFlag = stringToBool(result[i].addFlag);
                                result[i].editFlag = stringToBool(result[i].editFlag);
                                result[i].deleteFlag = stringToBool(result[i].deleteFlag);
                                result[i].viewFlag = stringToBool(result[i].viewFlag);
                            }
                            result[0].clientId = details[0].clientId;
                            result[0].baseFlag = details[0].baseFlag;
                            cb(null, true, result);
                        } else {
                            cb(null, false);
                        }
                    }
                });
            }
        }
    })
}

function getAdminUserAuth(data, cb) {
    var str = 'SELECT adminAuth.id,adminModule.label as module,USER.NAME as name,addFlag,editFlag,adminAuth.deleteFlag,viewFlag from USER,adminAuth,adminModule where adminModule.id=adminAuth.moduleId and USER.id=adminAuth.userId and adminAuth.deletedFlag="0";';
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            for (var i = 0; i < result.length; i++) {
                result[i].addFlag = stringToBool(result[i].addFlag);
                result[i].editFlag = stringToBool(result[i].editFlag);
                result[i].deleteFlag = stringToBool(result[i].deleteFlag);
                result[i].viewFlag = stringToBool(result[i].viewFlag);
            }
            cb(null, true, result);
        }
    });
}

// function deletePlatformModule(data, cb) {
//     let arr=util.getIncomingData(data);
//     // var sql = "Update MODULE set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where id = ?;";
//     // sql += "Update MODULECLIENT set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where MODULEID = ?;";
//     // sql += "Update MODULECLIENTUSERROLEMAP set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where moduleId =?;";
//     // sql += "Update MODULEURLMAP set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where MODULEID = ?;";
//     var sql = "Update MODULE set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where id = " + data.id + ";";
//     sql += "Update MODULECLIENT set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where MODULEID = " + data.id + ";";
//     sql += "Update MODULECLIENTUSERROLEMAP set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where moduleId = " + data.id + ";";
//     sql += "Update MODULEURLMAP set  deleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = NOW() where MODULEID = " + data.id + ";";
//     con.query(sql,function (err, result) {
//         if (err) {
//             cb(err, null);
//         }
//         else {
//             cb(null, true, result);
//         }
//     });
// }

// function deleteUserRoleDB(data, cb) {
//     var sql = "Update USERROLE set deleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";
//     sql += "Update CLIENTUSERROLE set deleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where ROLEID = " + data.id + ";";
//     sql += "Update MODULECLIENTUSERROLEMAP set deleteFlag = '1',delete_by_id = " + data.user_id + ",deleteDate=NOW() where roleId = " + data.id + ";";
//     sql += "Update ROLEUSER set deleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where ROLEID = " + data.id + ";";
//     sql += "Update RoleUserAction set deleteFlag = '1',delete_by_id = " + data.user_id + ",deleteDate=NOW() where roleId = " + data.id + ";";
//     con.query(sql, function (err, result) {
//         if (err) {
//             logData(err);
//             cb(err, null);
//         } else {
//             cb(null, true, result);
//         }
//     });
// }

function deleteUrl(data, cb) {
    var sql = "Update URLKEY set deleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";
    sql += "Update MODULEURLMAP set deleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where URLID = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function deleteClient(data, cb) {
    var sql = "Update CLIENT set deleteFlag = 1,delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";
    sql += "Update CLIENTUSERROLE set deleteFlag = 1,delete_by_id = " + data.user_id + ",DeleteDate=NOW() where CLIENTID = " + data.id + ";";
    sql += "Update MODULECLIENT set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where CLIENTID = " + data.id + ";";
    sql += "Update MODULECLIENTUSERROLEMAP set deleteFlag = 1,delete_by_id = " + data.user_id + ", DeleteDate=NOW() where CLIENTID = " + data.id + ";";
    sql += "Update MODULEURLMAP set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where CLIENTID = " + data.id + ";";
    sql += "Update ROLEUSER set deleteFlag = 1,delete_by_id = " + data.user_id + ",DeleteDate=NOW() where CLIENTID = " + data.id + ";";
    sql += "Update RoleUserAction set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where clientId = " + data.id + ";";
    sql += "Update USER set deleteFlag =1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where CLIENTID = " + data.id + ";";
    sql += "Update VENDOR set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where CLIENTID = " + data.id + ";";
    sql += "Update menu_master set delete_status = 1,delete_by_id = " + data.user_id + ",delete_date=NOW() where client_id = " + data.id + ";";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function deleteMapModuleWithClient(data, cb) {
    var sql = "Update MODULECLIENT set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate= NOW() where id = " + data.id + " ; ";
    sql = sql + "Update tbl_client_menu_details set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate= NOW() where module_id =(Select MODULEID from MODULECLIENT  where id = " + data.id + " )" +
        " and client_id =(Select CLIENTID from MODULECLIENT  where id = " + data.id + " );";
    sql = sql + "Update MODULEURLMAP set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate= NOW() where MODULEID =(Select MODULEID from MODULECLIENT  where id = " + data.id + " )" +
        " and CLIENTID =(Select CLIENTID from MODULECLIENT  where id = " + data.id + " )";
    logData('deleteMapModuleWithClient-----------------------' + sql);
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            logData('deleteMapModuleWithClient---------res----' + JSON.stringify(result))
            if (result[0].affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteClientUserRole(data, cb) {
    var sql = "Update CLIENTUSERROLE set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteUsrActionMapping(data, cb) {
    var sql = "Update roleAction set DeleteFlag = '1',deleteById = " + data.user_id + ",deleteDate=NOW() where id = " + data.id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteClientUserRoleMapping(data, cb) {
    var sql = "Update ROLEUSER set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteMapModuleRole(data, cb) {
    var data = preventSqlInjection(data);
    var sql = "Update MODULECLIENTUSERROLEMAP set DeleteFlag = '1',delete_by_id = " + data.user_id +
        ",DeleteDate=NOW() where id = " + data.id + " ;";
    //util.logData('SQL=' + sql);

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteUrlUserWise(data, cb) {
    let sql = "Update MODULEURLMAP set deleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

/*******************************------------------------Update--------------------------******************************/



function getUserByRole(data, cb) {
    let sql = 'SELECT  ROLEUSER.USERID as id,USER.NAME as name FROM ROLEUSER,USER where ROLEUSER.DeleteFlag= 0 and' +
        ' ROLEUSER.USERID = USER.id and ROLEUSER.ROLEID=' + data.role_id + ' and ROLEUSER.CLIENTID=' +
        data.client_id + ';'
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function mapModuleUserClient(data, cb) {
    var str = "Select * from MODULECLIENTUSERMAP where DeleteFlag = '0' " +
        " and client_id =" + data.client_id + " and module_id =" + data.module_id + " and role_id=" + data.role_id +
        " and user_id=" + data.refer_user_id + " and menu_id=" + data.menuId;
    con.query(str, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length == 0) {
                let sql = 'Insert into MODULECLIENTUSERMAP (client_id,module_id,role_id,user_id,menu_id,createbyid) ' +
                    'values (' + data.client_id + ',' + data.module_id + ',' + data.role_id + ',' + data.refer_user_id + ',' + data.menuId + ',' + data.createdBy + ');'
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });

}


function getMappedModuleUserClient(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT MODULECLIENTUSERMAP.id,tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                ' USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name,USER.NAME as user_name' +
                ' from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where' +
                ' MODULECLIENTUSERMAP.deleteFlag="0" and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id' +
                ' and MODULECLIENTUSERMAP.client_id=CLIENT.id and MODULECLIENTUSERMAP.role_id=USERROLE.id and' +
                ' MODULECLIENTUSERMAP.module_id=MODULE.id and MODULECLIENTUSERMAP.user_id=USER.id and MODULECLIENTUSERMAP.id > ' + offset +
                ' LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'SELECT * from (SELECT MODULECLIENTUSERMAP.id,tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                ' USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name,USER.NAME as user_name' +
                ' from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where' +
                ' MODULECLIENTUSERMAP.deleteFlag="0" and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id' +
                ' and MODULECLIENTUSERMAP.client_id=CLIENT.id and MODULECLIENTUSERMAP.role_id=USERROLE.id and' +
                ' MODULECLIENTUSERMAP.module_id=MODULE.id and MODULECLIENTUSERMAP.user_id=USER.id and MODULECLIENTUSERMAP.id < ' + offset +
                ' ORDER BY MODULECLIENTUSERMAP.id DESC LIMIT ' + page_size + ')a ORDER BY a.id  ASC';
        }

        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'select count(*) count' +
            ' from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where' +
            ' MODULECLIENTUSERMAP.deleteFlag="0" and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id' +
            ' and MODULECLIENTUSERMAP.client_id=CLIENT.id and MODULECLIENTUSERMAP.role_id=USERROLE.id and' +
            ' MODULECLIENTUSERMAP.module_id=MODULE.id and MODULECLIENTUSERMAP.user_id=USER.id';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function deleteModuleUserClient(data, cb) {
    var sql = "Update MODULECLIENTUSERMAP set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}


function getAdminModule(cb) {
    function getAdmin(callback) {
        let sql = 'select id,label,path from adminModule where type="admin" ORDER BY sequence ASC;';
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {

                callback(null, result);
            }
        });
    }

    function getClient(callback) {
        let sql = 'select id,label,path from adminModule where type="client" ORDER BY sequence ASC;';
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAdmin, getClient], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            cb(null, true, [{ admin: results[0], client: results[1] }])
        }
    })
}


function getAdminUserAuthorization(data, cb) {
    function getAuth(callback) {
        let sql = 'select moduleId,addFlag,deleteFlag,editFlag,viewFlag from adminAuth where deletedFlag=0 and userId=' + data.user_id + ';';
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getAdminModules(callback) {
        let sql = 'select id,label from adminModule order by sequence asc;';
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAuth, getAdminModules], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            //if(results[0].length>0){

            let modules = [];
            for (let i = 0; i < results[1].length; i++) {
                let matched = false;
                for (let j = 0; j < results[0].length; j++) {
                    if (results[0][j].moduleId === results[1][i].id) {
                        modules.push({
                            checked: true,
                            name: results[1][i].label,
                            id: results[1][i].id,
                            addChecked: stringToBool(results[0][j].addFlag),
                            deleteChecked: stringToBool(results[0][j].deleteFlag),
                            editChecked: stringToBool(results[0][j].editFlag),
                            viewChecked: stringToBool(results[0][j].viewFlag)
                        })
                        matched = true;
                        break;
                    }
                }
                if (!matched) {
                    modules.push({
                        checked: false,
                        name: results[1][i].label,
                        id: results[1][i].id,
                        addChecked: false,
                        deleteChecked: false,
                        editChecked: false,
                        viewChecked: false
                    })

                }
            }
            cb(null, true, modules);
        }
    })
}

function deleteAdminUserAuth(data, cb) {
    let sql = "Update adminAuth set deletedFlag = '1',delete_by_id = " + data.user_id + ",deletedDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function insertVendorMst(data, cb) {
    var sql1 = "select *  from VENDOR where DeleteFlag = '0' and NAME = '" + data.vendorName + "'  and CLIENTID = " + data.clientId + " ; ";
    con.query(sql1, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length == 0) {
                var sql = "INSERT INTO VENDOR (NAME,CLIENTID,KeyPersonName,KeyPersonCell,KeyPersonMailId,KeyPersonAddr,createbyid) VALUES (" +
                    "'" + data.vendorName + "'," + data.clientId + ",'" + data.username + "'," + data.mobile + ",'" + data.email + "','" + data.address + "'," + data.createdBy + ")";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Vendor Name already exist ");
            }
        }
    });
}

function getVendorMst(data, cb) {
    let sql = "select id,NAME as name,KeyPersonName as username,KeyPersonMailId as email,KeyPersonAddr as address," +
        "KeyPersonCell as mobile from VENDOR where clientId=" + data.clientId + " and DeleteFlag=0;";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function deleteVendorMst(data, cb) {
    let sql = "Update VENDOR set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";
    sql += "Update CLIENTVENDORUSER set deleteFlag = 1,delete_by_id = " + data.user_id + ",DeleteDate=NOW() where VENDORID = " + data.id + ";";
    sql += "Update supportGroupVendor set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where VENDORID = " + data.id + ";";
    sql += "Update supportGroupSPOC set deleteFlag = 1,delete_by_id = " + data.user_id + ", DeleteDate=NOW() where VENDORID = " + data.id + ";";
    sql += "Update SLA set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where VENDORID = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result.affectedRows);

        }
    });
}

function updateVendorMst(data, cb) {
    var sql = "Update VENDOR set NAME = '" + data.name + "',KeyPersonName='" + data.username + "'" +
        " ,KeyPersonCell =" + data.mobile + " , KeyPersonMailId='" + data.email + "' , KeyPersonAddr='" + data.address + "' , modifybyid =" + data.createdBy + " ," +
        " modifydate=NOW() " +
        " where id = " + data.id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function insertClientVendorUserMapping(data, cb) {
    var sql1 = "select *  from CLIENTVENDORUSER where DeleteFlag = '0' " +
        " and CLIENTID = " + data.clientId +
        " and VENDORID = " + data.vendorId +
        " and ROLEID = " + data.roleId +
        " and USERID = " + data.refer_user_id;
    con.query(sql1, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length < 1) {
                var sql = "INSERT INTO CLIENTVENDORUSER (CLIENTID,VENDORID,ROLEID,USERID,createbyid) VALUES (" +
                    +data.clientId + "," + data.vendorId + "," + data.roleId + "," + data.refer_user_id + "," + data.createdBy + ")";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Vendor Name");
            }
        }
    });
}


function getClientVendorUserMapping(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT a.id,b.NAME vendor_name,c.NAME as client_name,d.name as user_name ,e.ROLENAME as role_name " +
                " from CLIENTVENDORUSER a,VENDOR b, CLIENT c, USER d, USERROLE e " +
                " where a.VENDORID=b.id " +
                " and a.CLIENTID = c.id " +
                " and a.ROLEID = e.id " +
                " and a.USERID = d.id " +
                " and a.DeleteFlag='0' " +
                " and b.DeleteFlag = '0' " +
                " and c.DeleteFlag='0' " +
                " and d.DeleteFlag = '0' " +
                " and e.DeleteFlag='0' " +
                " and a.CLIENTID = " + data.clientId + " and a.id > " + offset + " LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id,b.NAME vendor_name,c.NAME as client_name,d.name as user_name ,e.ROLENAME as role_name " +
                " from CLIENTVENDORUSER a,VENDOR b, CLIENT c, USER d, USERROLE e " +
                " where a.VENDORID=b.id " +
                " and a.CLIENTID = c.id " +
                " and a.ROLEID = e.id " +
                " and a.USERID = d.id " +
                " and a.DeleteFlag='0' " +
                " and b.DeleteFlag = '0' " +
                " and c.DeleteFlag='0' " +
                " and d.DeleteFlag = '0' " +
                " and e.DeleteFlag='0' " +
                " and a.CLIENTID = " + data.clientId + " and a.id < " + offset +
                " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;"
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " SELECT count(*) count " +
            " from CLIENTVENDORUSER a,VENDOR b, CLIENT c, USER d, USERROLE e " +
            " where a.VENDORID=b.id " +
            " and a.CLIENTID = c.id " +
            " and a.ROLEID = e.id " +
            " and a.USERID = d.id " +
            " and a.DeleteFlag='0' " +
            " and b.DeleteFlag = '0' " +
            " and c.DeleteFlag='0' " +
            " and d.DeleteFlag = '0' " +
            " and e.DeleteFlag='0' " +
            " and a.CLIENTID = " + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function deleteClientVendorUserMapping(data, cb) {
    let sql = "Update CLIENTVENDORUSER set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate =NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function insertSupportGroupVendorMapping(data, cb) {
    var sql1 = "INSERT into supportGroupVendor(clientId,supportGroupLevelId,vendorId,createbyid)" +
        " values ( " + data.clientId + " ," + data.groupId + ",'" + data.vendorId + "' ," + data.createdBy + " ) ";
    con.query(sql1, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result.insertId);
        }
    });
}

function insertSupportGroupSPOC(data, cb) {
    var sql1 = "INSERT into supportGroupSPOC (clientId,supportGroupLevelId,vendorId,clientUserIdSpoc,vendorUserIdSpoc,createbyid)" +
        " values ( " + data.clientId + " ," + data.suppGrpLevelId + " ," + data.vendorId + " ," + data.clientUserIdSpoc + "," + data.vendorUserIdSpoc + "," + data.createdBy + " ) ";
    con.query(sql1, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result.insertId);

        }
    });
}


function insertSupportGroupUserMapping(data, cb) {
    var sqlD = "SELECT * FROM supportGroupUser where supportGroupLevelId = ? and userId = ? and DeleteFlag = 0";
    con.query(sqlD, [data.groupId, data.refer_user_id], function (errD, resultD) {
        if (errD) {
            logData(errD);
        } else {
            if (resultD.length === 0) {

                var sqlU = "INSERT into supportGroupUser(clientId,supportGroupLevelId,userId,createbyid,is_spoc)" +
                    " values ( " + data.clientId + " ," + data.groupId + "," + data.refer_user_id + " ," + data.createdBy + ",'" + data.isSpoc + "' ) ";
                util.logData(sqlU);

                con.query(sqlU, function (errU, resultU) {
                    if (errU) {
                        logData(errU);
                        cb(errU, null);
                    } else {
                        if (resultU.insertId > 0) {
                            if (data.isSpoc == true) {
                                var sql = "update supportGroupUser set is_spoc='false' " +
                                    " where clientId =" + data.clientId + " " +
                                    " and supportGroupLevelId = " + data.groupId + " " +
                                    " and  id!=" + resultU.insertId + " ";
                                con.query(sql, function (err, result) {
                                    if (err) {
                                        logData(err);
                                        cb(err, null);
                                    } else {
                                        cb(null, true, resultU.insertId);
                                    }
                                });
                            } else {
                                cb(null, true, resultU.insertId);
                            }

                        } else {
                            cb(null, false, "Data is not inserted");
                        }

                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });
}

function deleteSupportGrpLevel(data, cb) {
    let sql = "Update SUPPORTGROUPLEVEL set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            let sql1 = "Update supportGroupEnableDayTime set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where supportGroupLevelId = " + data.id + ";";
            sql1 += "Update SLA set deleteFlag = 1,delete_by_id = " + data.user_id + ",DeleteDate=NOW() where VENDORID = " + data.id + ";";
            sql1 += "Update SupportGrpWithTicketAttributes set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where VENDORID = " + data.id + ";";
            sql1 += "Update supportGroupEnableDayTime set deleteFlag = 1,delete_by_id = " + data.user_id + ", DeleteDate=NOW() where VENDORID = " + data.id + ";";
            sql1 += "Update supportGroupSPOC set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where VENDORID = " + data.id + ";";
            sql1 += "Update supportGroupUser set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where VENDORID = " + data.id + ";";
            sql1 += "Update supportGroupVendor set deleteFlag = 1,delete_by_id = " + data.user_id + ",deleteDate=NOW() where VENDORID = " + data.id + ";";

            con.query(sql1, function (err1, result1) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    if (result.affectedRows > 0) {
                        cb(null, true, result.affectedRows);
                    } else {
                        cb(null, false, result.affectedRows);
                    }

                }
            });
        }
    });
}

function deleteSupportGroupVendorMapping(data, cb) {
    let sql = "Update supportGroupVendor set DeleteFlag = '1',delete_by_id = " + data.user_id +
        ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}


function deleteSupportGroupSPOC(data, cb) {
    let sql = "Update supportGroupSPOC set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteSupportGroupUserMapping(data, cb) {
    let sql = "Update supportGroupUser set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function getSupportGroupVendorMapping(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT a.id,b.NAME vendor,c.NAME as client_name,d.LEVELLONGDESC as groupName" +
                " from supportGroupVendor a,VENDOR b, CLIENT c, SUPPORTGROUPLEVEL d " +
                " where a.VENDORID=b.id " +
                " and a.CLIENTID = c.id " +
                " and a.supportGroupLevelId = d.id " +
                " and a.DeleteFlag='0' " +
                " and b.DeleteFlag = '0' " +
                " and c.DeleteFlag='0' " +
                " and d.DeleteFlag = '0' " +
                " and a.CLIENTID = " + data.clientId + " and a.id > " + offset +
                " LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = " SELECT * from (SELECT a.id,b.NAME vendor,c.NAME as client_name,d.LEVELLONGDESC as groupName" +
                " from supportGroupVendor a,VENDOR b, CLIENT c, SUPPORTGROUPLEVEL d " +
                " where a.VENDORID=b.id " +
                " and a.CLIENTID = c.id " +
                " and a.supportGroupLevelId = d.id " +
                " and a.DeleteFlag='0' " +
                " and b.DeleteFlag = '0' " +
                " and c.DeleteFlag='0' " +
                " and d.DeleteFlag = '0' " +
                " and a.CLIENTID = " + data.clientId + " and a.id < " + offset +
                " LIMIT " + page_size + ")z ORDER BY z.id  ASC";
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count" +
            " from supportGroupVendor a,VENDOR b, CLIENT c, SUPPORTGROUPLEVEL d" +
            " where a.VENDORID=b.id " +
            " and a.CLIENTID = c.id " +
            " and a.supportGroupLevelId = d.id " +
            " and a.DeleteFlag='0' " +
            " and b.DeleteFlag = '0' " +
            " and c.DeleteFlag='0' " +
            " and d.DeleteFlag = '0' " +
            " and a.CLIENTID = " + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function getSupportGroupSPOC(data, cb) {
    let sql = " SELECT a.id,b.NAME vendorName,c.NAME as client_name, d.LEVELLONGDESC ,a.clientUserIdSpoc, a.vendorUserIdSpoc " +
        " from supportGroupSPOC a,VENDOR b, CLIENT c, SUPPORTGROUPLEVEL d " +
        " where a.VENDORID=b.id " +
        " and a.CLIENTID = c.id " +
        " and a.supportGroupLevelId = d.id " +
        " and a.DeleteFlag='0' " +
        " and b.DeleteFlag = '0' " +
        " and c.DeleteFlag='0' " +
        " and d.DeleteFlag = '0' " +
        " and a.CLIENTID = " + data.clientId;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getSupportGrpLevel(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    for (var i = 0; i < results.dataObj.length; i++) {
                        results.dataObj[i].sunChck = stringToBool(results.dataObj[i].sunChck);
                        results.dataObj[i].monChck = stringToBool(results.dataObj[i].monChck);
                        results.dataObj[i].tueChck = stringToBool(results.dataObj[i].tueChck);
                        results.dataObj[i].wedChck = stringToBool(results.dataObj[i].wedChck);
                        results.dataObj[i].thurChck = stringToBool(results.dataObj[i].thurChck);
                        results.dataObj[i].friChck = stringToBool(results.dataObj[i].friChck);
                        results.dataObj[i].satChck = stringToBool(results.dataObj[i].satChck);
                        results.dataObj[i].mngmntView = stringToBool(results.dataObj[i].mngmntView);
                    }
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id,c.NAME clientName,d.zone_name as zone,a.LEVELSHORTDESC as name,a.LEVELLONGDESC " +
                "as description,a.group_email,a.group_level as level,a.management mngmntView," +
                " b.sunChck, b.sunHourStart, b.sunHourEnd, b.monChck, b.monHourStart, " +
                "b.monHourEnd, b.tueChck, b.tueHourStart, b.tueHourEnd, b.wedChck, b.wedHourStart, " +
                "b.wedHourEnd, b.thurChck, b.thurHourStart, b.thurHourEnd, b.friChck, b.friHourStart, b.friHourEnd, " +
                "b.satChck, b.satHourStart, b.satHourEnd  " +
                " from SUPPORTGROUPLEVEL a,supportGroupEnableDayTime b, CLIENT c ,zone d" +
                " where a.id > " + offset + " and  a.CLIENTID = c.id " +
                " and a.id = b.supportGroupLevelId and a.ZONEID = d.zone_id " +
                " and a.DeleteFlag='0' " +
                " and b.DeleteFlag = '0' " +
                " and a.CLIENTID = " + data.clientId + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id,c.NAME clientName,d.zone_name as zone,a.LEVELSHORTDESC as name,a.LEVELLONGDESC as " +
                "description,a.group_email,a.group_level as level,a.management mngmntView," +
                " b.sunChck, b.sunHourStart, b.sunHourEnd, b.monChck, b.monHourStart, b.monHourEnd, b.tueChck," +
                " b.tueHourStart, b.tueHourEnd, b.wedChck, b.wedHourStart, b.wedHourEnd, b.thurChck, b.thurHourStart, " +
                "b.thurHourEnd, b.friChck, b.friHourStart, b.friHourEnd, b.satChck, b.satHourStart, b.satHourEnd  " +
                " from SUPPORTGROUPLEVEL a,supportGroupEnableDayTime b, CLIENT c ,zone d" +
                " where a.id < " + offset + " and  a.CLIENTID = c.id " +
                " and a.id = b.supportGroupLevelId and a.ZONEID = d.zone_id " +
                " and a.DeleteFlag='0' " +
                " and b.DeleteFlag = '0' " +
                " and a.CLIENTID = " + data.clientId + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " SELECT count(*) count" +
            " from SUPPORTGROUPLEVEL a,supportGroupEnableDayTime b, CLIENT c ,zone d" +
            " where a.CLIENTID = c.id " +
            " and a.id = b.supportGroupLevelId and a.ZONEID = d.zone_id " +
            " and a.DeleteFlag='0' " +
            " and b.DeleteFlag = '0' " +
            " and a.CLIENTID = " + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getSupportGroupUserMapping(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT a.id,a.is_spoc,c.NAME clientName,d.NAME as user,b.LEVELSHORTDESC as groupname  " +
                " from supportGroupUser a, CLIENT c, USER d , SUPPORTGROUPLEVEL b" +
                " where a.CLIENTID = c.id  " +
                " and a.USERID = d.id " +
                " and a.supportGroupLevelId = b.id " +
                " and a.DeleteFlag='0' " +
                " and c.DeleteFlag='0' " +
                " and d.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.CLIENTID = " + data.clientId + " and a.id > " + offset + " LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from ( SELECT a.id,a.is_spoc,c.NAME clientName,d.NAME as user,b.LEVELSHORTDESC as groupname  " +
                " from supportGroupUser a, CLIENT c, USER d , SUPPORTGROUPLEVEL b" +
                " where a.CLIENTID = c.id  " +
                " and a.USERID = d.id " +
                " and a.supportGroupLevelId = b.id " +
                " and a.DeleteFlag='0' " +
                " and c.DeleteFlag='0' " +
                " and d.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.CLIENTID = " + data.clientId + " and a.id < " + offset +
                " ORDER BY a.id DESC LIMIT " + page_size + " ) z ORDER BY z.id  ASC;"
        }
        logData('aaaaaaaaa---------------' + str);
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                for (let i = 0; i < done.length; i++) {
                    done[i].is_spoc = stringToBool(done[i].is_spoc);
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " SELECT count(*) count " +
            " from supportGroupUser a, CLIENT c, USER d , SUPPORTGROUPLEVEL b" +
            " where a.CLIENTID = c.id  " +
            " and a.USERID = d.id " +
            " and a.supportGroupLevelId = b.id " +
            " and a.DeleteFlag='0' " +
            " and c.DeleteFlag='0' " +
            " and d.DeleteFlag = '0' " +
            " and b.DeleteFlag = '0' " +
            " and a.CLIENTID = " + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function insertSupportGrpLevel(data, cb) {
    data["parent_grp_id"] = 0;
    var totHr = hrCalculation(data.sunHourStart, data.sunHourEnd) + hrCalculation(data.monHourStart, data.monHourEnd) + hrCalculation(data.tueHourStart, data.tueHourEnd)
        + hrCalculation(data.wedHourStart, data.wedHourEnd) + hrCalculation(data.thurHourStart, data.thurHourEnd) + hrCalculation(data.friHourStart, data.friHourEnd) + hrCalculation(data.satHourStart, data.satHourEnd);
    var sql1 = "INSERT into SUPPORTGROUPLEVEL(CLIENTID,LEVELSHORTDESC,LEVELLONGDESC,ZONEID,PARENT_GROUP_ID,createbyid,group_level,management,group_email)" +
        " values (?,?,?,?,?,?,?,?,?) ";
    var param = [data.clientId, data.groupName, data.description, data.zoneId, data.parent_grp_id, data.createdBy, data.groupLevel, String(data.managemntView), data.group_email];
    con.query(sql1, param, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            // weeklyworkinghour >> totHr
            var sql = "INSERT INTO supportGroupEnableDayTime (supportGroupLevelId, sunChck, sunHourStart, sunHourEnd, monChck, monHourStart, monHourEnd," +
                " tueChck, tueHourStart, tueHourEnd, wedChck, wedHourStart, wedHourEnd, thurChck, thurHourStart, thurHourEnd, friChck, friHourStart," +
                " friHourEnd, satChck, satHourStart, satHourEnd, createbyid, weeklyworkinghour)" +
                " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            var param1 = [result1.insertId, String(data.sunChck), data.sunHourStart, data.sunHourEnd, String(data.monChck), data.monHourStart, data.monHourEnd, String(data.tueChck), data.tueHourStart,
            data.tueHourEnd, String(data.wedChck), data.wedHourStart, data.wedHourEnd, String(data.thurChck), data.thurHourStart, data.thurHourEnd, String(data.friChck), data.friHourStart,
            data.friHourEnd, String(data.satChck), data.satHourStart, data.satHourEnd, data.createdBy, totHr];
            con.query(sql, param1, function (err, result) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    cb(null, true, result1.insertId);
                }
            });
        }
    });
}

function insertSupportGrpLevel_old(data, cb) {
    var totHr = hrCalculation(data.sunHourStart, data.sunHourEnd) + hrCalculation(data.monHourStart, data.monHourEnd) + hrCalculation(data.tueHourStart, data.tueHourEnd)
        + hrCalculation(data.wedHourStart, data.wedHourEnd) + hrCalculation(data.thurHourStart, data.thurHourEnd) + hrCalculation(data.friHourStart, data.friHourEnd) + hrCalculation(data.satHourStart, data.satHourEnd);
    var sql1 = "INSERT into SUPPORTGROUPLEVEL(CLIENTID,LEVELSHORTDESC,LEVELLONGDESC,ZONEID,PARENT_GROUP_ID,createbyid,group_level,management,group_email)" +
        " values (?,?,?,?,?,?,?,?,?) ";
    var param = [data.clientId, data.groupName, data.description, data.zoneId, data.parent_grp_id, data.createdBy, data.groupLevel, data.managemntView, data.group_email];
    con.query(sql1, param, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            var sql = "INSERT INTO supportGroupEnableDayTime (supportGroupLevelId, sunChck, sunHourStart, sunHourEnd, monChck, monHourStart, monHourEnd," +
                " tueChck, tueHourStart, tueHourEnd, wedChck, wedHourStart, wedHourEnd, thurChck, thurHourStart, thurHourEnd, friChck, friHourStart," +
                " friHourEnd, satChck, satHourStart, satHourEnd, createbyid, weeklyworkinghour)" +
                " values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            var param1 = [result1.insertId, String(data.sunChck), data.sunHourStart, data.sunHourEnd, String(data.monChck), data.monHourStart, data.monHourEnd, String(data.tueChck), data.tueHourStart,
            data.tueHourEnd, String(data.wedChck), data.wedHourStart, data.wedHourEnd, String(data.thurChck), data.thurHourStart, data.thurHourEnd, String(data.friChck), data.friHourStart,
            data.friHourEnd, String(data.satChck), data.satHourStart, data.satHourEnd, data.createdBy, totHr];
            con.query(sql, param1, function (err, result) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    cb(null, true, result1.insertId);
                }
            });
        }
    });
}

function getSupportGroupByClientId(data, cb) {
    let sql = 'select id ,LEVELSHORTDESC as name ,group_level from SUPPORTGROUPLEVEL where DeleteFlag=0 and' +
        ' CLIENTID=' + data.clientId;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getSupportGroupByClientIdOrMasterClientId(data, cb) {
    // let sql = 'select id ,LEVELSHORTDESC as name from SUPPORTGROUPLEVEL where DeleteFlag=0 and' +
    //     ' CLIENTID=' + data.clientId;
    let sql = "select id ,LEVELSHORTDESC as name from SUPPORTGROUPLEVEL where DeleteFlag=0 and" +
        " CLIENTID in (" + data.clientId + ", (SELECT masterId FROM client_subclient_mapping where subclientId = " + data.clientId + ") )";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getDynamicMenuDtls(data, cb) {
    async.waterfall([
        function firstStep(done) {
            let sql = " SELECT a.parent_menu_id parent ,a.id child,sequence_no,a.menu_desc label, coalesce(b.url,'') path " +
                " FROM tbl_client_menu_details a left join URLKEY b on a.url_id = b.id " +
                " WHERE a.client_id= " + data.id + " and a.is_action_req ='N' and a.DeleteFlag = '0' and a.id in (SELECT menu_id FROM MODULECLIENTUSERMAP where client_id = " + data.id + " and user_id = " + data.user_id + " and DeleteFlag = '0') " +
                " order by a.parent_menu_id,sequence_no ";
            // logData('firstStep---------------------' + sql);
            con.query(sql, function (err, result) {
                // logData('firstStep-------result--------------' + JSON.stringify(result));
                if (err) {
                    logData(err);
                    done(null);
                } else {
                    done(null, result);
                }
            });
        },
        function secondStep(step1Result, done) {
            // logData('forst result menu dtls===' + JSON.stringify(step1Result));
            if (step1Result.length == 0) {
                let sql = " SELECT a.parent_menu_id parent ,a.id child,sequence_no,a.menu_desc label, coalesce(b.url,'') path " +
                    " FROM tbl_client_menu_details a left join URLKEY b on a.url_id = b.id " +
                    " WHERE a.client_id= " + data.id + " and a.is_action_req ='N' and a.DeleteFlag = '0' and a.id in (SELECT menuId FROM MODULECLIENTUSERROLEMAP where clientId = " + data.id + " " +
                    "                                           and roleId in (SELECT ROLEID FROM ROLEUSER where CLIENTID = " + data.id + " and USERID =" + data.user_id + " and DeleteFlag= 0) " +
                    "   and DeleteFlag = '0') order by a.parent_menu_id,sequence_no";
                // logData('secondStep------::::::::::---------------' + sql)
                con.query(sql, function (err, result) {
                    // logData('secondStep-------result--------------' + JSON.stringify(result));
                    if (err) {
                        logData(err);
                        done(null);
                    } else {
                        done(null, result);
                    }
                });
            } else {
                done(null, step1Result);
            }
        }
        /*function thirdStep(step2Result, done) {
            if (step2Result.length == 0) {
                var sql = " SELECT a.parent_menu_id parent ,a.id child,sequence_no,a.menu_desc label, coalesce(b.url,'') path " +
                    " FROM tbl_client_menu_details a " +
                    " left join URLKEY b " +
                    " on a.url_id = b.id " +
                    " WHERE a.client_id=" + data.id + "  and a.is_action_req ='N' and a.DeleteFlag = '0' " +
                    " order by a.parent_menu_id,sequence_no ";
                // logData('thirdStep---------------------' + sql)
                con.query(sql, function (err, result) {
                    // logData('thirdStep-----result----------------' + JSON.stringify(result));
                    if (err) {
                        logData(err);
                        done(null);
                    } else {
                        done(null, result);
                    }
                });
            } else {
                done(null, step2Result);
            }
        }*/
    ],
        function (err, done) {
            if (err) {
                logData(err);
            } else {
                // logData('doneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' + JSON.stringify(done));
                var c = getNestedChildren(done, 0);
                if (c.length > 0) {
                    cb(null, true, c);
                } else {
                    cb(null, false, "NO DATA FOUND");
                }
                //cb(null, true, done);
            }
        });
}

function getNestedChildren(arr, parent) {
    var out = []
    for (var i in arr) {
        if (arr[i].parent == parent) {
            var children = getNestedChildren(arr, arr[i].child)

            if (children.length) {
                arr[i].items = children
            }
            out.push(arr[i])
        }
    }
    return out
}

function mapRoleUserAction(data, cb) {
    var actionIds = [];
    actionIds = data.actionIds;

    function deleteData(callback) {
        let sql = 'delete from RoleUserAction where clientId=' + data.clientId + ' and roleId=' + data.roleId +
            ' and userId=' + data.refer_user_id;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, true);
            }
        });
    }

    function insertData(callback) {
        let count = 0;
        for (let i = 0; i < actionIds.length; i++) {
            let sql = 'insert into RoleUserAction (roleId,clientId,actionId,userId,createdById) values' +
                ' (' + data.roleId + ',' + data.clientId + ',' + actionIds[i] + ',' + data.refer_user_id + ',' +
                data.createdBy + ');';
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    count++;
                    if (actionIds.length === count) {
                        callback(null, true);
                    }
                }
            });
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}


function mapRoleAction(data, cb) {
    var actionIds = [];
    actionIds = data.actionIds;

    function deleteData(callback) {
        let sql = 'delete from roleAction where clientId=' + data.clientId + ' and roleId=' + data.roleId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, true);
            }
        });
    }

    function insertData(callback) {
        let count = 0;
        for (let i = 0; i < actionIds.length; i++) {
            let sql = 'insert into roleAction (roleId,clientId,actionId,createById) values (' + data.roleId + ',' +
                data.clientId + ',' + actionIds[i] + ',' + data.createdBy + ');';
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    count++;
                    if (actionIds.length === count) {
                        callback(null, true);
                    }
                }
            });
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}


function getUserWiseActions(data, cb) {
    let sql = 'SELECT action.id,name FROM action,RoleUserAction where deleteFlag=0 and action.id=RoleUserAction.actionId and RoleUserAction.clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and userId=' + data.refer_user_id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getRoleWiseActions(data, cb) {
    let sql = 'SELECT action.id,name FROM action,roleAction where DeleteFlag=0 and action.id=roleAction.actionId and' +
        ' roleAction.clientId=' + data.clientId + ' and roleId=' + data.roleId;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getRoleUserActionMap(data, cb) {
    // util.logData('dataaaaaaaaaaa' + JSON.stringify(data));
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    // util.logData('dataaaaaaaaaaa11111111' + offset);
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT RoleUserAction.id,USER.NAME as user, USERROLE.ROLENAME as role,CLIENT.NAME as client,' +
                ' action.name as action FROM USER,CLIENT,RoleUserAction,USERROLE,action where RoleUserAction.DeleteFlag=0' +
                ' and RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and' +
                ' RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id and RoleUserAction.id > ' + offset + ' LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'select * from ( SELECT RoleUserAction.id,USER.NAME as user, USERROLE.ROLENAME as role,CLIENT.NAME as client,' +
                ' action.name as action FROM USER,CLIENT,RoleUserAction,USERROLE,action where RoleUserAction.DeleteFlag=0' +
                ' and RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and' +
                ' RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id and RoleUserAction.id < ' + offset +
                ' ORDER BY RoleUserAction.id DESC LIMIT ' + page_size + ')z ORDER BY z.id  ASC;';
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'select count(*) count ' +
            ' FROM USER,CLIENT,RoleUserAction,USERROLE,action where RoleUserAction.DeleteFlag=0' +
            ' and RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and' +
            ' RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function insertTicketProperty(data, cb) {
    let sql = 'select id from Attribute where attrDesc="' + data.name + '";'
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, false, 'Already Exist')
            } else {
                let sql1 = 'insert into Attribute (attrDesc,createbyid) values("' + data.name + '",' + data.createdBy + ');';
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result1.affectedRows > 0) {
                            cb(null, true, result1.affectedRows);
                        } else {
                            cb(null, false, result1.affectedRows);
                        }

                    }
                })
            }
        }
    });
}

function getTicketProperty(data, cb) {
    let sql = 'select id,attrDesc as name from Attribute';
    con.query(sql, function (err, result1) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result1)
        }
    })
}


function deleteRoleUserAction(data, cb) {
    let sql = "Update RoleUserAction set deleteFlag = '1',delete_by_id = " + data.user_id + ",deleteDate=NOW() " +
        "where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function getMenuDtlsClientWise(data, cb) {

    var str = " SELECT a.client_id,a.parent_menu_id as  parent ,a.id id,a.menu_desc name, a.sequence_no " +
        " FROM tbl_client_menu_details a " +
        " WHERE a.client_id=" + data.clientId + " " +
        " and a.module_id = " + data.moduleId + " " +
        " and a.DeleteFlag = '0' and (a.url_id is null or a.url_id='0')";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function insertMenuDtlsClientWise(data, cb) {
    /*******************************************************************************/
    var str2 = " Select sequence_no from tbl_client_menu_details " +
        " where client_id=" + data.clientId + " " +
        " and module_id=" + data.moduleId + " and parent_menu_id=" + data.parent_id + " and menu_desc ='" + data.menuDesc + "' and DeleteFlag = '0' ";
    con.query(str2, function (err2, result2) {
        if (err2) {
            logData(err2);
            cb(err2, null);
        } else {
            if (result2 === null || result2.length === 0) {
                var str3 = " Select sequence_no,id from tbl_client_menu_details where client_id=" + data.clientId + "  " +
                    " and module_id=" + data.moduleId + " and parent_menu_id=" + data.parent_id + " and sequence_no= " + data.seq + " and DeleteFlag = '0' ";
                con.query(str3, function (err3, result3) {
                    if (err3) {
                        logData(err3);
                        cb(err3, null);
                    } else {
                        if (result3 != null && result3.length != 0) {
                            var str4 = " Select sequence_no,id from tbl_client_menu_details " +
                                " where client_id=" + data.clientId + "  and module_id=" + data.moduleId + " and parent_menu_id=" + data.parent_id + " " +
                                " and sequence_no>= " + data.seq + " and DeleteFlag = '0' ";
                            con.query(str4, function (err4, result4) {
                                if (err4) {
                                    logData(err4);
                                    cb(err4, null);
                                } else {
                                    if (result4 == null || result4.length == 0) {
                                        var str = " Insert into tbl_client_menu_details (client_id,module_id,parent_menu_id ,menu_desc, sequence_no,leafnode) " +
                                            " values(" + data.clientId + "," + data.moduleId + "," + data.parent_id + ",'" + data.menuDesc + "'," + data.seq + ",'true') ";
                                        con.query(str, function (err, result) {
                                            if (err) {
                                                logData(err);
                                                cb(err, null);
                                            } else {
                                                var str1 = " update tbl_client_menu_details set leafnode = 'false' where id = " + data.parent_id + " and client_id =" + data.clientId + " and  module_id = " + data.moduleId + " ";
                                                con.query(str1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        cb(null, true, result.insertId);
                                                    }
                                                });
                                            }
                                        });
                                    } else {
                                        //(result4 != null && result4.length > 0) {
                                        let flg = 1;
                                        for (let i = 0; i < result4.length; i++) {
                                            var str5 = " update tbl_client_menu_details set sequence_no=" + (parseInt(result4[i].sequence_no) + 1) + " where id=" + result4[i].id + " ";
                                            con.query(str5, function (err5, result5) {
                                                if (err5) {
                                                    cb(err5, null);
                                                } else {
                                                    if (flg == result4.length) {
                                                        var str = " Insert into tbl_client_menu_details (client_id,module_id,parent_menu_id ,menu_desc, sequence_no,leafnode) " +
                                                            " values(" + data.clientId + "," + data.moduleId + "," + data.parent_id + ",'" + data.menuDesc + "'," + data.seq + ",'true') ";
                                                        con.query(str, function (err, result) {
                                                            if (err) {
                                                                logData(err);
                                                                cb(err, null);
                                                            } else {
                                                                var str1 = " update tbl_client_menu_details set leafnode = 'false' where id = " + data.parent_id + " and client_id =" + data.clientId + " and  module_id = " + data.moduleId + " ";
                                                                con.query(str1, function (err1, result1) {
                                                                    if (err1) {
                                                                        logData(err1);
                                                                        cb(err1, null);
                                                                    } else {
                                                                        cb(null, true, result.insertId);
                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                    flg++;
                                                }
                                            });
                                        }
                                    }

                                }
                            });

                        } else {
                            var str = " Insert into tbl_client_menu_details (client_id,module_id,parent_menu_id ,menu_desc, sequence_no,leafnode) " +
                                " values(" + data.clientId + "," + data.moduleId + "," + data.parent_id + ",'" + data.menuDesc + "'," + data.seq + ",'true') ";
                            con.query(str, function (err, result) {
                                if (err) {
                                    logData(err);
                                    cb(err, null);
                                } else {
                                    var str1 = " update tbl_client_menu_details set leafnode = 'false' where id = " + data.parent_id + " and client_id =" + data.clientId + " and  module_id = " + data.moduleId + " ";
                                    con.query(str1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            cb(null, true, result.insertId);
                                        }
                                    });
                                }
                            });
                        }
                    }
                });

            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });
}

function getMenuCompleteDtlsClientWise(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select m.*,coalesce(n.menu_desc,'') parent_name from (SELECT c.name client_name," +
                "d.MODULENAME module_name,a.parent_menu_id,a.id id,a.menu_desc name, coalesce(b.url,'') url," +
                "a.sequence_no seq,a.leafnode FROM CLIENT c, MODULE d ," +
                " tbl_client_menu_details a left join URLKEY b on a.url_id = b.id WHERE a.client_id  = c.id and" +
                " a.module_id = d.id and a.DeleteFlag = '0' and c.DeleteFlag = '0' and" +
                " d.DeleteFlag = '0') m left join tbl_client_menu_details n on m.parent_menu_id  = n.id" +
                " where m.id > " + offset + " ORDER BY m.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (select m.*,coalesce(n.menu_desc,'') parent_name from (SELECT c.name client_name," +
                "d.MODULENAME module_name,a.parent_menu_id,a.id id,a.menu_desc name, coalesce(b.url,'') url," +
                "a.sequence_no seq,a.leafnode FROM CLIENT c, MODULE d ," +
                " tbl_client_menu_details a left join URLKEY b on a.url_id = b.id WHERE a.client_id  = c.id and" +
                " a.module_id = d.id and a.DeleteFlag = '0' and c.DeleteFlag = '0' and" +
                " d.DeleteFlag = '0') m left join tbl_client_menu_details n on m.parent_menu_id  = n.id where m.id < " +
                offset + " ORDER BY m.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(*) count from (SELECT c.name client_name," +
            "d.MODULENAME module_name,a.parent_menu_id,a.id id,a.menu_desc name, coalesce(b.url,'') url," +
            "a.sequence_no seq,a.leafnode FROM CLIENT c, MODULE d ," +
            " tbl_client_menu_details a left join URLKEY b on a.url_id = b.id WHERE a.client_id  = c.id and" +
            " a.module_id = d.id and a.DeleteFlag = '0' and c.DeleteFlag = '0' and" +
            " d.DeleteFlag = '0') m left join tbl_client_menu_details n on m.parent_menu_id  = n.id";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function updateMenuDtlsWithUrlClientWise(data, cb) {

    var str = " update tbl_client_menu_details set url_id = " + data.urlId + " where id = " + data.id + " and leafnode = 'true' ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function getAttributesHeaderMstClientWise(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT c.name clientNm,a.id id,a.header_desc description,a.header_name name ,a.sequence_no seq," +
                " b.ATTRDESC attr, alphanum(a.header_name) field, d.ATTRVAL ticket_type " +
                " FROM CLIENT c, " +
                " attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d " +
                " WHERE a.id > " + offset + " and a.ATTRID = b.id  " +
                " and a.CLIENTID  = c.id " +
                " and a.ticket_type  = d.id " +
                " and a.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.CLIENTID=" + data.clientId + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT c.name clientNm,a.id id,a.header_desc description,a.header_name name ,a.sequence_no seq," +
                " b.ATTRDESC attr, alphanum(a.header_name) field, d.ATTRVAL ticket_type " +
                " FROM CLIENT c, " +
                " attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d " +
                " WHERE a.id < " + offset + " and a.ATTRID = b.id  " +
                " and a.CLIENTID  = c.id " +
                " and a.ticket_type  = d.id " +
                " and a.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.CLIENTID=" + data.clientId + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " SELECT count(*) count " +
            " FROM CLIENT c, " +
            " attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d " +
            " WHERE a.ATTRID = b.id  " +
            " and a.CLIENTID  = c.id " +
            " and a.ticket_type  = d.id " +
            " and a.DeleteFlag = '0' " +
            " and c.DeleteFlag = '0' " +
            " and b.DeleteFlag = '0' " +
            " and a.CLIENTID=" + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function updateAttributesHeaderMstClientWise(data, cb) {
    // var data = preventSqlInjection(data);
    let sql = "Update attributesHeaderMst set header_name = '" + data.name + "', header_desc = '" + data.description +
        "', modifiybyid = " + data.user_id + ",modifiydate=NOW() where id = " + data.id + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result.affectedRows);
        }
    });
}

function insertAttributesHeaderMstClientWise(data, cb) {
    // var data = preventSqlInjection(data);
    logData('hhhhhhhhh--------------' + JSON.stringify(data))
    var sql = "Select * from attributesHeaderMst " +
        " where DeleteFlag=0 and CLIENTID =" + data.clientId + " " +
        " and ATTRID = " + data.attrId + " " +
        " and ticket_type = " + data.ticket_type + " " +
        " and (header_desc = '" + data.desc + "' or header_name = '" + data.name + "' or sequence_no = " + data.seq + " ) ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "select max(coalesce(sequence_no,0))+1 seq from attributesHeaderMst a where a.CLIENTID=" + data.clientId + " and a.ATTRID = " + data.attrId + " and a.ticket_type = " + data.ticket_type + "";
                logData('sql1----------------' + sql1)
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        var sql2 = "";
                        if (result1.length == 0 || result1[0].seq == null) {
                            sql2 = "INSERT into attributesHeaderMst(CLIENTID,  ATTRID, header_name,header_desc, sequence_no," +
                                " createbyid,ticket_type)" +
                                " values ( " + data.clientId + " ," + data.attrId + ",'" + data.name + "','" + data.desc + "'," +
                                " 1 ,  " + data.createdBy + "," + data.ticket_type + " ) ";
                        } else {
                            sql2 = "INSERT into attributesHeaderMst(CLIENTID,  ATTRID, header_name,header_desc, sequence_no," +
                                " createbyid,ticket_type)" +
                                " values ( " + data.clientId + " ," + data.attrId + ",'" + data.name + "','" + data.desc + "'," +
                                " " + result1[0].seq + " ,  " + data.createdBy + "," + data.ticket_type + " ) ";
                        }
                        logData('sql2----------------' + sql2)
                        con.query(sql2, function (err2, result2) {
                            if (err2) {
                                logData(err2);
                                cb(err2, null);
                            } else {
                                cb(null, true, result2.insertId);
                            }
                        });
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });

}

function deleteAttributesHeaderMstClientWise(data, cb) {
    var data = preventSqlInjection(data);
    let sql = "Update attributesHeaderMst set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW()" +
        " where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}



function getTicketAttributesClientWise(data, cb) {
    util.logData('data====' + JSON.stringify(data));
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        var str;
        var param;
        // LTPO-POWER
        if (paginationType == 'next' || paginationType == '') {
            if (data.firstCatId != "null" && data.firstCatId != "0") {
                str = "select m.* ,(SELECT busi_priority_name from BUSINESSPRIORITY where DeleteFlag = 0 and id in (SELECT busi_priority_id from BUSINESSMATRIX where category_id in (m.id) " +
                    " and DeleteFlag = 0)) as prority ,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  " +
                    " and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0 and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
                param = [data.clientId, data.firstCatId];

                if (data.name != "null" && data.name != "") {
                    str = str + "and ATTRVAL LIKE Concat('%',?,'%') ";
                    param.push(data.name);
                }

                if (data.level_id != "null" && data.level_id != "0") {
                    str = str + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                    param.push(data.level_id);
                }
                str = str + "and COALESCE(d.DeleteFlag,'0') = 0) m Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id > ? ORDER BY m.id ASC LIMIT ?;";
                param.push(Number(offset));
                param.push(Number(page_size));
            } else {
                str = " select m.*, (SELECT busi_priority_name from BUSINESSPRIORITY where DeleteFlag = 0 and id in (SELECT busi_priority_id from BUSINESSMATRIX where category_id in (m.id) and DeleteFlag = 0)) as prority, " +
                    " (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ,a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                    " a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                    " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= ? and" +
                    " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where " +
                    " m.id > ? ORDER BY m.id ASC LIMIT ?";
                param = [data.clientId, Number(offset), Number(page_size)];
            }
        } else if (paginationType == 'prev') {
            if (data.firstCatId != "null" && data.firstCatId != "0") {
                str = "select * from (select m.* , (SELECT busi_priority_name from BUSINESSPRIORITY where DeleteFlag = 0 and id in (SELECT busi_priority_id from BUSINESSMATRIX where category_id in (m.id) and DeleteFlag = 0)) as prority " +
                    " ,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  " +
                    " and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0 and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
                param = [data.clientId, data.firstCatId];

                if (data.name != "null" && data.name != "") {
                    str = str + "and ATTRVAL LIKE Concat('%',?,'%') ";
                    param.push(data.name);
                }

                if (data.level_id != "null" && data.level_id != "0") {
                    str = str + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                    param.push(data.level_id);
                }
                str = str + "and COALESCE(d.DeleteFlag,'0') = 0) m Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id < ? ORDER BY m.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
                param.push(Number(offset));
                param.push(Number(page_size));
            } else {
                str = "select * from (select m.* ,  (SELECT busi_priority_name from BUSINESSPRIORITY where DeleteFlag = 0 and id in (SELECT busi_priority_id from BUSINESSMATRIX where category_id in (m.id) and DeleteFlag = 0)) as prority " +
                    " ,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                    " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,a.attachedField,d.header_name area, (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                    "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                    " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= " + data.clientId + " and" +
                    " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id < ?" +
                    " ORDER BY m.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
                param = [data.clientId, Number(offset), Number(page_size)];
            }
        }
        util.logData('str=====' + str);
        util.logData('param=====' + JSON.stringify(param));
        con.query(str, param, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                if (done.length > 0) {
                    for (let i = 0; i < done.length; i++) {
                        done[i].attachedField = stringToBool(done[i].attachedField);
                    }
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1;
        var param1;
        if (data.firstCatId != "null" && data.firstCatId != "0") {
            str1 = " select count(*) count from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,d.header_name area FROM CLIENT c ," +
                " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                " a.ATTRID=1 and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0' and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
            param1 = [data.clientId, data.firstCatId];

            if (data.name != "null" && data.name != "") {
                str1 = str1 + "and ATTRVAL LIKE Concat('%',?,'%') ";
                param1.push(data.name);
            }

            if (data.level_id != "null" && data.level_id != "0") {
                str1 = str1 + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                param1.push(data.level_id);
            }

            str1 = str1 + " and COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id";
        } else {
            str1 = " select count(*) count from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,d.header_name area FROM CLIENT c ," +
                "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0' and a.CLIENTID= ? and" +
                " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id";
            param1 = [data.clientId];
        }
        util.logData('str1=====' + str1);
        util.logData('param1=====' + JSON.stringify(param1));
        con.query(str1, param1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}



function getTicketAttributesClientWise_old_2(data, cb) {
    util.logData('data====' + JSON.stringify(data));
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        var str;
        var param;
        // LTPO-POWER
        if (paginationType == 'next' || paginationType == '') {
            if (data.firstCatId != "null" && data.firstCatId != "0") {
                str = "select m.* , (SELECT busi_priority_name from BUSINESSPRIORITY where id = (SELECT busi_priority_id from BUSINESSMATRIX where category_id = m.id and DeleteFlag = 0)) as prority" +
                    " ,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  " +
                    " and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0 and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
                param = [data.clientId, data.firstCatId];

                if (data.name != "null" && data.name != "") {
                    str = str + "and ATTRVAL LIKE Concat('%',?,'%') ";
                    param.push(data.name);
                }

                if (data.level_id != "null" && data.level_id != "0") {
                    str = str + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                    param.push(data.level_id);
                }
                str = str + "and COALESCE(d.DeleteFlag,'0') = 0) m Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id > ? ORDER BY m.id ASC LIMIT ?;";
                param.push(Number(offset));
                param.push(Number(page_size));
            } else {
                str = " select m.* , (SELECT busi_priority_name from BUSINESSPRIORITY where id = (SELECT busi_priority_id from BUSINESSMATRIX where category_id = m.id and DeleteFlag = 0)) as prority  , " +
                    " (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ,a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                    " a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                    " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= ? and" +
                    " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where " +
                    " m.id > ? ORDER BY m.id ASC LIMIT ?";
                param = [data.clientId, Number(offset), Number(page_size)];
            }
        } else if (paginationType == 'prev') {
            if (data.firstCatId != "null" && data.firstCatId != "0") {
                str = "select * from (select m.* , (SELECT busi_priority_name from BUSINESSPRIORITY where id = (SELECT busi_priority_id from BUSINESSMATRIX where category_id = m.id and DeleteFlag = 0)) as prority" +
                    " ,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  " +
                    " and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0 and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
                param = [data.clientId, data.firstCatId];

                if (data.name != "null" && data.name != "") {
                    str = str + "and ATTRVAL LIKE Concat('%',?,'%') ";
                    param.push(data.name);
                }

                if (data.level_id != "null" && data.level_id != "0") {
                    str = str + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                    param.push(data.level_id);
                }
                str = str + "and COALESCE(d.DeleteFlag,'0') = 0) m Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id < ? ORDER BY m.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
                param.push(Number(offset));
                param.push(Number(page_size));
            } else {
                str = "select * from (select m.* , (SELECT busi_priority_name from BUSINESSPRIORITY where id = (SELECT busi_priority_id from BUSINESSMATRIX where category_id = m.id and DeleteFlag = 0)) as prority " +
                    " ,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                    " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,a.attachedField,d.header_name area, (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                    "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                    " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= " + data.clientId + " and" +
                    " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id < ?" +
                    " ORDER BY m.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
                param = [data.clientId, Number(offset), Number(page_size)];
            }
        }
        util.logData('str=====' + str);
        util.logData('param=====' + JSON.stringify(param));
        con.query(str, param, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                if (done.length > 0) {
                    for (let i = 0; i < done.length; i++) {
                        done[i].attachedField = stringToBool(done[i].attachedField);
                    }
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1;
        var param1;
        if (data.firstCatId != "null" && data.firstCatId != "0") {
            str1 = " select count(*) count from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,d.header_name area FROM CLIENT c ," +
                " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                " a.ATTRID=1 and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0' and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
            param1 = [data.clientId, data.firstCatId];

            if (data.name != "null" && data.name != "") {
                str1 = str1 + "and ATTRVAL LIKE Concat('%',?,'%') ";
                param1.push(data.name);
            }

            if (data.level_id != "null" && data.level_id != "0") {
                str1 = str1 + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                param1.push(data.level_id);
            }

            str1 = str1 + " and COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id";
        } else {
            str1 = " select count(*) count from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,d.header_name area FROM CLIENT c ," +
                "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0' and a.CLIENTID= ? and" +
                " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id";
            param1 = [data.clientId];
        }
        util.logData('str1=====' + str1);
        util.logData('param1=====' + JSON.stringify(param1));
        con.query(str1, param1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function getTicketAttributesClientWise_old1(data, cb) {
    util.logData('data====' + JSON.stringify(data));
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        var str;
        var param;
        // LTPO-POWER
        if (paginationType == 'next' || paginationType == '') {
            if (data.firstCatId != "null" && data.firstCatId != "0") {
                str = "select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  " +
                    " and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0 and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
                param = [data.clientId, data.firstCatId];

                if (data.name != "null" && data.name != "") {
                    str = str + "and ATTRVAL LIKE Concat('%',?,'%') ";
                    param.push(data.name);
                }

                if (data.level_id != "null" && data.level_id != "0") {
                    str = str + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                    param.push(data.level_id);
                }
                str = str + "and COALESCE(d.DeleteFlag,'0') = 0) m Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id > ? ORDER BY m.id ASC LIMIT ?;";
                param.push(Number(offset));
                param.push(Number(page_size));
            } else {
                str = " select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ,a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                    " a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                    " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= ? and" +
                    " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where " +
                    " m.id > ? ORDER BY m.id ASC LIMIT ?";
                param = [data.clientId, Number(offset), Number(page_size)];
            }
        } else if (paginationType == 'prev') {
            if (data.firstCatId != "null" && data.firstCatId != "0") {
                str = "select * from (select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, " +
                    " (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  " +
                    " and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0 and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
                param = [data.clientId, data.firstCatId];

                if (data.name != "null" && data.name != "") {
                    str = str + "and ATTRVAL LIKE Concat('%',?,'%') ";
                    param.push(data.name);
                }

                if (data.level_id != "null" && data.level_id != "0") {
                    str = str + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                    param.push(data.level_id);
                }
                str = str + "and COALESCE(d.DeleteFlag,'0') = 0) m Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id < ? ORDER BY m.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
                param.push(Number(offset));
                param.push(Number(page_size));
            } else {
                str = "select * from (select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                    " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,a.attachedField,d.header_name area, (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                    "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                    "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                    " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= " + data.clientId + " and" +
                    " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id < ?" +
                    " ORDER BY m.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
                param = [data.clientId, Number(offset), Number(page_size)];
            }
        }
        util.logData('str=====' + str);
        util.logData('param=====' + JSON.stringify(param));
        con.query(str, param, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                if (done.length > 0) {
                    for (let i = 0; i < done.length; i++) {
                        done[i].attachedField = stringToBool(done[i].attachedField);
                    }
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1;
        var param1;
        if (data.firstCatId != "null" && data.firstCatId != "0") {
            str1 = " select count(*) count from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,d.header_name area FROM CLIENT c ," +
                " TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                " a.ATTRID=1 and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0' and a.CLIENTID= ? AND parentPath LIKE CONCAT(?, '%') ";
            param1 = [data.clientId, data.firstCatId];

            if (data.name != "null" && data.name != "") {
                str1 = str1 + "and ATTRVAL LIKE Concat('%',?,'%') ";
                param1.push(data.name);
            }

            if (data.level_id != "null" && data.level_id != "0") {
                str1 = str1 + "and a.attrHeaderMstId=? and a.PARENT_ID > 0 ";
                param1.push(data.level_id);
            }

            str1 = str1 + " and COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id";
        } else {
            str1 = " select count(*) count from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,d.header_name area FROM CLIENT c ," +
                "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0' and a.CLIENTID= ? and" +
                " COALESCE(d.DeleteFlag,'0') = '0') m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id";
            param1 = [data.clientId];
        }
        util.logData('str1=====' + str1);
        util.logData('param1=====' + JSON.stringify(param1));
        con.query(str1, param1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getTicketAttributesClientWise_old(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area, (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= " + data.clientId + " and" +
                " COALESCE(d.DeleteFlag,'0') = '0'   ) m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where " +
                " m.id > " + offset + " ORDER BY m.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
                " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,a.attachedField,d.header_name area, (select x.ATTRVAL from TICKETATTRIBUTES x where x.id = d.ticket_type) tickettype FROM CLIENT c ," +
                "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
                "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
                " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= " + data.clientId + " and" +
                " COALESCE(d.DeleteFlag,'0') = '0'   ) m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id where m.id < " +
                offset + " ORDER BY m.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                if (done.length > 0) {
                    for (let i = 0; i < done.length; i++) {
                        done[i].attachedField = stringToBool(done[i].attachedField);
                    }
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " select count(*) count from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID ," +
            " a.ATTRVAL name, a.Attr_desc description,a.sequence_no,d.header_name area FROM CLIENT c ," +
            "  TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE" +
            "  a.ATTRID=1   and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = '0'  and" +
            " COALESCE(c.DeleteFlag,'0') = '0'  and a.CLIENTID= " + data.clientId + " and" +
            " COALESCE(d.DeleteFlag,'0') = '0'   ) m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function deleteTicketAttributesClientWise(data, cb) {
    let sql = "Update TICKETATTRIBUTES set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate = NOW() where id = " + data.id + ";";
    sql = sql + "Update WFCCLIENT_back_notify set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where categoryId = " + data.id + ";";
    sql = sql + "Update WFCCLIENT set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where categoryId = " + data.id + ";";
    sql = sql + "Update ticket_id_configuration set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where category_id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function getTicketAttrClientAttributesWise(data, cb) {
    var sql = 'SELECT id ,sequence_no FROM attributesHeaderMst where DeleteFlag=0 and CLIENTID=' + data.clientId +
        ' and ticket_type=? and sequence_no < ? order by sequence_no desc limit 1;';
    con.query(sql, [data.ticket_type, data.seq], function (err, result1) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result1.length > 0) {
                // var str = " SELECT a.id id, a.ATTRVAL name " +
                //     " FROM TICKETATTRIBUTES a " +
                //     " WHERE  a.DeleteFlag = '0' " +
                //     " and a.CLIENTID=" + data.clientId + " " +
                //     " and a.attrHeaderMstId = " + result1[0].id + " ";
                var str = "SELECT a.id id, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES " +
                    " where FIND_IN_SET(id,(a.parentPath))) name FROM TICKETATTRIBUTES a WHERE  a.CLIENTID=? and a.attrHeaderMstId = ? and a.DeleteFlag = '0';"
                con.query(str, [data.clientId, result1[0].id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result);
                    }
                });
            } else {
                cb(null, true, [])
            }
        }
    })

}


function insertBusinessImpact(data, cb) {
    var sql = "Select * from BUSINESSIMPACT " +
        " where DeleteFlag=0 and CLIENTID =" + data.clientId + " " +
        " and busi_impact_name ='" + data.name + "' " +
        " and ticket_type =" + data.ticket_type + " " +
        " and sequence_no =" + data.seq + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into BUSINESSIMPACT(clientId, busi_impact_name,busi_impact_desc,sequence_no, createbyid,ticket_type)" +
                    " values ( " + data.clientId + " ,'" + data.name + "','" + data.des + "'," + data.seq + "," + data.createdBy + " ," + data.ticket_type + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function insertBusinessPriority(data, cb) {
    var sql = "Select * from BUSINESSPRIORITY " +
        " where DeleteFlag=0 and CLIENTID =" + data.clientId + " " +
        " and ticket_type =" + data.ticket_type + " " +
        " and busi_priority_name ='" + data.name + "' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into BUSINESSPRIORITY(clientId, busi_priority_name,busi_priority_desc,color_desc, createbyid,ticket_type , isHighPriority)" +
                    " values ( " + data.clientId + " ,'" + data.name + "','" + data.des + "','" + data.color_desc + "'," + data.createdBy + " ," + data.ticket_type + "," + data.isHighPriority + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function insertBusinessUrgency(data, cb) {
    var data = preventSqlInjection(data);
    var sql = "Select * from BUSINESSURGENCY " +
        " where DeleteFlag=0 and CLIENTID =" + data.clientId + " " +
        " and ticket_type =" + data.ticket_type + " " +
        " and busi_urgency_name ='" + data.name + "' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into BUSINESSURGENCY(clientId, busi_urgency_name,busi_urgency_desc, createbyid,ticket_type)" +
                    " values ( " + data.clientId + " ,'" + data.name + "','" + data.des + "'," + data.createdBy + "," + data.ticket_type + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}


function deleteBusinessImpact(data, cb) {
    var data = preventSqlInjection(data);
    let sql = "Update BUSINESSIMPACT set DeleteFlag = '1',delete_by_id = " + data.user_id +
        ",DeleteDate=NOW() where id = " + data.id + ";";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteBusinessPriority(data, cb) {
    let sql = "Update BUSINESSPRIORITY set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function deleteBusinessUrgency(data, cb) {
    var data = preventSqlInjection(data);
    let sql = "Update BUSINESSURGENCY set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}


function updateBusinessImpact(data, cb) {
    var data = preventSqlInjection(data);
    let sql = "Update BUSINESSIMPACT set busi_impact_desc = '" + data.des + "', busi_impact_name = '" + data.name +
        "', modifiybyid = " + data.user_id + ",modifiydate=NOW() where id = " + data.id + ";";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function updateBusinessPriority(data, cb) {
    let sql = "Update BUSINESSPRIORITY set busi_priority_desc = '" + data.des + "',busi_priority_name = '" + data.name + "', color_desc = '" + data.color_desc + "', isHighPriority = " + data.isHighPriority + " ,modifiybyid = " + data.user_id + ",modifiydate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function updateBusinessUrgency(data, cb) {
    util.logData('dataaaaaaaaaaaaa' + data);
    var data = preventSqlInjection(data);
    var sql = "Select * from BUSINESSURGENCY, TICKETATTRIBUTES " +
        " where TICKETATTRIBUTES.id = BUSINESSURGENCY.ticket_type and BUSINESSURGENCY.DeleteFlag=0 " +
        " and TICKETATTRIBUTES.ATTRVAL ='" + data.ticket_type + "' " +
        " and BUSINESSURGENCY.busi_urgency_name ='" + data.name + "' and BUSINESSURGENCY.id !=" + data.id;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            util.logData('result=======' + result);
            if (result.length == 0) {
                var sql1 = "Update BUSINESSURGENCY set busi_urgency_desc = '" + data.des + "' , busi_urgency_name = '" +
                    data.name + "',modifiybyid = " + data.user_id + ",modifiydate=NOW() where id = " + data.id + ";";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err, null);
                    } else {
                        if (result1.affectedRows > 0) {
                            cb(null, true, result1.affectedRows);
                        } else {
                            cb(null, false, result1.affectedRows);
                        }

                    }
                });
            } else {
                cb(null, false, "Name already exist in this ticket type");
            }
        }
    });
}

function getBusinessImpact(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT b.name clientNm ,a.id id,a.busi_impact_name name, a.busi_impact_desc des, a.sequence_no seq," +
                " c.ATTRVAL ticket_type " +
                " from BUSINESSIMPACT a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id " +
                " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId +
                " and a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT b.name clientNm ,a.id id,a.busi_impact_name name, a.busi_impact_desc des," +
                " a.sequence_no seq, c.ATTRVAL ticket_type " +
                " from BUSINESSIMPACT a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id " +
                " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId + " and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ") z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " SELECT count(*) count " +
            " from BUSINESSIMPACT a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id " +
            " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function insertBusinessImpact(data, cb) {
    var data = preventSqlInjection(data);
    var sql = "Select * from BUSINESSIMPACT " +
        " where DeleteFlag=0 and CLIENTID =" + data.clientId + " " +
        " and busi_impact_name ='" + data.name + "' " +
        " and ticket_type =" + data.ticket_type + " " +
        " and sequence_no =" + data.seq + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into BUSINESSIMPACT(clientId, busi_impact_name,busi_impact_desc,sequence_no, createbyid,ticket_type)" +
                    " values ( " + data.clientId + " ,'" + data.name + "','" + data.des + "'," + data.seq + "," + data.createdBy + " ," + data.ticket_type + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function getBusinessImpactTicketTypeWise(data, cb) {
    var str = " SELECT b.name clientNm ,a.id id,a.busi_impact_name name, a.busi_impact_desc des, a.sequence_no seq,c.ATTRVAL ticket_type " +
        " from BUSINESSIMPACT a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id " +
        " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId + " and a.ticket_type =" + data.ticket_type + " ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getBusinessPriority(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                for (var i = 0; i < results.dataObj.length; i++) {
                    results.dataObj[i].isHighPriority = Boolean(results.dataObj[i].isHighPriority);

                }

                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT b.name clientNm ,a.id id,a.busi_priority_name name ,a.busi_priority_desc des ,a.isHighPriority,a.color_desc," +
                " c.ATTRVAL  ticket_type " +
                " from BUSINESSPRIORITY a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id" +
                " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId +
                " and a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT b.name clientNm ,a.id id,a.busi_priority_name name ,a.busi_priority_desc des ,a.isHighPriority," +
                "a.color_desc, c.ATTRVAL  ticket_type " +
                " from BUSINESSPRIORITY a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id" +
                " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId + " and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ") z ORDER BY z.id  ASC;";

        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " select count(*) count " +
            " from BUSINESSPRIORITY a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id" +
            " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getBusinessPriorityTicketTypeWise(data, cb) {
    var str = " SELECT b.name clientNm ,a.id id,a.busi_priority_name name ,a.busi_priority_desc des ,a.color_desc,c.ATTRVAL  ticket_type " +
        " from BUSINESSPRIORITY a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id " +
        " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId + " and a.ticket_type =" + data.ticket_type + "  ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getBusinessUrgency(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT b.name clientNm ,a.id id,a.busi_urgency_name name, a.busi_urgency_desc des,c.ATTRVAL  ticket_type  " +
                " from BUSINESSURGENCY a, CLIENT b, TICKETATTRIBUTES c  where a.CLIENTID = b.id and" +
                " a.ticket_type = c.id and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId +
                " and a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT b.name clientNm ,a.id id,a.busi_urgency_name name, a.busi_urgency_desc des,c.ATTRVAL  ticket_type  " +
                " from BUSINESSURGENCY a, CLIENT b, TICKETATTRIBUTES c  where a.CLIENTID = b.id and" +
                " a.ticket_type = c.id and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId + " and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(*) count" +
            " from BUSINESSURGENCY a, CLIENT b, TICKETATTRIBUTES c  where a.CLIENTID = b.id and" +
            " a.ticket_type = c.id and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getBusinessUrgencyTicketTypeWise(data, cb) {
    var str = " SELECT b.name clientNm ,a.id id,a.busi_urgency_name name, a.busi_urgency_desc des,c.ATTRVAL  ticket_type  " +
        "   from BUSINESSURGENCY a, CLIENT b, TICKETATTRIBUTES c  where a.CLIENTID = b.id and a.ticket_type = c.id " +
        " and a.DeleteFlag=0 and a.CLIENTID =" + data.clientId + "  and a.ticket_type =" + data.ticket_type + " ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getMappingWithTicketAttrSuppGrp(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT d.id , a.LEVELSHORTDESC groupname ,b.attrval attrVal,(select attrval from TICKETATTRIBUTES " +
                "where id = d.ticket_type )ticket_type " +
                " FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b " +
                " WHERE d.supportGroupLevelId = a.id " +
                " and d.CLIENTID  = c.id " +
                " and d.ticketAttrId  = b.id " +
                " and a.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and a.CLIENTID=" + data.clientId + " " +
                " and d.DeleteFlag = '0'  " +
                " and b.DeleteFlag = '0' and" +
                " d.id > " + offset + " ORDER BY d.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT d.id , a.LEVELSHORTDESC groupname ,b.attrval attrVal,(select attrval from TICKETATTRIBUTES " +
                "where id = d.ticket_type )ticket_type " +
                " FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b " +
                " WHERE d.supportGroupLevelId = a.id " +
                " and d.CLIENTID  = c.id " +
                " and d.ticketAttrId  = b.id " +
                " and a.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and a.CLIENTID=" + data.clientId + " " +
                " and d.DeleteFlag = '0'  " +
                " and b.DeleteFlag = '0' and d.id < " +
                offset + " ORDER BY d.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " SELECT count(d.id) count " +
            " FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b " +
            " WHERE d.supportGroupLevelId = a.id " +
            " and d.CLIENTID  = c.id " +
            " and d.ticketAttrId  = b.id " +
            " and a.DeleteFlag = '0' " +
            " and c.DeleteFlag = '0' " +
            " and a.CLIENTID=" + data.clientId + " " +
            " and d.DeleteFlag = '0'  " +
            " and b.DeleteFlag = '0'";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function insertMappingWithTicketAttrSuppGrp(data, cb) {
    //util.logData("------------->" + JSON.stringify(data));
    let flagj = 0;
    let count = 0;
    for (let j = 0; j < data.supportGroupLevelId.length; j++) {
        // util.logData('flagi===' + flagi + 'flagj===' + flagj);
        var sql = "Select * from SupportGrpWithTicketAttributes " +
            " where clientId =" + data.clientId + " " +
            " and ticketAttrId =" + data.ticketAttrId + " " +
            " and supportGroupLevelId = " + data.supportGroupLevelId[j] + " " +
            " and createbyid = " + data.createdBy + " " +
            " and ticket_type = " + data.ticket_type + " " +
            " and DeleteFlag = '0'";
        //util.logData(">>>>>>>>>>>>>>" + sql);
        con.query(sql, function (err, result) {
            util.logData(result);
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result.length === 0) {
                    let sql1 = "INSERT into SupportGrpWithTicketAttributes(clientId, ticketAttrId, supportGroupLevelId, createbyid, ticket_type)" +
                        " values ( " + data.clientId + " ," + data.ticketAttrId + "," + data.supportGroupLevelId[count] + "," + data.createdBy + "," + data.ticket_type + " ) ";
                    count++;
                    con.query(sql1, function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {
                            //logData(result1);
                            if (data.supportGroupLevelId.length === flagj + 1) {
                                //logData("sdfasdfsdf");
                                cb(null, true, "Insert successfully");
                            }
                            flagj++;
                        }
                    });
                } else {
                    //logData("record already exixts");
                    cb(null, false, "record already exixts");
                }
            }
        });

    }
}

function deleteMappingWithTicketAttrSuppGrp(data, cb) {
    var data = preventSqlInjection(data);
    let sql = "Update SupportGrpWithTicketAttributes set DeleteFlag = '1',delete_by_id = " + data.user_id +
        ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}


function getTicketType(data, cb) {
    var data = preventSqlInjection(data);
    let sql = "SELECT id, ATTRVAL name ,attr_desc description , sequence_no seq,it_asset_management asset FROM" +
        " TICKETATTRIBUTES  where DeleteFlag=0 and ParentId=0 and ATTRID=3 and clientId=" + data.clientId;
    con.query(sql, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length > 0) {
                result1[0].checked = true;
            }
            cb(null, true, result1);
        }
    });
}

function getSupportGroupByVendor(data, cb) {
    let sql = " SELECT d.id,d.LEVELSHORTDESC name" +
        " from supportGroupVendor a,  SUPPORTGROUPLEVEL d " +
        " where a.supportGroupLevelId = d.id " +
        " and a.DeleteFlag='0' " +
        " and d.DeleteFlag = '0' " +
        " and a.CLIENTID = " + data.clientId + " and a.vendorId=" + data.vendorId;
    con.query(sql, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result1);
        }
    });
}

function getSLADetails(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " select a.id, a.ACTIVESLA, a.ENABLE_ESCALATION, c.LEVELSHORTDESC groupname, a.NAME name, a.DESCRIPTIONS des, " +
                "  f.NAME vendor, e.busi_priority_name priority, d.ATTRVAL ticket, a.RESPONSETIME responseTime, a.RESOLUTIONTIME resolutionTime" +
                " from SLA a, CLIENT b, SUPPORTGROUPLEVEL c, TICKETATTRIBUTES d, BUSINESSPRIORITY e, VENDOR f " +
                " where a.CLIENTID = b.id " +
                " and a.supportGroupLevelId = c.id " +
                " and a.TICKETTYPEID = d.id " +
                " and a.busi_priority_id = e.id " +
                " and a.VENDORID = f.id " +
                " and a.CLIENTID =" + data.clientId + " " +
                " and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and e.DeleteFlag = '0' " +
                " and f.DeleteFlag = '0' and" +
                " a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (select a.id, a.ACTIVESLA, a.ENABLE_ESCALATION, c.LEVELSHORTDESC groupname, a.NAME name, a.DESCRIPTIONS des, " +
                "  f.NAME vendor, e.busi_priority_name priority, d.ATTRVAL ticket, a.RESPONSETIME responseTime, a.RESOLUTIONTIME resolutionTime" +
                " from SLA a, CLIENT b, SUPPORTGROUPLEVEL c, TICKETATTRIBUTES d, BUSINESSPRIORITY e, VENDOR f " +
                " where a.CLIENTID = b.id " +
                " and a.supportGroupLevelId = c.id " +
                " and a.TICKETTYPEID = d.id " +
                " and a.busi_priority_id = e.id " +
                " and a.VENDORID = f.id " +
                " and a.CLIENTID =" + data.clientId + " " +
                " and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and e.DeleteFlag = '0' " +
                " and f.DeleteFlag = '0' and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " select count(*) count" +
            " from SLA a, CLIENT b, SUPPORTGROUPLEVEL c, TICKETATTRIBUTES d, BUSINESSPRIORITY e, VENDOR f " +
            " where a.CLIENTID = b.id " +
            " and a.supportGroupLevelId = c.id " +
            " and a.TICKETTYPEID = d.id " +
            " and a.busi_priority_id = e.id " +
            " and a.VENDORID = f.id " +
            " and a.CLIENTID =" + data.clientId + " " +
            " and a.DeleteFlag = '0' " +
            " and b.DeleteFlag = '0' " +
            " and c.DeleteFlag = '0' " +
            " and e.DeleteFlag = '0' " +
            " and f.DeleteFlag = '0'";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function deleteSLADetails(data, cb) {
    let sql = "Update SLA set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function insertSLADetails(data, cb) {
    var sql = "Select * from SLA  where CLIENTID =" + data.clientId + "  and VENDORID =" + data.VENDORID + " and busi_priority_id =" + data.busi_priority_id + " " +
        " and TICKETTYPEID =" + data.TICKETTYPEID + " and supportGroupLevelId =" + data.supportGroupLevelId + " and NAME = '" + data.name + "' and DeleteFlag = '0' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into SLA(ENABLE_ESCALATION, supportGroupLevelId, NAME, DESCRIPTIONS, CLIENTID, VENDORID, busi_priority_id, TICKETTYPEID, RESPONSETIME, RESOLUTIONTIME, createbyid)" +
                    " values ( '" + data.enable_escalation + "' ," + data.supportGroupLevelId + ",'" + data.name + "','" + data.des + "', " +
                    " " + data.clientId + ",  " + data.VENDORID + "," + data.busi_priority_id + ", " + data.TICKETTYPEID + ",'" + data.responseTime + "','" + data.resolutionTime + "'," +
                    " " + data.createdBy + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function getBusinessMatrix(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType === 'next' || paginationType === '') {
            str = "select * from (SELECT a.id id,c.busi_impact_name impact, e.busi_urgency_name urgency, '' category, d.busi_priority_name priority," +
                " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type from BUSINESSMATRIX a," +
                " BUSINESSIMPACT c, BUSINESSPRIORITY d, BUSINESSURGENCY e " +
                " where a.CLIENTID =" + data.clientId + "  and a.busi_impact_id = c.id  and a.busi_priority_id = d.id and" +
                " a.busi_urgency_id = e.id  and a.category_id is null and a.DeleteFlag = '0' and c.DeleteFlag = '0'  and" +
                " d.DeleteFlag = '0' and e.DeleteFlag = '0' " +
                " union " +
                " SELECT a.id id, '' impact, '' urgency, f.ATTRVAL category , d.busi_priority_name priority ," +
                " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type " +
                " from BUSINESSMATRIX a, BUSINESSPRIORITY d, TICKETATTRIBUTES f " +
                " where a.CLIENTID =" + data.clientId + "  and a.busi_priority_id = d.id  and a.category_id = f.id and" +
                " a.DeleteFlag = '0'  and f.DeleteFlag = '0' and a.category_id is not null) z" +
                " where z.id > " + offset + " ORDER BY z.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType === 'prev') {
            str = " select * from (select * from (SELECT a.id id,c.busi_impact_name impact, e.busi_urgency_name urgency, '' category, d.busi_priority_name priority," +
                " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type from BUSINESSMATRIX a," +
                " BUSINESSIMPACT c, BUSINESSPRIORITY d, BUSINESSURGENCY e " +
                " where a.CLIENTID =" + data.clientId + "  and a.busi_impact_id = c.id  and a.busi_priority_id = d.id and" +
                " a.busi_urgency_id = e.id  and a.category_id is null and a.DeleteFlag = '0' and c.DeleteFlag = '0'  and" +
                " d.DeleteFlag = '0' and e.DeleteFlag = '0' " +
                " union " +
                " SELECT a.id id, '' impact, '' urgency, f.ATTRVAL category , d.busi_priority_name priority ," +
                " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type " +
                " from BUSINESSMATRIX a, BUSINESSPRIORITY d, TICKETATTRIBUTES f " +
                " where a.CLIENTID =" + data.clientId + "  and a.busi_priority_id = d.id  and a.category_id = f.id and" +
                " a.DeleteFlag = '0'  and f.DeleteFlag = '0' and a.category_id is not null)y where y.id < " +
                offset + " ORDER BY y.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " select count(*) count from (SELECT a.id id,c.busi_impact_name impact, e.busi_urgency_name urgency, '' category, d.busi_priority_name priority," +
            " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type from BUSINESSMATRIX a," +
            " BUSINESSIMPACT c, BUSINESSPRIORITY d, BUSINESSURGENCY e " +
            " where a.CLIENTID =" + data.clientId + "  and a.busi_impact_id = c.id  and a.busi_priority_id = d.id and" +
            " a.busi_urgency_id = e.id  and a.category_id is null and a.DeleteFlag = '0' and c.DeleteFlag = '0'  and" +
            " d.DeleteFlag = '0' and e.DeleteFlag = '0' " +
            " union " +
            " SELECT a.id id, '' impact, '' urgency, f.ATTRVAL category , d.busi_priority_name priority ," +
            " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type " +
            " from BUSINESSMATRIX a, BUSINESSPRIORITY d, TICKETATTRIBUTES f " +
            " where a.CLIENTID =" + data.clientId + "  and a.busi_priority_id = d.id  and a.category_id = f.id and" +
            " a.DeleteFlag = '0'  and f.DeleteFlag = '0' and a.category_id is not null)z";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function updateSLADetails(data, cb) {
    //var sql = "Select * from SLA  where NAME = '" + data.name + "' and DeleteFlag = '0' ";
    var sql = "Select * from SLA where NAME = '" + data.name + "' and DeleteFlag = '0' and id !=" + data.id + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "Update SLA set ENABLE_ESCALATION='" + data.enable_escalation + "' , NAME = '" + data.name + "', DESCRIPTIONS = '" + data.des + "', " +
                    " RESPONSETIME = '" + data.responseTime + "', RESOLUTIONTIME ='" + data.resolutionTime + "',modifiybyid = " + data.user_id + ",modifiydate=NOW() where id = " + data.id + " ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result1.affectedRows > 0) {
                            cb(null, true, result1.affectedRows);
                        } else {
                            cb(null, false, result1.affectedRows);
                        }

                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function insertBusinessMatrix(data, cb) {
    if (data.type === 1) {
        var sql = "Select * from BUSINESSMATRIX  where DeleteFlag=0 and CLIENTID =" + data.clientId + "  and busi_impact_id =" + data.busi_impact_id + " " +
            "  and ticket_type = " + data.ticket_type + " and busi_priority_id =" + data.busi_priority_id + " and busi_urgency_id =" + data.busi_urgency_id + " ";
    } else {
        var sql = "Select * from BUSINESSMATRIX  where DeleteFlag=0 and CLIENTID =" + data.clientId + "  and category_id =" + data.categoryId + " " +
            " and ticket_type = " + data.ticket_type + " and busi_priority_id =" + data.busi_priority_id + " ";
    }
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                if (data.type === 1) {
                    var sql1 = "INSERT into BUSINESSMATRIX(clientId, busi_impact_id,busi_priority_id,busi_urgency_id, createbyid,ticket_type)" +
                        " values ( " + data.clientId + " ," + data.busi_impact_id + "," + data.busi_priority_id + "," + data.busi_urgency_id + " ," + data.createdBy + "," + data.ticket_type + " ) ";
                } else {
                    var sql1 = "INSERT into BUSINESSMATRIX(clientId, category_id,busi_priority_id,ticket_type,createbyid)" +
                        " values ( " + data.clientId + " ," + data.categoryId + "," + data.busi_priority_id + ",'" + data.ticket_type + "' ," + data.createdBy + " ) ";
                }
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function deleteBusinessMatrix(data, cb) {
    let sql = "Update BUSINESSMATRIX set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function updateSupportGrpLevel(data, cb) {
    var sql2 = "select * from SUPPORTGROUPLEVEL where LEVELSHORTDESC = '" + data.name + "' and LEVELLONGDESC = '" + data.description + "' and group_email = '" + data.group_email + "'and DeleteFlag = '0' ";
    con.query(sql2, function (err2, result2) {
        if (err2) {
            logData(err2);
            cb(err2, null);
        } else {
            if (result2.length == 0) {
                var sql1 = "update SUPPORTGROUPLEVEL set LEVELSHORTDESC= '" + data.name + "' ,LEVELLONGDESC = '" + data.description + "' , ZONEID = '" + data.zoneId + "' , group_level = '" + data.groupLevel + "', management = '" + data.managemntView + "' , group_email = '" + data.group_email + "', modifybyid = " + data.user_id + ", modifydate=NOW() where id = " + data.id + " ";


                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        var sql = "update supportGroupEnableDayTime  set sunChck ='" + data.sunChck + "', sunHourStart='" + data.sunHourStart + "', sunHourEnd = '" + data.sunHourEnd + "', " +
                            " monChck = '" + data.monChck + "', monHourStart = '" + data.monHourStart + "', monHourEnd = '" + data.monHourEnd + "', " +
                            " tueChck='" + data.tueChck + "', tueHourStart='" + data.tueHourStart + "', tueHourEnd = '" + data.tueHourEnd + "', " +
                            " wedChck = '" + data.wedChck + "', wedHourStart = '" + data.wedHourStart + "', wedHourEnd= '" + data.wedHourEnd + "'," +
                            " thurChck = '" + data.thurChck + "', thurHourStart = '" + data.thurHourStart + "',thurHourEnd ='" + data.thurHourEnd + "'," +
                            " friChck = '" + data.friChck + "',friHourStart = '" + data.friHourStart + "',friHourEnd = '" + data.friHourEnd + "'," +
                            " satChck = '" + data.satChck + "',satHourStart = '" + data.satHourStart + "',satHourEnd = '" + data.satHourEnd + "' " +
                            " , modifybyid = " + data.user_id + ",modifydate=NOW() where supportGroupLevelId = " + data.id + "";
                        con.query(sql, function (err, result) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                if (result.affectedRows > 0) {
                                    cb(null, true, result.affectedRows);
                                } else {
                                    cb(null, false, result.affectedRows);
                                }

                            }
                        });
                    }
                });
            } else {
                cb(null, false, "Duplicate Support Group Name");
            }
        }
    });

}


function getMetadataTable(data, cb) {
    let sql = 'select id,name from METADATATABLE';
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

            cb(null, true, result);
        }
    });
}

function mapTableAction(data, cb) {
    function deleteData(callback) {
        let sql = 'delete from METADATAROLEACTIONTBL where clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + ' and urlId=' + data.urlId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, true);
            }
        });
    }

    function insertData(callback) {
        let count = 0;
        for (let i = 0; i < data.actionIds.length; i++) {
            let sql = 'insert into METADATAROLEACTIONTBL (roleId,clientId,actionId,metadatatableId,urlId,createbyid) values (' + data.roleId + ',' + data.clientId + ',' + data.actionIds[i] + ',' + data.tableId + ',' + data.urlId + ',' + data.createdBy + ');';
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    count++;
                    if (data.actionIds.length === count) {
                        callback(null, true);
                    }
                }
            });
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}

function getTableWiseActions(data, cb) {
    let sql = 'SELECT action.id,name FROM action,METADATAROLEACTIONTBL where METADATAROLEACTIONTBL.DeleteFlag=0 and action.id=METADATAROLEACTIONTBL.actionId and METADATAROLEACTIONTBL.clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + '  and urlId=' + data.urlId;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTableActionMap(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT METADATAROLEACTIONTBL.id,METADATATABLE.name tableName,URLKEY.URL url, USERROLE.ROLENAME as role,' +
                ' CLIENT.NAME as client, action.name as action FROM METADATATABLE,CLIENT,URLKEY,METADATAROLEACTIONTBL,USERROLE,action' +
                ' where METADATAROLEACTIONTBL.id > ' + offset + ' and METADATAROLEACTIONTBL.DeleteFlag=0 and METADATAROLEACTIONTBL.clientId=CLIENT.id and' +
                ' METADATAROLEACTIONTBL.roleId=USERROLE.id and METADATAROLEACTIONTBL.actionId=action.id and' +
                ' METADATAROLEACTIONTBL.metadatatableId=METADATATABLE.id and METADATAROLEACTIONTBL.urlId=URLKEY.id ORDER BY METADATAROLEACTIONTBL.id ASC LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'SELECT * from (SELECT METADATAROLEACTIONTBL.id,METADATATABLE.name tableName,URLKEY.URL url, USERROLE.ROLENAME as role,' +
                ' CLIENT.NAME as client, action.name as action FROM METADATATABLE,CLIENT,URLKEY,METADATAROLEACTIONTBL,USERROLE,action' +
                ' where METADATAROLEACTIONTBL.id < ' + offset + ' and METADATAROLEACTIONTBL.DeleteFlag=0 and METADATAROLEACTIONTBL.clientId=CLIENT.id and' +
                ' METADATAROLEACTIONTBL.roleId=USERROLE.id and METADATAROLEACTIONTBL.actionId=action.id and' +
                ' METADATAROLEACTIONTBL.metadatatableId=METADATATABLE.id and METADATAROLEACTIONTBL.urlId=URLKEY.id ORDER BY METADATAROLEACTIONTBL.id DESC LIMIT ' + page_size + ') a ORDER BY a.id  ASC';
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(METADATAROLEACTIONTBL.id) count FROM METADATATABLE,CLIENT,URLKEY,METADATAROLEACTIONTBL,USERROLE,action' +
            ' where METADATAROLEACTIONTBL.DeleteFlag=0 and METADATAROLEACTIONTBL.clientId=CLIENT.id and' +
            ' METADATAROLEACTIONTBL.roleId=USERROLE.id and METADATAROLEACTIONTBL.actionId=action.id and' +
            ' METADATAROLEACTIONTBL.metadatatableId=METADATATABLE.id and METADATAROLEACTIONTBL.urlId=URLKEY.id;';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function deleteTableAction(data, cb) {
    let sql = "Update METADATAROLEACTIONTBL set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function getFieldByTable(data, cb) {
    let sql = 'select id, fieldName name from METADATATBLFLD where metadatatableId=' + data.tableId;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

            cb(null, true, result);
        }
    });
}

function mapTableFieldAction(data, cb) {
    function deleteData(callback) {
        let sql = 'delete from METADATAROLEACTIONFLD where clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + ' and metadatatblfldId=' + data.fieldId + ' and urlId=' + data.urlId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, true);
            }
        });
    }

    function insertData(callback) {
        let count = 0;
        for (let i = 0; i < data.actionIds.length; i++) {
            let sql = 'insert into METADATAROLEACTIONFLD (roleId,clientId,actionId,metadatatableId,metadatatblfldId,urlId,createbyid) values (' + data.roleId + ',' + data.clientId + ',' + data.actionIds[i] + ',' + data.tableId + ',' + data.fieldId + ',' + data.urlId + ',' + data.createdBy + ');';
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    count++;
                    if (data.actionIds.length === count) {
                        callback(null, true);
                    }
                }
            });
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}

function getTableFieldWiseActions(data, cb) {
    let sql = 'SELECT action.id,name FROM action,METADATAROLEACTIONFLD where METADATAROLEACTIONFLD.DeleteFlag=0 and action.id=METADATAROLEACTIONFLD.actionId and METADATAROLEACTIONFLD.clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + ' and metadatatblfldId=' + data.fieldId + ' and urlId=' + data.urlId;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTableFieldActionMap(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT METADATAROLEACTIONFLD.id,METADATATABLE.name tableName, URLKEY.URL url, METADATATBLFLD.fieldName tableField," +
                " USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action FROM METADATATABLE,CLIENT,URLKEY,METADATATBLFLD," +
                " METADATAROLEACTIONFLD,USERROLE,action where METADATAROLEACTIONFLD.id > " + offset + " and METADATAROLEACTIONFLD.DeleteFlag=0 and METADATAROLEACTIONFLD.clientId=CLIENT.id and" +
                " METADATAROLEACTIONFLD.roleId=USERROLE.id and METADATAROLEACTIONFLD.actionId=action.id and" +
                " METADATAROLEACTIONFLD.metadatatableId=METADATATABLE.id and METADATAROLEACTIONFLD.metadatatblfldId=METADATATBLFLD.id and" +
                " METADATAROLEACTIONFLD.urlId=URLKEY.id ORDER BY METADATAROLEACTIONFLD.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT METADATAROLEACTIONFLD.id,METADATATABLE.name tableName, URLKEY.URL url, METADATATBLFLD.fieldName tableField," +
                " USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action FROM METADATATABLE,CLIENT,URLKEY,METADATATBLFLD," +
                " METADATAROLEACTIONFLD,USERROLE,action where METADATAROLEACTIONFLD.id < " + offset + " and METADATAROLEACTIONFLD.DeleteFlag=0 and METADATAROLEACTIONFLD.clientId=CLIENT.id and" +
                " METADATAROLEACTIONFLD.roleId=USERROLE.id and METADATAROLEACTIONFLD.actionId=action.id and" +
                " METADATAROLEACTIONFLD.metadatatableId=METADATATABLE.id and METADATAROLEACTIONFLD.metadatatblfldId=METADATATBLFLD.id and" +
                " METADATAROLEACTIONFLD.urlId=URLKEY.id ORDER BY METADATAROLEACTIONFLD.id DESC LIMIT " + page_size + ") a ORDER BY a.id  ASC";
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(METADATAROLEACTIONFLD.id) count FROM METADATATABLE,CLIENT,URLKEY,METADATATBLFLD," +
            " METADATAROLEACTIONFLD,USERROLE,action where METADATAROLEACTIONFLD.DeleteFlag=0 and METADATAROLEACTIONFLD.clientId=CLIENT.id and" +
            " METADATAROLEACTIONFLD.roleId=USERROLE.id and METADATAROLEACTIONFLD.actionId=action.id and" +
            " METADATAROLEACTIONFLD.metadatatableId=METADATATABLE.id and METADATAROLEACTIONFLD.metadatatblfldId=METADATATBLFLD.id and" +
            " METADATAROLEACTIONFLD.urlId=URLKEY.id;";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function deleteTableFieldAction(data, cb) {
    let sql = "Update METADATAROLEACTIONFLD set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function mapTableUrl(data, cb) {
    let sql = 'insert into METADATAURLMAP (metadatatableId,urlId,createbyid) values (' + data.tableId + ',' + data.urlId + ',' + data.createdBy + ');';
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

            cb(null, true, result.insertId);
        }
    });
}

function getTableUrlMap(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT METADATAURLMAP.id,URLKEY.URL url,METADATATABLE.name  FROM METADATATABLE,METADATAURLMAP," +
                " URLKEY where METADATAURLMAP.id > " + offset + " and METADATAURLMAP.DeleteFlag=0 and METADATAURLMAP.metadatatableId=METADATATABLE.id and" +
                " METADATAURLMAP.urlId=URLKEY.id ORDER BY METADATAURLMAP.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT METADATAURLMAP.id,URLKEY.URL url,METADATATABLE.name  FROM METADATATABLE,METADATAURLMAP," +
                " URLKEY where METADATAURLMAP.id < " + offset + " and METADATAURLMAP.DeleteFlag=0 and METADATAURLMAP.metadatatableId=METADATATABLE.id and" +
                " METADATAURLMAP.urlId=URLKEY.id ORDER BY METADATAURLMAP.id DESC LIMIT " + page_size + ") a ORDER BY a.id  ASC";
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(METADATAURLMAP.id) count FROM METADATATABLE,METADATAURLMAP," +
            "URLKEY where METADATAURLMAP.DeleteFlag=0 and METADATAURLMAP.metadatatableId=METADATATABLE.id and METADATAURLMAP.urlId=URLKEY.id;";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function deleteTableUrl(data, cb) {
    let sql = "Update METADATAURLMAP set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function getUrlByTable(data, cb) {
    let sql = 'SELECT URLKEY.id,URLKEY.URL name FROM METADATAURLMAP,URLKEY where METADATAURLMAP.DeleteFlag=0 and METADATAURLMAP.metadatatableId=' + data.tableId + ' and METADATAURLMAP.urlId=URLKEY.id;';

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function mapTableUserAction(data, cb) {
    function deleteData(callback) {
        let sql = 'delete from METADATAUSERACTIONTBL where clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + ' and urlId=' + data.urlId + ' and userId=' + data.refer_user_id;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, true);
            }
        });
    }

    function insertData(callback) {
        let count = 0;
        for (let i = 0; i < data.actionIds.length; i++) {
            let sql = 'insert into METADATAUSERACTIONTBL (roleId,clientId,actionId,metadatatableId,urlId,userId,createbyid) values (' + data.roleId + ',' + data.clientId + ',' + data.actionIds[i] + ',' + data.tableId + ',' + data.urlId + ',' + data.refer_user_id + ',' + data.createdBy + ');';
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    count++;
                    if (data.actionIds.length === count) {
                        callback(null, true);
                    }
                }
            });
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}


function getTableUserWiseActions(data, cb) {
    let sql = 'SELECT action.id,name FROM action,METADATAUSERACTIONTBL where METADATAUSERACTIONTBL.DeleteFlag=0 and action.id=METADATAUSERACTIONTBL.actionId and METADATAUSERACTIONTBL.clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + '  and urlId=' + data.urlId + ' and userId=' + data.refer_user_id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTableUserActionMap(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT METADATAUSERACTIONTBL.id,METADATATABLE.name tableName,URLKEY.URL url,USER.NAME user,' +
                ' USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action FROM METADATATABLE,CLIENT,USER,URLKEY,' +
                ' METADATAUSERACTIONTBL,USERROLE,action where METADATAUSERACTIONTBL.id > ' + offset + ' and METADATAUSERACTIONTBL.DeleteFlag=0 and METADATAUSERACTIONTBL.clientId=CLIENT.id' +
                ' and METADATAUSERACTIONTBL.roleId=USERROLE.id and METADATAUSERACTIONTBL.actionId=action.id and' +
                ' METADATAUSERACTIONTBL.metadatatableId=METADATATABLE.id and METADATAUSERACTIONTBL.urlId=URLKEY.id and METADATAUSERACTIONTBL.userId=USER.id ORDER BY METADATAUSERACTIONTBL.id ASC LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'SELECT * from (SELECT METADATAUSERACTIONTBL.id,METADATATABLE.name tableName,URLKEY.URL url,USER.NAME user,' +
                ' USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action FROM METADATATABLE,CLIENT,USER,URLKEY,' +
                ' METADATAUSERACTIONTBL,USERROLE,action where METADATAUSERACTIONTBL.id < ' + offset + ' and METADATAUSERACTIONTBL.DeleteFlag=0 and METADATAUSERACTIONTBL.clientId=CLIENT.id' +
                ' and METADATAUSERACTIONTBL.roleId=USERROLE.id and METADATAUSERACTIONTBL.actionId=action.id and' +
                ' METADATAUSERACTIONTBL.metadatatableId=METADATATABLE.id and METADATAUSERACTIONTBL.urlId=URLKEY.id and METADATAUSERACTIONTBL.userId=USER.id ORDER BY METADATAUSERACTIONTBL.id DESC LIMIT ' + page_size + ') a ORDER BY a.id  ASC';
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(METADATAUSERACTIONTBL.id) count FROM METADATATABLE,CLIENT,USER,URLKEY,' +
            ' METADATAUSERACTIONTBL,USERROLE,action where METADATAUSERACTIONTBL.DeleteFlag=0 and METADATAUSERACTIONTBL.clientId=CLIENT.id' +
            ' and METADATAUSERACTIONTBL.roleId=USERROLE.id and METADATAUSERACTIONTBL.actionId=action.id and' +
            ' METADATAUSERACTIONTBL.metadatatableId=METADATATABLE.id and METADATAUSERACTIONTBL.urlId=URLKEY.id and METADATAUSERACTIONTBL.userId=USER.id;'
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function deleteTableUserAction(data, cb) {
    let sql = "Update METADATAUSERACTIONTBL set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function mapTableFieldUserAction(data, cb) {
    function deleteData(callback) {
        let sql = 'delete from METADATAUSERACTIONFLD where clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + ' and metadatatblfldId=' + data.fieldId + ' and urlId=' + data.urlId + ' and userId=' + data.refer_user_id;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, true);
            }
        });
    }

    function insertData(callback) {
        let count = 0;
        for (let i = 0; i < data.actionIds.length; i++) {
            let sql = 'insert into METADATAUSERACTIONFLD (roleId,clientId,actionId,metadatatableId,metadatatblfldId,urlId,userId,createbyid) values (' + data.roleId + ',' + data.clientId + ',' + data.actionIds[i] + ',' + data.tableId + ',' + data.fieldId + ',' + data.urlId + ',' + data.refer_user_id + ',' + data.createdBy + ');';
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    count++;
                    if (data.actionIds.length === count) {
                        callback(null, true);
                    }
                }
            });
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}


function getTableFieldUserWiseActions(data, cb) {
    let sql = 'SELECT action.id,name FROM action,METADATAUSERACTIONFLD where METADATAUSERACTIONFLD.DeleteFlag=0 and action.id=METADATAUSERACTIONFLD.actionId and METADATAUSERACTIONFLD.clientId=' + data.clientId + ' and roleId=' + data.roleId + ' and metadatatableId=' + data.tableId + ' and metadatatblfldId=' + data.fieldId + ' and urlId=' + data.urlId + ' and userId=' + data.refer_user_id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTableFieldUserActionMap(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT METADATAUSERACTIONFLD.id,METADATATABLE.name tableName, URLKEY.URL url,USER.NAME user,' +
                ' METADATATBLFLD.fieldName tableField,USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action' +
                ' FROM METADATATABLE,CLIENT,URLKEY,METADATATBLFLD,METADATAUSERACTIONFLD,USER,USERROLE,action where' +
                ' METADATAUSERACTIONFLD.id > ' + offset + ' and METADATAUSERACTIONFLD.DeleteFlag=0 and METADATAUSERACTIONFLD.clientId=CLIENT.id and' +
                ' METADATAUSERACTIONFLD.roleId=USERROLE.id and METADATAUSERACTIONFLD.actionId=action.id and' +
                ' METADATAUSERACTIONFLD.metadatatableId=METADATATABLE.id and METADATAUSERACTIONFLD.metadatatblfldId=METADATATBLFLD.id' +
                ' and METADATAUSERACTIONFLD.urlId=URLKEY.id and METADATAUSERACTIONFLD.userId=USER.id ORDER BY METADATAUSERACTIONFLD.id ASC LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'SELECT * from (SELECT METADATAUSERACTIONFLD.id,METADATATABLE.name tableName, URLKEY.URL url,USER.NAME user,' +
                ' METADATATBLFLD.fieldName tableField,USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action' +
                ' FROM METADATATABLE,CLIENT,URLKEY,METADATATBLFLD,METADATAUSERACTIONFLD,USER,USERROLE,action where' +
                ' METADATAUSERACTIONFLD.id < ' + offset + ' and METADATAUSERACTIONFLD.DeleteFlag=0 and METADATAUSERACTIONFLD.clientId=CLIENT.id and' +
                ' METADATAUSERACTIONFLD.roleId=USERROLE.id and METADATAUSERACTIONFLD.actionId=action.id and' +
                ' METADATAUSERACTIONFLD.metadatatableId=METADATATABLE.id and METADATAUSERACTIONFLD.metadatatblfldId=METADATATBLFLD.id' +
                ' and METADATAUSERACTIONFLD.urlId=URLKEY.id and METADATAUSERACTIONFLD.userId=USER.id ORDER BY METADATAUSERACTIONFLD.id DESC LIMIT ' + page_size + ') a ORDER BY a.id  ASC';
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(METADATAUSERACTIONFLD.id) count' +
            ' FROM METADATATABLE,CLIENT,URLKEY,METADATATBLFLD,METADATAUSERACTIONFLD,USER,USERROLE,action where' +
            ' METADATAUSERACTIONFLD.DeleteFlag=0 and METADATAUSERACTIONFLD.clientId=CLIENT.id and' +
            ' METADATAUSERACTIONFLD.roleId=USERROLE.id and METADATAUSERACTIONFLD.actionId=action.id and' +
            ' METADATAUSERACTIONFLD.metadatatableId=METADATATABLE.id and METADATAUSERACTIONFLD.metadatatblfldId=METADATATBLFLD.id' +
            ' and METADATAUSERACTIONFLD.urlId=URLKEY.id and METADATAUSERACTIONFLD.userId=USER.id;';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function deleteTableFieldUserAction(data, cb) {
    let sql = "Update METADATAUSERACTIONFLD set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function insertWorkFlow(data, cb) {
    var sql = "Select * from WORKFLOW  where name ='" + data.name + "'  and DeleteFlag = '0' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into WORKFLOW(name, descriptions,  createbyid)" +
                    " values ( '" + data.name + "' ,'" + data.des + "', " + data.createdBy + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function updateWorkFlow(data, cb) {
    var sql = "Select * from WORKFLOW  where name ='" + data.name + "'  and DeleteFlag = '0' and id !=" + data.id;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "Update WORKFLOW set name='" + data.name + "' , descriptions = '" + data.des + "',modifybyid = " + data.user_id + ",modifydate=NOW() where id = " + data.id + " ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.affectedRows);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function deleteWorkFlow(data, cb) {
    let sql = "Update WORKFLOW set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function getWorkFlow(data, cb) {
    function workflow(callback) {
        var str = " select a.id, a.name, a.descriptions des " +
            " from WORKFLOW a " +
            " where a.DeleteFlag = '0' ";
        con.query(str, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function workflowIndicator(callback) {
        var str = 'select * from WORKFLOW_INDICATOR;';
        con.query(str, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([workflow, workflowIndicator], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, results);
        }
    })
}

function insertWorkFlowComponent(data, cb) {
    var sql = "Select * from WORKFLOWCOMPONENT  where work_flow_id = " + data.work_flow_id + " and TABLENAME ='" + data.tableName + "' and PKFIELDNAME = '" + data.pkFieldnm + "'  and DeleteFlag = '0' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into WORKFLOWCOMPONENT(work_flow_id, TABLENAME, PKFIELDNAME, createbyid)" +
                    " values (" + data.work_flow_id + ", '" + data.tableName + "' ,'" + data.pkFieldnm + "', " + data.createdBy + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function deleteWorkFlowComponent(data, cb) {
    let sql = "Update WORKFLOWCOMPONENT set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function getWorkFlowComponent(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " select b.id, a.name workflow, b.TABLENAME tableName, b.PKFIELDNAME tableField" +
                " from WORKFLOW a , WORKFLOWCOMPONENT b " +
                " where b.id > " + offset + " and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.id = b.work_flow_id ORDER BY b.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "SELECT * from (select b.id, a.name workflow, b.TABLENAME tableName, b.PKFIELDNAME tableField" +
                " from WORKFLOW a , WORKFLOWCOMPONENT b " +
                " where b.id < " + offset + " and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.id = b.work_flow_id ORDER BY b.id DESC LIMIT " + page_size + ") Z ORDER BY Z.id  ASC";
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(b.id) count " +
            " from WORKFLOW a , WORKFLOWCOMPONENT b " +
            " where a.DeleteFlag = '0' " +
            " and b.DeleteFlag = '0' " +
            " and a.id = b.work_flow_id ";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function insertWorkFlowComponentDetails(data, cb) {
    var sql = "Select * from WORKFLOWCOMPONENTDETAILS  where work_flow_id = " + data.work_flow_id + " and TABLENAME ='" + data.tableName + "' " +
        " and FIELDNAME = '" + data.fieldnm + "'  and DeleteFlag = '0' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT into WORKFLOWCOMPONENTDETAILS(work_flow_id, TABLENAME, FIELDNAME, FIELDTYPE, RESOLUTIONFIELD, createbyid)" +
                    " values (" + data.work_flow_id + ", '" + data.tableName + "' ,'" + data.fieldnm + "','" + data.fieldType + "','" + data.resolutionField + "', " + data.createdBy + " ) ";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate Records");
            }
        }
    });
}

function deleteWorkFlowComponentDetails(data, cb) {
    let sql = "Update WORKFLOWCOMPONENTDETAILS set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() where id = " + data.id + ";";

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, "Deleted successfully");
            } else {
                cb(null, false, "Data is not deleted");
            }
        }
    });
}

function getWorkFlowComponentDetails(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " select b.id, a.name workflow, b.TABLENAME tableName, b.FIELDNAME tableField, b.FIELDTYPE fieldType, b.RESOLUTIONFIELD resolution" +
                " from WORKFLOW a , WORKFLOWCOMPONENTDETAILS b " +
                " where b.id > " + offset + " and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.id = b.work_flow_id  ORDER BY b.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "SELECT * from (select b.id, a.name workflow, b.TABLENAME tableName, b.FIELDNAME tableField, b.FIELDTYPE fieldType, b.RESOLUTIONFIELD resolution" +
                " from WORKFLOW a , WORKFLOWCOMPONENTDETAILS b " +
                " where b.id < " + offset + " and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' " +
                " and a.id = b.work_flow_id  ORDER BY b.id DESC LIMIT " + page_size + ") Z ORDER BY Z.id  ASC";
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(b.id) count " +
            " from WORKFLOW a , WORKFLOWCOMPONENTDETAILS b " +
            " where a.DeleteFlag = '0' " +
            " and b.DeleteFlag = '0' " +
            " and a.id = b.work_flow_id ";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

// function insertWFCClientBackWardNotify(data, cb) {
//     logData('insertWFCClientBackWardNotify--------------------------' + JSON.stringify(data))
//     if (data.radioButtonId == 4) {
//         var str1 = " select * from WFCCLIENT_back_notify where clientId =" + data.clientId + " and categoryId=" + data.categoryId + " " +
//             " and workflowId=" + data.workflowId + " and work_flow_component_id=" + data.work_flow_component_id + " and flowTypeId !=4 and  DeleteFlag='0' " +
//             " and ticket_type=" + data.ticket_type + "";
//         logData('radioButtonId====4==------------------------------------' + str1)
//         con.query(str1, function (err1, result1) {
//             if (err1) {
//                 logData(err1);
//                 cb(err1, null);
//             } else {
//                 logData('result1-----------------------' + JSON.stringify(result1))
//                 if (result1.length > 0) {
//                     cb(null, false, "Duplicate data");
//                 } else {
//                     var str = " Insert into WFCCLIENT_back_notify (clientId, categoryId, workflowId, work_flow_component_id, flowTypeId, createbyid,ticket_type) " +
//                         " values (" + data.clientId + "," + data.categoryId + "," + data.workflowId + "," + data.work_flow_component_id + "," + data.radioButtonId + "," + data.createdBy + "," + data.ticket_type + ") ";
//                     con.query(str, function (err, result) {
//                         if (err) {
//                             logData(err);
//                             cb(err, null);
//                         } else {
//                             cb(null, true, result);
//                         }
//                     });
//                 }
//             }
//         });
//     } else {
//
//         var str1 = " select * from WFCCLIENT_back_notify where clientId =" + data.clientId + " and categoryId=" + data.categoryId + " " +
//             " and workflowId=" + data.workflowId + " and work_flow_component_id=" + data.work_flow_component_id + " " +
//             " and ticket_type=" + data.ticket_type + " and DeleteFlag = '0' ";
//         con.query(str1, function (err1, result1) {
//             if (err1) {
//                 logData(err1);
//                 cb(err1, null);
//             } else {
//                 if (result1.length > 0) {
//                     cb(null, false, "Duplicate data");
//                 } else {
//                     var str = " Insert into WFCCLIENT_back_notify (clientId, categoryId, workflowId, work_flow_component_id, flowTypeId, createbyid,ticket_type) " +
//                         " values (" + data.clientId + "," + data.categoryId + "," + data.workflowId + "," + data.work_flow_component_id + "," + data.radioButtonId + "," + data.createdBy + "," + data.ticket_type + ") ";
//                     con.query(str, function (err, result) {
//                         if (err) {
//                             logData(err);
//                             cb(err, null);
//                         } else {
//                             cb(null, true, result);
//                         }
//                     });
//                 }
//             }
//         });
//     }
// }

function insertWFCClientBackWardNotify(data, cb) {
    logData('insertWFCClientBackWardNotify--------------------------' + JSON.stringify(data));

    function deleteData(callback) {
        if (data.category_id.length > 1) {
            if (data.radioButtonId == 4) {
                var sql = "delete from WFCCLIENT_back_notify where clientId =" + data.clientId + " " +
                    " and workflowId=" + data.workflowId + " and work_flow_component_id=" + data.work_flow_component_id + " and flowTypeId !=4 and  DeleteFlag='0' " +
                    " and ticket_type=" + data.ticket_type + "";
            } else {
                var sql = "delete from WFCCLIENT_back_notify where clientId =" + data.clientId + " " +
                    " and workflowId=" + data.workflowId + " and work_flow_component_id=" + data.work_flow_component_id + " " +
                    " and ticket_type=" + data.ticket_type + " and DeleteFlag = '0' ";
            }
            con.query(sql, [data.clientId, data.ticketTypeId, data.status_sequence], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, true);
                }
            });
        } else {
            callback(null, true);
        }
    }

    function insertData(cb) {
        let count = 0;
        for (let i = 0; i < data.category_id.length; i++) {
            if (data.radioButtonId == 4) {
                var str1 = " select * from WFCCLIENT_back_notify where clientId =" + data.clientId + " and categoryId=" + data.category_id[i] + " " +
                    " and workflowId=" + data.workflowId + " and work_flow_component_id=" + data.work_flow_component_id + " and flowTypeId !=4 and  DeleteFlag='0' " +
                    " and ticket_type=" + data.ticket_type + "";
                logData('radioButtonId====4==------------------------------------' + str1)
                con.query(str1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        logData('result1-----------------------' + JSON.stringify(result1))
                        if (result1.length > 0) {
                            cb(null, false, "Duplicate data");
                        } else {
                            var str = " Insert into WFCCLIENT_back_notify (clientId, categoryId, workflowId, work_flow_component_id, flowTypeId, createbyid,ticket_type) " +
                                " values (" + data.clientId + "," + data.category_id[i] + "," + data.workflowId + "," + data.work_flow_component_id + "," + data.radioButtonId + "," + data.createdBy + "," + data.ticket_type + ") ";
                            con.query(str, function (err, result) {
                                if (err) {
                                    logData(err);
                                    cb(err, null);
                                } else {
                                    count++;
                                    if (data.category_id.length === count) {
                                        cb(null, true, result);
                                    }
                                }
                            });
                        }
                    }
                });
            } else {
                var str1 = " select * from WFCCLIENT_back_notify where clientId =" + data.clientId + " and categoryId=" + data.category_id[i] + " " +
                    " and workflowId=" + data.workflowId + " and work_flow_component_id=" + data.work_flow_component_id + " " +
                    " and ticket_type=" + data.ticket_type + " and DeleteFlag = '0' ";
                con.query(str1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result1.length > 0) {
                            cb(null, false, "Duplicate data");
                        } else {
                            var str = " Insert into WFCCLIENT_back_notify (clientId, categoryId, workflowId, work_flow_component_id, flowTypeId, createbyid,ticket_type) " +
                                " values (" + data.clientId + "," + data.category_id[i] + "," + data.workflowId + "," + data.work_flow_component_id + "," + data.radioButtonId + "," + data.createdBy + "," + data.ticket_type + ") ";
                            con.query(str, function (err, result) {
                                if (err) {
                                    logData(err);
                                    cb(err, null);
                                } else {
                                    count++;
                                    if (data.category_id.length === count) {
                                        cb(null, true, result);
                                    }
                                }
                            });
                        }
                    }
                });
            }
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}


function changeParentId(data, cb) {
    var str = " Select id,CLIENTID, categoryId, coalesce(userId,0) userId, workflowId, work_flow_component_id, WORKFLOWLEVEL, STARTENDFLOWINDICATOR, supportGroupLevelId, parent_wfcclient_id, createbyid " +
        " from WFCCLIENT where CLIENTID = " + data.clientId + " and categoryId = " + data.categoryId + " and workflowId = " + data.workflowId + " " +
        " and work_flow_component_id = " + data.work_flow_component_id + " and ticket_type = " + data.ticket_type + " and DeleteFlag = '0' and flowIndicator = 'B'  order by id ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 2;
                if (result.length > 1) {
                    for (var i = 1; i < result.length; i++) {
                        var str1 = " update WFCCLIENT set parent_wfcclient_id =" + result[(i - 1)].id + " where id = " + result[i].id + " ";
                        con.query(str1, function (err1, result1) {
                            if (err1) {
                                logData(err1);
                                cb(err1, null);
                            } else {
                                if (flg == result.length) {
                                    cb(null, true, "Successfully Created");
                                }
                                flg++;
                            }
                        });
                    }
                } else {
                    cb(null, true, "Successfully Created");
                }

            } else {
                cb(null, false, "Some error is occurred");
            }
        }
    });
}

function changeParentIdTicketWise(data, cb) {
    var str = " Select id,CLIENTID, ticketId, categoryId, userId, STARTENDFLOWINDICATOR, supportGroupLevelId, parent_wfcclient_id, createbyid " +
        " from WFCCLIENT_backward_ticketWise where CLIENTID = " + data.clientId + " and ticketId =" + data.ticketId + " " +
        " and categoryId = '" + data.categoryId + "' and DeleteFlag = '0' order by id ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 2;
                for (var i = 1; i < result.length; i++) {
                    var str1 = " update WFCCLIENT_backward_ticketWise set parent_wfcclient_id =" + result[(i - 1)].id + ",STARTENDFLOWINDICATOR=" + i + " where id = " + result[i].id + " ";
                    con.query(str1, function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {
                            if (flg == result.length) {
                                cb(null, true, "Successfully Created");
                            }
                            flg++;
                        }
                    });
                }
            } else {
                cb(null, false, "Some error is occurred");
            }
        }
    });
}

function checkBackWorkFlowDefined(data, cb) {
    var str = " Select id,flowTypeId " +
        " from WFCCLIENT_back_notify where CLIENTID = " + data.clientId + " and categoryId =" + data.categoryId + " " +
        " and workflowId = '" + data.workflowId + "' and work_flow_component_id=" + data.work_flow_component_id + " and DeleteFlag = '0' ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result == null || result.length == 0) {
                cb(null, false, "");
            } else {
                cb(null, true, result[0].flowTypeId);
            }
        }
    });
}

function updateTicketForDeviation(data, cb) {
    let sql = "Update ticket set isDeviation = 'true' where id = " + data.id;
    con.query(sql, function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result);
        }
    });
}

function insertWFCClientBackWard_old(data, cb) {
    // checkBackWorkFlowDefined(data, function (err, success, details) {
    //
    //  });

    insertWFCClientBackWardNotify(data, function (err, success, details) {
        if (success) {
            if (data.radioButtonId == '4') {
                insertWFCClient(data, function (err, success, details) {
                    if (success) {
                        cb(null, true, "Successfully Created");
                    } else {
                        cb(null, false, details);
                    }
                });
            } else if (data.radioButtonId == '1') {
                data.supportGroupLevelId = 0;
                data.parent_wfcclient_id = 0;
                data.WORKFLOWLEVEL = "End-3";
                data.STARTENDFLOWINDICATOR = 3;
                data.sfIndecator = 3;
                insertWFCClient(data, function (err, success, details) {
                    if (success) {
                        cb(null, true, "Successfully Created");
                    } else {
                        cb(null, false, details);
                    }
                });
            } else if (data.radioButtonId == '2') {
                var str = " Select id,CLIENTID, categoryId, coalesce(userId,0) userId, workflowId, work_flow_component_id, " +
                    " WORKFLOWLEVEL, STARTENDFLOWINDICATOR, supportGroupLevelId, parent_wfcclient_id, createbyid,ticket_type " +
                    " from WFCCLIENT where CLIENTID = " + data.clientId + " and categoryId = " + data.categoryId + " and workflowId = " + data.workflowId + " " +
                    " and work_flow_component_id = " + data.work_flow_component_id + " and ticket_type = " + data.ticket_type + " and DeleteFlag = '0' " +
                    " and flowIndicator = 'F' order by id desc ";
                con.query(str, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = "2";
                            var sqlCounter = 0;
                            var insSql = ""
                            for (var i = 1; i < result.length; i++) {

                                var fld = {
                                    "clientId": result[i].CLIENTID,
                                    "categoryId": result[i].categoryId,
                                    "wfLevel": result[i].WORKFLOWLEVEL,
                                    "sfIndecator": i,
                                    "supportGroupLevelId": result[i].supportGroupLevelId,
                                    "parent_wfcclient_id": 0,
                                    "workflowId": result[i].workflowId,
                                    "work_flow_component_id": result[i].work_flow_component_id,
                                    "user_id": result[i].userId,
                                    "createdBy": data.createdBy,
                                    "ticket_type": data.ticket_type,
                                    "flowIndicator": 'B'
                                };

                                if (sqlCounter > 0) {
                                    insSql += "; ";
                                }
                                sqlCounter++;
                                if (fld.userId) {
                                    insSql += "INSERT into WFCCLIENT(`CLIENTID`, `work_flow_component_id`, `WORKFLOWLEVEL`, `STARTENDFLOWINDICATOR`,`supportGroupLevelId`,`parent_wfcclient_id`,`workflowId`,`categoryId`,`userId`,`flowIndicator`, `createbyid`,`ticket_type`) values  (" + fld.clientId + ", " + fld.work_flow_component_id + " ,'" + fld.wfLevel + "','" + fld.sfIndecator + "'," + fld.supportGroupLevelId + "," +
                                        " " + fld.parent_wfcclient_id + ", " + fld.workflowId + " ," + fld.categoryId + ", " + fld.userId + " , '" + fld.flowIndicator + "'," + fld.createdBy + " ," + fld.ticket_type + ") ";
                                } else {
                                    insSql += "INSERT into WFCCLIENT(`CLIENTID`, `work_flow_component_id`, `WORKFLOWLEVEL`, `STARTENDFLOWINDICATOR`,`supportGroupLevelId`,`parent_wfcclient_id`,`workflowId`,`categoryId`,`userId`,`flowIndicator`, `createbyid`,`ticket_type`) values  (" + fld.clientId + ", " + fld.work_flow_component_id + " ,'" + fld.wfLevel + "','" + fld.sfIndecator + "'," + fld.supportGroupLevelId + "," +
                                        " " + fld.parent_wfcclient_id + ", " + fld.workflowId + " ," + fld.categoryId + ", '0' , '" + fld.flowIndicator + "'," + fld.createdBy + " ," + fld.ticket_type + ") ";
                                }
                                /*insertWFCClient(fld, function (err1, success1, details) {
                                    if (success1) {
                                        if (flg == result.length) {
                                            changeParentId(data, function (err2, success2, details2) {
                                                cb(null, true, "Successfully Created");
                                            });
                                        }
                                        flg++;

                                    } else {
                                        cb(null, false, details);
                                    }
                                });*/

                                /*setTimeout(function () {
                                }, 2000)*/
                            }
                            if (insSql !== "") {
                                con.query(insSql, function (err11, result11) {
                                    if (err11) {
                                        logData(err11);
                                        cb(err11, null);
                                    } else {
                                        changeParentId(data, function (err2, success2, details2) {
                                            cb(null, true, "Successfully Created");
                                        });
                                    }
                                });
                            } else {
                                cb(null, false, "Forward Workflow is not defined1.");
                            }
                        } else {
                            cb(null, false, "Forward Workflow is not defined.");
                        }
                    }
                });
            } else {
                cb(null, true, "OK");
            }
        } else {
            cb(null, false, details);
        }
    });
}

function insertWFCClientBackWard(data, cb) {
    // checkBackWorkFlowDefined(data, function (err, success, details) {
    //
    //  });

    insertWFCClientBackWardNotify(data, function (err, success, details) {
        if (success) {
            if (data.radioButtonId == '4') {
                insertWFCClient(data, function (err, success, details) {
                    if (success) {
                        cb(null, true, "Successfully Created");
                    } else {
                        cb(null, false, details);
                    }
                });
            } else if (data.radioButtonId == '1') {
                data.supportGroupLevelId = 0;
                data.parent_wfcclient_id = 0;
                data.WORKFLOWLEVEL = "End-3";
                data.STARTENDFLOWINDICATOR = 3;
                data.sfIndecator = 3;
                insertWFCClient(data, function (err, success, details) {
                    if (success) {
                        cb(null, true, "Successfully Created");
                    } else {
                        cb(null, false, details);
                    }
                });
            } else if (data.radioButtonId == '5') {
                data.supportGroupLevelId = 0;
                data.parent_wfcclient_id = 0;
                data.WORKFLOWLEVEL = "End-3";
                data.STARTENDFLOWINDICATOR = 3;
                data.sfIndecator = 3;
                insertWFCClient(data, function (err, success, details) {
                    if (success) {
                        cb(null, true, "Successfully Created");
                    } else {
                        cb(null, false, details);
                    }
                });
            } else if (data.radioButtonId == '2') {
                var str = " Select id,CLIENTID, categoryId, coalesce(userId,0) userId, workflowId, work_flow_component_id, " +
                    " WORKFLOWLEVEL, STARTENDFLOWINDICATOR, supportGroupLevelId, parent_wfcclient_id, createbyid,ticket_type " +
                    " from WFCCLIENT where CLIENTID = " + data.clientId + " and categoryId = " + data.categoryId + " and workflowId = " + data.workflowId + " " +
                    " and work_flow_component_id = " + data.work_flow_component_id + " and ticket_type = " + data.ticket_type + " and DeleteFlag = '0' " +
                    " and flowIndicator = 'F' order by id desc ";
                con.query(str, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = "2";
                            var sqlCounter = 0;
                            var insSql = ""
                            for (var i = 1; i < result.length; i++) {

                                var fld = {
                                    "clientId": result[i].CLIENTID,
                                    "categoryId": result[i].categoryId,
                                    "wfLevel": result[i].WORKFLOWLEVEL,
                                    "sfIndecator": i,
                                    "supportGroupLevelId": result[i].supportGroupLevelId,
                                    "parent_wfcclient_id": 0,
                                    "workflowId": result[i].workflowId,
                                    "work_flow_component_id": result[i].work_flow_component_id,
                                    "user_id": result[i].userId,
                                    "createdBy": data.createdBy,
                                    "ticket_type": data.ticket_type,
                                    "flowIndicator": 'B'
                                };

                                if (sqlCounter > 0) {
                                    insSql += "; ";
                                }
                                sqlCounter++;
                                if (fld.userId) {
                                    insSql += "INSERT into WFCCLIENT(`CLIENTID`, `work_flow_component_id`, `WORKFLOWLEVEL`, `STARTENDFLOWINDICATOR`,`supportGroupLevelId`,`parent_wfcclient_id`,`workflowId`,`categoryId`,`userId`,`flowIndicator`, `createbyid`,`ticket_type`) values  (" + fld.clientId + ", " + fld.work_flow_component_id + " ,'" + fld.wfLevel + "','" + fld.sfIndecator + "'," + fld.supportGroupLevelId + "," +
                                        " " + fld.parent_wfcclient_id + ", " + fld.workflowId + " ," + fld.categoryId + ", " + fld.userId + " , '" + fld.flowIndicator + "'," + fld.createdBy + " ," + fld.ticket_type + ") ";
                                } else {
                                    insSql += "INSERT into WFCCLIENT(`CLIENTID`, `work_flow_component_id`, `WORKFLOWLEVEL`, `STARTENDFLOWINDICATOR`,`supportGroupLevelId`,`parent_wfcclient_id`,`workflowId`,`categoryId`,`userId`,`flowIndicator`, `createbyid`,`ticket_type`) values  (" + fld.clientId + ", " + fld.work_flow_component_id + " ,'" + fld.wfLevel + "','" + fld.sfIndecator + "'," + fld.supportGroupLevelId + "," +
                                        " " + fld.parent_wfcclient_id + ", " + fld.workflowId + " ," + fld.categoryId + ", '0' , '" + fld.flowIndicator + "'," + fld.createdBy + " ," + fld.ticket_type + ") ";
                                }
                                /*insertWFCClient(fld, function (err1, success1, details) {
                                    if (success1) {
                                        if (flg == result.length) {
                                            changeParentId(data, function (err2, success2, details2) {
                                                cb(null, true, "Successfully Created");
                                            });
                                        }
                                        flg++;

                                    } else {
                                        cb(null, false, details);
                                    }
                                });*/

                                /*setTimeout(function () {
                                }, 2000)*/
                            }
                            if (insSql !== "") {
                                con.query(insSql, function (err11, result11) {
                                    if (err11) {
                                        logData(err11);
                                        cb(err11, null);
                                    } else {
                                        changeParentId(data, function (err2, success2, details2) {
                                            cb(null, true, "Successfully Created");
                                        });
                                    }
                                });
                            } else {
                                cb(null, false, "Forward Workflow is not defined1.");
                            }
                        } else {
                            cb(null, false, "Forward Workflow is not defined.");
                        }
                    }
                });
            } else {
                cb(null, true, "OK");
            }
        } else {
            cb(null, false, details);
        }
    });
}


function insertWFCClient(data, cb) {
    // logData("insert workflow --------------------1111111111------------------------------>" + JSON.stringify(data));
    function deleteData(callback) {
        if (data.category_id.length > 1) {
            // let sql = 'delete from ticket_status_wise_groupOrUser_selection where clientId=? and ticketTypeId=? and status_sequence=?';
            if (data.refer_user_id) {
                var sql = "delete from WFCCLIENT  where CLIENTID = " + data.clientId + " and work_flow_component_id =" + data.work_flow_component_id + "  and ticket_type =" + data.ticket_type + " " +
                    " and WORKFLOWLEVEL = '" + data.wfLevel + "' and workflowId=" + data.workflowId + " and DeleteFlag = '0' and userId=" + data.refer_user_id + " and flowIndicator='" + data.flowIndicator + "'";
            } else {
                var sql = "delete from WFCCLIENT  where CLIENTID = " + data.clientId + " and work_flow_component_id =" + data.work_flow_component_id + " and ticket_type =" + data.ticket_type + " " +
                    " and WORKFLOWLEVEL = '" + data.wfLevel + "' and workflowId=" + data.workflowId + " and DeleteFlag = '0' and flowIndicator='" + data.flowIndicator + "'";
            }
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, true);
                }
            });
        } else {
            callback(null, true);
        }
    }

    function insertData(cb) {
        let count = 0;
        validateSupportGroupSlaDetails({ 'supportGrpId': data.supportGroupLevelId }, function (err, success, details) {
            if (success) {
                util.logData('success details===' + JSON.stringify(details));
                for (let i = 0; i < data.category_id.length; i++) {
                    if (data.refer_user_id) {
                        var sql = "Select * from WFCCLIENT  where CLIENTID = " + data.clientId + " and work_flow_component_id =" + data.work_flow_component_id + "  and ticket_type =" + data.ticket_type + " " +
                            " and WORKFLOWLEVEL = '" + data.wfLevel + "' and workflowId=" + data.workflowId + " and DeleteFlag = '0' and categoryId= " + data.category_id[i] + " and userId=" + data.refer_user_id + " and supportGroupLevelId= " + data.supportGroupLevelId + " and flowIndicator='" + data.flowIndicator + "'";
                    } else {
                        var sql = "Select * from WFCCLIENT  where CLIENTID = " + data.clientId + " and work_flow_component_id =" + data.work_flow_component_id + " and ticket_type =" + data.ticket_type + " " +
                            " and WORKFLOWLEVEL = '" + data.wfLevel + "' and workflowId=" + data.workflowId + " and DeleteFlag = '0' and categoryId= " + data.category_id[i] + " and supportGroupLevelId= " + data.supportGroupLevelId + " and flowIndicator='" + data.flowIndicator + "'";
                    }
                    util.logData('select sql====' + sql);
                    con.query(sql, function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (result.length === 0) {
                                if (data.refer_user_id) {
                                    var sql1 = "INSERT into WFCCLIENT(CLIENTID, work_flow_component_id, WORKFLOWLEVEL, STARTENDFLOWINDICATOR, " +
                                        " supportGroupLevelId,parent_wfcclient_id,workflowId,categoryId,userId,flowIndicator, createbyid,ticket_type)" +
                                        " values (" + data.clientId + ", " + data.work_flow_component_id + " ,'" + data.wfLevel + "','" + data.sfIndecator + "'," + data.supportGroupLevelId + "," +
                                        " " + data.parent_wfcclient_id + ", " + data.workflowId + " ," + data.category_id[i] + ", " + data.refer_user_id + " , '" + data.flowIndicator + "'," + data.createdBy + " ," + data.ticket_type + ") ";
                                } else {
                                    var sql1 = "INSERT into WFCCLIENT(CLIENTID, work_flow_component_id, WORKFLOWLEVEL, STARTENDFLOWINDICATOR, " +
                                        " supportGroupLevelId,parent_wfcclient_id,workflowId,categoryId,flowIndicator,createbyid,ticket_type)" +
                                        " values (" + data.clientId + ", " + data.work_flow_component_id + " ,'" + data.wfLevel + "','" + data.sfIndecator + "'," + data.supportGroupLevelId + "," +
                                        " " + data.parent_wfcclient_id + ", " + data.workflowId + " ," + data.category_id[i] + ",'" + data.flowIndicator + "'," + data.createdBy + "," + data.ticket_type + " ) ";
                                }
                                con.query(sql1, function (err1, result1) {
                                    if (err1) {
                                        logData(err1);
                                        cb(err1, null);
                                    } else {
                                        count++;
                                        if (data.category_id.length === count) {
                                            // cb(null, true, result1.insertId);
                                            cb(null, true, 'success');
                                        }
                                    }
                                });
                            } else {
                                cb(null, false, "Duplicate Records");
                            }
                        }
                    });
                }
            } else {
                util.logData('details===' + JSON.stringify(details));
                cb(null, false, details);
            }
        });
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            if (results[1][0]) {
                util.logData('insert result===' + JSON.stringify(results[1][0]));
                cb(null, true)
            } else {
                cb(null, false, results[1][1]);
            }
        }
    })
}

function insertWFCClientTicketWise(data, cb) {
    var sql = "Select * from WFCCLIENT_backward_ticketWise  where CLIENTID = " + data.clientId + " and ticketId =" + data.ticketId + " " +
        " and categoryId = '" + data.categoryId + "' and supportGroupLevelId=" + data.supportGroupLevelId + " and DeleteFlag = '0' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            var sql1 = "";
            if (result.length == 0) {
                sql1 = "INSERT into WFCCLIENT_backward_ticketWise(CLIENTID, ticketId, categoryId, userId, supportGroupLevelId, " +
                    " parent_wfcclient_id, createbyid,STARTENDFLOWINDICATOR,workflowId,work_flow_component_id,wfcclient_id)" +
                    " values (" + data.clientId + ", " + data.ticketId + " ," + data.categoryId + "," + data.user_id + "," + data.supportGroupLevelId + ",0," + data.createdBy + ",0," + data.workflowId + " ," + data.work_flow_component_id + " ," + data.wfcclient_id + ") ";
            } else {
                sql1 = "UPDATE WFCCLIENT_backward_ticketWise set userId = " + data.user_id + " " +
                    " where CLIENTID=" + data.clientId + " " +
                    " and ticketId = " + data.ticketId + " " +
                    " and categoryId = " + data.categoryId + " " +
                    " and supportGroupLevelId = " + data.supportGroupLevelId + " and DeleteFlag = '0'  ";
            }
            con.query(sql1, function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    cb(null, true, result1.insertId);
                }
            });

        }
    });
}

function deleteWFCClient(data, cb) {
    let getDtlsSql = "SELECT CLIENTID,categoryId,ticket_type,workflowId,work_flow_component_id FROM WFCCLIENT where id = " + data.id + ";";
    con.query(getDtlsSql, function (getDtlserr, getDtlsresult) {
        if (getDtlserr) {
            logData(getDtlserr);
            cb(getDtlserr, null);
        } else {
            if (getDtlsresult.length > 0) {
                let sql = "Update WFCCLIENT set DeleteFlag = '1',delete_by_id = " + data.user_id + ",DeleteDate=NOW() " +
                    " where CLIENTID = " + getDtlsresult[0].CLIENTID + " and categoryId = " + getDtlsresult[0].categoryId + " and DeleteFlag= '0' " +
                    " and ticket_type = " + getDtlsresult[0].ticket_type + " and flowIndicator = 'F' and workflowId = " + getDtlsresult[0].workflowId + " " +
                    " and work_flow_component_id = " + getDtlsresult[0].work_flow_component_id + " ";
                logData('sql-------------------------------' + sql)
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.affectedRows > 0) {
                            let getFlowTypeSql = "SELECT * FROM WFCCLIENT_back_notify where clientId = " + getDtlsresult[0].CLIENTID + " and categoryId = " + getDtlsresult[0].categoryId + " " +
                                " and ticket_type = " + getDtlsresult[0].ticket_type + " and workflowId = " + getDtlsresult[0].workflowId + " and work_flow_component_id = " + getDtlsresult[0].work_flow_component_id + " " +
                                " and flowTypeId = 2 and DeleteFlag = '0'";
                            con.query(getFlowTypeSql, function (getFlowTypeerr, getFlowTyperesult) {
                                if (getFlowTypeerr) {
                                    logData(getFlowTypeerr);
                                    cb(getFlowTypeerr, null);
                                } else {
                                    if (getFlowTyperesult.length > 0) {
                                        deleteBackwardWorkFlow({
                                            "id": getFlowTyperesult[0].id,
                                            "user_id": data.user_id
                                        }, function (err3, success3, result3) {
                                            if (err3 || !success3) {
                                                logData(err3);
                                                cb(err3, null);
                                            } else {
                                                cb(null, true, "Data is deleted");
                                            }
                                        })
                                    } else {
                                        cb(null, true, "Data is deleted");
                                    }
                                }
                            });
                        } else {
                            cb(null, false, "Data is not deleted");
                        }
                    }
                });
            } else {
                cb(null, false, "Data can not be deleted");
            }
        }
    });
}

// function getWFCClient(data, cb) {
//
//     var str = "select m.*,coalesce(n.WORKFLOWLEVEL,'') parent from (SELECT a.id,b.NAME client, c.ATTRVAL category,coalesce(d.NAME,'') user,f.NAME workflow, " +
//         " concat(g.TABLENAME,'  : ',g.PKFIELDNAME) comp,a.work_flow_component_id component, a.WORKFLOWLEVEL level, a.STARTENDFLOWINDICATOR indicator,a.parent_wfcclient_id , " +
//         " h.LEVELSHORTDESC groupName, (SELECT ATTRVAL FROM TICKETATTRIBUTES where id = a.ticket_type) ticket_type " +
//         " FROM CLIENT b, TICKETATTRIBUTES c , WORKFLOW f, WORKFLOWCOMPONENT g, SUPPORTGROUPLEVEL h, WFCCLIENT a left join USER d on a.userId = d.id " +
//         " where a.CLIENTID=" + data.clientId + " and a.flowIndicator='" + data.indicator + "' and a.CLIENTID = b.id and a.categoryId = c.id and a.workflowId = f.id " +
//         " and a.work_flow_component_id = g.id and a.supportGroupLevelId = h.id and a.DeleteFlag = '0'  and b.DeleteFlag = '0'  and c.DeleteFlag = '0'  " +
//         " and coalesce(d.DeleteFlag,'0') = '0'  and f.DeleteFlag = '0'  and g.DeleteFlag = '0'  and h.DeleteFlag = '0') m left join WFCCLIENT n on m.parent_wfcclient_id = n.id;";
//     con.query(str, function (err, result) {
//         if (err) {
//             logData(err);
//             cb(err, null);
//         } else {
//             cb(null, true, result);
//         }
//     });
// }
function getWFCClient(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select m.*,coalesce(n.WORKFLOWLEVEL,'') parent from (SELECT a.id,b.NAME client, c.ATTRVAL category,coalesce(d.NAME,'') user,f.NAME workflow, " +
                " concat(g.TABLENAME,'  : ',g.PKFIELDNAME) comp,a.work_flow_component_id component, a.WORKFLOWLEVEL level, a.STARTENDFLOWINDICATOR indicator,a.parent_wfcclient_id , " +
                " coalesce((select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id=a.supportGroupLevelId and DeleteFlag = '0'),'Creator') groupName , (SELECT ATTRVAL FROM TICKETATTRIBUTES where id = a.ticket_type) ticket_type " +
                " FROM CLIENT b, TICKETATTRIBUTES c , WORKFLOW f, WORKFLOWCOMPONENT g, WFCCLIENT a left join USER d on a.userId = d.id " +
                " where a.id > " + offset + " and a.CLIENTID=" + data.clientId + " and a.flowIndicator='" + data.indicator + "' and a.CLIENTID = b.id and a.categoryId = c.id and a.workflowId = f.id " +
                " and a.work_flow_component_id = g.id and a.DeleteFlag = '0'  and b.DeleteFlag = '0'  and c.DeleteFlag = '0'  " +
                " and coalesce(d.DeleteFlag,'0') = '0'  and f.DeleteFlag = '0'  and g.DeleteFlag = '0' ORDER BY a.id ASC LIMIT " + page_size + ") m left join WFCCLIENT n on m.parent_wfcclient_id = n.id ";
        } else if (paginationType == 'prev') {
            str = "select * from (select m.*,coalesce(n.WORKFLOWLEVEL,'') parent from (SELECT a.id,b.NAME client, c.ATTRVAL category,coalesce(d.NAME,'') user,f.NAME workflow, " +
                " concat(g.TABLENAME,'  : ',g.PKFIELDNAME) comp,a.work_flow_component_id component, a.WORKFLOWLEVEL level, a.STARTENDFLOWINDICATOR indicator,a.parent_wfcclient_id , " +
                " coalesce((select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id=a.supportGroupLevelId and DeleteFlag = '0'),'Creator') groupName , (SELECT ATTRVAL FROM TICKETATTRIBUTES where id = a.ticket_type) ticket_type " +
                " FROM CLIENT b, TICKETATTRIBUTES c , WORKFLOW f, WORKFLOWCOMPONENT g, WFCCLIENT a left join USER d on a.userId = d.id " +
                " where a.id < " + offset + " and a.CLIENTID=" + data.clientId + " and a.flowIndicator='" + data.indicator + "' and a.CLIENTID = b.id and a.categoryId = c.id and a.workflowId = f.id " +
                " and a.work_flow_component_id = g.id and a.DeleteFlag = '0'  and b.DeleteFlag = '0'  and c.DeleteFlag = '0' " +
                " and coalesce(d.DeleteFlag,'0') = '0'  and f.DeleteFlag = '0'  and g.DeleteFlag = '0' ORDER BY a.id desc LIMIT " + page_size + ") m left join WFCCLIENT n on m.parent_wfcclient_id = n.id)z ORDER BY z.id  ASC;";
        }
        util.logData('get str===' + str);
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from WFCCLIENT a where a.DeleteFlag = '0' and a.CLIENTID=" + data.clientId + " and a.flowIndicator='" + data.indicator + "'";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getWFCClientByClientId(data, cb) {
    let str = 'select id ,WORKFLOWLEVEL name from WFCCLIENT where DeleteFlag = 0 and CLIENTID=' + data.clientId + ' and workflowId=' + data.workflowId + ' and categoryId=' + data.categoryId + ' and ticket_type=' + data.ticketType + ' and flowIndicator="' + data.indicatorId + '" order by id DESC limit 1';
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function searchZone(data, cb) {
    var str = " select zone_id id,zone_name name from zone where upper(zone_name) like '%" + data.zone.toUpperCase() + "%' LIMIT 5; ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getRoleUserActionMapping(data, cb) {
    logData('--------------------getRoleUserActionMapping--------' + JSON.stringify(data));
    getMenuPermissionDtls(data, function (err, success) {
        
        if (err) {
            cb(err, null);
        } else {
            if (success) {
                getUserdetails({ user_id: data.user_id }, function (err, success, details) {
                    if (err) {
                        cb(err, null);
                    } else {
                        // util.logData('get User Details::' + success);
                        if (success) {
                            // util.logData('get User Details:'+JSON.stringify(details));
                            data.clientId = details[0].clientId;
                            async.parallel([getActionDetails/*,  getMetadataDetails*/, getClientWiseUrl], function (err, results) {
                                if (err) {
                                    cb(err, null)
                                } else {
                                    var reslt = [];
                                    var add = false;
                                    var view = false;
                                    var edit = false;
                                    var delet = false;
                                    for (var i = 0; i < results[0].length; i++) {
                                        if (results[0][i].actionId == "1") {
                                            add = true;
                                        }
                                        if (results[0][i].actionId == "2") {
                                            delet = true;
                                        }
                                        if (results[0][i].actionId == "3") {
                                            edit = true;
                                        }
                                        if (results[0][i].actionId == "4") {
                                            view = true;
                                        }
                                    }
                                    details[0].addFlag = add;
                                    details[0].deleteFlag = delet;
                                    details[0].viewFlag = view;
                                    details[0].editFlag = edit;
                                    /*reslt.push({
                                        addFlag: add,
                                        deleteFlag: delet,
                                        viewFlag: view,
                                        editFlag: edit,
                                        baseFlag: details[0].baseFlag,
                                        client: details[0].client,
                                        name: details[0].name,
                                        roleId: details[0].roleId,
                                        roleName: details[0].roleName,
                                        groupId: details[0].groupId
                                    })*/
                                    util.logData('sending  final data:: ' + JSON.stringify(details));
                                    cb(null, true, {
                                        actionDtls: details,
                                        // metaData: results[1],
                                        name: details[0].name,
                                        clientId: details[0].clientId,
                                        urls: results[1]
                                    });
                                }
                            })
                        } else {
                            cb(null, false, 'Something went wrong..')
                        }
                    }
                })

                function getMetadataDetails(callback) {
                    // var async =  require('async');
                    async.waterfall([
                        function firstStep(done) {
                            let sql = " SELECT metadatatableId,metadatatblfldId, actionId, urlId  from METADATAUSERACTIONFLD where DeleteFlag=0 and userId = " + data.user_id;
                            con.query(sql, function (err, result) {
                                if (err) {
                                    logData(err);
                                    done(null);
                                } else {
                                    done(null, result);
                                }
                            });
                        },
                        function secondStep(step1Result, done) {
                            if (step1Result.length == 0) {
                                let sql = " SELECT metadatatableId,metadatatblfldId, actionId,urlId  from METADATAROLEACTIONFLD where DeleteFlag=0 and clientId = " + data.clientId;
                                con.query(sql, function (err, result) {
                                    if (err) {
                                        logData(err);
                                        done(null);
                                    } else {
                                        done(null, result);
                                    }
                                });
                            } else {
                                done(null, step1Result);
                            }
                        },
                        function thirdStep(step2Result, done) {
                            if (step2Result.length == 0) {
                                let sql = " SELECT metadatatableId,actionId,urlId  from METADATAUSERACTIONTBL where DeleteFlag=0 and userId = " + data.user_id;
                                con.query(sql, function (err, result) {
                                    if (err) {
                                        logData(err);
                                        done(null);
                                    } else {
                                        done(null, result);
                                    }
                                });
                            } else {
                                done(null, step2Result);
                            }
                        },
                        function fourStep(step3Result, done) {
                            if (step3Result.length == 0) {
                                let sql = " SELECT metadatatableId,actionId,urlId  from METADATAROLEACTIONTBL where DeleteFlag=0 and clientId = " + data.clientId;
                                con.query(sql, function (err, result) {
                                    if (err) {
                                        logData(err);
                                        done(null);
                                    } else {
                                        callback(null, result);
                                    }
                                });
                            } else {
                                callback(null, step3Result);
                            }

                        }
                    ],
                        function (err) {
                            if (err) {
                                throw new Error(err);
                            } else {
                                logData(err);
                            }
                        });

                }

                function getClientWiseUrl(callback) {
                    let sql = 'select a.name,b.url,b.isAdmin from client_specific_url b ,url a where b.client_id=? and b.url_id=a.id and b.DeleteFlag=0';
                    con.query(sql, [data.clientId], function (err, results) {
                        if (err) {
                            callback(err, false)
                        } else {
                            callback(null, results);
                        }
                    })
                }

                function getActionDetails(callback) {

                    let sql1 = " SELECT actionId  from RoleUserAction where  userId = " + data.user_id + " and DeleteFlag=0";
                    let start = Date.now();
                    con.query(sql1, function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            callback(err1, null);
                        } else {

                            // var duration = Date.now() - start;
                            // util.logData("\npath getActionDetails 1 :duration: " + duration);

                            if (result1.length === 0) {
                                let sql2 = "SELECT a.actionId from roleAction a where  clientId=" + data.clientId +
                                    " and roleId IN (select ROLEID from ROLEUSER where userId = " + data.user_id + " and DeleteFlag=0) and a.DeleteFlag=0;";
                                // util.logData('sql2222222222222=', sql2);

                                let start1 = Date.now();
                                con.query(sql2, function (err2, result2) {
                                    if (err2) {
                                        logData(err2);
                                        callback(err2, null);
                                    } else {
                                        var duration1 = Date.now() - start1;
                                        // util.logData("\npath getActionDetails 2 :duration: " + duration1);

                                        callback(null, result2);
                                    }
                                });
                            } else {
                                callback(null, result1);
                            }
                        }
                    });

                }
            } else {
                cb(null, false, "You have no permission");
            }
        }
    })


}

function getComponentsByworkflowId(data, cb) {
    let sql = 'SELECT id,concat(TABLENAME,"  : ",PKFIELDNAME) as name FROM WORKFLOWCOMPONENT where DeleteFlag=0 and work_flow_id=' + data.workflowId + ';';
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTicketCreateLoadingDtls_old(data, cb) {
    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                callback(null, result);
            }
        });
    }

    function getAttributesMstParentWise(callback) {
        // let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and PARENT_ID =0 and ATTRID = 1 " ;
        // "  and id in (SELECT categoryId FROM WFCCLIENT where  CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + " and DeleteFlag = '0' and flowIndicator = 'F') ";
        let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = " + data.clientId + " and attrHeaderMstId IN (select id from attributesHeaderMst where ATTRID='1' and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + " and sequence_no=1 and DeleteFlag = '0') and DeleteFlag = '0'";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where deleteflag=0 and ticket_type=' + data.ticket_type + ' and client_id=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.ticket_type
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type + ' and CLIENTID=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAttributesHeaderMst, getAttributesMstParentWise, checkPriorityType, getSubTicketType], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[2].error) {
                cb(null, false, results[2].error)
            } else {
                let arr = [];
                for (let i = 0; i < results[0].length; i++) {
                    if (i === 0) {
                        let inner = [];
                        inner = results[1];
                        // if (results[1].length > 1) {
                        inner.unshift(results[0][i]);
                        // }
                        arr.push({ id: i + 1, options: inner })
                    } else {
                        arr.push({ id: i + 1, options: [results[0][i]] })
                    }
                }
                cb(null, true, [{
                    attribute: arr,
                    // clientId: step1Result[0].CLIENTID,
                    val: results[2],
                    subtype: results[3]
                }])
                // callback(null, [{
                //     attribute: arr,
                //     // clientId: step1Result[0].CLIENTID,
                //     val: results[2],
                //     subtype: results[3]
                // }])
            }
        }
    })

}

function getAttributesMstParentWise(data, cb) {
    let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = " + data.clientId + " and attrHeaderMstId IN (select id from attributesHeaderMst where ATTRID='1' and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + " and sequence_no=" + data.count + " and DeleteFlag = '0') and DeleteFlag = '0' ORDER BY ATTRVAL";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, result);
        }
    });
}

function getCreateTicketData(data, cb) {

    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                const count = 1;
                let arr = [];
                generateCategory(count);

                function generateCategory(count) {
                    data.count = count;
                    getAttributesMstParentWise(data, function (err, details) {
                        if (err) {
                            callback(err, null);
                        } else {
                            if (details.length > 1) {
                                for (let i = 0; i < result.length; i++) {
                                    if (i === 0) {
                                        let inner = [];
                                        inner = details;
                                        inner.unshift(result[i]);
                                        arr.push({ id: arr.length + 1, options: inner })
                                    } else {
                                        arr.push({ id: arr.length + 1, options: [result[i]] })
                                    }
                                }
                                callback(null, { value: arr, count: count - 1 });
                            } else if (details.length === 1) {
                                // for (let i = 0; i < result.length; i++) {
                                //     console.log(JSON.stringify(result));
                                // if (i === count - 1) {
                                let inner = [];
                                inner = details;
                                inner.push(result[0]);
                                arr.push({ id: arr.length + 1, options: inner, isDisabled: true });
                                result.splice(0, 1);
                                // break;
                                // }
                                // }
                                count++;
                                generateCategory(count);
                            } else {
                                callback(null, { value: arr, count: count - 1 });
                            }
                        }
                    })
                }

            }
        });
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where deleteflag=0 and ticket_type=' + data.ticket_type + ' and client_id=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.ticket_type
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type + ' and CLIENTID=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAttributesHeaderMst, checkPriorityType, getSubTicketType], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[1].error) {
                cb(null, false, results[1].error)
            } else {
                cb(null, true, [{
                    attribute: results[0].value,
                    val: results[1],
                    subtype: results[2],
                    disabled: results[0].count
                }])
            }
        }
    })

}

function getTicketCreateLoadingDtls_lnt(data, cb) {
    console.log('\n\ngetTicketCreateLoadingDtls_lnt ==> ' + JSON.stringify(data));

    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                callback(null, result);
            }
        });
    }

    if (data.cat2 === '0') {
        console.log('getAttributesMstParentWise 1');
        function getAttributesMstParentWise(callback) {
            callback(null, []);
        }
    } else {
        console.log('getAttributesMstParentWise 2');
        function getAttributesMstParentWise(callback) {
            let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = " + data.clientId + " and PARENT_ID =" +
                data.cat2 + " and ATTRID = 1 and DeleteFlag = '0' ORDER BY ATTRVAL";
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, result);
                }
            });
        }
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where deleteflag=0 and ticket_type=' + data.ticket_type
            + ' and client_id=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.ticket_type
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type
            + ' and CLIENTID=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getCategory1(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat1], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });

    }

    if (data.cat2 === '0') {
        function getCategory2(callback) {
            let sql = 'SELECT id, ATTRVAL title FROM TICKETATTRIBUTES where DeleteFlag = 0  and CLIENTID = ? and ATTRID = 1 and attrHeaderMstId in (SELECT id FROM ' +
                ' attributesHeaderMst where sequence_no = 2 and DeleteFlag = 0 and ATTRID = 1 and CLIENTID = ?  and ticket_type = ?)';
            con.query(sql, [data.clientId, data.clientId, data.ticket_type], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, result);
                }
            });
        }
    } else {
        function getCategory2(callback) {
            let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
            con.query(sql, [data.cat2], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, result);
                }
            });
        }
    }


    async.parallel([getAttributesHeaderMst, getAttributesMstParentWise, getSubTicketType, getCategory1, getCategory2, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            for (let i = 0; i < results.length; i++) {
                console.log('\n\nparallel RESULT ==> ' + JSON.stringify(results[i]))
            }


            if (results[2].error) {
                cb(null, false, results[2].error)
            } else {
                let arr = [];
                for (let i = 0; i < results[0].length; i++) {
                    if (i == 0) {
                        let inner = [];
                        inner = results[3];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 1) {
                        let inner = [];
                        inner = results[4];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 2) {
                        let inner = [];
                        inner = results[1];
                        inner.unshift(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: false })
                    } else {
                        arr.push({ id: i + 1, options: [results[0][i]], isDisabled: false })
                    }
                }
                cb(null, true, [{
                    attribute: arr,
                    // clientId: step1Result[0].CLIENTID,
                    val: results[5],
                    subtype: results[2]
                }])
                // callback(null, [{
                //     attribute: arr,
                //     // clientId: step1Result[0].CLIENTID,
                //     val: res
                //     ults[2],
                //     subtype: results[3]
                // }])
            }
        }
    })

}



function getTicketCreateLoadingDtls_lnt_old(data, cb) {
    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                callback(null, result);
            }
        });
    }

    function getAttributesMstParentWise(callback) {
        let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = " + data.clientId + " and PARENT_ID =" + data.cat2 + " and ATTRID = 1 and DeleteFlag = '0' ORDER BY ATTRVAL";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where deleteflag=0 and ticket_type=' + data.ticket_type + ' and client_id=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.ticket_type
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type + ' and CLIENTID=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getCategory1(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat1], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });

    }

    function getCategory2(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat2], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAttributesHeaderMst, getAttributesMstParentWise, getSubTicketType, getCategory1, getCategory2, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[2].error) {
                cb(null, false, results[2].error)
            } else {
                let arr = [];
                for (let i = 0; i < results[0].length; i++) {
                    if (i == 0) {
                        let inner = [];
                        inner = results[3];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 1) {
                        let inner = [];
                        inner = results[4];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 2) {
                        let inner = [];
                        inner = results[1];
                        inner.unshift(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: false })
                    } else {
                        arr.push({ id: i + 1, options: [results[0][i]], isDisabled: false })
                    }
                }
                cb(null, true, [{
                    attribute: arr,
                    // clientId: step1Result[0].CLIENTID,
                    val: results[5],
                    subtype: results[2]
                }])
                // callback(null, [{
                //     attribute: arr,
                //     // clientId: step1Result[0].CLIENTID,
                //     val: res
                //     ults[2],
                //     subtype: results[3]
                // }])
            }
        }
    })

}

function getSubTicketType(data, cb) {
    let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type + ' and CLIENTID=' + data.clientId;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                result[0].checked = true;
            }
            cb(null, true, result);
        }
    });
}

function getAttributesParentWise(data, cb) {
    let sql = "select id,ATTRVAL title,attachedField  from TICKETATTRIBUTES where DeleteFlag = '0'  and CLIENTID = " + data.clientId + " and PARENT_ID =" + data.parentId + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                for (let i = 0; i < result.length; i++) {
                    result[i].attachedField = stringToBool(result[i].attachedField);
                }
                cb(null, true, result);
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function getBusinessPriorityImpactUrgencyBasis(data, cb) {
    let sql = "select b.id,b.busi_priority_name name,b.color_desc from BUSINESSMATRIX a, BUSINESSPRIORITY b " +
        " where a.busi_priority_id = b.id and a.DeleteFlag = '0' and b.DeleteFlag = '0'  and a.CLIENTID = " + data.clientId + " and a.busi_impact_id =" + data.busi_impact_id + " and a.busi_urgency_id =" + data.busi_urgency_id + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result[0]);
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function getLastLevelCategory(data, cb) {
    let sql = 'SELECT id FROM attributesHeaderMst where CLIENTID=' + data.clientId + ' and DeleteFlag=0 ORDER BY sequence_no DESC limit 1;'
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var headerId = result[0].id;
                let sql1 = 'SELECT id, ATTRVAL name FROM TICKETATTRIBUTES where CLIENTID=' + data.clientId + ' and DeleteFlag=0 and ATTRID=1 and attrHeaderMstId=' + headerId + ' ;';
                con.query(sql1, function (err, result1) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result1)
                    }
                })
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function getLastLevelCategoryByTicketType(data, cb) {
    let sql = 'SELECT id FROM attributesHeaderMst where CLIENTID=? and ticket_type=? and DeleteFlag=0 ORDER BY sequence_no DESC limit 1;'
    con.query(sql, [data.clientId, data.ticket_type], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var headerId = result[0].id;
                let sql1 = "SELECT a.id id, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.parentPath))) name FROM TICKETATTRIBUTES a WHERE  a.CLIENTID=? and a.attrHeaderMstId = ? and a.DeleteFlag = '0';";
                con.query(sql1, [data.clientId, headerId], function (err, result1) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result1)
                    }
                })
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function getSupportGroupByCategory1(data, cb) {
    function getGroup(callback) {
        let sql = "SELECT distinct b.id, b.LEVELSHORTDESC name FROM WFCCLIENT a, SUPPORTGROUPLEVEL b " +
            " where a.supportGroupLevelId = b.id " +
            " and (a.CLIENTID = " + data.clientId + " or a.CLIENTID in (select clientid from ticket where id =" + data.ticketId + ") )" +
            " and a.categoryId = " + data.categoryId + " " +
            " and (a.ticket_type = " + data.ticketTypeId + " or a.ticket_type in (select ticketTypeId from ticket where id =" + data.ticketId + " ) )" +
            " and a.DeleteFlag = '0' and b.DeleteFlag = '0' and b.id !=" + data.groupId + " ";
        util.logData(sql);
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getWorkflowGroup(callback) {
        let sql = "SELECT distinct b.id, b.LEVELSHORTDESC name FROM WFCCLIENT a, SUPPORTGROUPLEVEL b " +
            " where a.supportGroupLevelId = b.id " +
            " and (a.CLIENTID = " + data.clientId + " or a.CLIENTID in (select clientid from ticket where id =" + data.ticketId + ") )" +
            " and a.categoryId = " + data.categoryId + " " +
            " and (a.ticket_type = " + data.ticketTypeId + " or ticket_type in (select ticketTypeId from ticket where id =" + data.ticketId + " ) )" +
            " and a.DeleteFlag = '0' and b.DeleteFlag = '0' ";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getGroup, getWorkflowGroup], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, { gr: results[0], wGr: results[1] });
        }
    })
}


function getSupportGroupByCategory(data, cb) {
    let sql = 'select b.id,b.LEVELSHORTDESC name ' +
        'from SupportGrpWithTicketAttributes a, SUPPORTGROUPLEVEL b ' +
        'where a.supportGroupLevelId = b.id ' +
        'and a.DeleteFlag = 0 ' +
        'and b.DeleteFlag = 0 and a.clientId=' + data.clientId + ' and a.ticketAttrId=' + data.categoryId;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function validateSupportGroupSlaDetails(data, cb) {
    let sql = "select * from CLIENT where sub_client = 1 and id = (SELECT CLIENTID FROM SUPPORTGROUPLEVEL where id = " + data.supportGrpId + ")";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                let sql1 = "SELECT * FROM holiDaysListMst where clientid =(SELECT CLIENTID FROM SUPPORTGROUPLEVEL where id = " + data.supportGrpId + ") " +
                    " and supportGroupLevelId like '%" + data.supportGrpId + "%'";
                con.query(sql1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result1.length > 0) {
                            let sql2 = "SELECT * FROM SLA_client_specific where CLIENTID =(SELECT CLIENTID FROM SUPPORTGROUPLEVEL where id = " + data.supportGrpId + ") " +
                                " and supportGroupLevelId like '%" + data.supportGrpId + "%'";
                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    logData(err2);
                                    cb(err2, null);
                                } else {
                                    if (result2.length > 0) {
                                        cb(null, true, "ok");
                                    } else {
                                        cb(null, false, "Please define SLA Resolution and Response for this Support Group");
                                    }
                                }
                            });
                        } else {
                            cb(null, false, "Please define holiday for this Support Group");
                        }
                    }
                });
            } else {
                cb(null, true, "ok");
            }
        }
    });
}


function getUserByGroup(data, cb) {
    var data = preventSqlInjection(data);
    let sql = " SELECT d.id,d.NAME as name,d.login_name " +
        " from supportGroupUser a, CLIENT c, USER d " +
        " where a.CLIENTID = c.id  " +
        " and a.USERID = d.id " +
        " and a.DeleteFlag='0' " +
        " and c.DeleteFlag='0' " +
        " and d.DeleteFlag = '0' " +
        " and a.CLIENTID = " + data.clientId + " and a.supportGroupLevelId=" + data.groupId + " order by name ASC ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getUserByGroup1(data, cb) {
    let sql = " SELECT d.id,d.NAME as name " +
        " from supportGroupUser a, CLIENT c, USER d " +
        " where a.CLIENTID = c.id  " +
        " and a.USERID = d.id " +
        " and a.DeleteFlag='0' " +
        " and c.DeleteFlag='0' " +
        " and d.DeleteFlag = '0' " +
        " and a.CLIENTID = " + data.clientId + " and a.supportGroupLevelId=" + data.groupId + " and a.USERID !=" + data.user_id;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getTicketWiseTotalCnt(data, cb) {
    let sql2 = "select id,is_running_serial_no from ticket_id_configuration where client_id = " + data.clientId + " and ticket_type = " + data.ticket_type + " and deleteflag = '0'  ";
    con.query(sql2, function (err2, result2) {
        if (err2) {
            logData(err2);
            cb(err2, null);
        } else {
            let isAutoInrNo = '';
            let sql = '';
            if (result2.length > 0) {
                isAutoInrNo = result2[0].is_running_serial_no;
                if (isAutoInrNo === 'N') {
                    sql = " select id,yr_count from ticket_yearly_status a " +
                        " where a.DeleteFlag = '0' " +
                        " and a.client_id = " + data.clientId + " and a.ticket_type=" + data.ticket_type + " and a.year_val=" + data.year_val + " and a.enddate is null ";
                } else {
                    sql = " select id,yr_count from ticket_yearly_status a " +
                        " where a.DeleteFlag = '0'  and a.client_id = " + data.clientId + " and a.ticket_type=" + data.ticket_type + " and a.enddate is null ";
                }
            } else {
                isAutoInrNo = 'N';
                sql = " select id,yr_count from ticket_yearly_status a " +
                    " where a.DeleteFlag = '0' " +
                    " and a.client_id = " + data.clientId + " and a.ticket_type=" + data.ticket_type + " and a.year_val=" + data.year_val + " and a.enddate is null ";
            }

            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    if (result.length > 0) {
                        cb(null, true, result[0].yr_count);
                    } else {
                        let sql1 = " insert into ticket_yearly_status (client_id, year_val,ticket_type,yr_count,createbyid) " +
                            "values( " + data.clientId + " ," + data.year_val + "," + data.ticket_type + ",1," + data.createdBy + " ) ";
                        con.query(sql1, function (err1, result1) {
                            if (err1) {
                                logData(err1);
                                cb(err1, null);
                            } else {
                                if (result1.insertId > 0) {
                                    cb(null, true, 1);
                                }
                            }
                        });
                    }

                }
            });
        }
    });

}


function generateTicketId(data, cb) {
    getTicketWiseTotalCnt(data, function (err, success, details) {
        let sql = " select a.id, a.client_id, a.ticket_type, a.prefix1, a.category_id, a.prefix2, a.prefix3, a.is_running_serial_no " +
            " from ticket_id_configuration a " +
            " where a.DeleteFlag = '0' " +
            " and a.client_id = " + data.clientId + " and a.ticket_type=" + data.ticket_type + " and a.category_id = " + data.category_id + " ";
        //util.logData('\n\n ---------generateTicketId------:  ' + sql);
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result.length > 0) {
                    let idDtls = '';


                    let dateFmt = data.year_val;
                    var mn = new Date().getMonth() + 1;
                    if (mn > 9) {
                        dateFmt = dateFmt + mn;
                    } else {
                        dateFmt = dateFmt + '0' + mn;
                    }
                    if ((new Date()).getDate() > 9) {
                        dateFmt = dateFmt + (new Date()).getDate();
                    } else {
                        dateFmt = dateFmt + '0' + (new Date()).getDate();
                    }


                    if (result[0].prefix1.length == 8) {
                        idDtls = idDtls + dateFmt;
                    } else {
                        idDtls = idDtls + result[0].prefix1;
                    }

                    if (result[0].prefix2.length == 8) {
                        idDtls = idDtls + dateFmt;
                    } else {
                        idDtls = idDtls + result[0].prefix2;
                    }

                    if (result[0].prefix3.length == 8) {
                        idDtls = idDtls + dateFmt;
                    } else {
                        idDtls = idDtls + result[0].prefix3;
                    }


                    var ticket_id = idDtls + "00000000";
                    var len = details.toString().length;
                    var y = ticket_id.length - len;
                    var x = ticket_id.slice(0, y) + details;
                    data.ticketId = x;
                    util.logData(' ticketId:::::::::::::::::::::::::: :' + data.ticketId)
                    validatedTicketId(data, function (errRec, successRec, resultRec) {
                        if (errRec || !successRec) {
                            logData(errRec + "         " + successRec + "           hhhhhhhhhhh----" + resultRec);
                            cb(errRec, null, resultAsy);
                        } else {
                            if (successRec) {
                                let sqlI = " update ticket set ticket_id ='" + x + "' where id =" + data.id;
                                con.query(sqlI, function (errI, resultI) {
                                    if (errI) {
                                        logData(errI);
                                        cb(errI, null);
                                    } else {
                                        if (resultI.affectedRows > 0) {
                                            let sqlI = "";
                                            if (result[0].is_running_serial_no === 'N') {
                                                sqlI = " update ticket_yearly_status set yr_count =yr_count+1 " +
                                                    " where DeleteFlag = '0' " +
                                                    " and client_id = " + data.clientId + " and ticket_type=" + data.ticket_type + " and year_val=" + data.year_val + " and enddate is null ";
                                            } else {
                                                sqlI = " update ticket_yearly_status set yr_count =yr_count+1 " +
                                                    " where DeleteFlag = '0' " +
                                                    " and client_id = " + data.clientId + " and ticket_type=" + data.ticket_type + " and enddate is null ";
                                            }
                                            con.query(sqlI, function (errI, resultI) {
                                                if (errI) {
                                                    logData(errI);
                                                    cb(errI, null);
                                                } else {
                                                    if (resultI.affectedRows > 0) {
                                                        cb(null, true, x);
                                                    } else {
                                                        cb(null, false, "NA1");
                                                    }
                                                }
                                            });
                                        } else {
                                            cb(null, false, "NA2");
                                        }
                                    }
                                });
                            }
                        }
                    })

                } else {
                    cb(null, false, "NA3");
                }

            }
        });
    });

}

// function getCreatorSupportGrpId(data, cb) {
//     let sql = "  SELECT a.id,a.supportGroupLevelId FROM supportGroupUser a, SUPPORTGROUPLEVEL b where a.supportGroupLevelId = b.id " +
//         " and a.userId = ? and a.clientId = ? and a.DeleteFlag = '0' and b.DeleteFlag = '0' and b.group_level = 0 ";
//     logData('getCreatorSupportGrpId------------------' + sql)
//     con.query(sql, [data.user_id, data.clientId], function (err, result) {
//         if (err) {
//             logData(err);
//             cb(err, null);
//         } else {
//             if (data.ticket_type_seq === 2) {
//                 cb(null, true, data.userGroupId);
//             } else {
//                 if (result.length > 0) {
//                     cb(null, true, result[0].supportGroupLevelId);
//                 } else {
//                     cb(null, true, 0);
//                 }
//             }
//         }
//     });
// }


function getCreatorSupportGrpId(data, cb) {
    let sql = "  SELECT a.id,a.supportGroupLevelId FROM supportGroupUser a, SUPPORTGROUPLEVEL b where a.supportGroupLevelId = b.id " +
        " and a.userId = ? and a.clientId = ? and a.DeleteFlag = '0' and b.DeleteFlag = '0' and b.group_level = 0 ";
    logData('getCreatorSupportGrpId------------------' + sql)
    con.query(sql, [data.user_id, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (data.ticket_type_seq === 2 || data.ticket_type_seq === 3 || data.ticket_type_seq === 4 || data.ticket_type_seq === 5 || data.ticket_type_seq === 6 || data.ticket_type_seq === 7) {
                cb(null, true, data.userGroupId);
            } else {
                if (result.length > 0) {
                    cb(null, true, result[0].supportGroupLevelId);
                } else {
                    cb(null, true, 0);
                }
            }
        }
    });
}

function createTicket(data, cb) {
    // if(!data.createdBy || typeof data.createdBy === "undefined" ){
    // data.createdBy = data.userid;
    // }
    //
    let requestorSuppGrp = 0;
    data.tName = con.escape(data.tName);
    data.longDesc = con.escape(data.longDesc);
    let attatchPath = '';
    for (let i = 0; i < data.attachmentPath.length; i++) {
        var originalName = con.escape(data.attachmentPath[i].originalName);
        var fileName = con.escape(data.attachmentPath[i].fileName);
        attatchPath = originalName + ',' + fileName + ',';
    }
    attatchPath = attatchPath.substring(0, attatchPath.length - 1);
    if (data.claimNo) {
        data.claimNo = con.escape(data.claimNo);
    }
    data.requesterInfo = con.escape(data.requesterInfo);
    logData('\n\ncreateTicket--------' + JSON.stringify(data));
    let userEmail;
    validationB4CreateTicket(data, function (errAsy, successAsy, resultAsy) {
        if (errAsy || !successAsy) {
            logData(errAsy + " " + successAsy + " hhhhhhhhhhh----" + resultAsy);
            cb(errAsy, null, resultAsy);
        } else {
            logData(errAsy + " " + successAsy + " hhhhhhhhhhh----" + resultAsy);
            getWFCGeneratedFor({
                "clientId": data.clientId,
                "ticket_type": data.ticketTypeId
            }, function (errDyn, successDyn, detailsDyn) {
                if (errDyn || !successDyn) {
                    //logData('Error: ' + errDyn + successDyn)
                } else {
                    util.logData('---------getWFCGeneratedFor------');
                    var cat_level = detailsDyn[0].category_level;
                    var catLt = data.categoryDtlsLt.split(",");
                    var catVal = catLt[cat_level - 1].split("#")[1];
                    var catValForTicketId = catLt[0].split("#")[1];
                    if (data.incident_ticket_list && data.ticket_type_seq == 4 && (data.incident_ticket_list == null || data.incident_ticket_list.split(",").length == 0)) {
                        cb(null, false, "Atleast one incident type ticket reference required");
                        //util.logData('---------Atleast one incident type ticket reference required------');
                    } else {
                        let str = "select a.supportGroupLevelId,a.work_flow_component_id,a.id,a.userId,b.tStatus_cd, a.workflowId from " +
                            " (select supportGroupLevelId,work_flow_component_id,id,userId,CLIENTID,workflowId " +
                            " from WFCCLIENT where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and STARTENDFLOWINDICATOR = '1' and categoryId=" + catVal + " and ticket_type = " + data.ticketTypeId + " AND flowIndicator = 'F') a," +
                            " (select id tStatus_cd,CLIENTID,sequence_no from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and ATTRID = 2 ";

                        if (data.ticket_type_seq == 1) {
                            str = str + " and sequence_no = 1) b ";
                        } else if (data.ticket_type_seq == 5) {
                            str = str + " and sequence_no = 301) b ";
                        } else if (data.ticket_type_seq == 6) {
                            str = str + " and sequence_no = 401) b ";
                        } else if (data.ticket_type_seq == 7) {
                            str = str + " and sequence_no = 1) b ";
                        } else {
                            str = str + " and sequence_no = 101) b ";
                        }
                        util.logData('\nstr:' + str);
                        str = str + " where a.CLIENTID= b.CLIENTID ";
                        util.logData('\nstr workflow:' + str);
                        con.query(str, function (errs, results) {
                            if (errs) {
                                logData(errs);
                                cb(errs, null);
                            } else {
                                util.logData('\nrequestorSuppGrp1:' + requestorSuppGrp);
                                util.logData('\ndata.ticket_type_seq:' + data.ticket_type_seq);
                                util.logData('\ndata.ticket_type_seq ********************:' + data.ticket_type_seq != 1);


                                getCreatorSupportGrpId({
                                    "user_id": data.createdBy,
                                    "clientId": data.clientId,
                                    "ticket_type_seq": data.ticket_type_seq,
                                    "userGroupId": data.userGroupId
                                }, function (errAsy1, successAsy1, resultAsy1) {
                                    if (errAsy1 || !successAsy1) {
                                        logData('kkkkkkkkkk------------------' + errAsy1 + " " + successAsy1 + " hhhhhhhhhhh----" + resultAsy1);
                                        cb(errAsy1, null);
                                    } else {
                                        if (resultAsy1 > 0) {
                                            requestorSuppGrp = resultAsy1;
                                            util.logData('\nrequestorSuppGrp1111111111111111111111111111:************' + requestorSuppGrp);
                                            util.logData('\nresult[0]1111************' + JSON.stringify(results));
                                            if (data.ticket_type_seq == 6 && (results[0].supportGroupLevelId == null || results[0].supportGroupLevelId == 0)) {
                                                results[0].supportGroupLevelId = data.userGroupId;
                                            }
                                            util.logData('\nresult[0]22222************' + JSON.stringify(results));
                                            util.logData('\nrequestorSuppGrp12:************' + requestorSuppGrp);
                                            /********************************************************/
                                            util.logData('---------Select 111------' + requestorSuppGrp);
                                            if (results == null || results.length == 0) {
                                                //util.logData('---------Workflow not declared------');
                                                cb(null, false, "Workflow not declared.");
                                            } else {
                                                var sql1 = "Insert into ticket(clientid,userid,ticket_id,ticketTypeId,requesterInfo,tName,longDesc,attachmentPath,tstatus,requestedDate,dueDate,source_type,modifydate,modifybyid,";
                                                if (data.priorityType === 1) {
                                                    sql1 = sql1 + " busi_impact_id,busi_urgency_id,";
                                                }
                                                if (!(data.ticket_type_seq == 1 || data.ticket_type_seq == 5 || data.ticket_type_seq == 6 || data.ticket_type_seq == 7)) {
                                                    sql1 = sql1 + " sub_ticket_type,";
                                                }
                                                if (data.ticket_type_seq == 4 || data.ticket_type_seq == 5 || data.ticket_type_seq == 6) {
                                                    sql1 = sql1 + " incident_ticket_id,";
                                                }
                                                // if (data.ticket_type_seq == 5 || data.ticket_type_seq == 6) {
                                                //     sql1 = sql1 + " is_approved_problem_ticket,";
                                                // }
                                                if (data.is_approved_problem_ticket != undefined) {
                                                    sql1 = sql1 + " is_approved_problem_ticket,";
                                                }
                                                if (data.claimNo) {
                                                    sql1 = sql1 + " claimNo,";
                                                }


                                                sql1 = sql1 + 'busi_priority_id,supportGroupLevelId,createbyid,categoryDtlsLt,sla_calculation_start_time,working_category,escalated_to_supp_grp_id,original_createdbyid, createor_support_grp_id) values ' +
                                                    '(' + data.clientId + ',' + results[0].userId + ',"' + new Date().getTime() + '",' + data.ticketTypeId + ',' + data.requesterInfo + ',' + data.tName + ',' + data.longDesc + ',' +
                                                    '"' + attatchPath + '",' + results[0].tStatus_cd + ',Now() ,Now(),"' + data.sourceType + '",Now(),' + data.createdBy + ',';
                                                if (data.priorityType === 1) {
                                                    sql1 = sql1 + " " + data.busi_impact_id + ", " + data.busi_urgency_id + ",";
                                                }
                                                if (!(data.ticket_type_seq == 1 || data.ticket_type_seq == 5 || data.ticket_type_seq == 6 || data.ticket_type_seq == 7)) {
                                                    sql1 = sql1 + " " + data.sub_ticket_type + ",";
                                                }
                                                if (data.ticket_type_seq == 4 || data.ticket_type_seq == 5 || data.ticket_type_seq == 6) {
                                                    sql1 = sql1 + " '" + data.incident_ticket_list + "', ";
                                                }
                                                // if (data.ticket_type_seq == 5 || data.ticket_type_seq == 6) {
                                                //     sql1 = sql1 + "90,";
                                                // }
                                                if (data.is_approved_problem_ticket != undefined) {
                                                    sql1 = sql1 + data.is_approved_problem_ticket + ',';
                                                }
                                                if (data.claimNo) {
                                                    sql1 = sql1 + " " + data.claimNo + ", ";
                                                }
                                                sql1 = sql1 + " " + data.busi_priority_id + "," + results[0].supportGroupLevelId + "," + data.createdBy + ",'" + data.categoryDtlsLt + "',Now() ," + catVal + ", " + results[0].supportGroupLevelId + "," + data.original_createdbyid + "," + requestorSuppGrp + ") ";

                                                // //util.logData('\nsql1:'+sql1);
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        //util.logData(' ---------Insert into ticket table------');
                                                        if (result1.insertId > 0) {
                                                            let ticketAId = '';
                                                            // var catVal = data.categoryDtlsLt.split(",")[0].split("#")[1];
                                                            var fldTU = {
                                                                "clientId": data.clientId,
                                                                "id": result1.insertId,
                                                                "ticket_type": data.ticketTypeId,
                                                                "year_val": (new Date()).getFullYear(),
                                                                "createdBy": data.createdBy,
                                                                //"category_id": catVal
                                                                "category_id": catValForTicketId
                                                            };
                                                            /******************************************************************/

                                                            // if (res.success) {
                                                            // logData('\n\nTckId-----' + JSON.stringify(res.resVal));
                                                            // logData('\n\nTckId-----' + JSON.stringify(res.resVal.tckId));
                                                            data.ticketId = result1.insertId;
                                                            insertAdditionalFieldTicketWise(data, function (err) {
                                                                if (err) {
                                                                    logData(err);
                                                                    cb(err, null);
                                                                } else {
                                                                    insertPlannedActivityTicketWise(data, function (err) {
                                                                        if (err) {
                                                                            logData(err);
                                                                            cb(err, null);
                                                                        } else {
                                                                            //util.logData('---------Insert additional field------');
                                                                            var catList = data.categoryDtlsLt.split(",");
                                                                            var flg = 1;
                                                                            var le = 0;
                                                                            for (var i = 0; i < catList.length; i++) {
                                                                                var cat = catList[i].split("#");
                                                                                var sql = "Insert into ticketCategory(ticketId,categoryId,parent_categoryId ) values (" + result1.insertId + "," + cat[1] + "," + cat[0] + " ) ";
                                                                                con.query(sql, function (err, result) {
                                                                                    if (err) {
                                                                                        logData(err);
                                                                                        cb(err, null);
                                                                                    } else {
                                                                                        //util.logData('\n\n ---------Insert Ticket Category------');
                                                                                        var cat1 = catList[le].split("#");
                                                                                        le++;
                                                                                        if (flg == catList.length) {

                                                                                            /**************************************************************************/
                                                                                            var fld = {
                                                                                                "clientId": data.clientId,
                                                                                                "user_id": results[0].userId,
                                                                                                "frw_user_id": data.createdBy,
                                                                                                "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                "wfcclient_id": results[0].id,
                                                                                                "supportGroupLevelId": results[0].supportGroupLevelId,
                                                                                                "PKFIELDVAL": result1.insertId,
                                                                                                "FIELDVAL": catLt[cat_level - 1].split("#")[1],
                                                                                                "category_id": catLt[cat_level - 1].split("#")[0],
                                                                                                "tStatus_cd": results[0].tStatus_cd,
                                                                                                "createdBy": data.createdBy,
                                                                                                "ticket_type": data.ticketTypeId,
                                                                                                "is_1st_entry": 'Y',
                                                                                                "reopen": 0
                                                                                            };
                                                                                            if (data.ticket_type_seq == 6) {
                                                                                                fld.supportGroupLevelId = requestorSuppGrp;
                                                                                            }
                                                                                            var asd = "";
                                                                                            generateWorkFlow(fld, function (err, success, details) {
                                                                                                if (err || !success) {
                                                                                                    logData(err);
                                                                                                    cb(err, null);
                                                                                                }else{
                                                                                                asd = details;
                                                                                                /***********************************************************/
                                                                                                var fldB = {
                                                                                                    "clientId": data.clientId,
                                                                                                    "user_id": results[0].userId,
                                                                                                    "supportGroupLevelId": results[0].supportGroupLevelId,
                                                                                                    "ticketId": result1.insertId,
                                                                                                    "categoryId": catLt[cat_level - 1].split("#")[0],
                                                                                                    "parent_wfcclient_id": 0,
                                                                                                    "STARTENDFLOWINDICATOR": 0,
                                                                                                    "workflowId": results[0].workflowId,
                                                                                                    "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                    "wfcclient_id": results[0].id,
                                                                                                    "ticket_type": data.ticketTypeId,
                                                                                                    "createdBy": data.createdBy
                                                                                                };
                                                                                                var fldC = {
                                                                                                    "clientId": data.clientId,
                                                                                                    "workflowId": results[0].workflowId,
                                                                                                    "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                    "categoryId": catLt[cat_level - 1].split("#")[0]
                                                                                                };
                                                                                                /***********************************************************/
                                                                                                checkBackWorkFlowDefined(fldC, function (errC, successC, detailsC) {
                                                                                                    if (detailsC == '3') {
                                                                                                        insertWFCClientTicketWise(fldB, function (errB, successB, detailsB) {
                                                                                                        });
                                                                                                    }
                                                                                                });


                                                                                                var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId ) " +
                                                                                                    // " VALUES (" + result1.insertId + ",1,1," + data.createdBy + ") ";
                                                                                                    " VALUES (" + result1.insertId + ",1," + details + "," + data.createdBy + ") ";
                                                                                                con.query(sql5, function (err5, result5) {
                                                                                                    if (err5) {
                                                                                                        logData(err5);
                                                                                                        cb(err5, null);
                                                                                                    } else {
                                                                                                        //util.logData('\n\n ---------Insert Ticket Activity Log------');
                                                                                                        if (data.attachmentPath != null && data.attachmentPath != "") {
                                                                                                            let fieldsFA = {
                                                                                                                "ticketId": result1.insertId,
                                                                                                                "WFCClientResultId": details,
                                                                                                                "attachedFilePath": data.attachmentPath,
                                                                                                                "createdBy": data.createdBy,
                                                                                                                "assetIds": data.assetIds
                                                                                                            };
                                                                                                            submitAttachmentTicketWise(fieldsFA, function (errFA, successFA, detailsFA) {
                                                                                                                //logData('=======================ok================================')
                                                                                                            });

                                                                                                        }
                                                                                                        if (data.psDetails) {
                                                                                                            data.psDetails.ticketId = result1.insertId;
                                                                                                            userEmail = data.psDetails.EMAILID;
                                                                                                            insertLNTEmployeeDtls(data.psDetails, function (errFA, successFA, detailsFA) {
                                                                                                                //logData('=======================ok================================')
                                                                                                            });

                                                                                                        }
                                                                                                        if (data.assetIds && data.assetIds.length > 0) {
                                                                                                            let fieldsAI = {
                                                                                                                "ticketId": result1.insertId,
                                                                                                                "WFCClientResultId": details,
                                                                                                                "createdBy": data.createdBy,
                                                                                                                "assetIds": data.assetIds
                                                                                                            };
                                                                                                            insertAssetIds(fieldsAI, function (errAI, successAI, detailsAI) {
                                                                                                                if (errAI) {
                                                                                                                    logData(errAI);
                                                                                                                    cb(errAI, null);
                                                                                                                } else {
                                                                                                                    //logData('=======================insertAssetIds================================')
                                                                                                                }
                                                                                                            });
                                                                                                        }
                                                                                                        /*request
                                                                                                        .get(SLA_URL + '/slaCalculation')
                                                                                                        .query({
                                                                                                        ticketId: result1.insertId,
                                                                                                        reqType: ''
                                                                                                        })
                                                                                                        .end((err, resp) => {
                                                                                                        if (err) {
                                                                                                        logData(err);
                                                                                                        } else {
                                                                                                        /* var strDD = "select id,resolution_datetime from ticket_sla_response_dtls where ticketId = ? and deleteflag = '0' order by id desc limit 1 ";
                                                                                                        con.query(strDD, [result1.insertId], function (errDD, resultDD) {
                                                                                                        if (errDD) {
                                                                                                        logData(errDD);
                                                                                                        cb(errDD, null);
                                                                                                        } else {
                                                                                                        if (resultDD.length > 0) {
                                                                                                        var strDDU = "update ticket set dueDate = ? where id = ? ";
                                                                                                        con.query(strDDU, [resultDD[0].resolution_datetime, result1.insertId], function (errDDU, resultDDU) {
                                                                                                        if (errDDU) {
                                                                                                        logData(errDDU);
                                                                                                        cb(errDDU, null);
                                                                                                        } else {
                                                                                                        //logData('kkkkkkkkk')
                                                                                                        }
                                                                                                        });
                                                                                                        }
                                                                                                        logData('kkkkkkkkk');
                                                                                                        }
                                                                                                        });

                                                                                                        if (data.ticket_type_seq == 4) {
                                                                                                        changeTicketStatus({
                                                                                                        "incident_ticket_list": data.incident_ticket_list,
                                                                                                        "ticketId": result1.insertId,
                                                                                                        "client_id": data.clientId,
                                                                                                        "createdBy": data.createdBy,
                                                                                                        "seq": 21
                                                                                                        }, function (errPro, successPro, detailsPro) {
                                                                                                        if (errPro || !successPro) {
                                                                                                        cb(null, false, "Some error occured");
                                                                                                        }
                                                                                                        });
                                                                                                        }*/
                                                                                                        /* }
                                                                                                        });*/
                                                                                                        /*******************************************************/
                                                                                                        let sqlNwSla = "insert into ticket_sla_calculation (clientid,ticketid,createbyid) values(?,?,?) ";
                                                                                                        con.query(sqlNwSla, [data.clientId, result1.insertId, data.createdBy], function (errNwSla, resultNwSla) {
                                                                                                            if (errNwSla) {
                                                                                                                logData(errNwSla);
                                                                                                                cb(errNwSla, null);
                                                                                                            } else {
                                                                                                                logData('****************ticket_sla_calcultion*************************')
                                                                                                            }
                                                                                                        });
                                                                                                        /*******************************************************/
                                                                                                        /*******************************************************/
                                                                                                        if (data.ticket_type_seq == 4) {
                                                                                                            changeTicketStatus({
                                                                                                                "incident_ticket_list": data.incident_ticket_list,
                                                                                                                "ticketId": result1.insertId,
                                                                                                                "client_id": data.clientId,
                                                                                                                "createdBy": data.createdBy,
                                                                                                                "seq": 21
                                                                                                            }, function (errPro, successPro, detailsPro) {
                                                                                                                if (errPro || !successPro) {
                                                                                                                    cb(null, false, "Some error occured");
                                                                                                                }
                                                                                                            });
                                                                                                        }
                                                                                                        /*******************************************************/
                                                                                                        /*******************************************************/
                                                                                                        if (data.ticket_type_seq == 5) {
                                                                                                            changeTicketStatusForCR({
                                                                                                                "incident_ticket_list": data.incident_ticket_list,
                                                                                                                "ticketId": result1.insertId,
                                                                                                                "client_id": data.clientId,
                                                                                                                "createdBy": data.createdBy,
                                                                                                                "seq": 301
                                                                                                            }, function (errPro, successPro, detailsPro) {
                                                                                                                if (errPro || !successPro) {
                                                                                                                    cb(null, false, "Some error occured");
                                                                                                                }
                                                                                                            });
                                                                                                        }
                                                                                                        /*******************************************************/
                                                                                                        /*******************************************************/
                                                                                                        if (data.ticket_type_seq == 6) {
                                                                                                            changeTicketStatusForCR({
                                                                                                                "incident_ticket_list": data.incident_ticket_list,
                                                                                                                "ticketId": result1.insertId,
                                                                                                                "client_id": data.clientId,
                                                                                                                "createdBy": data.createdBy,
                                                                                                                "seq": 401
                                                                                                            }, function (errPro, successPro, detailsPro) {
                                                                                                                if (errPro || !successPro) {
                                                                                                                    cb(null, false, "Some error occured");
                                                                                                                }
                                                                                                            });
                                                                                                        }
                                                                                                        /*******************************************************/
                                                                                                        /*request
                                                                                                        // .get(MAIL_URL + '/sendemail?ticketId=' + result1.insertId + '&notifyType=email&email=' + userEmail)
                                                                                                            .get(MAIL_URL + '/sendnotificationmail?ticketId=' + result1.insertId + '&actionType=1&actionID=&actionData=')
                                                                                                            // .query({
                                                                                                            // ticketId: result1.insertId,
                                                                                                            // notifyType: "email"
                                                                                                            // }) // query string
                                                                                                            .end((err, resp) => {
                                                                                                                if (err) {
                                                                                                                    logData(err);
                                                                                                                } else {
                                                                                                                    //logData('done')
                                                                                                                    //logData('done----err---' + err)
                                                                                                                    logData('done---resp--' + JSON.stringify(resp))
                                                                                                                }
                                                                                                                // Do something
                                                                                                            });*/
                                                                                                        request
                                                                                                            .get(SLA_URL + '/slaCalculationWithDue')
                                                                                                            .query({
                                                                                                                ticketId: result1.insertId,
                                                                                                                reqType: 'sla',
                                                                                                                clientId: data.clientId
                                                                                                            }) // query string
                                                                                                            .end((err, resp) => {
                                                                                                                if (err) {
                                                                                                                    logData(err);
                                                                                                                } else {
                                                                                                                    logData(JSON.stringify(resp));
                                                                                                                }
                                                                                                                // Do something
                                                                                                            });
                                                                                                        insertSlaStartStopLogs({
                                                                                                            "ticketId": result1.insertId,
                                                                                                            "WFCClientResultId": details
                                                                                                        }, function (errSS, successSS, detailsSS) {
                                                                                                        });
                                                                                                        // geUserDtlsTicketWise({"user_id": data.createdBy,"WFCClientResultId": details,"ticketId": result1.insertId}, function (errUD, successUD, detailsUD) {
                                                                                                        // socket.emit('createTicket', {
                                                                                                        // ticketId: result1.insertId,
                                                                                                        // date: detailsUD[0].solTime
                                                                                                        // })
                                                                                                        // })
                                                                                                        if (data.parrent_id) {
                                                                                                            let val = {
                                                                                                                parentId: data.parrent_id,
                                                                                                                ticketId: result1.insertId,
                                                                                                                createdBy: data.createdBy,
                                                                                                                wfcclient_id: data.wfcclient_id
                                                                                                            };
                                                                                                            insertChildTicket(val, function (err, success, details) {

                                                                                                            });
                                                                                                        }
                                                                                                        if (socket) {
                                                                                                            let val1 = {
                                                                                                                ticketId: result1.insertId,
                                                                                                                clientId: data.clientId,
                                                                                                                ticketTypeId: data.ticketTypeId
                                                                                                            };
                                                                                                            getNotificationMenuIdTicketStatusWise(val1, function (err111, success111, details111) {

                                                                                                            });
                                                                                                            // socket.emit('dashboard', {
                                                                                                            //     menuId: 3,
                                                                                                            //     ticketId: result1.insertId,
                                                                                                            //     clientId: data.clientId,
                                                                                                            //     ticketTypeId: data.ticketTypeId
                                                                                                            // });
                                                                                                            // socket.emit('dashboard', {
                                                                                                            //     menuId: 33,
                                                                                                            //     ticketId: result1.insertId,
                                                                                                            //     clientId: data.clientId,
                                                                                                            //     ticketTypeId: data.ticketTypeId
                                                                                                            // });
                                                                                                            // socket.emit('dashboard', {
                                                                                                            //     menuId: 50,
                                                                                                            //     ticketId: result1.insertId,
                                                                                                            //     clientId: data.clientId,
                                                                                                            //     ticketTypeId: data.ticketTypeId
                                                                                                            // });
                                                                                                            // socket.emit('dashboard', {
                                                                                                            //     menuId: 51,
                                                                                                            //     ticketId: result1.insertId,
                                                                                                            //     clientId: data.clientId,
                                                                                                            //     ticketTypeId: data.ticketTypeId
                                                                                                            // });
                                                                                                            // socket.emit('dashboard', {
                                                                                                            //     menuId: 40,
                                                                                                            //     ticketId: result1.insertId,
                                                                                                            //     clientId: data.clientId,
                                                                                                            //     ticketTypeId: data.ticketTypeId
                                                                                                            // });
                                                                                                            // socket.emit('dashboard', {
                                                                                                            //     menuId: 41,
                                                                                                            //     ticketId: result1.insertId,
                                                                                                            //     clientId: data.clientId,
                                                                                                            //     ticketTypeId: data.ticketTypeId
                                                                                                            // });
                                                                                                            // socket.emit('dashboard', {
                                                                                                            //     menuId: 21,
                                                                                                            //     ticketId: result1.insertId,
                                                                                                            //     clientId: data.clientId,
                                                                                                            //     ticketTypeId: data.ticketTypeId
                                                                                                            // });
                                                                                                        }
                                                                                                        // socket.emit('dashboardUserId', {
                                                                                                        // menuId: 1,
                                                                                                        // ticketId: result1.insertId,
                                                                                                        // clientId: data.clientId,
                                                                                                        // ticketTypeId: data.ticketTypeId,
                                                                                                        // userGroupId: data.userGroupId,
                                                                                                        // user_id: data.user_id
                                                                                                        // });
                                                                                                        // cb(null, true, res.resVal.tckId);
                                                                                                        request
                                                                                                            .get(SLA_URL + '/generateTicketd')
                                                                                                            .query({
                                                                                                                clientId: data.clientId,
                                                                                                                category_id: catValForTicketId,
                                                                                                                year_val: (new Date()).getFullYear(),
                                                                                                                user_id: data.createdBy,
                                                                                                                id: result1.insertId,
                                                                                                                ticket_type: data.ticketTypeId
                                                                                                            })
                                                                                                            .end((errTckId, respTckId) => {
                                                                                                                if (errTckId) {
                                                                                                                    logData(errTckId);
                                                                                                                    cb(errTckId, false);
                                                                                                                } else {
                                                                                                                    logData('\n\nTckId-----' + JSON.stringify(respTckId));
                                                                                                                    logData('\n\nTckId-----' + JSON.stringify(respTckId.text));
                                                                                                                    const res = JSON.parse(respTckId.text);
                                                                                                                    ticketAId = res.resVal.tckId;
                                                                                                                    let ticketData = {
                                                                                                                        id: ticketAId,
                                                                                                                        ticket_id: result1.insertId
                                                                                                                    };
                                                                                                                    request
                                                                                                                        // .get(MAIL_URL + '/sendemail?ticketId=' + result1.insertId + '&notifyType=email&email=' + userEmail)
                                                                                                                        .get(MAIL_URL + '/sendnotificationmail?ticketId=' + result1.insertId + '&actionType=1&actionID=&actionData=')
                                                                                                                        // .query({
                                                                                                                        // ticketId: result1.insertId,
                                                                                                                        // notifyType: "email"
                                                                                                                        // }) // query string
                                                                                                                        .end((err, resp) => {
                                                                                                                            if (err) {
                                                                                                                                logData(err);
                                                                                                                            } else {
                                                                                                                                //logData('done')
                                                                                                                                //logData('done----err---' + err)
                                                                                                                                logData('done---resp--' + JSON.stringify(resp))
                                                                                                                            }
                                                                                                                            // Do something
                                                                                                                        });


                                                                                                                    if (data.ticket_type_seq == 4) {
                                                                                                                        addProblemTicketIdtoIncidentsTktsLogs({
                                                                                                                            "tid": result1.insertId, "incident_ticket_list": data.incident_ticket_list
                                                                                                                            , "createdBy": data.createdBy, ticketno: ticketAId
                                                                                                                        }, function (err, success, details) {
                                                                                                                            if (err) {

                                                                                                                            } else {
                                                                                                                                if (success) {
                                                                                                                                    cb(null, true, ticketData);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        });
                                                                                                                    }
                                                                                                                    cb(null, true, ticketData);

                                                                                                                      //test anand
                                                                                                                     var sql3123 = "select a.ticket_id from ticket a order by id desc limit 1"
                                                                                                                     con.query(sql3123, function (err, result644) {
                                                                                                                         console.log("CHecking in node 2");

                                                                                                                         if (err) {
                                                                                                                             cb(err, null)

                                                                                                                         } else {
                                                                                                                             console.log("______________***************", result644);
                                                                                                                             console.log("______________***************1234" + sql3123);
                                                                                                                             console.log("234$$$$$$$$$$$", result644);
                                                                                                                             var sql56 = "select (SELECT id ticket FROM ticket order by id desc limit 1) id, (SELECT login_name FROM USER where id =?) login_name"
                                                                                                                                 + ",(SELECT NAME FROM USER where id =?) NAME,b.ATTRVAL,(select f.ATTRVAL from TICKETATTRIBUTES f  where f.id =?) status,"
                                                                                                                                 + "(select g.busi_priority_name from BUSINESSPRIORITY g where id=?) priority_name,"
                                                                                                                                 + "(select (date_format (ADDTIME(dueDate, '5:30:0.000000'),'%d-%M-%Y %T')) from ticket order by id desc limit 1) dueDatept  from ticket a,TICKETATTRIBUTES b where b.id =? ;"
                                                                                                                             logData("ASSSSSSSSSSSSSS" + sql56);
                                                                                                                             con.query(sql56, [data.createdBy, data.createdBy, results[0].tStatus_cd, data.busi_priority_id, data.ticketTypeId], function (err, result7) {
                                                                                                                                 if (err) {
                                                                                                                                     console.log("===============================+++++++++", err);
                                                                                                                                     cb(err, null);
                                                                                                                                 } else {
                                                                                                                                     console.log("===============================+++++++++", result644[0].ticket_id);
                                                                                                                                     console.log("===============================+++++++++", result7[0].id);
                                                                                                                                     var sql = "Insert into optimizedreport(ticket_id,client_id,ticket_id_ref,ticket_last_modified_dt,requester_ps,ticket_source,created_dt,last_modified_dt,created_by,last_modified_id,ticket_title,ticket_desc,ticket_type,ticket_type_name," +
                                                                                                                                         "requestor_name,original_ceated_ps,original_created_by,first_resolution_sla_due_dt,priority_name,ticket_status)"
                                                                                                                                         + " values(?,?,?,Now(),?,?,Now(),Now(),?,?,?,?,?,?,?,?,?,?,?,?) ;"
                                                                                                                                     con.query(sql, [result7[0].id, data.clientId, result644[0].ticket_id, result7[0].login_name, data.sourceType, data.createdBy, data.original_createdbyid, data.tName, data.longDesc, data.ticketTypeId, result7[0].ATTRVAL, result7[0].NAME, result7[0].login_name, result7[0].NAME, result7[0].dueDatept, result7[0].priority_name, result7[0].status], function (err1, result) {
                                                                                                                                         logData("^^^&^&***************" + sql);

                                                                                                                                         if (err1) {
                                                                                                                                             console.log("========================== > ", err1);
                                                                                                                                             logData(err1);
                                                                                                                                             cb(err1, null);
                                                                                                                                         } else {
                                                                                                                                             console.log("Success inserting", result);
                                                                                                                                             cb(null, true, result);
                                                                                                                                         }
                                                                                                                                     })
                                                                                                                                     cb(null, true, result7);
                                                                                                                                     // cb(null, true, ticketData);
                                                                                                                                 }
                                                                                                                             })


                                                                                                                         }
                                                                                                                     });

                                                                                                                    //  Optimizedreport ends


                                                                                                                }
                                                                                                            });

                                                                                                    }
                                                                                                });
                                                                                             }
                                                                                            });
                                                                                        }
                                                                                        flg++;
                                                                                    }
                                                                                });
                                                                            }
                                                                        }
                                                                    });

                                                                }
                                                            })

                                                            // } else {
                                                            //
                                                            // cb(null, false, 'Sorry we faced an intermitent issue while generating ticket no. Please click on Create Ticket button once again')
                                                            // }
                                                            /*}
                                                            });
                                                            //******************************************************************
                                                            generateTicketId(fldTU, function (err3, success3, result3) {
                                                            if (err3 || !success3) {
                                                            logData(err3);
                                                            cb(err3, null);
                                                            } else {*/
                                                            data.ticketId = result1.insertId;
                                                            //util.logData('---------TicketId generated------');

                                                            // }
                                                            // })


                                                            // }//else
                                                            // });//kmk
                                                        } else {
                                                            cb(null, false, "Data is not inserted");
                                                        }
                                                    }
                                                });
                                            }
                                        } else {
                                            cb(null, false, "Creator can't be created because user(Requested) is not assigned to any support group....");
                                        }


                                        /********************************************************/
                                        // }

                                    }
                                })
                                // }

                                // if( requestorSuppGrp!=0){
                                //requestorSuppGrp = resultAsy1[0].supportGroupLevelId;

                                // }else{
                                // cb(null, false, "Creator can't be created because user(Requested) is not assigned to any support group");
                                // }
                                /*}//
                                })*/
                                // }


                            }
                        });
                    }
                }

            });
        }
    })

}


function insertChildTicket(data, cb) {
    const sql = 'select id from child_ticket_ids where ticket_id=? and parent_id=? and DeleteFlag=0';
    con.query(sql, [data.ticketId, data.parentId], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null)
        } else {
            if (details.length === 0) {
                let parentSql = "INSERT INTO child_ticket_ids (ticket_id, parent_id, createbyid,wfcclient_id) values (?,?,?,?)";
                con.query(parentSql, [data.ticketId, data.parentId, data.createdBy, data.wfcclient_id], function (er, res) {
                    if (er) {
                        util.logData(er);
                        cb(err, null)
                    } else {

                        // optimizedreport table start

                        var sql40 = " select (select id from optimizedreport where ticket_id =?) id,parent_id, replace(group_concat(concat((select ticket_id from ticket where id=a.ticket_id) ,'@')),',','\n') childTicketId,"
                            + " replace(group_concat(concat(createdate,'@')),',','\n') childCreatedate from child_ticket_ids a where parent_id =? ;"
                        con.query(sql40, [data.ticketId, data.parentId], function (err, result40) {
                            if (err) {
                                cb(err, null);
                            } else {
                                var sql32 = "update optimizedreport set child_ticket_raised=? ,child_ticket_raised_dt=? where id=? ;"
                                con.query(sql32, [result40[0].childTicketId, result40[0].childCreatedate, result40[0].id], function (err, result32) {
                                    logData("QWEEEEEEEEEE[piouydtyfgjhEEeeeee" + sql32)
                                    if (err) {
                                        cb(err, null);
                                    } else {
                                        console.log("################", result32);
                                        cb(null, true, result32);
                                    }
                                })
                            }
                        })


                        // optimizedreport table ends


                        const sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId) " +
                            " VALUES (?,?,?,?) ";
                        con.query(sql5, [data.parentId, '20', data.wfcclient_id, data.createdBy], function (err) {
                            if (err) {
                                util.logData(err);
                                cb(err, null)
                            }
                        });
                        cb(null, true);
                    }
                });
            } else {
                cb(null, false, 'Child Ticket Already Added');
            }
        }
    });

}

function getWorkflowResultMaxId(data, cb) {
    var str = "select max(id) mid,111 aa from WFCCLIENTRESULT  where PKFIELDVAL = " + data.id + "  ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result[0].mid);
            } else {
                cb(null, true, 0);
            }

        }
    });
}


function changeTicketStatus(data, cb) {
    logData('\n\ndata.incident_ticket_list----------------------' + data.incident_ticket_list)
    if (data.incident_ticket_list) {
        let flag = 0;
        var ticket_list = data.incident_ticket_list.split(",");
        var incidentLt = "Incident Ticket List: ";
        for (let i = 0; i < ticket_list.length; i++) {
            let sql3 = " select * from  incident_problem_ticket_mapping a, ticket b where a.incident_ticket_id = b.id and a.incident_ticket_id =" + ticket_list[i] + " " +
                " and a.deleteflag = '0' and b.tstatus in (SELECT id FROM TICKETATTRIBUTES where CLIENTID = " + data.client_id + " and ATTRID= 2 and sequence_no != 23 ) ";
            logData('\n\nchangeTicketStatus   1------------------' + sql3)
            logData('1----' + new Date())
            con.query(sql3, function (err3, result3) {
                if (err3) {
                    logData(err3);
                    cb(err3, null);
                } else {
                    if (result3.length > 0) {
                        flag++;
                        if (flag === ticket_list.length) {
                            cb(null, true);
                        }
                    } else {
                        let sql = " update ticket set tstatus =(select id from TICKETATTRIBUTES where CLIENTID =" + data.client_id +
                            " and ATTRID = 2 and sequence_no=" + data.seq + " and DeleteFlag = 0 ) " +
                            " , modifydate = Now(), modifybyid = " + data.createdBy + " " +
                            " where id = " + ticket_list[i] + " ";
                        logData('\n\nchangeTicketStatus   2------------------' + sql)
                        logData('2----' + new Date())
                        con.query(sql, function (err, result) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                if (result.affectedRows > 0) {
                                    getWorkflowResultMaxId({ "id": ticket_list[i] }, function (errI, successI, resultsI) {
                                        if (errI || !successI) {
                                            logData(errI);
                                            cb(errI, null);
                                        } else {
                                            //*************************************************************************
                                            var dataU = {
                                                "id": ticket_list[i]
                                            };
                                            updateWFCResultForDispatch(dataU, function (errU1, successU1, resultsU1) {
                                                if (errU1 || !successU1) {
                                                    logData(errU1);
                                                    cb(errU1, null);
                                                } else {
                                                    let str = "insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, " +
                                                        " END_INDICATOR, createbyid, user_id, frw_user_id, category_id, tStatus) select CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, (serial_no+1), END_INDICATOR, createbyid, user_id, frw_user_id, category_id, tStatus from WFCCLIENTRESULT " +
                                                        " where PKFIELDVAL = " + ticket_list[i] + " and id =" + resultsI + "  ";
                                                    logData('\n\n str------------' + str)
                                                    con.query(str, function (err, result) {
                                                        if (err) {
                                                            logData(err);
                                                            cb(err, null);
                                                        } else {
                                                            insertLatestWFCClientResult({
                                                                "ticketId": ticket_list[i]
                                                            }, function (errET3, successET3, detailsET3) {
                                                                if (errET3 || !successET3) {
                                                                    cb(null, true, 0);
                                                                } else {
                                                                    getWorkflowResultMaxId({ "id": ticket_list[i] }, function (errI, successI, resultsI) {
                                                                        if (errI || !successI) {
                                                                            logData(errI);
                                                                            cb(errI, null);
                                                                        } else {
                                                                            //*************************************************************************
                                                                            let sql1 = " update WFCCLIENTRESULT set tStatus =(select id from TICKETATTRIBUTES where CLIENTID =" + data.client_id + " " +
                                                                                " and ATTRID = 2 and sequence_no=" + data.seq + " and DeleteFlag = 0 ) " +
                                                                                " , modifydate = Now(), modifybyid = " + data.createdBy + " " +
                                                                                " where PKFIELDVAL = " + ticket_list[i] + " and id = " + resultsI + " ";
                                                                            logData('\n\nchangeTicketStatus   3------------------' + sql1)
                                                                            logData('3----' + new Date())
                                                                            con.query(sql1, function (err1, result1) {
                                                                                if (err1) {
                                                                                    logData(err1);
                                                                                    cb(err1, null);
                                                                                } else {
                                                                                    if (result1.affectedRows > 0) {
                                                                                        util.logData('ticket_list[i]=======================================' + ticket_list[i]);
                                                                                        //***********************************
                                                                                        getClientIdFromTicketTbl({
                                                                                            ticketId: ticket_list[i]
                                                                                        }, function (errCC, successCC, resCC) {
                                                                                            if (errCC) {
                                                                                                logData(errCC);
                                                                                                callback(errCC, null);
                                                                                            } else {
                                                                                                logData("\n\n resCC----------------" + JSON.stringify(resCC))
                                                                                                //data.ticket_id = resCC[0].ticket_id;
                                                                                                incidentLt = incidentLt + resCC[0].ticket_id + ", ";
                                                                                                logData("\n\n incidentLt----------------" + incidentLt)
                                                                                                let sql2 = " insert into incident_problem_ticket_mapping(problem_ticket_id,incident_ticket_id,created_by) values(" + data.ticketId + "," + ticket_list[i] + "," + data.createdBy + ") ";
                                                                                                logData('\n\nchangeTicketStatus   4------------------' + sql2)
                                                                                                logData('4----' + new Date())
                                                                                                con.query(sql2, function (err2, result2) {
                                                                                                    if (err2) {
                                                                                                        logData(err2);
                                                                                                        cb(err2, null);
                                                                                                    } else {
                                                                                                        flag++;
                                                                                                        logData('\n\nchangeTicketStatus   5-----------------' + flag);


                                                                                                         // optimizedreport table starts


                                                                                                         var sql2 = " select (select id from optimizedreport where ticket_id =? ) id,incident_ticket_id,replace(group_concat(concat((select ticket_id from ticket where id=problem_ticket_id) ,'@')),',','\n') otherTicketId,"
                                                                                                         + " replace(group_concat(concat(created_date,'@')),',','\n') otherCreatedate from incident_problem_ticket_mapping  where incident_ticket_id =? and deleteflag = '0'"
                                                                                                     con.query(sql2, [ticket_list[i], ticket_list[i]], function (err, result2) {
                                                                                                         if (err) {
                                                                                                             cb(err, null);
                                                                                                         } else {
                                                                                                             console.log("33333333asd3=---", result2);
                                                                                                             var sql3 = "update optimizedreport set other_ticket_raised=?,other_ticket_raised_dt=? where id =? ;"
                                                                                                             con.query(sql3, [result2[0].otherTicketId, result2[0].otherCreatedate, result2[0].id], function (err, result3) {
                                                                                                                 logData("SDAFGNB" + sql3);
                                                                                                                 if (err) {
                                                                                                                     console.log("WQEADSF", err);
                                                                                                                     cb(err, null);
                                                                                                                 } else {
                                                                                                                     logData("&&&&&&&&&&&&&&------------>" + sql3);
                                                                                                                     console.log("$$$asd$$$$$$$$-->", result3);
                                                                                                                     console.log("$$$asd$$$$$$$$-->", result3);
                                                                                                                     cb(null, true, result3);
                                                                                                                 }
                                                                                                             })
                                                                                                         }
                                                                                                     });


                                                                                                     // optimizedreport table ends




                                                                                                        if (flag === ticket_list.length) {
                                                                                                            // incidentLt = incidentLt.substring(0, incidentLt.length - 1);
                                                                                                            let sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                                                                " VALUES (" + data.ticketId + ",20, " + resultsI + "," + data.createdBy + ",'" + incidentLt + "') ";
                                                                                                            logData('sql5*************************************' + sql5)
                                                                                                            logData('5----' + new Date())
                                                                                                            con.query(sql5, function (err5, result5) {
                                                                                                                if (err5) {
                                                                                                                    logData(err5);
                                                                                                                    cb(err5, null);
                                                                                                                } else {

                                                                                                                                                                                                                                        // optimizedreport table starts

                                                                                                                                                                                                                                        var sql40 = "select (select id from optimizedreport where ticket_id =?) id,login_name,name from USER where id =? ;"
                                                                                                                                                                                                                                        con.query(sql40, [data.ticketId, data.createdBy], function (err, result40) {
                                                                                                                                                                                                                                            if (err) {
                                                                                                                                                                                                                                                cb(err, null);
                                                                                                                                                                                                                                            } else {
                                                                                                                    
                                                                                                                                                                                                                                                var sql32 = "update optimizedreport set ticket_activity_log=?,last_modified_id =?,ticket_last_modified_dt=Now()"
                                                                                                                                                                                                                                                    + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id=? ;"
                                                                                                                                                                                                                                                con.query(sql32, [incidentLt, data.createdBy, result40[0].login_name, result40[0].name, result40[0].name, result40[0].id], function (err, result32) {
                                                                                                                                                                                                                                                    logData("QWEEEEEEEEEEEEeeeee" + sql32)
                                                                                                                                                                                                                                                    if (err) {
                                                                                                                                                                                                                                                        cb(err, null);
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                        logData("&&&&&&&&&&&&&&------------>" + sql32);
                                                                                                                                                                                                                                                        console.log("################", result32);
                                                                                                                                                                                                                                                        cb(null, true, result32);
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                })
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        });
                                                                                                                    
                                                                                                                                                                                                                                        // optimizedreport table ends
                                                                                                                    cb(null, true);
                                                                                                                }
                                                                                                            })

                                                                                                        }

                                                                                                    }
                                                                                                });
                                                                                            }
                                                                                        })
                                                                                        //***********************************


                                                                                    } else {
                                                                                        flag++;
                                                                                        if (flag === ticket_list.length) {
                                                                                            cb(null, true);
                                                                                        }
                                                                                    }

                                                                                }
                                                                            });
                                                                        }
                                                                    })
                                                                }
                                                            })
                                                        }
                                                    })
                                                }
                                            })


                                        }
                                    })

                                } else {
                                    flag++;
                                    if (flag === ticket_list.length) {
                                        cb(null, true);
                                    }
                                }


                            }
                        });
                    }
                }
            });
        }
    } else {
        cb(null, false)
    }
}


function changeIncidentTicketStatusForProblem(data, cb) {
    let sqlT = " select x.incident_ticket_id, x.problem_ticket_id from incident_problem_ticket_mapping x where x.problem_ticket_id = " + data.ticketId + "  and x.deleteflag = '0' ";
    con.query(sqlT, function (errT, resultT) {
        if (errT) {
            logData(errT);
            cb(errT, null);
        } else {
            if (resultT.length > 0) {
                var flg;
                if (resultT.length > 1) {
                    flg = 1;
                } else {
                    flg = 0;
                }
                for (var i = 0; i < resultT.length; i++) {
                    var xx = resultT[i].incident_ticket_id;
                    let sql = " update ticket set tstatus =(select id from TICKETATTRIBUTES where CLIENTID =" + data.clientId + " and ATTRID = 2 and sequence_no=" + data.status_seq + " and DeleteFlag = 0 ) " +
                        " , modifydate = Now(), modifybyid =" + data.user_id + " " +
                        " where id =" + resultT[i].incident_ticket_id + " ";
                    con.query(sql, function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            getWorkflowResultMaxId({ "id": xx }, function (errI, successI, resultsI) {
                                if (errI || !successI) {
                                    logData(errI);
                                    cb(errI, null);
                                } else {
                                    let sql1 = " update WFCCLIENTRESULT set tStatus =(select id from TICKETATTRIBUTES where CLIENTID =" + data.clientId + " and ATTRID = 2 and sequence_no=" + data.status_seq + " and DeleteFlag = 0 ) " +
                                        " , modifydate = Now(), modifybyid =" + data.user_id + " " +
                                        " where PKFIELDVAL =" + xx + " " +
                                        " and id = " + resultsI + " ";
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            callStopSlaDtlsTicketWise({
                                                "id": xx,
                                                "user_id": data.user_id,
                                                "reqType": "",
                                                "clientId": data.clientId
                                            }, function (errC, successC, detailsC) {
                                                flg++;
                                                logData('changeIncidentTicketStatusForProblem----------------' + flg)
                                                if (flg == resultT.length) {
                                                    cb(null, true, 'done');
                                                }
                                            });

                                        }
                                    });
                                }
                            })


                        }
                    });
                }
            } else {
                cb(null, false, resultT);
            }
        }
    });

}

function updateIncdntTcktStusForProbWthClose(data, cb) {
    let sqlT = " select problem_ticket_id,group_concat(incident_ticket_id) incident_ticket_id from incident_problem_ticket_mapping x where x.problem_ticket_id = ?  and x.deleteflag = '0' ";
    con.query(sqlT, [data.ticketId], function (errT, resultT) {
        if (errT) {
            logData(errT);
            cb(errT, null);
        } else {
            if (resultT.length > 0) {
                var incidentLt = resultT[0].incident_ticket_id
                /*****************************************************/
                logData('incidentLt-------------' + JSON.stringify(incidentLt))
                request
                    .get(SLA_URL + '/updateclosrDtForIncidentTckts?incident_ticket_no=' + incidentLt)
                    .end((err, resp) => {
                        if (err) {
                            logData(err);
                        } else {
                            logData('done---resp--' + JSON.stringify(resp))
                            logData('done---resp--' + JSON.stringify(resp.text))
                            cb(null, false, "OK");
                            // logData('done---resp--' +  JSON.parse(resp.text).resVal.slaResponsePeriod);
                        }
                        // Do something
                    });
                /*****************************************************/
            } else {
                cb(null, false, resultT);
            }
        }
    });
}

function updateIncdntTcktStusForProbWthSoln(data, cb) {
    let sqlT = " select problem_ticket_id,group_concat(incident_ticket_id) incident_ticket_id from incident_problem_ticket_mapping x where x.problem_ticket_id = ?  and x.deleteflag = '0' ";
    con.query(sqlT, [data.ticketId], function (errT, resultT) {
        if (errT) {
            logData(errT);
            cb(errT, null);
        } else {
            logData('updateIncdntTcktStusForProbWthSoln-------------------' + sqlT)
            logData('updateIncdntTcktStusForProbWthSoln-------------------' + resultT.length)
            if (resultT.length > 0) {
                var incidentLt = resultT[0].incident_ticket_id
                /*****************************************************/
                logData('incidentLt-------------' + JSON.stringify(incidentLt))
                request
                    .get(SLA_URL + '/updateIncidentTcktsStatusForSoln?problem_ticket_no=' + data.ticketId + '&incident_ticket_no=' + incidentLt)
                    .end((err, resp) => {
                        if (err) {
                            logData(err);
                        } else {
                            logData('done---resp--' + JSON.stringify(resp))
                            logData('done---resp--' + JSON.stringify(resp.text))
                            cb(null, false, "OK");
                            // logData('done---resp--' +  JSON.parse(resp.text).resVal.slaResponsePeriod);
                        }
                        // Do something
                    });
                /*****************************************************/
            } else {
                cb(null, false, resultT);
            }
        }
    });
}

function insertAssetIds(data, cb) {
    if (data.assetIds) {
        let flag = 0;
        for (let i = 0; i < data.assetIds.length; i++) {
            let sql1 = "SELECT id FROM ticket_asset WHERE ticketId = ? AND assetId = ? AND DeleteFlag = 0 ;";
            con.query(sql1, [data.ticketId, data.assetIds[i]], function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    if (result1.length === 0) {
                        let sql = " Insert into ticket_asset (ticketId,wfcclientresultid,assetId,createbyid) " +
                            " values(" + data.ticketId + "," + data.WFCClientResultId + "," + data.assetIds[i] + "," + data.createdBy + ") ";
                        con.query(sql, function (err, result) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                flag++;
                                if (flag === data.assetIds.length) {
                                    const sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId) " +
                                        " VALUES (?,?,?,?) ";
                                    con.query(sql5, [data.ticketId, '13', data.WFCClientResultId, data.createdBy], function (err) {
                                        if (err) {
                                            util.logData(err);
                                            cb(err, null)
                                        }else{
                                             // optimizedreport table starts
                                             var sql4 = "select (select id from optimizedreport where ticket_id =?) id,login_name,name from USER where id =? ;"
                                             con.query(sql4, [data.ticketId, data.createdBy], function (err, result4) {
                                                 if (err) {
                                                     cb(err, null);
                                                 } else {
 
                                                     var sql45 = "update optimizedreport set last_modified_id=?,ticket_last_modified_dt=Now()"
                                                         + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? ;"
                                                     con.query(sql45, [data.createdBy, result4[0].login_name, result4[0].name, data.createdBy, result4[0].id], function (err, result45) {
                                                         if (err) {
                                                             cb(err, null)
                                                         } else {
                                                             logData("&&&&&&&&&&&&&&------------>" + sql45);
                                                             console.log("^^^^^^^^^", result45);
                                                             cb(null, true, result45);
                                                         }
                                                     })
                                                 }
                                             });
 
                                             // optimizedreport table ends
                                        }
                                    });
                                    cb(null, true, "Inserted Successfully");
                                }

                                 // optimizedreport table starts

                                 var sql4 = "select (select id from optimizedreport where ticket_id =?) id, description from asset_description a,ticket_asset b where a.id = b.assetId and b.ticketId =? and b.DeleteFlag = '0';"
                                 con.query(sql4, [data.ticketId, data.ticketId], function (err, result4) {
                                     if (err) {
                                         cb(err, null);
                                     } else {
                                         var sql45 = "update optimizedreport set config_item_ref =? where id =? ;"
                                         con.query(sql45, [result4[0].description, result4[0].id], function (err, result45) {
                                             if (err) {
                                                 cb(err, null)
                                             } else {
                                                 logData("&&&&&&&&&&&&&&------------>" + sql45);
                                                 console.log("^^^^^^^^^", result45);
                                                 cb(null, true, result45);
                                             }
                                         })
                                     }
                                 });
 
 
                                 // optimizedreport table ends

                            }
                        });
                    } else {
                        cb(null, false, "Selected assets already exists");
                    }
                }
            });
        }
    } else {
        cb(null, true);
    }
}


function insertSlaStartStopLogs(data, cb) {
    var str = "insert into ticket_sla_startstop_logs(ticket_id,sla_start_WFCClientResultId) values(" + data.ticketId + "," + data.WFCClientResultId + ") ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function updateWFCResultForDispatch(data, cb) {

    var str3 = " SELECT id,'111' FROM (select max(a.id) id from WFCCLIENTRESULT a where a.PKFIELDVAL = " + data.id + ") t ";
    con.query(str3, function (err3, result3) {
        if (err3) {
            logData(err3);
            cb(err3, null);
        } else {
            util.logData('result3==========' + JSON.stringify(result3));
            let sql = "Update WFCCLIENTRESULT set dispatch_date = Now() where PKFIELDVAL = " + data.id + " and id = " + result3[0].id + " ";

            con.query(sql, function (err, result2) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    let sql1 = "select date_format (createdate,'%d/%m/%Y %T') createdate,date_format (dispatch_date,'%d/%m/%Y %T') dispatch_date from  WFCCLIENTRESULT  where PKFIELDVAL = " + data.id + " and id =" + result3[0].id + " ";
                    con.query(sql1, function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {
                            if (result1.length > 0) {
                                let stDate = result1[0].createdate;
                                let toDate = result1[0].dispatch_date;
                                logData('stDate-------------------' + stDate);
                                logData('toDate-------------------' + toDate);
                                request
                                    .get(SLA_URL + '/getSalPeriodDateWise')
                                    .query({ ticketId: data.id, frDate: stDate, toDate: toDate }) // query string
                                    .end((err, resp) => {
                                        if (err) {
                                            logData(err);
                                        } else {
                                            util.logData('getSalPeriodDateWise====' + JSON.stringify(resp));
                                            let x = JSON.parse(resp.text).resVal.slaResponsePeriod;
                                            var str = "update WFCCLIENTRESULT set sla_time_for_indivitual = " + x + "" +
                                                " where PKFIELDVAL = " + data.id + " and id = " + result3[0].id + " ";
                                            con.query(str, function (err, result) {
                                                if (err) {
                                                    logData(err);
                                                    cb(err, null);
                                                } else {
                                                    cb(null, true, result);
                                                }
                                            });

                                        }
                                        // Do something
                                    });

                            }

                        }
                    });
                }
            });
        }
    });


}

function generateWorkFlow(data, cb) {
    if (data.is_1st_entry === 'Y') {
        if (data.reopen === '1') {
            updateWFCResultForReopen(data, function (errX, successX, resultsX) {
                if (errX || !successX) {
                    logData(errX);
                    cb(errX, null);
                } else {
                    insetWFCResult(data, function (errI, successI, resultsI) {
                        if (errI || !successI) {
                            logData(errI);
                            cb(errI, null);
                        } else {
                            cb(null, true, resultsI);
                        }
                    })
                }
            })
        } else {
            insetWFCResult(data, function (errI, successI, resultsI) {
                if (errI || !successI || resultsI.insertId == 0) {
                    logData(errI);
                    cb(errI, null);
                } else {
                    cb(null, true, resultsI);
                }
            })
        }
    } else {
        var dataU = {
            "id": data.PKFIELDVAL
        };
        updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
            if (errU || !successU) {
                logData(errU);
                cb(errU, null);
            } else {
                if (data.reopen === '1') {
                    updateWFCResultForReopen(data, function (errX, successX, resultsX) {
                        if (errX || !successX) {
                            logData(errX);
                            cb(errX, null);
                        } else {
                            insetWFCResult(data, function (errI, successI, resultsI) {
                                if (errI || !successI) {
                                    logData(errI);
                                    cb(errI, null);
                                } else {
                                    cb(null, true, resultsI);
                                }
                            })
                        }
                    })
                } else {
                    isWFCResultForGroupForUsrRly(data, function (errIU, successIU, resultsIU) {
                        if (errIU || !successIU) {
                            logData(errIU);
                            cb(errIU, null);
                        } else {
                            if (resultsIU == 1) {
                                data.user_id = null;
                            }
                            insetWFCResult(data, function (errI, successI, resultsI) {
                                if (errI || !successI) {
                                    logData(errI);
                                    cb(errI, null);
                                } else {
                                    cb(null, true, resultsI);
                                }
                            })
                        }
                    })

                }
            }
        });
    }
}

function insetWFCResult(data, cb) {
    var str = "INSERT INTO WFCCLIENTRESULT (CLIENTID,user_id,frw_user_id,work_flow_component_id,wfcclient_id," +
        " supportGroupLevelId,PKFIELDVAL,FIELDVAL,RESOLUTIONFIELD,serial_no,END_INDICATOR,createbyid,category_id,tStatus) " +
        " VALUES (" + data.clientId + "," + data.user_id + "," + data.frw_user_id + "," + data.work_flow_component_id + ", " + data.wfcclient_id + "," +
        " " + data.supportGroupLevelId + ", " + data.PKFIELDVAL + "," + data.FIELDVAL + ",1,1,0," + data.createdBy + "," + data.category_id + "," + data.tStatus_cd + ") ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            insertLatestWFCClientResult({
                "ticketId": data.PKFIELDVAL
            }, function (errET, successET, detailsET) {
                if (errET || !successET) {
                    cb(null, true, 0);
                } else {
                    cb(null, true, result.insertId);
                }
            })
        }
    });
}

function getTicketTypeId(data, cb) {
    var str = "select id, ticketTypeId from ticket where id = ? ";
    con.query(str, [data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result[0].ticketTypeId);
        }
    });
}

function isWFCResultForGroupForUsrRly(data, cb) {
    if (data.sequence_no) {
        if (data.sequence_no == 13) {
            getTicketTypeId({ "id": data.PKFIELDVAL }, function (errTTI, successTTI, detailsTTI) {
                if (errTTI || !successTTI) {
                    cb(null, true, 0);
                } else {
                    getUserOrGroupSelectionForTicketStatus({
                        "clientId": data.clientId,
                        "ticketTypeId": detailsTTI,
                        "ticketId": data.PKFIELDVAL,
                        "ticketStatusSeq": 13
                    }, function (errET, successET, detailsET) {
                        if (errET || !successET) {
                            cb(null, true, 0);
                        } else {
                            if (detailsET == 'user') {
                                cb(null, true, 0);
                            } else {
                                cb(null, true, 1);
                            }
                        }
                    })
                }
            })
        } else {
            cb(null, true, 0);
        }
    } else {
        cb(null, true, 0);
    }
}

// function insetWFCResult(data, cb) {
//     var str1 = "SELECT * FROM `WFCCLIENTRESULT` WHERE `PKFIELDVAL`=? ORDER BY id DESC LIMIT 1";
//     con.query(str1, [data.PKFIELDVAL], function (err, result1) {
//         if (err) {
//             logData(err);
//             cb(err, null);
//         } else {
//             if (result1.length === 0 || result1[0].tStatus !== Number(data.tStatus_cd)) {
//                 var str = "INSERT INTO WFCCLIENTRESULT (CLIENTID,user_id,frw_user_id,work_flow_component_id,wfcclient_id," +
//                     " supportGroupLevelId,PKFIELDVAL,FIELDVAL,RESOLUTIONFIELD,serial_no,END_INDICATOR,createbyid,category_id,tStatus) " +
//                     " VALUES (" + data.clientId + "," + data.user_id + "," + data.frw_user_id + "," + data.work_flow_component_id + ", " + data.wfcclient_id + "," +
//                     " " + data.supportGroupLevelId + ", " + data.PKFIELDVAL + "," + data.FIELDVAL + ",1,1,0," + data.createdBy + "," + data.category_id + "," + data.tStatus_cd + ") ";
//                 con.query(str, function (err, result) {
//                     if (err) {
//                         logData(err);
//                         cb(err, null);
//                     } else {
//                         cb(null, true, result.insertId);
//                     }
//                 });
//             } else {
//                 cb(null, false, '');
//             }
//         }
//     });
// }

function updateWFCResultForReopen(data, cb) {
    var str = "update WFCCLIENTRESULT set is_deactive_for_reopen = '1' " +
        " where PKFIELDVAL =" + data.PKFIELDVAL + "  ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getCreaterDetail(data, cb) {
    var str = "SELECT e.id, e.CLIENTID,e.work_flow_component_id, e.wfcclient_id, e.supportGroupLevelId, e.PKFIELDVAL, e.FIELDVAL, e.RESOLUTIONFIELD, " +
        " e.serial_no, e.END_INDICATOR, e.createbyid, e.createdate, e.modifybyid, e.modifydate, e.DeleteFlag, e.DeleteDate, e.delete_by_id, e.user_id, " +
        " e.frw_user_id, e.category_id, e.tStatus, e.activeFlow, e.isDeviation,a.createor_support_grp_id FROM WFCCLIENTRESULT e, ticket a " +
        " where a.id = e.PKFIELDVAL and e.PKFIELDVAL =" + data.id + " order by e.id limit 1  ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getEscalationIdByCreator(data, cb) {
    var str = "select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + data.clientId + "  and ATTRID = 2  and sequence_no in (" + data.ticketStatusSeq + ") ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result[0].id);
            } else {
                cb(null, false, 0);
            }

        }
    });
}

function getResolveId(data, cb) {
    var str;
    if (data.ticket_type_seq && data.ticket_type_seq != null && !(data.ticket_type_seq == 1 || data.ticket_type_seq == 5 || data.ticket_type_seq == 6 || data.ticket_type_seq == 7)) {
        str = "select id from TICKETATTRIBUTES where DeleteFlag = '0' " +
            //" and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) " +
            "   and  CLIENTID in (select clientid from ticket where id =" + data.ticketId + ") " +
            " and ATTRID = 2  and sequence_no in (103)  ";
        //(select CLIENTID from USER where id=" + data.user_id + " )
    } else {
        str = "select id from TICKETATTRIBUTES where DeleteFlag = '0' " +
            //" and (CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) " +
            "     and  CLIENTID in (select clientid from ticket where id =" + data.ticketId + " )" +
            " and ATTRID = 2  and sequence_no in (" + data.seq_no + ")  ";
        //(select CLIENTID from USER where id=" + data.user_id + " )
    }
    util.logData('getResolveId===' + str);
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result[0].id);
        }
    });
}


function updateTicketCategory(data, cb) {
    var sql = "Update TICKETATTRIBUTES set ATTRVAL = '" + data.name + "' ," +
        " Attr_desc='" + data.description + "' , " +
        " modifybyid =" + data.user_id + " ," +
        " modifydate=NOW() " +
        " where id = " + data.id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}


function getMappedTicketType(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    for (let i = 0; i < results.dataObj.length; i++) {
                        results.dataObj[i].isAsset = stringToBool(results.dataObj[i].isAsset)
                    }
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT TICKETATTRIBUTES.id, CLIENT.NAME client, ATTRVAL name ,attr_desc description" +
                " ,sequence_no seq,it_asset_management isAsset FROM TICKETATTRIBUTES,CLIENT  where" +
                " TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=3 and TICKETATTRIBUTES.CLIENTID=CLIENT.id" +
                " and TICKETATTRIBUTES.id > " + offset + " ORDER BY TICKETATTRIBUTES.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT TICKETATTRIBUTES.id, CLIENT.NAME client, ATTRVAL name ,attr_desc description" +
                " ,sequence_no seq,it_asset_management isAsset FROM TICKETATTRIBUTES,CLIENT  where" +
                " TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=3 and TICKETATTRIBUTES.CLIENTID=CLIENT.id and TICKETATTRIBUTES.id < " +
                offset + " ORDER BY TICKETATTRIBUTES.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count FROM TICKETATTRIBUTES,CLIENT  where" +
            " TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=3 and TICKETATTRIBUTES.CLIENTID=CLIENT.id";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getMappedStatus(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT TICKETATTRIBUTES.id, CLIENT.NAME client, ATTRVAL name ,attr_desc description" +
                "  FROM TICKETATTRIBUTES,CLIENT  where TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=2 and" +
                " TICKETATTRIBUTES.clientId=CLIENT.id" +
                " and TICKETATTRIBUTES.id > " + offset + " ORDER BY TICKETATTRIBUTES.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT TICKETATTRIBUTES.id, CLIENT.NAME client, ATTRVAL name ,attr_desc description" +
                "  FROM TICKETATTRIBUTES,CLIENT  where TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=2 and" +
                " TICKETATTRIBUTES.clientId=CLIENT.id and TICKETATTRIBUTES.id < " +
                offset + " ORDER BY TICKETATTRIBUTES.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count" +
            " FROM TICKETATTRIBUTES,CLIENT  where TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=2 and" +
            " TICKETATTRIBUTES.clientId=CLIENT.id";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getBackwardWorkFlowlastState(data, cb) {
    let sql = "SELECT STARTENDFLOWINDICATOR,id FROM WFCCLIENT_backward_ticketWise where DeleteFlag = '0' and ticketId = " + data.ticketId + " order by id desc limit 1";
    con.query(sql, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result1);
        }
    });
}

function changeDateFormat(startDate) {
    // util.logData('startDate:: '+startDate)
    if (startDate === '') {
        return null;
    } else {
        return new Date(startDate).toISOString().slice(0, 19).replace('T', ' ');
    }
}

function getLatestStateTicketWise(data, cb) {
    let sql = "SELECT CLIENTID,FIELDVAL,work_flow_component_id,wfcclient_id," +
        " coalesce((SELECT workflowId FROM WFCCLIENT where id = a.wfcclient_id),0) workflowId " +
        " ,if((select count(*) from TICKETATTRIBUTES where DeleteFlag='0' and ATTRID=2 and sequence_no in ( 2,103,302,402) and id=(select tstatus from ticket where id =" + data.id + ")>0), 'B','F') flowIndicator " +
        " , category_id,serial_no,tStatus,user_id FROM WFCCLIENTRESULT a " +
        " where DeleteFlag = '0' and PKFIELDVAL = " + data.id + " order by id desc limit 1";
    con.query(sql, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result1);
        }
    });
}

function checkTicketCloseWFWise(data, cb) {
    let sql = "SELECT id,isCloseWF FROM ticket  where DeleteFlag = '0' and id = " + data.id + " and isCloseWF = 'Y' ";
    con.query(sql, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result1);
        }
    });
}

function updateTicketCloseWFWise(data, cb) {
    let sql = "update ticket set isCloseWF ='Y'   where id = " + data.id + "  ";
    con.query(sql, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result1.affectedRows);
        }
    });
}

function isRemarksDoneByUser(data, cb) {
    let sql1 = "SELECT * FROM ticketFeedBack where ticketId = " + data.id + " and WFCClientResultId =" + data.WFCClientResultId + " and createbyid =" + data.createdBy + " ";
    con.query(sql1, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length > 0) {
                cb(null, true, "ok");
            } else {
                cb(null, false, "not ok");
            }

        }
    });
}

function getNextAssigneeDtls(data, cb) {
    logData('*************************getNextAssigneeDtls************************')
    getLatestStateTicketWise(data, function (err, success, results) {
        if (results.length > 0) {
            if (results[0].wfcclient_id == 0) {
                cb(null, true, []);
            } else {
                var dataF = {
                    "clientId": results[0].CLIENTID,
                    "categoryId": results[0].FIELDVAL,
                    "workflowId": results[0].workflowId,
                    "work_flow_component_id": results[0].work_flow_component_id
                };
                getBackWorkFlowNotify(dataF, function (errF, successF, detailsF) {
                    var str = "";
                    if (detailsF == '3' && results[0].flowIndicator != 'F') {
                        str = "SELECT a.userId,coalesce(b.name,'') assignee," +
                            " COALESCE(a.supportGroupLevelId,'0') groupId,COALESCE(c.LEVELSHORTDESC,'') c.LEVELSHORTDESC " +
                            " ,'B' flowIndicator " +
                            " FROM WFCCLIENT_backward_ticketWise a LEFT JOIN USER b on a.userId = b.id " +
                            " LEFT JOIN SUPPORTGROUPLEVEL c on coalesce(a.supportGroupLevelId,0) = c.id , " +
                            " where a.categoryId =" + results[0].FIELDVAL + " " +
                            " and a.work_flow_component_id = " + results[0].work_flow_component_id + " " +
                            " AND a.CLIENTID = " + results[0].CLIENTID + " " +
                            " AND a.DeleteFlag = '0' " +
                            " AND a.ticketId =" + data.id + " " +
                            " and a.wfcclient_id< " + results[0].wfcclient_id + "  order by a.id desc limit 1 ";

                    } else {
                        str = "select b.id userId,coalesce(b.name,'') assignee " +
                            " ,c.id groupId,c.LEVELSHORTDESC ,c.sequence_no " +
                            " ,COALESCE(c.id,'0') groupId,COALESCE(c.LEVELSHORTDESC,'') LEVELSHORTDESC, COALESCE(c.sequence_no,'') " +
                            " ,a.flowIndicator " +
                            " from WFCCLIENT a LEFT JOIN USER b on a.userId = b.id " +
                            " LEFT JOIN SUPPORTGROUPLEVEL c on coalesce(a.supportGroupLevelId,0) = c.id ," +
                            "      (select b.sequence_no,wfcclient_id " +
                            "        from WFCCLIENTRESULT a, TICKETATTRIBUTES b " +
                            "        where a.id =  (select max(id) from WFCCLIENTRESULT where PKFIELDVAL = " + data.id + " having max(wfcclient_id)) " +
                            "        and a.tStatus = b.id) c " +
                            " where a.parent_wfcclient_id = c.wfcclient_id " +
                            " and a.flowIndicator= if (c.sequence_no in (2,103,302,402) , 'B','F') " +
                            " and a.DeleteFlag = '0' " +
                            " and (a.CLIENTID = " + data.clientId + " or a.CLIENTID in (select CLIENTID from ticket where id = " + data.id + ") ) ";
                    }
                    logData('getNextAssigneeDtls----------------------' + str)
                    con.query(str, function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null, "Some error in next asignee details");
                        } else {
                            if (result1.length > 0) {
                                cb(null, true, result1);
                            } else {
                                /******* error prone **********************/
                                if (detailsF != '1' && results[0].flowIndicator != 'F') {
                                    checkTicketCloseWFWise(data, function (errWFC, successWFC, resultsWFC) {
                                        logData('resultsWFC.length----------------------' + resultsWFC.length)
                                        if (resultsWFC.length > 0) {
                                            cb(null, true, []);
                                        } else {
                                            // let sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket " +
                                            //     " where id = " + data.id + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + data.id + " ";
                                            let sqlB = "SELECT createbyid, (select createor_support_grp_id from ticket " +
                                                " where id = " + data.id + ")  supportGroupLevelId FROM ticket where id = " + data.id + " ";
                                            logData('sqlB ----------sqlB------------' + sqlB)
                                            con.query(sqlB, function (errB, detailsB) {
                                                if (errB) {
                                                    logData(errB);
                                                    cb(errB, null);
                                                } else {
                                                    if (detailsB.length > 0) {
                                                        updateWFCResultForDispatch(data, function (errU, successU, resultsU) {
                                                            var sql12 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus ) values " +
                                                                " (" + results[0].CLIENTID + "," + results[0].work_flow_component_id + ",0,'" + detailsB[0].supportGroupLevelId + "'," +
                                                                " " + data.id + "," + results[0].FIELDVAL + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
                                                                " " + results[0].category_id + "," + data.createdby + "," + results[0].tStatus + " ) ";
                                                            logData('sql12 ----------sql12------------' + sql12)
                                                            con.query(sql12, function (err12, result12) {
                                                                if (err12) {
                                                                    logData(err12);
                                                                    cb(err12, null);
                                                                } else {


                                                                     // optimizedreport table starts

                                                                     var sql90 = "Select (select max(id) from optimizedreport where ticket_id=?)login_name,name,"
                                                                     + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
                                                                     + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                     + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                     + " from USER where id =? ;"
                                                                 con.query(sql90, [data.id, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
                                                                     if (err) {
                                                                         console.log(err);
                                                                     } else {
                                                                         console.log(result55);
                                                                         var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now()"
                                                                             + ",all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=?,"
                                                                             + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "

                                                                         con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].NAME, result55[0].NAME, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdby, result55[0].id], function (err, result77) {
                                                                             //  console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                             if (err) {
                                                                                 //    console.log("65342168451326854321698543216853241685426854",err);
                                                                                 cb(err, null);
                                                                             } else {
                                                                                 logData("&&&&&&&&&&&&&&------------>" + sql44);
                                                                                 // logData("&&&&&&&&&&&&&&------------>2" + params);
                                                                                 console.log("@#%$#%#%#@%#%$@#%@2", result77);
                                                                                 cb(null, true, result77);
                                                                             }
                                                                         })
                                                                     }
                                                                 })

                                                                 // optimizedreport table ends 



                                                                    //-[{"user_id":null,"assignee":"","groupId":15,"LEVELSHORTDESC":"CIT_IBM_L2","sequence_no":1,"flowIndicator":"F"}]
                                                                    var sql13 = "select  a.id, a.frw_user_id userId, a.user_id userId, a.supportGroupLevelId groupId, b.LEVELSHORTDESC LEVELSHORTDESC, 2 sequence_no, 'B' flowIndicator " +
                                                                        " from WFCCLIENTRESULT a, SUPPORTGROUPLEVEL b" +
                                                                        " where a.supportGroupLevelId = b.id " +
                                                                        " and a.PKFIELDVAL = " + data.id + " " +
                                                                        " order by a.id desc limit 1 ";
                                                                    logData('sql13 ----------sql13------------' + sql13)
                                                                    con.query(sql13, function (err13, result13) {
                                                                        if (err13) {
                                                                            logData(err13);
                                                                            cb(err13, null);
                                                                        } else {
                                                                            updateTicketCloseWFWise(data, function (errWFC, successWFC, resultsWFC) {
                                                                                logData('******************111111111*******************')
                                                                                insertLatestWFCClientResult({
                                                                                    "ticketId": data.id
                                                                                }, function (errET, successET, detailsET) {
                                                                                    if (errET || !successET) {
                                                                                        cb(null, true, 0);
                                                                                    } else {
                                                                                        cb(null, true, result13);
                                                                                    }
                                                                                })

                                                                            });

                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        });

                                                    } else {
                                                        cb(null, false, "Some error occured");
                                                    }
                                                }
                                            })
                                        }
                                    });

                                    /*****************************************************************************************************/
                                } else {
                                    cb(null, true, []);
                                }
                            }


                        }
                    });
                });
            }
        } else {
            cb(null, true, []);
        }

    });
}


function updateForwardedTicket(data, cb) {
    delete data.user_id;
    data.user_id = data.refer_user_id;
    logData('updateForwardedTicket----------------' + JSON.stringify(data))
    checkIsSlaCalculationDone({ "id": data.id }, function (errISC, successISC, resultsISC) {
        if (errISC) {
            logData(errISC);
            cb(errISC, null);
        } else {
            logData('updateForwardedTicket-----successISC-----------' + successISC)
            if (!successISC) {
                cb(null, false, resultsISC);
            } else {
                isTicketInSameCategory(data, function (errTGS, successTGS, detailsTGS) {
                    if (errTGS) {
                        logData(errTGS);
                        cb(errTGS, null);
                    } else {
                        if (successTGS) {
                            getLatestStateTicketWise(data, function (err, success, results) {
                                var dataF = {
                                    "clientId": results[0].CLIENTID,
                                    "categoryId": results[0].FIELDVAL,
                                    "workflowId": results[0].workflowId,
                                    "work_flow_component_id": results[0].work_flow_component_id
                                };
                                getBackWorkFlowNotify(dataF, function (errF, successF, detailsF) {
                                    isRemarksDoneByUser(data, function (errX, successX, resultsX) {
                                        if (errX) {
                                            logData(errX);
                                            cb(errX, null);
                                        } else {
                                            if (!successX && results[0].flowIndicator === 'F' && data.frdType !== 'Own') {
                                                cb(null, false, "Please add some comments in comment section before forwarding");
                                            } else {
                                                getNextAssigneeDtls({
                                                    "clientId": results[0].CLIENTID,
                                                    "id": data.id
                                                }, function (errNA, successNA, detailsNA) {
                                                    if (errNA || !successNA) {
                                                        cb(null, false, "Internal Error: You are unable to provide solution");
                                                    } else {
                                                        let nxtAssign = detailsNA.length;
                                                        if (detailsF == '3' && results[0].flowIndicator != 'F') {
                                                            var str = "SELECT a.id, a.CLIENTID, a.ticketId, a.categoryId, a.userId, a.STARTENDFLOWINDICATOR, a.supportGroupLevelId, a.parent_wfcclient_id, a.workflowId, a.work_flow_component_id, a.WORKFLOWLEVEL, a.wfcclient_id" +
                                                                " ,coalesce(b.name,'') assignee,a.supportGroupLevelId groupId,c.LEVELSHORTDESC ,'B' flowIndicator " +
                                                                " FROM SUPPORTGROUPLEVEL c ,WFCCLIENT_backward_ticketWise a LEFT JOIN USER b on a.userId = b.id " +
                                                                " where a.categoryId =" + results[0].FIELDVAL + " " +
                                                                " and a.supportGroupLevelId = c.id " +
                                                                " and a.work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                " AND a.CLIENTID = " + results[0].CLIENTID + " " +
                                                                " AND a.DeleteFlag = '0' " +
                                                                " AND a.ticketId =" + data.id + " " +
                                                                " and a.wfcclient_id< " + results[0].wfcclient_id + "  order by a.id desc limit 1 ";
                                                            con.query(str, function (errs, results111) {
                                                                if (errs) {
                                                                    logData(errs);
                                                                    cb(errs, null);
                                                                } else {
                                                                    if (results111.length > 0) {
                                                                        updateWFCResultForDispatch(data, function (errU, successU, resultsU) {
                                                                            var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, " +
                                                                                " category_id,createbyid,frw_user_id,tStatus ) values " +
                                                                                " (" + results[0].CLIENTID + "," + results111[0].work_flow_component_id + "," + results111[0].wfcclient_id + ",'" + results111[0].supportGroupLevelId + "'," +
                                                                                " " + data.id + "," + results111[0].categoryId + ",'1'," + results111[0].STARTENDFLOWINDICATOR + ",'0'," +
                                                                                " " + results111[0].userId + " ," +
                                                                                //" " + results[0].categoryId + "," + data.user_id + ",58 ) ";
                                                                                " " + results111[0].categoryId + "," + data.user_id + "," + data.createdBy + ",(select id from TICKETATTRIBUTES where DeleteFlag='0' and ATTRID=2 and sequence_no = 2  and id=(select tstatus from ticket where id = " + data.id + ")) ) ";
                                                                            con.query(sql1, function (errs1, results1) {
                                                                                if (errs1) {
                                                                                    logData(errs1);
                                                                                    cb(errs1, null);
                                                                                } else {

                                                                                    // optimizedreport table starts

                                                                                    var sql90 = "Select (select id from optimizedreport where ticket_id =?) id,login_name,name,"
                                                                                        + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
                                                                                        + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                        + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                        + " from USER where id =? "
                                                                                    con.query(sql90, [data.id, results111[0].supportGroupLevelId, results111[0].userId, results111[0].userId, results111[0].userId], function (err, result55) {
                                                                                        if (err) {
                                                                                            console.log(err);
                                                                                        } else {
                                                                                            console.log(result55);
                                                                                            var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now()"
                                                                                                + ",all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?"
                                                                                                + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                            console.log("WS@###########################", result55[0].id);
                                                                                            con.query(sql44, [results111[0].supportGroupLevelId, results111[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                console.log("%^&*(*&%^&*()(*&6595639586956------>");
                                                                                                if (err) {
                                                                                                    console.log("65342168451326854321698543216853241685426854", err);
                                                                                                    cb(err, null);
                                                                                                } else {
                                                                                                    logData("&&&&&&&&&&&&&&------------>" + sql44);
                                                                                                    // logData("&&&&&&&&&&&&&&------------>1" + params);
                                                                                                    console.log("@#%$#%#%#@%#%$@#%@3", result77);
                                                                                                    cb(null, true, result77);
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    });

                                                                                    // optimizedreport table ends

                                                                                    insertLatestWFCClientResult({
                                                                                        "ticketId": data.id
                                                                                    }, function (errET, successET, detailsET) {
                                                                                        if (errET || !successET) {
                                                                                            cb(null, true, 0);
                                                                                        } else {
                                                                                            cb(null, true, "ok");
                                                                                        }
                                                                                    })
                                                                                    // callforSlaResponseTicketWise({
                                                                                    //     "id": data.id,
                                                                                    //     "user_id": data.user_id,
                                                                                    //     "reqType": ""
                                                                                    // }, function (errSS, successSS, detailsSS) {
                                                                                    //
                                                                                    // });

                                                                                }
                                                                            })
                                                                        });
                                                                    } else {
                                                                        let sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket where id = " + data.id + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + data.id + " ";
                                                                        con.query(sqlB, function (errB, detailsB) {
                                                                            if (errB) {
                                                                                logData(errB);
                                                                                cb(errB, null);
                                                                            } else {
                                                                                if (detailsB.length > 0) {
                                                                                    updateWFCResultForDispatch(data, function (errU, successU, resultsU) {
                                                                                        var sql12 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                            " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus ) values " +
                                                                                            " (" + results[0].CLIENTID + "," + results[0].work_flow_component_id + ",0,'" + detailsB[0].supportGroupLevelId + "'," +
                                                                                            " " + data.id + "," + results[0].FIELDVAL + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
                                                                                            " " + results[0].category_id + "," + data.createdBy + "," + results[0].tStatus + " ) ";
                                                                                        con.query(sql12, function (err12, result12) {
                                                                                            if (err12) {
                                                                                                logData(err12);
                                                                                                cb(err12, null);
                                                                                            } else {

                                                                                                // optimizedreport table starts

                                                                                                var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                    + "replace(group_concat(concat((?),'@')),',',' / ') supportgroup,"
                                                                                                    + "replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / ') ps,"
                                                                                                    + "replace(group_concat(concat((select name from USER where id =?),'/')),',',' / ') l_name"
                                                                                                    + " from USER where id =? "
                                                                                                con.query(sql90, [data.id, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
                                                                                                    if (err) {
                                                                                                        console.log(err);
                                                                                                    } else {
                                                                                                        console.log(result55);
                                                                                                        var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now()"
                                                                                                            + ",all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=? "
                                                                                                            + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                        // console.log("WS@###########################",result60[0].id);
                                                                                                        con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                            // console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                                            if (err) {
                                                                                                                //   console.log("65342168451326854321698543216853241685426854",err);
                                                                                                                cb(err, null);
                                                                                                            } else {
                                                                                                                logData("&&&&&&&&&&&&&&------------>" + sql44);
                                                                                                                console.log("@#%$#%#%#@%#%$@#%@4---------->", result77);
                                                                                                                cb(null, true, result77);
                                                                                                            }
                                                                                                        })
                                                                                                    }
                                                                                                });

                                                                                                // optimizedreport table ends


                                                                                                insertLatestWFCClientResult({
                                                                                                    "ticketId": data.id
                                                                                                }, function (errET3, successET3, detailsET3) {
                                                                                                    if (errET3 || !successET3) {
                                                                                                        cb(null, true, 0);
                                                                                                    } else {
                                                                                                        cb(null, true, "Successfully forwared");
                                                                                                    }
                                                                                                })

                                                                                            }
                                                                                        });
                                                                                    });

                                                                                } else {
                                                                                    cb(null, false, "Some error occured");
                                                                                }
                                                                            }
                                                                        })
                                                                    }

                                                                }
                                                            })

                                                        } else if (nxtAssign == 0 && results[0].flowIndicator != 'F' && data.selected == 0) {
                                                            let sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket where id = " + data.id + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + data.id + " ";
                                                            con.query(sqlB, function (errB, detailsB) {
                                                                if (errB) {
                                                                    logData(errB);
                                                                    cb(errB, null);
                                                                } else {
                                                                    if (detailsB.length > 0) {
                                                                        updateWFCResultForDispatch(data, function (errU, successU, resultsU) {
                                                                            var sql12 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus ) values " +
                                                                                " (" + results[0].CLIENTID + "," + results[0].work_flow_component_id + ",0,'" + detailsB[0].supportGroupLevelId + "'," +
                                                                                " " + data.id + "," + results[0].FIELDVAL + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
                                                                                " " + results[0].category_id + "," + data.createdBy + "," + results[0].tStatus + " ) ";
                                                                            con.query(sql12, function (err12, result12) {
                                                                                if (err12) {
                                                                                    logData(err12);
                                                                                    cb(err12, null);
                                                                                } else {

                                                                                    // optimizedreport table starts

                                                                                    var sql90 = "Select (select id from optimizedreport where ticket_id =?) id,login_name,name,"
                                                                                        + "replace(group_concat(concat((?),'@')),',',' / ') supportgroup,"
                                                                                        + "replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / ') ps,"
                                                                                        + "replace(group_concat(concat((select name from USER where id =?),'/')),',',' / ') l_name"
                                                                                        + " from USER where id =? ;"
                                                                                    con.query(sql90, [data.id, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
                                                                                        if (err) {
                                                                                            console.log(err);
                                                                                        } else {
                                                                                            console.log(result55);
                                                                                            var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now()"
                                                                                                + ",all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=?"
                                                                                                + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "

                                                                                            con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                //    console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                                if (err) {
                                                                                                    //    console.log("65342168451326854321698543216853241685426854",err);
                                                                                                    cb(err, null);
                                                                                                } else {
                                                                                                    logData("&&&&&&&&&&&&&&------------>" + sql44);
                                                                                                    console.log("*******************------->", result77);
                                                                                                    cb(null, true, result77);
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    });
                                                                                    // optimizedreport table ends

                                                                                    
                                                                                    insertLatestWFCClientResult({
                                                                                        "ticketId": data.id
                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                        if (errET3 || !successET3) {
                                                                                            cb(null, true, 0);
                                                                                        } else {
                                                                                            cb(null, true, "Successfully forwared");
                                                                                        }
                                                                                    })

                                                                                }
                                                                            });
                                                                        });

                                                                    } else {
                                                                        cb(null, false, "Some error occured");
                                                                    }
                                                                }
                                                            })
                                                        } else {
                                                            let str = "SELECT CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD," +
                                                                " serial_no, END_INDICATOR, user_id, frw_user_id, category_id,tStatus" +
                                                                " ,(select workflowId from WFCCLIENT where id = a.wfcclient_id) workflowId" +
                                                                "  FROM WFCCLIENTRESULT a" +
                                                                " where PKFIELDVAL = " + data.id + " and END_INDICATOR=0  order by id desc limit 1 ";
                                                            con.query(str, function (errs, results) {
                                                                if (errs) {
                                                                    logData(errs);
                                                                    cb(errs, null);
                                                                } else {
                                                                    if (results == null || results.length == 0) {
                                                                        cb(null, false, "Data not found.");
                                                                    } else {
                                                                        var sql11 = "SELECT id,workflowId FROM WFCCLIENT where categoryId =" + data.cat_id + " " +
                                                                            " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                            " and parent_wfcclient_id =" + results[0].wfcclient_id + " order by id limit 1 ";
                                                                        con.query(sql11, function (err11, result11) {
                                                                            if (err11) {
                                                                                logData(err11);
                                                                                cb(err11, null);
                                                                            } else {
                                                                                var wfcclientId = "";
                                                                                var workflowId = "";
                                                                                var sql5 = "";
                                                                                if (data.frdType == 'Own') {
                                                                                    wfcclientId = results[0].wfcclient_id;
                                                                                    workflowId = results[0].workflowId;
                                                                                } else {
                                                                                    if (data.isDeviation) {
                                                                                        wfcclientId = 0;
                                                                                    } else {
                                                                                        if (result11.length > 0) {
                                                                                            wfcclientId = result11[0].id;
                                                                                            workflowId = result11[0].workflowId;
                                                                                        } else {
                                                                                            cb(null, false, "Some error occured");
                                                                                        }
                                                                                    }

                                                                                }
                                                                                updateWFCResultForDispatch(data, function (errU, successU, resultsU) {
                                                                                    var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, frw_user_id, " +
                                                                                        " category_id,createbyid,tStatus ";
                                                                                    if (data.isDeviation) {
                                                                                        sql1 = sql1 + ",isDeviation ";
                                                                                    }
                                                                                    sql1 = sql1 + " ) values " +
                                                                                        " (" + results[0].CLIENTID + "," + results[0].work_flow_component_id + "," + wfcclientId + ",'" + data.supportGroupLevelId + "'," +
                                                                                        " " + data.id + "," + data.cat_id + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," +
                                                                                        " " + data.user_id + "," + data.createdBy + "," +
                                                                                        " " + data.parent_cat_id + "," + data.createdBy + "," + results[0].tStatus + " ";
                                                                                    if (data.isDeviation) {
                                                                                        sql1 = sql1 + " ,'true' ";
                                                                                    }
                                                                                    sql1 = sql1 + " ) ";
                                                                                    if (data.isDeviation) {
                                                                                        var fldT = {
                                                                                            "id": data.id
                                                                                        };
                                                                                        updateTicketForDeviation(fldT, function (errT, successT, detailsT) {
                                                                                        });
                                                                                    }
                                                                                    con.query(sql1, function (err1, result1) {
                                                                                        if (err1) {
                                                                                            logData(err1);
                                                                                            cb(err1, null);
                                                                                        } else {

                                                                                             // optimizedreport table starts

                                                                                             var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                             + "replace(group_concat(concat((?),'@')),',',' / ') supportgroup,"
                                                                                             + "replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / ') ps,"
                                                                                             + "replace(group_concat(concat((select name from USER where id =?),'/')),',',' / ') l_name"
                                                                                             + " from USER where id = ?"
                                                                                         console.log("---------98765", sql90);
                                                                                         con.query(sql90, [data.id, data.supportGroupLevelId, data.user_id, data.user_id, data.user_id], function (err, result55) {
                                                                                             if (err) {
                                                                                                 console.log(err);
                                                                                             } else {
                                                                                                 console.log(result55);
                                                                                                 var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now()"
                                                                                                     + ",all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?"
                                                                                                     + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                                                                 // console.log("WS@###########################",result60[0].id);
                                                                                                 con.query(sql44, [data.supportGroupLevelId, data.supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                     console.log("%^&*(*&%^&*()(*&6595639586956------------->");
                                                                                                     if (err) {
                                                                                                         console.log("65342168451326854321698543216853241685426854", err);
                                                                                                         cb(err, null);
                                                                                                     } else {
                                                                                                         logData("_______________#$" + sql44);
                                                                                                         console.log(result77);
                                                                                                         cb(null, true, result77);
                                                                                                     }
                                                                                                 })
                                                                                             }
                                                                                         });

                                                                                         // optimizedreport table ends


                                                                                            insertLatestWFCClientResult({
                                                                                                "ticketId": data.id
                                                                                            }, function (errET3, successET3, detailsET3) {
                                                                                                if (errET3 || !successET3) {
                                                                                                    logData('insertLatestWFCClientResult-->' + errET3 + successET3)
                                                                                                    // cb(null, true, 0);
                                                                                                } else {
                                                                                                    logData('insertLatestWFCClientResult--')
                                                                                                }
                                                                                            })
                                                                                            var sql5 = "";
                                                                                            var usr = "";
                                                                                            var fldC = {
                                                                                                "clientId": results[0].CLIENTID,
                                                                                                "workflowId": workflowId,
                                                                                                "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                "categoryId": data.cat_id
                                                                                            };
                                                                                            checkBackWorkFlowDefined(fldC, function (errC, successC, detailsC) {
                                                                                                if (detailsC == '3') {
                                                                                                    var fldT = {
                                                                                                        "ticketId": data.id
                                                                                                    };
                                                                                                    getBackwardWorkFlowlastState(fldT, function (errT, successT, detailsT) {
                                                                                                        if (detailsT == null || detailsT.length == 0) {
                                                                                                            cb(null, false, "Some error");
                                                                                                        } else {
                                                                                                            var fld = {
                                                                                                                "clientId": results[0].CLIENTID,
                                                                                                                "ticketId": data.id,
                                                                                                                "categoryId": data.cat_id,
                                                                                                                "user_id": data.user_id,
                                                                                                                "sfIndecator": (parseInt(results[0].serial_no) + 1),
                                                                                                                "supportGroupLevelId": data.supportGroupLevelId,
                                                                                                                "parent_wfcclient_id": detailsT[0].id,
                                                                                                                "STARTENDFLOWINDICATOR": detailsT[0].STARTENDFLOWINDICATOR + 1,
                                                                                                                "createdBy": data.createdBy,
                                                                                                                "workflowId": workflowId,
                                                                                                                "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                                "wfcclient_id": wfcclientId,
                                                                                                                "flowIndicator": 'B'
                                                                                                            };
                                                                                                            insertWFCClientTicketWise(fld, function (err1, success1, details) {
                                                                                                                if (success1) {
                                                                                                                    changeParentIdTicketWise(fld, function (err2, success2, details2) {
                                                                                                                        if (!success2) {
                                                                                                                            cb(null, true, "Some error");
                                                                                                                        }
                                                                                                                    });
                                                                                                                } else {
                                                                                                                    cb(null, false, details);
                                                                                                                }
                                                                                                            });
                                                                                                        }
                                                                                                    });

                                                                                                }
                                                                                            });

                                                                                            if (data.frdType == 'Own') {
                                                                                                let usrS = "SELECT NAME nm FROM USER  where id = " + data.user_id + " ";
                                                                                                con.query(usrS, function (usrSerr, usrSdetails) {
                                                                                                    if (usrSerr) {
                                                                                                        logData(usrSerr);
                                                                                                        cb(usrSerr, null);
                                                                                                    } else {
                                                                                                        if (usrSdetails.length > 0) {
                                                                                                            usr = "Forwarded To : Own Group. User: " + usrSdetails[0].nm;
                                                                                                        }

                                                                                                        sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                                                            " VALUES (" + data.id + ",3," + result1.insertId + "," + data.createdBy + ",'" + usr + "') ";
                                                                                                        con.query(sql5, function (err5, result5) {
                                                                                                            if (err5) {
                                                                                                                logData(err5);
                                                                                                                cb(err5, null);
                                                                                                            } else {

                                                                                                                
                                                                                                                // optimizedreport table starts

                                                                                                                var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                    // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                                                    + "replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / ') ps,"
                                                                                                                    + "replace(group_concat(concat((select name from USER where id =?),'/')),',',' / ') l_name"
                                                                                                                    + " from USER where id = ? "
                                                                                                                con.query(sql90, [data.id, data.user_id, data.user_id, data.user_id], function (err, result55) {
                                                                                                                    if (err) {
                                                                                                                        console.log(err);
                                                                                                                    } else {
                                                                                                                        console.log(result55);
                                                                                                                        var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                                            + "all_analyst_ps= ?,all_analyst_name=?,"
                                                                                                                            + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                                                                                        // console.log("WS@###########################",result60[0].id);
                                                                                                                        con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, usr, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                                                            console.log("%^&*(*&%^&*()(*&659563958695ewdsf6");
                                                                                                                            if (err) {
                                                                                                                                console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                cb(err, null);
                                                                                                                            } else {
                                                                                                                                logData("********____qwe________>>>" + sql44);
                                                                                                                                console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                                                                                cb(null, true, result77);
                                                                                                                            }
                                                                                                                        })
                                                                                                                    }
                                                                                                                });

                                                                                                                // optimizedreport table ends
                                                        
                                                                                                                request
                                                                                                                    .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=2&actionID=3&actionData=')
                                                                                                                    .end((err, resp) => {
                                                                                                                        if (err) {
                                                                                                                            logData(err);
                                                                                                                        } else {
                                                                                                                            logData('done')
                                                                                                                            logData('done----err---' + err)
                                                                                                                            logData('done---resp--' + JSON.stringify(resp))
                                                                                                                        }
                                                                                                                        // Do something
                                                                                                                    });

                                                                                                                logData('\n\n\ndata ----------' + JSON.stringify(data))
                                                                                                                logData('\n\n\ndata.tStatus ----------' + data.tStatus)
                                                                                                                // data.tStatus = 36;
                                                                                                                checkStatus({
                                                                                                                    "ticketId": data.id,
                                                                                                                    "tStatus": data.tStatus
                                                                                                                }, function (errUC, successUC, resultsUC) {
                                                                                                                    if (errUC) {
                                                                                                                        logData(errUC);
                                                                                                                        cb(errUC, null);
                                                                                                                    } else {
                                                                                                                        if (resultsUC !== 0) {
                                                                                                                            if (resultsUC[0].sequence_no === 1) {
                                                                                                                                callforSlaResponseTicketWise({
                                                                                                                                    "id": data.id,
                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                    "reqType": ""
                                                                                                                                }, function (errSS, successSS, detailsSS) {

                                                                                                                                });
                                                                                                                                getStatusIdClientWise({
                                                                                                                                    "clientId": results[0].CLIENTID,
                                                                                                                                    "seq": 8
                                                                                                                                }, function (errSICS, successSICS, detailsSICS) {
                                                                                                                                    if (errSICS || !successSICS) {
                                                                                                                                        logData(errSICS + successSICS);
                                                                                                                                        cb(errSICS, null);
                                                                                                                                    } else {
                                                                                                                                        updateTicketStatus({
                                                                                                                                            "ticketId": data.id,
                                                                                                                                            "user_id": data.createdBy,
                                                                                                                                            "clientId": results[0].CLIENTID,
                                                                                                                                            "id": result1.insertId,
                                                                                                                                            "tStatus": detailsSICS,
                                                                                                                                            "support_group": data.support_group
                                                                                                                                        }, function (errSS, successSS, detailsSS) {

                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                })

                                                                                                                            } else {
                                                                                                                                logData('****************************************************************else-------------------------------')
                                                                                                                                //******************************************************
                                                                                                                                getIsClientWiseSlaCalculationReq({
                                                                                                                                    "clientId": data.clientId,
                                                                                                                                    "ticketTypeId": data.ticketTypeId,
                                                                                                                                    "working_category": data.cat_id
                                                                                                                                }, function (errCU1, successCU1, detailsUC1) {
                                                                                                                                    if (detailsUC1 == 1) {
                                                                                                                                        isalreadyResponse({ "id": data.id }, function (errSS1, successSS1, detailsSS1) {
                                                                                                                                            if (detailsSS1.length > 0) {
                                                                                                                                                callforSlaResponseTicketWise({
                                                                                                                                                    "id": data.id,
                                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                                    "reqType": ""
                                                                                                                                                }, function (errSS, successSS, detailsSS) {

                                                                                                                                                });
                                                                                                                                            }
                                                                                                                                        });
                                                                                                                                    }
                                                                                                                                })
                                                                                                                                //******************************************************
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                })

                                                                                                                cb(null, true, result1.insertId);
                                                                                                            }
                                                                                                        });
                                                                                                    }
                                                                                                })

                                                                                            } else {
                                                                                                var usrId = "";
                                                                                                if (data.user_id == null || data.user_id == "") {
                                                                                                    usrId = 0;
                                                                                                } else {
                                                                                                    usrId = data.user_id;
                                                                                                }
                                                                                                let usrS = "SELECT NAME nm FROM USER  where id = " + usrId + " ";
                                                                                                con.query(usrS, function (usrSerr, usrSdetails) {
                                                                                                    if (usrSerr) {
                                                                                                        logData(usrSerr);
                                                                                                        cb(usrSerr, null);
                                                                                                    } else {
                                                                                                        let grpS = "SELECT LEVELSHORTDESC grp FROM SUPPORTGROUPLEVEL where id = " + data.supportGroupLevelId + " ";
                                                                                                        con.query(grpS, function (grpSerr, grpSdetails) {
                                                                                                            if (grpSerr) {
                                                                                                                logData(grpSerr);
                                                                                                                cb(grpSerr, null);
                                                                                                            } else {
                                                                                                                var usrN = "";
                                                                                                                var grpN = "";
                                                                                                                if (usrSdetails.length > 0) {
                                                                                                                    usrN = usrSdetails[0].nm;
                                                                                                                }
                                                                                                                if (grpSdetails.length > 0) {
                                                                                                                    grpN = grpSdetails[0].grp;
                                                                                                                }
                                                                                                                usr = "Forwarded To : " + grpN + ". User: " + usrN;
                                                                                                                sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                                                                    " VALUES (" + data.id + ",2," + result1.insertId + "," + data.createdBy + ",'" + usr + "') ";
                                                                                                                con.query(sql5, function (err5, result5) {
                                                                                                                    if (err5) {
                                                                                                                        logData(err5);
                                                                                                                        cb(err5, null);
                                                                                                                    } else {

                                                                                                                        // optimizedreport table starts

                                                                                                                        var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,"
                                                                                                                            // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                                                            + "replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / ') ps,"
                                                                                                                            + "replace(group_concat(concat((select name from USER where id =?),'/')),',',' / ') l_name"
                                                                                                                            + " from USER where id =?"
                                                                                                                        con.query(sql90, [data.id, usrN, usrN, usrN], function (err, result55) {
                                                                                                                            if (err) {
                                                                                                                                console.log(err);
                                                                                                                            } else {
                                                                                                                                console.log(result55);
                                                                                                                                var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                                                    + "all_analyst_ps=?,all_analyst_name=?,"
                                                                                                                                    + "ticket_activity_log=?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                                                                                                //  console.log("WS@###########################",result60[0].id);
                                                                                                                                con.query(sql44, [result55[0].login_name, result55[0].login_name, usrN, usrN, result55[0].ps, result55[0].l_name, usr, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                                                                    console.log("%^&*(*&%^&*()(*&6595efsd639586956");
                                                                                                                                    if (err) {
                                                                                                                                        console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                        cb(err, null);
                                                                                                                                    } else {
                                                                                                                                        logData("&&&&&&&&&&&&&&----SDC-------->" + sql44);
                                                                                                                                        console.log("$$$$$$$$$$---->", result77);
                                                                                                                                        cb(null, true, result77);
                                                                                                                                    }
                                                                                                                                })
                                                                                                                            }
                                                                                                                        });

                                                                                                                        // optimizedreport table ends

                                                                                                                        request
                                                                                                                            .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=2&actionID=2&actionData=')
                                                                                                                            .end((err, resp) => {
                                                                                                                                if (err) {
                                                                                                                                    logData(err);
                                                                                                                                } else {
                                                                                                                                    logData('done')
                                                                                                                                    logData('done----err---' + err)
                                                                                                                                    logData('done---resp--' + JSON.stringify(resp))
                                                                                                                                }
                                                                                                                                // Do something
                                                                                                                            });
                                                                                                                        //******************************************************
                                                                                                                        /*getIsClientWiseSlaCalculationReq({
                                                                                                                            "clientId": data.clientId,
                                                                                                                            "ticketTypeId": data.ticketTypeId,
                                                                                                                            "working_category": data.cat_id
                                                                                                                        }, function (errCU1, successCU1, detailsUC1) {
                                                                                                                            if (detailsUC1 == 1) {
                                                                                                                                util.logData('callforSlaResponseTicketWise1111====' + JSON.stringify(data));
                                                                                                                                callforSlaResponseTicketWise({
                                                                                                                                    "id": data.id,
                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                    "reqType": ""
                                                                                                                                }, function (errSS, successSS, detailsSS) {

                                                                                                                                });
                                                                                                                            }


                                                                                                                        })*/
                                                                                                                        //******************************************************
                                                                                                                        getIsClientWiseSlaCalculationReq({
                                                                                                                            "clientId": data.clientId,
                                                                                                                            "ticketTypeId": data.ticketTypeId,
                                                                                                                            "working_category": data.cat_id
                                                                                                                        }, function (errCU1, successCU1, detailsUC1) {
                                                                                                                            if (detailsUC1 == 1) {
                                                                                                                                isalreadyResponse({ "id": data.id }, function (errSS1, successSS1, detailsSS1) {
                                                                                                                                    if (detailsSS1.length > 0) {
                                                                                                                                        callforSlaResponseTicketWise({
                                                                                                                                            "id": data.id,
                                                                                                                                            "user_id": data.createdBy,
                                                                                                                                            "reqType": ""
                                                                                                                                        }, function (errSS, successSS, detailsSS) {

                                                                                                                                        });
                                                                                                                                    }
                                                                                                                                });

                                                                                                                                updateSlaSupportGroupWise({
                                                                                                                                    "id": data.id,
                                                                                                                                    // "catList": data.categoryDtlsLt,
                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                    "clientId": data.clientId
                                                                                                                                }, function (errCU, successCU, detailsUC) {
                                                                                                                                    if (successCU) {
                                                                                                                                        getTicketStatusSeq({ "id": data.id }, function (errCU1, successCU1, detailsUC1) {
                                                                                                                                            logData('detailsUC1-------' + JSON.stringify(detailsUC1))

                                                                                                                                            if (detailsUC1[0].sequence_no === 24 || detailsUC1[0].sequence_no === 25) {
                                                                                                                                                // logData('wwwwwwwwwwwwwwwwwwwwwwww')
                                                                                                                                                callStopSlaDtlsTicketWise({
                                                                                                                                                    "id": data.id,
                                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                                    "reqType": "",
                                                                                                                                                    "clientId": data.clientId
                                                                                                                                                }, function (errC12, successC12, detailsC12) {
                                                                                                                                                    // logData('333333333333333333333333333333')
                                                                                                                                                    if (errC12) {
                                                                                                                                                        logData('error::*** :' + errC12 + successC12);
                                                                                                                                                        cb(errC12, null);
                                                                                                                                                    } else {

                                                                                                                                                        let status_ad = "insert into ticket_sla_startstop_logs_all_action(ticket_id, action_id, sla_stop_start_WFCClientResultId, sla_stop_start_by) " +
                                                                                                                                                            " values(" + data.id + "," + detailsUC1[0].sequence_no + "," + detailsUC1[0].id + "," + data.createdBy + ") ";
                                                                                                                                                        logData('status_ad--------24--25----------' + status_ad)
                                                                                                                                                        con.query(status_ad, function (errad, detailsad) {
                                                                                                                                                            if (errad) {
                                                                                                                                                                logData(errad);
                                                                                                                                                                cb(errad, null);
                                                                                                                                                            } else {

                                                                                                                                                                 // optimizedreport table starts

                                                                                                                                                                 var sql220 = "SELECT ticket_id,count(*) followup_count,count(*) reopen_count,replace(coalesce(group_concat(concat(date_format (ADDTIME(a.sla_stop_end_datetime, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),''),',',' / ') reopen_dates,date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_responded_dt ,"
                                                                                                                                                                 + "date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_time_taken, date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') maxEscalationDtls FROM ticket_sla_startstop_logs_all_action a "
                                                                                                                                                                 + "where ticket_id = ? and action_id =? group by a.ticket_id,a.id limit 1;"
                                                                                                                                                             con.query(sql220, [data.id, detailsUC1[0].sequence_no], function (err, result220) {
                                                                                                                                                                 if (err) {
                                                                                                                                                                     cb(err, null);
                                                                                                                                                                 } else {
                                                                                                                                                                     logData("_________++__+_+_+111111111111111" + sql220);
                                                                                                                                                                     console.log("@@@@@@@@!!!!!!!!!!", result220);
                                                                                                                                                                     var sql221 = "update optimizedreport set reopen_count=?,follow_up_count =?,reopen_dates =?,follow_up_responded_dt=?, "
                                                                                                                                                                         + "follow_up_time_taken=?  where ticket_id =? ;"
                                                                                                                                                                     con.query(sql221, [result220[0].reopen_count, result220[0].followup_count, result220[0].reopen_dates, result220[0].follow_up_responded_dt, result220[0].follow_up_time_taken, data.id], function (err, result221) {
                                                                                                                                                                         if (err) {
                                                                                                                                                                             cb(err, null);
                                                                                                                                                                         } else {
                                                                                                                                                                             logData("&&&&&&&&&&&&&&-DC----------->" + sql221);
                                                                                                                                                                             console.log("!!!!!!!!@@", result221);
                                                                                                                                                                             cb(null, true, result221);
                                                                                                                                                                         }
                                                                                                                                                                     })

                                                                                                                                                                 }
                                                                                                                                                             });

                                                                                                                                                             // optimizedreport table ends


                                                                                                                                                                // cb(null, true, "OK");
                                                                                                                                                            }
                                                                                                                                                        })
                                                                                                                                                    }
                                                                                                                                                });
                                                                                                                                            } else if (detailsUC1[0].sequence_no === 15) {
                                                                                                                                                logData("\n\n b4 insertSlaStopStartTime*******15****************")
                                                                                                                                                /************************************************************/
                                                                                                                                                if (detailsUC1[0].is_stopSlaMeter === 'true') {
                                                                                                                                                    insertSlaStopStartTime({
                                                                                                                                                        "ticketId": data.id,
                                                                                                                                                        "userId": data.createdBy,
                                                                                                                                                        "wfcClientResultId": detailsUC1[0].id,
                                                                                                                                                        "actionId": 15
                                                                                                                                                    }, function (errSS, successSS, detailsSS) {
                                                                                                                                                        if (errSS || !successSS) {
                                                                                                                                                            logData(errSS + successSS);
                                                                                                                                                            cb(errSS, null);
                                                                                                                                                        } else {
                                                                                                                                                            logData('\n\n*******************666666666666666666666666666*********************')
                                                                                                                                                            // cb(null, true, detailsUF);
                                                                                                                                                            callStopSlaDtlsTicketWise({
                                                                                                                                                                "id": data.id,
                                                                                                                                                                "user_id": data.createdBy,
                                                                                                                                                                "reqType": "",
                                                                                                                                                                "clientId": data.clientId
                                                                                                                                                            }, function (errC, successC, detailsC) {
                                                                                                                                                                if (errC || !successC) {
                                                                                                                                                                    cb(errC, null);
                                                                                                                                                                } else {
                                                                                                                                                                    // cb(null, true, detailsUF);
                                                                                                                                                                }
                                                                                                                                                            });
                                                                                                                                                        }
                                                                                                                                                    })
                                                                                                                                                }
                                                                                                                                                /************************************************************/

                                                                                                                                            } else if (detailsUC1[0].sequence_no === 16) {
                                                                                                                                                /************************************************************/
                                                                                                                                                if (detailsUC1[0].is_stopSlaMeter === 'false') {
                                                                                                                                                    insertSlaStopEndTime({
                                                                                                                                                        "ticketId": data.id,
                                                                                                                                                        "userId": data.createdBy,
                                                                                                                                                        "wfcClientResultId": detailsUC1[0].id,
                                                                                                                                                        "actionId": 15
                                                                                                                                                    }, function (errSS, successSS, detailsSS) {
                                                                                                                                                        if (errSS || !successSS) {
                                                                                                                                                            logData(errSS + successSS);
                                                                                                                                                            cb(errSS, null);
                                                                                                                                                        } else {
                                                                                                                                                            logData('\n\n*******************16********************')
                                                                                                                                                            request
                                                                                                                                                                .get(SLA_URL + '/slaCalculation_ticketwise_awaiting')
                                                                                                                                                                .query({
                                                                                                                                                                    ticketId: data.id,
                                                                                                                                                                    client_id: data.clientId,
                                                                                                                                                                    actionId: 15
                                                                                                                                                                }) // query string
                                                                                                                                                                .end((err, resp) => {
                                                                                                                                                                    if (err) {
                                                                                                                                                                        logData(err);
                                                                                                                                                                    } else {
                                                                                                                                                                        //cb(null, true, detailsSS);
                                                                                                                                                                    }
                                                                                                                                                                    // Do something
                                                                                                                                                                });

                                                                                                                                                        }
                                                                                                                                                    })
                                                                                                                                                }

                                                                                                                                                /************************************************************/
                                                                                                                                            }
                                                                                                                                        })
                                                                                                                                        //******************************************************************************************************************
                                                                                                                                    }


                                                                                                                                });
                                                                                                                            }
                                                                                                                        })
                                                                                                                        //******************************************************
                                                                                                                        //******************************************************


                                                                                                                        // callforSlaResponseTicketWise({
                                                                                                                        //     "id": data.id,
                                                                                                                        //     "user_id": usrId,
                                                                                                                        //     "reqType": ""
                                                                                                                        // }, function (errSS, successSS, detailsSS) {
                                                                                                                        //
                                                                                                                        // });
                                                                                                                        cb(null, true, result1.insertId);
                                                                                                                    }
                                                                                                                });
                                                                                                            }
                                                                                                        })
                                                                                                    }
                                                                                                })
                                                                                            }
                                                                                        }
                                                                                    });
                                                                                });

                                                                            }
                                                                        });
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    }
                                                })

                                            }
                                        }
                                    });
                                })
                            })
                        } else {
                            cb(null, false, detailsTGS);
                        }
                    }
                })
            }
        }
    })


}


function getIsClientWiseSlaCalculationReq(data, cb) {
    util.logData('getIsClientWiseSlaCalculationReq data==============' + JSON.stringify(data));
    var str = " SELECT id,sub_client FROM CLIENT where id = " + data.clientId;
    con.query(str, function (err, result) {
        if (err) {
            logData('Error:---' + err);
            cb(err, null);
        } else {
            if (result[0].sub_client == 0) {
                cb(null, true, 0);
            } else {
                var str1 = " SELECT id,sla_done_by FROM sla_calculaion_done_by where client_id =" + data.clientId + " and" +
                    " ticket_type_id =" + data.ticketTypeId + " and category_id =" + data.working_category + " and delete_flag = '0'  ";
                logData('\n\ngetStatusClient--------------' + str1)
                con.query(str1, function (err1, result1) {
                    if (err1) {
                        logData('Error:---' + err1);
                        cb(err1, null);
                    } else {
                        if (result1.length > 0) {
                            if (result1[0].sla_done_by == 1) {
                                cb(null, true, 0);
                            } else {
                                cb(null, true, 1);
                            }
                        } else {
                            cb(null, true, 0);
                        }
                    }
                });
            }
        }
    });
}

function isalreadyResponse(data, cb) {
    let sql = "select * from ticket_sla_response_dtls where ticketId = " + data.id + " and deleteflag = '0' and response_stop_status = 'N' ";
    con.query(sql, function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getStatusClientSSC(data, cb) {
    //var str = 'select id, ATTRVAL name ,Attr_desc description,sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ' + data.clientId + ' and ATTRID=2 and sequence_no NOT IN(0,2)';
    var str = " select id, ATTRVAL name ,Attr_desc description,sequence_no seq,is_command_required from TICKETATTRIBUTES " +
        " where (CLIENTID= " + data.clientId + " " +
        " or CLIENTID = (select clientid from ticket where id =" + data.ticketId + ") )" +
        " and ATTRID=2 and DeleteFlag=0 " +
        " and FIND_IN_SET(id, (select ticket_nxt_status_id from ticket_status_seq_mst " +
        " where (client_id = " + data.clientId + " " +
        " or CLIENTID = (select clientid from ticket where id =" + data.ticketId + ")) " +
        " and ( ticket_type_id = " + data.typeId + " or ticket_type_id = (select ticketTypeId from ticket where id =" + data.ticketId + " )) " +
        " and delete_flag = '0' and ticket_pres_status_id = (select tstatus from ticket where id= " + data.ticketId + "))) ";
    // logData('\n\ngetStatusClient--------------' + str)
    con.query(str, function (err, result) {
        if (err) {
            logData('Error:---' + err);
            cb(err, null);
        } else {
            // logData('\n\n*********************************************getStatusClient------------------' + JSON.stringify(result));
            cb(null, true, result);
        }
    });
}

function getTicketCategoryDetails(data, cb) {
    function getCategory(callback) {
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' and (CLIENTID = " + data.clientId + " " +
            " or CLIENTID = (select clientid from ticket where id =" + data.ticketId + ") " +
            " or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=" + data.clientId + "))  " +
            " and (ticket_type = " + data.typeId + " or ticket_type = (select ticketTypeId from ticket where id =" + data.ticketId + " ))  ORDER BY sequence_no";
        // logData('\n\ngetCategory--------------' + sql)
        con.query(sql, function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                let count = 0;
                let arr = [];
                let arr1 = [];
                for (let i = 0; i < result1.length; i++) {
                    let sql1 = 'SELECT a.parent_categoryId parentId,a.categoryId catId,c.ATTRVAL catVal, b.header_name header ' +
                        ' FROM ticketCategory a,attributesHeaderMst b,TICKETATTRIBUTES c ' +
                        ' where a.DeleteFlag=0 and a.parent_categoryId=b.id and  a.categoryId=c.id and a.ticketId=' + data.ticketId + ' ' +
                        ' and  a.parent_categoryId=' + result1[i].id + '; ';
                    // console.log('\n\nsql1:' + sql1)
                    con.query(sql1, function (err, result) {
                        if (err) {
                            logData('Error2:---' + err);
                            callback(err, null);
                        } else {
                            count++;
                            if (result.length > 0) {
                                arr1.push(result[0]);
                            }

                            if (count === result1.length) {
                                for (let i = 0; i < result1.length; i++) {
                                    for (let j = 0; j < arr1.length; j++) {
                                        // logData(j+'---arr1:---' + arr1[j]);
                                        if (result1[i].id === arr1[j].parentId) {
                                            let val;
                                            if (i < Number(data.disableField)) {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header',
                                                        // followup_users_name: arr1[j].followup_users_name
                                                    }],
                                                    isDisabled: true
                                                }
                                            } else {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header'
                                                    }],
                                                }
                                            }
                                            arr.push(val);
                                            break;
                                        }
                                    }
                                }
                                callback(null, arr)
                            }
                        }
                    })
                }
            }
        });
    }

    function getStatusClient(callback) {
        //var str = 'select id, ATTRVAL name ,Attr_desc description,sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ' + data.clientId + ' and ATTRID=2 and sequence_no NOT IN(0,2)';
        getStatusClientSSC(data, function (err, success, result) {
            if (err) {
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getResolutionNResponseTime(callback) {
        getClientIdFromTicketTbl({
            ticketId: data.ticketId
        }, function (errCC, successCC, resCC) {
            if (errCC) {
                logData(errCC);
                callback(errCC, null);
            } else {
                data.clientId = resCC[0].clientid;
                data.typeId = resCC[0].ticketTypeId;
                getIsClientWiseSlaCalculationReq({
                    "clientId": data.clientId,
                    "ticketTypeId": data.typeId,
                    "working_category": data.cat_id
                }, function (errCU1, successCU1, detailsUC1) {
                    // util.logData('detailsUC1==========================================' + detailsUC1);
                    if (detailsUC1 == 0) {
                        var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                            " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                            " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId is null ";
                        con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                            if (err) {
                                logData('Error3:---' + err);
                                callback(err, null);
                            } else {
                                // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                                callback(null, result);
                            }
                        });
                    } else {
                        var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                            " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                            " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId like '%," + data.suppGrpId + ",%' ";
                        ;
                        con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                            if (err) {
                                logData('Error3:---' + err);
                                callback(err, null);
                            } else {
                                // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                                callback(null, result);
                            }
                        });
                    }
                })
            }
        })


    }


    function getBaseCategory(callback) {
        const seq = Number(data.disableField) + 1;
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and sequence_no=? " +
            " and (CLIENTID = " + data.clientId + " " +
            " or CLIENTID = (select clientid from ticket where id =" + data.ticketId + ") " +
            " or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=" + data.clientId + ") )" +
            " and (ticket_type=" + data.typeId + " or ticket_type = ( select ticketTypeId from ticket where id =" + data.ticketId + " ) ) ";
        con.query(sql, [seq], function (err, result1) {
            if (err) {
                logData('Error4:---' + err);
                callback(err, null);
            } else {
                let sql1 = 'select id, ATTRVAL title from TICKETATTRIBUTES where DeleteFlag=0 and attrHeaderMstId=' + result1[0].id + ' ORDER BY ATTRVAL;'
                con.query(sql1, function (err, result) {
                    if (err) {
                        logData('Error5:---' + err);
                        callback(err, null);
                    } else {
                        util.logData('base category====' + JSON.stringify(result));
                        callback(null, result)
                    }
                });
            }
        })
    }

    function getAdditionalField(callback) {
        getAddionalFieldWithValue({ ticketId: data.ticketId }, function (err, success, details) {
            if (err) {
                logData('Error6:---' + err);
                callback(err, null);
            } else {
                callback(null, details);
            }
        })
    }

    function getFollowUp(callback) {
        //let sql = 'SELECT followup_users_name FROM tbl_client_specific_master where id = (SELECT coalesce(followup_userid,0) FROM ticket_wise_followup_dtls where ticket_id = ?)';
        let sql = "SELECT coalesce(group_concat(followup_users_name) ,'') followup_users_name  FROM tbl_client_specific_master where id in (SELECT  coalesce(followup_userid,0) " +
            " FROM ticket_wise_followup_dtls where ticket_id = ? and delete_flag= '0' order by id desc )";
        logData('getFollowUp---------' + sql)
        con.query(sql, [data.ticketId], function (err, result) {
            if (err) {
                logData('Error7:---' + err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].followup_users_name != '')
                        callback(null, result)
                    else
                        callback(null, [])
                } else {
                    callback(null, [])
                }

            }
        })
    }

    function checkPriorityType(callback) {
        getClientIdFromTicketTbl({
            ticketId: data.ticketId
        }, function (errCC, successCC, resCC) {
            if (errCC) {
                logData(errCC);
                callback(errCC, null);
            } else {
                // logData("\n\n resCC----------------" + JSON.stringify(resCC))
                data.clientId = resCC[0].clientid;
                data.typeId = resCC[0].ticketTypeId;
                let sql = "select ticket_priority_type from ticket_priority_configuration " +
                    " where  (ticket_type=" + data.typeId + " or ticket_type = ( select ticketTypeId from ticket where id =" + data.ticketId + " ) ) "
                " and (client_id=" + data.clientId + " " +
                    " or client_id = (select clientid from ticket where id =" + data.ticketId + ") )" +
                    " and deleteflag=0";
                // logData('checkPriorityType-------' + sql)
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        if (result.length > 0) {

                            if (result[0].ticket_priority_type === 1) {
                                getBusinessUrgencyTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.typeId
                                }, function (err, success, urgency) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        getBusinessImpactTicketTypeWise({
                                            clientId: data.clientId,
                                            ticket_type: data.typeId
                                        }, function (err, success, impact) {
                                            if (err) {
                                                logData(err);
                                                callback(err, null);
                                            } else {
                                                callback(null, {
                                                    type: result[0].ticket_priority_type,
                                                    impact: impact,
                                                    urgency: urgency
                                                })
                                            }
                                        })
                                    }
                                })
                            }
                            if (result[0].ticket_priority_type === 2) {
                                callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                            }
                        } else {
                            callback(null, { error: 'Please add Priority type' })
                        }
                    }
                });
            }
        })

    }

    async.parallel([getCategory, getStatusClient, getBaseCategory, getAdditionalField, getResolutionNResponseTime, getFollowUp, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            // console.log("\n\n"+JSON.stringify(results[0]));
            // console.log("\n\n"+JSON.stringify(results[2]));
            if (results[6].error) {
                cb(null, false, results[6].error)
            } else {
                for (let i = 0; i < results[2].length; i++) {
                    if (results[2][i].id !== results[0][Number(data.disableField)].options[0].id) {
                        results[0][Number(data.disableField)].options.push(results[2][i]);
                    }
                }
                cb(null, true, {
                    cat: results[0],
                    status: results[1],
                    fields: results[3],
                    expectedTime: results[4],
                    followUpName: results[5],
                    val: results[6]
                });
            }
        }
    })
}

function getClientIdFromTicketTbl(data, cb) {
    let sql = "select clientid,ticketTypeId,ticket_id from ticket where id = " + data.ticketId + "  ";
    con.query(sql, function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getTicketCategoryDetails_old(data, cb) {
    function getCategory(callback) {
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' and CLIENTID = " + data.clientId + " and ticket_type=" + data.typeId + " ORDER BY sequence_no";
        logData('\n\ngetCategory--------------' + sql)
        con.query(sql, function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                let count = 0;
                let arr = [];
                let arr1 = [];
                for (let i = 0; i < result1.length; i++) {
                    let sql1 = 'SELECT a.parent_categoryId parentId,a.categoryId catId,c.ATTRVAL catVal, b.header_name header ' +
                        ' FROM ticketCategory a,attributesHeaderMst b,TICKETATTRIBUTES c ' +
                        ' where a.DeleteFlag=0 and a.parent_categoryId=b.id and  a.categoryId=c.id and a.ticketId=' + data.ticketId + ' ' +
                        ' and  a.parent_categoryId=' + result1[i].id + '; ';
                    // util.logData('\n\nsql1:' + sql1)
                    con.query(sql1, function (err, result) {
                        if (err) {
                            logData('Error2:---' + err);
                            callback(err, null);
                        } else {
                            count++;
                            arr1.push(result[0]);
                            if (count === result1.length) {
                                for (let i = 0; i < result1.length; i++) {
                                    for (let j = 0; j < arr1.length; j++) {
                                        if (result1[i].id === arr1[j].parentId) {
                                            let val;
                                            if (i < Number(data.disableField)) {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header',
                                                        // followup_users_name: arr1[j].followup_users_name
                                                    }],
                                                    isDisabled: true
                                                }
                                            } else {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header'
                                                    }],
                                                }
                                            }
                                            arr.push(val);
                                            break;
                                        }
                                    }
                                }
                                callback(null, arr)
                            }
                        }
                    })
                }
            }
        });
    }

    function getStatusClient(callback) {
        //var str = 'select id, ATTRVAL name ,Attr_desc description,sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ' + data.clientId + ' and ATTRID=2 and sequence_no NOT IN(0,2)';
        getStatusClientSSC(data, function (err, success, result) {
            if (err) {
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getResolutionNResponseTime(callback) {
        getIsClientWiseSlaCalculationReq({
            "clientId": data.clientId,
            "ticketTypeId": data.typeId,
            "working_category": data.cat_id
        }, function (errCU1, successCU1, detailsUC1) {
            util.logData('detailsUC1==========================================' + detailsUC1);
            if (detailsUC1 == 0) {
                var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                    " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                    " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId is null ";
                con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                    if (err) {
                        logData('Error3:---' + err);
                        callback(err, null);
                    } else {
                        logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                        callback(null, result);
                    }
                });
            } else {
                var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                    " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                    " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId like '%," + data.suppGrpId + ",%' ";
                ;
                con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                    if (err) {
                        logData('Error3:---' + err);
                        callback(err, null);
                    } else {
                        logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                        callback(null, result);
                    }
                });
            }
        })

    }

    function getBaseCategory(callback) {
        const seq = Number(data.disableField) + 1;
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and sequence_no=? and CLIENTID = " + data.clientId + " and ticket_type=" + data.typeId;
        con.query(sql, [seq], function (err, result1) {
            if (err) {
                logData('Error4:---' + err);
                callback(err, null);
            } else {
                let sql1 = 'select id, ATTRVAL title from TICKETATTRIBUTES where DeleteFlag=0 and attrHeaderMstId=' + result1[0].id + ';'
                con.query(sql1, function (err, result) {
                    if (err) {
                        logData('Error5:---' + err);
                        callback(err, null);
                    } else {
                        callback(null, result)
                    }
                });
            }
        })
    }

    function getAdditionalField(callback) {
        getAddionalFieldWithValue({ ticketId: data.ticketId }, function (err, success, details) {
            if (err) {
                logData('Error6:---' + err);
                callback(err, null);
            } else {
                callback(null, details);
            }
        })
    }

    function getFollowUp(callback) {
        //let sql = 'SELECT followup_users_name FROM tbl_client_specific_master where id = (SELECT coalesce(followup_userid,0) FROM ticket_wise_followup_dtls where ticket_id = ?)';
        let sql = "SELECT coalesce(group_concat(followup_users_name) ,'') followup_users_name  FROM tbl_client_specific_master where id in (SELECT  coalesce(followup_userid,0) " +
            " FROM ticket_wise_followup_dtls where ticket_id = ? and delete_flag= '0' order by id desc )";
        logData('getFollowUp---------' + sql)
        con.query(sql, [data.ticketId], function (err, result) {
            if (err) {
                logData('Error7:---' + err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].followup_users_name != '')
                        callback(null, result)
                    else
                        callback(null, [])
                } else {
                    callback(null, [])
                }

            }
        })
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where  ticket_type=' + data.typeId + ' and client_id=' + data.clientId + " and deleteflag=0";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.typeId
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.typeId
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    async.parallel([getCategory, getStatusClient, getBaseCategory, getAdditionalField, getResolutionNResponseTime, getFollowUp, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            if (results[6].error) {

                cb(null, false, results[6].error)
            } else {
                util.logData('\n\n-------------sending data----------------')
                for (let i = 0; i < results[2].length; i++) {
                    if (results[2][i].id !== results[0][Number(data.disableField)].options[0].id) {
                        results[0][Number(data.disableField)].options.push(results[2][i]);
                    }
                }
                cb(null, true, {
                    cat: results[0],
                    status: results[1],
                    fields: results[3],
                    expectedTime: results[4],
                    followUpName: results[5],
                    val: results[6]
                });
            }
        }
    })
}


function getAssignedByMe(data, cb) {
    // let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
    //     " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy " +
    //     " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
    //     " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
    //     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + "  group by x.PKFIELDVAL) " +
    //     " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
    //     " and a.tstatus = f.id " +
    //     " and b.DeleteFlag = '0' " +
    //     " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
    //     " and g.id = e.supportGroupLevelId " +
    //     " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0)) " +
    //     " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
    //     //  " and ((e.user_id =" + data.user_id + " and is_awaiting_for_user_info in ('N','R') ) or (a.createbyid =" + data.user_id + " and is_awaiting_for_user_info='Y'))" +
    //     //" and e.user_id =" + data.user_id + " " +
    //     //   " and e.supportGroupLevelId =" + data.supportgrp_id + " " +
    //     " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
    //     " and if((is_awaiting_for_user_info ='Y') ,(a.createbyid ="+ data.user_id +"),(e.user_id = "+ data.user_id +")) ";
    //
    // if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
    //     sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    // }
    // sql = sql + " order by e.id desc ";
    let base_sql = "SELECT id,query_str FROM ticket_menu_query_mst where client_id = (select CLIENTID from USER where id=" + data.user_id + " )  and ticket_type_id = " + data.ticketTypeId + " and menu_id = 2 and is_managerial_view = 'N' and delete_flag = '0'";
    con.query(base_sql, function (base_err, base_result) {
        if (base_err) {
            logData(base_err);
            cb(base_err, null);
        } else {
            if (base_result.length > 0) {
                let sql = base_result[0].query_str;
                logData('\ngetAssignedByMe------------' + sql)
                con.query(sql, [data.ticketTypeId, data.user_id, data.ticketTypeId, data.user_id, data.user_id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = 1;
                            var le = 0;
                            for (let j = 0; j < result.length; j++) {
                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                    " left join " +
                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";
                                con.query(sql12, function (err12, result12) {
                                    if (err12) {
                                        logData(err12);
                                        cb(err12, null);
                                    } else {
                                        if (result12.length > 0) {
                                            result[j]['assignee'] = result12[0].assignee;
                                            result[j]['aid'] = result12[0].assigned_user_id;
                                        }
                                        /***********************************************************************************/
                                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                            " and a.PKFIELDVAL = " + result[j].id + " " +
                                            " and a.activeFlow = '1' " +
                                            " and a.serial_no = 1 " +
                                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                if (result2.length > 0) {
                                                    result[j]['last_cat'] = result2[0].child;
                                                    result[j]['last_cat_parent'] = result2[0].parent;
                                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                                }
                                                /***********************************************************************************/
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";

                                                le++;
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.length > 0) {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, true, result);
                                                            }
                                                            flg++;
                                                        } else {
                                                            cb(null, true, []);
                                                        }

                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        } else {
                            cb(null, true, result);
                        }
                    }
                });
            } else {
                cb(null, false, "Some configuration error");
            }
        }
    })

}


function getOpenTicketInMyGroup(data, cb) {
    logData('getOpenTicketInMyGroup-------------------' + JSON.stringify(data))
    // let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
    //     " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
    //     " ,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
    //     " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
    //     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
    //     " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' " +
    //     " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
    //     " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
    //     " and g.id = e.supportGroupLevelId " +
    //     " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0))" +
    //     " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
    //     " and e.supportGroupLevelId =" + data.supportgrp_id + " and is_awaiting_for_user_info in ('N','R') ";
    // if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
    //     sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    // }
    // sql = sql + " order by e.id desc ";
    let base_sql = "SELECT id,query_str FROM ticket_menu_query_mst where client_id = (select CLIENTID from USER where id=" + data.user_id + " )  and ticket_type_id = " + data.ticketTypeId + " and menu_id = 3 and is_managerial_view = 'N' and delete_flag = '0'";
    con.query(base_sql, function (base_err, base_result) {
        if (base_err) {
            logData(base_err);
            cb(base_err, null);
        } else {
            if (base_result.length > 0) {
                let sql = base_result[0].query_str;
                logData('getOpenTicketInMyGroup-----------' + sql)
                con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.user_id, data.supportgrp_id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = 1;
                            var le = 0;
                            for (let j = 0; j < result.length; j++) {
                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                    " left join " +
                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";
                                con.query(sql12, function (err12, result12) {
                                    if (err12) {
                                        logData(err12);
                                        cb(err12, null);
                                    } else {
                                        if (result12.length > 0) {
                                            result[j]['assignee'] = result12[0].assignee;
                                            result[j]['aid'] = result12[0].assigned_user_id;
                                        }
                                        /***********************************************************************************/
                                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                            " and a.PKFIELDVAL = " + result[j].id + " " +
                                            " and a.serial_no = 1 " +
                                            " and a.activeFlow = '1' " +
                                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                if (result2.length > 0) {
                                                    result[j]['last_cat'] = result2[0].child;
                                                    result[j]['last_cat_parent'] = result2[0].parent;
                                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                                }
                                                /***********************************************************************************/
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                le++;
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.length > 0) {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, true, result);
                                                            }
                                                            flg++;
                                                        } else {
                                                            cb(null, true, []);
                                                        }

                                                    }
                                                });
                                                /***********************************************************************************/

                                            }
                                        });
                                        /***********************************************************************************/
                                    }
                                });
                            }
                        } else {
                            cb(null, true, []);
                        }
                    }
                });
            } else {
                cb(null, false, "Some configuration error");
            }
        }
    })

}

function getMyCloseTicket(data, cb) {
    // let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,a.busi_impact_id,d.busi_priority_name priority, " +
    //     " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
    //     " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
    //     " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
    //     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
    //     " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.tstatus = f.id and a.busi_priority_id = d.id and b.DeleteFlag = '0' " +
    //     " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
    //     " and g.id = e.supportGroupLevelId " +
    //     " and e.createbyid =" + data.user_id + " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
    //     " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0,23,104))" +
    //     " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) ";
    // if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
    //     sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    // }
    // sql = sql + " order by e.id desc ";

    let base_sql = "SELECT id,query_str FROM ticket_menu_query_mst where client_id = (select CLIENTID from USER where id=" + data.user_id + " )  and ticket_type_id = " + data.ticketTypeId + " and menu_id = 4 and is_managerial_view = 'N' and delete_flag = '0'";
    con.query(base_sql, function (base_err, base_result) {
        if (base_err) {
            logData(base_err);
            cb(base_err, null);
        } else {
            if (base_result.length > 0) {
                let sql = base_result[0].query_str;
                logData('getMyCloseTicket----------------' + sql)
                con.query(sql, [data.ticketTypeId, data.user_id, data.ticketTypeId, data.user_id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = 1;
                            var le = 0;
                            for (let j = 0; j < result.length; j++) {
                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                    " left join " +
                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";

                                con.query(sql12, function (err12, result12) {
                                    if (err12) {
                                        logData(err12);
                                        cb(err12, null);
                                    } else {
                                        if (result12.length > 0) {
                                            result[j]['assignee'] = result12[0].assignee;
                                            result[j]['aid'] = result12[0].assigned_user_id;
                                        }

                                        /***********************************************************************************/
                                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                            " and a.PKFIELDVAL = " + result[j].id + " " +
                                            " and a.serial_no = 1 " +
                                            " and a.activeFlow = '1' " +
                                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                if (result2.length > 0) {
                                                    result[j]['last_cat'] = result2[0].child;
                                                    result[j]['last_cat_parent'] = result2[0].parent;
                                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                                }
                                                /***********************************************************************************/
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                le++;
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.length > 0) {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, true, result);
                                                            }
                                                            flg++;
                                                        } else {
                                                            cb(null, true, []);
                                                        }

                                                    }
                                                });
                                                /***********************************************************************************/

                                            }
                                        });
                                        /***********************************************************************************/
                                    }
                                });
                            }
                        } else {
                            cb(null, true, []);
                        }
                    }
                });
            } else {
                cb(null, false, "Some configuration error");
            }
        }
    })


}


function getCloseTicketInMyGroup(data, cb) {
    // let sql = "SELECT a.supportGroupLevelId,e.supportGroupLevelId,a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId," +
    //     " a.createdate createdSince,f.id statusId,f.ATTRVAL status,a.busi_impact_id,d.busi_priority_name priority,  a.requesterInfo reqInfo," +
    //     " a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  ," +
    //     " e.id ids,a.createbyid,a.longDesc,a.requestedDate , a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type  " +
    //     " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, " +
    //     " ticket a left join USER c  on a.modifybyid = c.id  " +
    //     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL)  " +
    //     " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.tstatus = f.id and a.busi_priority_id = d.id and b.DeleteFlag = '0'  " +
    //     " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0'  and a.ticketTypeId =" + data.ticketTypeId + " " +
    //     " and  b.DeleteFlag = '0'  " +
    //     " and g.id = e.supportGroupLevelId " +
    //     " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0,23,104) ) " +
    //     // " and a.ticketCloseDate is not null and e.END_INDICATOR = '1'  " +
    //     " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) and e.supportGroupLevelId =" + data.supportgrp_id + "";
    // // " and a.supportGroupLevelId =(select supportGroupLevelId from supportGroupUser  where  userId = " + data.user_id + ") ";
    // if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
    //     sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    // }
    // sql = sql + " order by e.id desc ";

    let base_sql = "SELECT id,query_str FROM ticket_menu_query_mst where client_id = (select CLIENTID from USER where id=" + data.user_id + " ) and ticket_type_id = " + data.ticketTypeId + " and menu_id = 5 and is_managerial_view = 'N' and delete_flag = '0'";
    con.query(base_sql, function (base_err, base_result) {
        if (base_err) {
            logData(base_err);
            cb(base_err, null);
        } else {
            if (base_result.length > 0) {
                let sql = base_result[0].query_str;
                logData('getCloseTicketInMyGroup-----------------------' + sql)
                con.query(sql, [data.ticketTypeId, data.user_id, data.ticketTypeId, data.user_id, data.supportgrp_id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = 1;
                            var le = 0;
                            for (let j = 0; j < result.length; j++) {
                                // let sql2 = "select a.id,b.name assignee,b.id aid from WFCCLIENT a , USER b where a.id in (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + ") and a.userId = b.id order by a.id limit 1";
                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                    " left join " +
                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";

                                con.query(sql12, function (err12, result12) {
                                    if (err12) {
                                        logData(err12);
                                        cb(err12, null);
                                    } else {
                                        if (result12.length > 0) {
                                            result[j]['assignee'] = result12[0].assignee;
                                            result[j]['aid'] = result12[0].assigned_user_id;
                                        }

                                        /***********************************************************************************/
                                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                            " and a.PKFIELDVAL = " + result[j].id + " " +
                                            " and a.serial_no = 1 " +
                                            " and a.activeFlow = '1' " +
                                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                if (result2.length > 0) {
                                                    result[j]['last_cat'] = result2[0].child;
                                                    result[j]['last_cat_parent'] = result2[0].parent;
                                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                                }
                                                /***********************************************************************************/
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                le++;
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.length > 0) {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, true, result);
                                                            }
                                                            flg++;
                                                        } else {
                                                            cb(null, true, []);
                                                        }

                                                    }
                                                });
                                                /***********************************************************************************/

                                            }
                                        });
                                        /***********************************************************************************/
                                    }
                                });
                            }
                        } else {
                            cb(null, true, []);
                        }
                    }
                });
            } else {
                cb(null, false, "Some configuration error");
            }
        }
    })
}


function getMyForwardedTickets(data, cb) {
    // let sql = "SELECT distinct a.ticket_id,a.id id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,a.busi_impact_id,d.busi_priority_name priority, " +
    //     " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy " +
    //     " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type  " +
    //     " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
    //     " , (select max(e.id) wfId from  ticket a LEFT JOIN USER c ON a.modifybyid = c.id,WFCCLIENTRESULT e where a.id = e.PKFIELDVAL AND e.frw_user_id = " + data.user_id + " AND a.ticketTypeId = " + data.ticketTypeId + " AND COALESCE(e.frw_user_id, 0) != COALESCE(e.user_id, 0) AND a.DeleteFlag = '0' AND e.DeleteFlag = '0' group by PKFIELDVAL) k " +
    //     " where a.createbyid = b.id and k.wfId = e.id and a.id = e.PKFIELDVAL and a.tstatus = f.id and a.busi_priority_id = d.id and b.DeleteFlag = '0' " +
    //     " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
    //     " and coalesce(e.frw_user_id,0) !=coalesce(e.user_id,0) " +
    //     " and g.id = e.supportGroupLevelId " +
    //     " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (2,0))" +
    //     " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' )" +
    //     " and coalesce(e.frw_user_id,0) != coalesce(e.user_id,0) and e.frw_user_id =" + data.user_id + " " +
    //     " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0'  ";
    // if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
    //     sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    // }
    // sql = sql + " order by e.id desc ";

    let base_sql = "SELECT id,query_str FROM ticket_menu_query_mst where client_id = (select CLIENTID from USER where id=" + data.user_id + " ) and ticket_type_id = " + data.ticketTypeId + " and menu_id = 6 and is_managerial_view = 'N' and delete_flag = '0'";
    con.query(base_sql, function (base_err, base_result) {
        if (base_err) {
            logData(base_err);
            cb(base_err, null);
        } else {
            if (base_result.length > 0) {
                let sql = base_result[0].query_str;
                logData('getMyForwardedTickets-----------------' + sql)
                con.query(sql, [data.user_id, data.ticketTypeId, data.user_id, data.user_id, data.ticketTypeId], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = 1;
                            var le = 0;
                            for (let j = 0; j < result.length; j++) {
                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                    " left join " +
                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";

                                con.query(sql12, function (err12, result12) {
                                    if (err12) {
                                        logData(err12);
                                        cb(err12, null);
                                    } else {
                                        if (result12.length > 0) {
                                            result[j]['assignee'] = result12[0].assignee;
                                            result[j]['aid'] = result12[0].assigned_user_id;
                                        }
                                        /***********************************************************************************/
                                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                            " and a.PKFIELDVAL = " + result[j].id + " " +
                                            " and a.serial_no = 1 " +
                                            " and a.activeFlow = '1' " +
                                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                if (result2.length > 0) {
                                                    result[j]['last_cat'] = result2[0].child;
                                                    result[j]['last_cat_parent'] = result2[0].parent;
                                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                                }
                                                /***********************************************************************************/
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                le++;
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.length > 0) {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, true, result);
                                                            }
                                                            flg++;
                                                        } else {
                                                            cb(null, true, []);
                                                        }

                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        } else {
                            cb(null, true, []);
                        }
                    }
                });
            } else {
                cb(null, false, "Some configuration error");
            }
        }
    })
}

function getMyForwardedTicketsInGroup(data, cb) {
    // let sql = "SELECT distinct a.ticket_id,a.id id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,a.busi_impact_id,d.busi_priority_name priority," +
    //     " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
    //     " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket ,coalesce(sub_ticket_type,0) sub_ticket_type " +
    //     " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
    //     " , (select max(e.id) wfId from  ticket a LEFT JOIN USER c ON a.modifybyid = c.id,WFCCLIENTRESULT e where a.id = e.PKFIELDVAL AND e.frw_user_id = " + data.user_id + " AND a.ticketTypeId = " + data.ticketTypeId + " AND COALESCE(e.frw_user_id, 0) != COALESCE(e.user_id, 0) AND a.DeleteFlag = '0' AND e.DeleteFlag = '0' group by PKFIELDVAL) k " +
    //     " where a.createbyid = b.id and k.wfId = e.id and a.id = e.PKFIELDVAL and a.tstatus = f.id and a.busi_priority_id = d.id and b.DeleteFlag = '0' " +
    //     " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
    //     " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (2,0))" +
    //     " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' )" +
    //     " and g.id = e.supportGroupLevelId " +
    //     " and coalesce(e.frw_user_id,0) != coalesce(e.user_id,0)  " +
    //     " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
    //     " and (select supportGroupLevelId from supportGroupUser  where  userId =e.frw_user_id and supportGroupLevelId = "+ data.supportgrp_id +")  = " + data.supportgrp_id + " ";
    // if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
    //     sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    // }
    // sql = sql + " order by e.id desc ";

    let base_sql = "SELECT id,query_str FROM ticket_menu_query_mst where client_id = (select CLIENTID from USER where id=" + data.user_id + " ) and ticket_type_id = " + data.ticketTypeId + " and menu_id = 7 and is_managerial_view = 'N' and delete_flag = '0'";
    con.query(base_sql, function (base_err, base_result) {
        if (base_err) {
            logData(base_err);
            cb(base_err, null);
        } else {
            if (base_result.length > 0) {
                let sql = base_result[0].query_str;
                logData('getMyForwardedTicketsInGroup--------------------------------' + sql)
                con.query(sql, [data.user_id, data.ticketTypeId, data.user_id, data.ticketTypeId, data.supportgrp_id, data.supportgrp_id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            var flg = 1;
                            var le = 0;
                            for (let j = 0; j < result.length; j++) {
                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                    " left join " +
                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";

                                con.query(sql12, function (err12, result12) {
                                    if (err12) {
                                        logData(err12);
                                        cb(err12, null);
                                    } else {
                                        if (result12.length > 0) {
                                            result[j]['assignee'] = result12[0].assignee;
                                            result[j]['aid'] = result12[0].assigned_user_id;
                                        }

                                        /***********************************************************************************/
                                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                            " and a.PKFIELDVAL = " + result[j].id + " " +
                                            " and a.serial_no = 1 " +
                                            " and a.activeFlow = '1' " +
                                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                if (result2.length > 0) {
                                                    result[j]['last_cat'] = result2[0].child;
                                                    result[j]['last_cat_parent'] = result2[0].parent;
                                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                                }
                                                /***********************************************************************************/
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                le++;
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.length > 0) {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, true, result);
                                                            }
                                                            flg++;
                                                        } else {
                                                            cb(null, true, []);
                                                        }

                                                    }
                                                });
                                                /***********************************************************************************/

                                            }
                                        });
                                        /***********************************************************************************/
                                    }
                                });
                            }
                        } else {
                            cb(null, true, []);
                        }
                    }
                });
            } else {
                cb(null, false, "Some configuration error");
            }
        }
    })


}


function getTicketByMe(data, cb) {
    //data.sub_ticket_type = 122;
    // let sql = "SELECT a.id id,a.ticket_id,a.createbyid,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id," +
    //     " d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate, " +
    //     " coalesce(c.NAME,b.NAME) updateBy,a.tName,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,e.id ids,g.LEVELSHORTDESC ,g.id gid" +
    //     " ,a.is_approved_problem_ticket ,coalesce(sub_ticket_type,0) sub_ticket_type " +
    //     " FROM USER b, BUSINESSPRIORITY d, WFCCLIENTRESULT e, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
    //     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + "  group by x.PKFIELDVAL) " +
    //     " and a.id = e.PKFIELDVAL  " +
    //     " and a.createbyid = b.id and a.busi_priority_id = d.id and b.DeleteFlag = '0' and a.tstatus = f.id " +
    //     " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
    //     " and g.id = e.supportGroupLevelId " +
    //     " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0))" +
    //     // " and a.ticketCloseDate is null and e.END_INDICATOR = '0' " +
    //     " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' )" +
    //     " and a.createbyid =" + data.user_id + " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' ";
    // // " and e.supportGroupLevelId =" + data.supportgrp_id + " ";
    // if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
    //     sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    // }
    // sql = sql + " order by e.id desc ";
    let base_sql = "SELECT id,query_str FROM ticket_menu_query_mst where client_id = (select CLIENTID from USER where id=" + data.user_id + " )  and ticket_type_id = " + data.ticketTypeId + " and menu_id = 1 and is_managerial_view = 'N' and delete_flag = '0'";
    con.query(base_sql, function (base_err, base_result) {
        if (base_err) {
            logData(base_err);
            cb(base_err, null);
        } else {
            if (base_result.length > 0) {
                let sql = base_result[0].query_str;
                util.logData(sql);
                con.query(sql, [data.ticketTypeId, data.user_id, data.user_id, data.ticketTypeId], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        logData('getTicketByMe--------------' + sql)
                        if (result.length > 0) {
                            var flg = 1;
                            var le = 0;
                            for (let j = 0; j < result.length; j++) {
                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                    " left join " +
                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";

                                con.query(sql12, function (err12, result12) {
                                    if (err12) {
                                        logData(err12);
                                        cb(err12, null);
                                    } else {
                                        if (result12.length > 0) {
                                            result[j]['assignee'] = result12[0].assignee;
                                            result[j]['aid'] = result12[0].assigned_user_id;
                                        }

                                        /***********************************************************************************/
                                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                            " and a.PKFIELDVAL = " + result[j].id + " " +
                                            " and a.serial_no = 1 " +
                                            " and a.activeFlow = '1' " +
                                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                if (result2.length > 0) {
                                                    result[j]['last_cat'] = result2[0].child;
                                                    result[j]['last_cat_parent'] = result2[0].parent;
                                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                                }
                                                /***********************************************************************************/
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                le++;
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.length > 0) {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, true, result);
                                                            }
                                                            flg++;
                                                        } else {
                                                            cb(null, true, []);
                                                        }
                                                    }
                                                });
                                                /***********************************************************************************/

                                            }
                                        });
                                        /***********************************************************************************/
                                    }
                                });
                            }
                        } else {
                            cb(null, true, []);
                        }
                    }
                });
            } else {
                cb(null, false, "Internal Error");
            }
        }
    })

}


function updateCategoryInfomationOnly(data, cb) {
    /***************************************************************/
    let bck = "insert into ticketCategory_bck(id, ticketId, categoryId, parent_categoryId, DeleteFlag, createdate) (SELECT id, ticketId, categoryId, parent_categoryId, DeleteFlag, createdate FROM ticketCategory where ticketId = " + data.id + ") ";
    con.query(bck, function (errbck, rsltbck) {
        if (errbck) {
            logData(errbck);
            cb(errbck, null);
        } else {
            if (rsltbck.insertId > 0) {
                let bck1 = "delete FROM ticketCategory where ticketId = " + data.id + " ";
                con.query(bck1, function (errbck1, rsltbck1) {
                    if (errbck1) {
                        logData(errbck1);
                        cb(errbck1, null);
                    } else {
                        if (rsltbck1.affectedRows > 0) {
                            /*********************************************************************************/
                            var catList = data.categoryDtlsLt.split(",");
                            var flg = 1;
                            var le = 0;
                            for (var i = 0; i < catList.length; i++) {
                                var cat = catList[i].split("#");
                                var sql = "Insert into ticketCategory(ticketId,categoryId,parent_categoryId ) values (" + data.id + "," + cat[1] + "," + cat[0] + " ) ";
                                logData('\n\ncat sql update--------------------' + sql)
                                con.query(sql, function (err, result) {
                                    if (err) {
                                        logData(err);
                                        cb(err, null);
                                    } else {

                                        // optimizedreport table starts

                                        var sql2 = "SELECT count(categoryId) ifix,(select id from optimizedreport where ticket_id =?) id,"
                                            + "coalesce(replace(group_concat(concat(date_format (ADDTIME(createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',','\n'),'') all_cat_change_dt "
                                            + " FROM ticketCategory where ticketId =?;"
                                        con.query(sql2, [data.id, data.id], function (err, result2) {
                                            if (err) {
                                                cb(err, null);
                                            } else {
                                                console.log("333333333=---", result2);
                                                var sql3 = "update optimizedreport set cat_change_dt =Now(),all_cat_change_dt=?,cat_change_count= ? where id =?"
                                                con.query(sql3, [result2[0].all_cat_change_dt, result2[0].ifix, result2[0].id], function (err, result3) {
                                                    if (err) {
                                                        cb(err, null);
                                                    } else {
                                                        logData("&&&&&&&&&&&&&&------------>" + sql2);
                                                        console.log("$$$$$$$$$$$-->", result3);
                                                        cb(null, true, result3);
                                                    }
                                                })
                                            }
                                        });

                                        // optimizedreport tale ends


                                        var cat1 = catList[le].split("#");
                                        le++;

                                        if (flg == catList.length) {
                                            cb(null, true, "Done");

                                        }
                                        flg++;

                                    }
                                });

                            }
                        } else {
                            cb(null, false, "Some error");
                        }

                    }
                })
            } else {
                cb(null, false, "Some error");
            }

        }
    })
    /***************************************************************/
}

function checkMaxAttachment(data, cb) {
    if (data.attachedFilePath.length > 0) {
        let sql = "select count(id) count from ticketFileAttachementLog where ticketid=?;";
        con.query(sql, [data.id], function (err, details) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                if (Number(details[0].count) + data.attachedFilePath.length > MAX_FILE) {
                    cb(null, false, "Maximum file upload limit," + MAX_FILE + " files, has been reached");
                } else {
                    cb(null, true);
                }
            }
        })
    } else {
        cb(null, true);
    }
}

function updateTicket(data, cb) {
    logData('\n\nupdateTicket ---data-------------------' + JSON.stringify(data))
    logData('\n\nupdateTicket ---data.categoryDtlsLt-------------------' + data.categoryDtlsLt)

    if (data.claimNo) {
        data.claimNo = con.escape(data.claimNo);
    }
    checkMaxAttachment(data, function (err, success, message) {
        if (err) {
            cb(err, null);
        } else {
            if (!success) {
                cb(null, false, message);
            } else {
                checkIsSlaCalculationDone({ "id": data.id }, function (errISC, successISC, resultsISC) {
                    if (errISC) {
                        logData(errISC);
                        cb(errISC, null);
                    } else {
                        logData('updateTicket-----successISC-----------' + successISC)
                        if (!successISC) {
                            cb(null, false, resultsISC);
                        } else {
                            // data.categoryDtlsLt = "";
                            let tcktBck = "insert into ticket_bck(id, clientid, userid, ticket_id, ticketTypeId, requesterInfo, tName, longDesc, attachmentPath, busi_priority_id, tstatus, typeid, requestedDate, dueDate, busi_impact_id, busi_urgency_id, supportGroupLevelId, ticketCloseDate, reqdate, createbyid, createdate, modifybyid, modifydate, DeleteFlag, delete_by_id, DeleteDate, categoryDtlsLt,sla_calculation_start_time,working_category,claimNo,escalated_to_supp_grp_id) " +
                                " (SELECT id, clientid, userid, ticket_id, ticketTypeId, requesterInfo, tName, longDesc, attachmentPath, busi_priority_id, tstatus, typeid, requestedDate, dueDate, busi_impact_id, busi_urgency_id, supportGroupLevelId, ticketCloseDate, reqdate, createbyid, createdate, modifybyid, modifydate, DeleteFlag, delete_by_id, DeleteDate, categoryDtlsLt,sla_calculation_start_time,working_category,claimNo,escalated_to_supp_grp_id FROM ticket where id = " + data.id + " )";
                            logData('tcktBck--------------------' + tcktBck)
                            con.query(tcktBck, function (tcktBckerr, tcktBckdetails) {
                                if (tcktBckerr) {
                                    logData('updateTicket: ' + tcktBckerr);
                                    cb(tcktBckerr, null);
                                } else {
                                    logData('tcktBckdetails:: ' + JSON.stringify(tcktBckdetails));
                                    data.ticketId = data.id;
                                    if (data.ticket_type_seq === 5) {
                                        updateActualActivityDt({
                                            "ticket_id": data.ticketId,
                                            "actual_activity_start_dt": data.acrualActivityStartDt,
                                            "actual_activity_end_dt": data.acrualActivityEndDt,
                                            "user_id": data.createdBy,
                                            "clientId": data.clientId
                                        }, function (errCU, successCU, detailsUC) {
                                        });
                                    }
                                    const sqlClaim = "UPDATE ticket SET claimNo = '' WHERE id =" + data.ticketId;
                                    con.query(sqlClaim, function (claimerr, claimres) {
                                        if (claimerr) {
                                            logData(claimerr);
                                            cb(claimerr, null);
                                        } else {
                                            submitAttachmentTicketWise(data, function (err, success, result) {
                                                if (err || !success) {
                                                    logData('Error:: submitAttachmentTicketWise:: ' + err + success);
                                                    cb(err, null);
                                                } else {
                                                    if (data.attachedFilePath.length > 0) {
                                                        if (socket) {
                                                            socket.emit('attachment', {
                                                                ticketId: data.id,
                                                                attachment: data.attachedFilePath,
                                                                date: new Date()
                                                            });
                                                        }
                                                    }
                                                    logData('11');
                                                    updateAdditionalFieldTicketWise(data, function (errC, successC, detailsC) {
                                                        if (errC || !successC) {
                                                            logData('updateAdditionalFieldTicketWise:: ' + errC + successC);
                                                            cb(err, null);
                                                        } else {
                                                            logData('data.categoryDtlsLt:: ' + data.categoryDtlsLt + ' bbb: ' + data.categoryDtlsLt.length);
                                                            data.tName = con.escape(data.tName);
                                                            data.longDesc = con.escape(data.longDesc);
                                                            let attatchPath = '';
                                                            for (let i = 0; i < data.attachedFilePath.length; i++) {
                                                                var originalName = con.escape(data.attachedFilePath[i].originalName);
                                                                var fileName = con.escape(data.attachedFilePath[i].fileName);
                                                                attatchPath = originalName + ',' + fileName + ',';
                                                            }
                                                            attatchPath = attatchPath.substring(0, attatchPath.length - 1);
                                                            logData('\n\ndata.categoryDtlsLt *************************************' + data.categoryDtlsLt)
                                                            if (data.categoryDtlsLt == null || data.categoryDtlsLt.length == 0) {
                                                                // let sqlTU = " Update ticket set tName=" + data.tName + ", longDesc=" + data.longDesc + ", " +
                                                                //     " attachmentPath='" + JSON.stringify(data.attachedFilePath) + "', busi_priority_id=" + data.priorityId;
                                                                let sqlTU = ' Update ticket set tName=' + data.tName + ', longDesc=' + data.longDesc + ', ' +
                                                                    ' attachmentPath="' + attatchPath + '", busi_priority_id=' + data.priorityId;
                                                                if (data.claimNo) {
                                                                    sqlTU = sqlTU + " , claimNo = " + data.claimNo + " ";
                                                                }

                                                                if (data.priorityType === 1 || data.ticket_type_seq === 5 || data.ticket_type_seq === 6) {
                                                                    sqlTU = sqlTU + ", busi_impact_id = " + data.busi_impact_id + " ,busi_urgency_id = " + data.busi_urgency_id + " ";
                                                                }

                                                                if (data.requesterInfo) {
                                                                    sqlTU = sqlTU + ", requesterInfo = '" + data.requesterInfo + "' ";
                                                                }

                                                                sqlTU = sqlTU + " , modifybyid =" + data.createdBy + " , modifydate = Now() " +
                                                                    " where id = " + data.id + " ";
                                                                logData('11----' + sqlTU)
                                                                con.query(sqlTU, function (errTU, resultTU) {
                                                                    logData(errTU + ' categoryDtlsLt:: --' + JSON.stringify(resultTU))
                                                                    if (errTU) {
                                                                        logData('error:: ' + errTU);
                                                                        cb(errTU, null);
                                                                    } else {
                                                                        logData(resultTU + ' categoryDtlsLt111:: --' + JSON.stringify(resultTU) + ' lllll ' + resultTU.affectedRows)
                                                                        if (resultTU.affectedRows > 0) {
                                                                            var comSql = "select CONCAT(requesterInfo,tName,longDesc,categoryDtlsLt) conVal from ( " +
                                                                                " SELECT if(( u1.requesterInfo <> u2.requesterInfo ),CONCAT('Requester Info: ', u2.requesterInfo,' to ',u1.requesterInfo,'. '),'') requesterInfo " +
                                                                                " , if(( u1.tName <> u2.tName),CONCAT('Ticket Name: ', u2.tName,' to ',u1.tName,'. '),'') tName " +
                                                                                " , if(( u1.longDesc <> u2.longDesc ),CONCAT('Long Desc: ', u2.longDesc,' to ',u1.longDesc,'. '),'') longDesc " +
                                                                                " , if(( u1.categoryDtlsLt <> u2.categoryDtlsLt ),CONCAT('Category Change: ', (select group_concat(b.ATTRVAL) name from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + data.id + " and a.createdate = (SELECT max(createdate) FROM ticketCategory where ticketId = " + data.id + ") group by ticketId),' to ',(select group_concat(b.ATTRVAL) name from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = 18 group by ticketId),'. '),'') categoryDtlsLt " +
                                                                                " FROM " +
                                                                                " ticket u1, " +
                                                                                " ticket_bck u2 " +
                                                                                " WHERE u1.id = " + data.id + " " +
                                                                                " AND u2.id = " + data.id + " " +
                                                                                " and u2.tbl_id = (select max(tbl_id) from ticket_bck where id = " + data.id + " )) a";
                                                                            logData('comSql--------' + comSql)
                                                                            con.query(comSql, function (comerr5, comresult5) {
                                                                                if (comerr5) {
                                                                                    logData('comSuccess5:' + comerr5);
                                                                                    cb(comerr5, null);
                                                                                } else {
                                                                                    comresult5[0].conVal = con.escape(comresult5[0].conVal);
                                                                                    var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue ) " +
                                                                                        " VALUES (" + data.id + ",9," + data.WFCClientResultId + "," + data.createdBy + "," + comresult5[0].conVal + ") ";
                                                                                    con.query(sql5, function (err5, result5) {
                                                                                        if (err5) {
                                                                                            logData(err5);
                                                                                            cb(err5, null);
                                                                                        } else {

                                                                                            // optimizedreport table starts

                                                                                            var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                                + "replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / ') ps,"
                                                                                                + "replace(group_concat(concat((select name from USER where id =?),'/')),',',' / ') l_name"
                                                                                                + " from USER where id =? "
                                                                                            con.query(sql90, [data.id, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                                                                                                if (err) {
                                                                                                    console.log(err);
                                                                                                } else {
                                                                                                    console.log(result55);
                                                                                                    var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                        + "all_analyst_ps= ?,all_analyst_name=?,"
                                                                                                        + "ticket_activity_log=?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                                                                    //  console.log("WS@###########################",result60[0].id);
                                                                                                    con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, comresult5[0].conVal, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                                        console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                                        if (err) {
                                                                                                            console.log("65342168451326854321698543216853241685426854", err);
                                                                                                            cb(err, null);
                                                                                                        } else {
                                                                                                            logData("&&&&&&&&&&&&&&------------>" + sql44);
                                                                                                            console.log("$$$$$$$$$$---->", result77);
                                                                                                            cb(null, true, result77);
                                                                                                        }
                                                                                                    })
                                                                                                }
                                                                                            });

                                                                                            //optimizedreport table ends 

                                                                                            request
                                                                                                .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=2&actionID=9&actionData=')
                                                                                                .end((err, resp) => {
                                                                                                    if (err) {
                                                                                                        logData(err);
                                                                                                    } else {
                                                                                                        logData('done')
                                                                                                        logData('done----err---' + err)
                                                                                                        logData('done---resp--' + JSON.stringify(resp))
                                                                                                    }
                                                                                                    // Do something
                                                                                                });

                                                                                            cb(null, true, resultTU.affectedRows);

                                                                                        }
                                                                                    });
                                                                                }
                                                                            });
                                                                        } else {
                                                                            cb(null, false, "Data is not updated");
                                                                        }

                                                                    }
                                                                })
                                                            } else {
                                                                getWFCGeneratedFor({
                                                                    "clientId": data.clientId,
                                                                    "ticket_type": data.ticketTypeId
                                                                }, function (errDyn, successDyn, detailsDyn) {
                                                                    if (errDyn || !successDyn) {
                                                                        logData('Error: ' + errDyn + successDyn)
                                                                    } else {
                                                                        util.logData('---------getWFCGeneratedFor------' + detailsDyn[0].category_level);
                                                                        var cat_level = detailsDyn[0].category_level;

                                                                        logData('hhhhhhhhhhhh')
                                                                        let updSql = "SELECT * FROM ticket where id = " + data.id + " and categoryDtlsLt like '%" + data.categoryDtlsLt.split(',')[cat_level - 1] + "%' ";
                                                                        logData("Update category select query ----------------->" + updSql);
                                                                        con.query(updSql, function (upderr, updresult) {
                                                                            if (upderr) {
                                                                                logData(upderr);
                                                                                cb(upderr, null);
                                                                            } else {
                                                                                if (updresult != null && updresult.length > 0) {
                                                                                    logData('**************************non working category******************')
                                                                                    let sql = ' Update ticket set tName=' + data.tName + ', longDesc=' + data.longDesc + ', ' +
                                                                                        ' categoryDtlsLt = "' + data.categoryDtlsLt + '" ' +
                                                                                        ',  attachmentPath="' + attatchPath + '", busi_priority_id=' + data.priorityId;
                                                                                    if (data.claimNo) {
                                                                                        sql = sql + " , claimNo = " + data.claimNo + " ";
                                                                                    }
                                                                                    if (data.requesterInfo) {
                                                                                        sql = sql + ", requesterInfo = '" + data.requesterInfo + "' ";
                                                                                    }
                                                                                    if (data.ticket_type_seq === 5 || data.ticket_type_seq === 6) {
                                                                                        sql = sql + ", busi_impact_id = " + data.busi_impact_id + " ,busi_urgency_id = " + data.busi_urgency_id + " ";
                                                                                    }
                                                                                    sql = sql + " , modifybyid =" + data.createdBy + " , modifydate = Now() " +
                                                                                        " where id = " + data.id + " ";
                                                                                    logData("Update category sql ------mmmmmmmmmmmmmmmmm----------->" + sql);
                                                                                    con.query(sql, function (err, result) {
                                                                                        if (err) {
                                                                                            logData(err);
                                                                                            cb(err, null);
                                                                                        } else {
                                                                                            if (result.affectedRows > 0) {
                                                                                                updateCategoryInfomationOnly(data, function (errCU, successCU, detailsUC) {
                                                                                                    if (errCU || !successCU) {
                                                                                                        logData(errCU + successCU);
                                                                                                        cb(errCU, null);
                                                                                                    } else {
                                                                                                        var comSql = "select CONCAT(requesterInfo,tName,longDesc,categoryDtlsLt) conVal from ( " +
                                                                                                            " SELECT if(( u1.requesterInfo <> u2.requesterInfo ),CONCAT('Requester Info: ', u2.requesterInfo,' to ',u1.requesterInfo,'. '),'') requesterInfo " +
                                                                                                            " , if(( u1.tName <> u2.tName),CONCAT('Ticket Name: ', u2.tName,' to ',u1.tName,'. '),'') tName " +
                                                                                                            " , if(( u1.longDesc <> u2.longDesc ),CONCAT('Long Desc: ', u2.longDesc,' to ',u1.longDesc,'. '),'') longDesc " +
                                                                                                            " , if(( u1.categoryDtlsLt <> u2.categoryDtlsLt ),CONCAT('Category Change: ', (select group_concat(b.ATTRVAL) name from ticketCategory_bck a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + data.id + " and a.createdate = (SELECT max(createdate) FROM ticketCategory_bck where ticketId = " + data.id + ") group by ticketId),' to ',(select group_concat(b.ATTRVAL) name from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + data.id + " group by ticketId),'. '),'') categoryDtlsLt " +
                                                                                                            " FROM " +
                                                                                                            " ticket u1, " +
                                                                                                            " ticket_bck u2 " +
                                                                                                            " WHERE u1.id = " + data.id + " " +
                                                                                                            " AND u2.id = " + data.id + " " +
                                                                                                            " and u2.tbl_id = (select max(tbl_id) from ticket_bck where id = " + data.id + " )) a";
                                                                                                        con.query(comSql, function (comerr5, comresult5) {
                                                                                                            if (comerr5) {
                                                                                                                logData(comerr5);
                                                                                                                cb(comerr5, null);
                                                                                                            } else {
                                                                                                                var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue ) " +
                                                                                                                    " VALUES (" + data.id + ",9," + data.WFCClientResultId + "," + data.createdBy + ",'" + comresult5[0].conVal + "') ";
                                                                                                                con.query(sql5, function (err5, result5) {
                                                                                                                    if (err5) {
                                                                                                                        logData(err5);
                                                                                                                        cb(err5, null);
                                                                                                                    } else {

                                                                                                                        // optimizedreport table starts

                                                                                                                        var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                            // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                                                            + "replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / ') ps,"
                                                                                                                            + "replace(group_concat(concat((select name from USER where id =?),'/')),',',' / ') l_name"
                                                                                                                            + " from USER where id =? "
                                                                                                                        con.query(sql90, [data.id, data.user_id, data.user_id, data.user_id], function (err, result55) {
                                                                                                                            if (err) {
                                                                                                                                console.log(err);
                                                                                                                            } else {
                                                                                                                                console.log(result55);
                                                                                                                                var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                                                    + "all_analyst_ps= ?,all_analyst_name=?,"
                                                                                                                                    + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                                                // console.log("WS@###########################",result60[0].id);
                                                                                                                                con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, comresult5[0].conVal, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                                                                    console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                                                                    if (err) {
                                                                                                                                        console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                        cb(err, null);
                                                                                                                                    } else {
                                                                                                                                        logData("********____werf________>>>" + sql44);
                                                                                                                                        console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                                                                                        cb(null, true, result77);
                                                                                                                                    }
                                                                                                                                })
                                                                                                                            }
                                                                                                                        });

                                                                                                                        // optimizedreport table ends
                                                                      
                                                                                                                        request
                                                                                                                            .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=2&actionID=9&actionData=')
                                                                                                                            .end((err, resp) => {
                                                                                                                                if (err) {
                                                                                                                                    logData(err);
                                                                                                                                } else {
                                                                                                                                    logData('done')
                                                                                                                                    logData('done----err---' + err)
                                                                                                                                    logData('done---resp--' + JSON.stringify(resp))
                                                                                                                                }
                                                                                                                                // Do something
                                                                                                                            });
                                                                                                                        /*updateSlaCategoryWise({
                                                                                                                            "id": data.id,
                                                                                                                            "catList": data.categoryDtlsLt,
                                                                                                                            "user_id": data.createdBy,
                                                                                                                            "clientId": data.clientId
                                                                                                                        }, function (errCU, successCU, detailsUC) {
                                                                                                                        });*/

                                                                                                                        cb(null, true, "Updated");
                                                                                                                    }
                                                                                                                });
                                                                                                            }
                                                                                                        });
                                                                                                    }
                                                                                                });


                                                                                            } else {
                                                                                                cb(null, false, "Data is not updated");
                                                                                            }

                                                                                        }
                                                                                    })
                                                                                } else {
                                                                                    logData('************************** working category******************')
                                                                                    var catLt = data.categoryDtlsLt.split(",");
                                                                                    var catVal = catLt[cat_level - 1].split("#")[1];
                                                                                    let str = "select a.supportGroupLevelId,a.work_flow_component_id,a.id,a.userId,b.tStatus_cd,a.workflowId from " +
                                                                                        " (select supportGroupLevelId,work_flow_component_id,id,userId,CLIENTID,workflowId " +
                                                                                        " from WFCCLIENT where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and STARTENDFLOWINDICATOR = '1' and categoryId=" + catVal + ") a," +
                                                                                        " (select id tStatus_cd,CLIENTID,sequence_no from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and ATTRID = 2 ";
                                                                                    if (data.ticket_type_seq === 1) {
                                                                                        str = str + " and sequence_no = 1 ";
                                                                                    } else if (data.ticket_type_seq === 5) {
                                                                                        str = str + " and sequence_no = 301 ";
                                                                                    } else if (data.ticket_type_seq === 6) {
                                                                                        str = str + " and sequence_no = 401 ";
                                                                                    } else if (data.ticket_type_seq === 7) {
                                                                                        str = str + " and sequence_no = 1 ";
                                                                                    } else {
                                                                                        str = str + " and sequence_no = 101 ";
                                                                                    }

                                                                                    str = str + " ) b where a.CLIENTID= b.CLIENTID ";
                                                                                    logData('\n\nstr---for update---------------' + str)
                                                                                    con.query(str, function (errs, results) {
                                                                                        if (errs) {
                                                                                            logData(errs);
                                                                                            cb(errs, null);
                                                                                        } else {
                                                                                            if (results == null || results.length == 0) {
                                                                                                cb(null, false, "***************************************Workflow not declare.");
                                                                                            } else {
                                                                                                // logData('category updae$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$4-----------------' + JSON.stringify(results))
                                                                                                var sql1 = ' Update ticket set tName=' + data.tName + ', longDesc=' + data.longDesc + ',' +
                                                                                                    ' attachmentPath="' + attatchPath + '", busi_priority_id=' + data.priorityId + ', ' +
                                                                                                    ' categoryDtlsLt = "' + data.categoryDtlsLt + '" ' +
                                                                                                    ' , tstatus = ' + results[0].tStatus_cd + ', modifybyid =' + data.createdBy + ' , modifydate = Now(),working_category = ' + catVal + ',escalated_to_supp_grp_id=' + results[0].supportGroupLevelId + '';
                                                                                                if (data.claimNo) {
                                                                                                    sql1 = sql1 + " , claimNo = " + data.claimNo + " ";
                                                                                                }
                                                                                                if (data.requesterInfo) {
                                                                                                    sql1 = sql1 + ", requesterInfo = '" + data.requesterInfo + "' ";
                                                                                                }

                                                                                                if (data.ticket_type_seq === 5 || data.ticket_type_seq === 6) {
                                                                                                    sql1 = sql1 + ", busi_impact_id = " + data.busi_impact_id + " ,busi_urgency_id = " + data.busi_urgency_id + ", is_approved_problem_ticket = 90 ";
                                                                                                }
                                                                                                if (data.ticket_type_seq === 6) {
                                                                                                    str = str + ", supportGroupLevelId = " + data.userGroupId + " ";
                                                                                                } else {

                                                                                                    str = str + ", supportGroupLevelId = " + results[0].supportGroupLevelId + " ";
                                                                                                }
                                                                                                sql1 = sql1 + " where id = " + data.id + " ";

                                                                                                logData('updateStopSlaDtlsTicketWise-------------------1111111111111111111111111111111111111111111-----------------' + sql1);
                                                                                                con.query(sql1, function (err1, result1) {
                                                                                                    if (err1) {
                                                                                                        logData(err1);
                                                                                                        cb(err1, null);
                                                                                                    } else {
                                                                                                        if (result1.affectedRows > 0) {
                                                                                                            /***************************************************************/
                                                                                                            let bck = "insert into ticketCategory_bck(id, ticketId, categoryId, parent_categoryId, DeleteFlag, createdate) (SELECT id, ticketId, categoryId, parent_categoryId, DeleteFlag, createdate FROM ticketCategory where ticketId = " + data.id + ") ";
                                                                                                            con.query(bck, function (errbck, rsltbck) {
                                                                                                                if (errbck) {
                                                                                                                    logData(errbck);
                                                                                                                    cb(errbck, null);
                                                                                                                } else {
                                                                                                                    if (rsltbck.insertId > 0) {
                                                                                                                        let bck1 = "delete FROM ticketCategory where ticketId = " + data.id + " ";
                                                                                                                        con.query(bck1, function (errbck1, rsltbck1) {
                                                                                                                            if (errbck1) {
                                                                                                                                logData(errbck1);
                                                                                                                                cb(errbck1, null);
                                                                                                                            } else {
                                                                                                                                if (rsltbck1.affectedRows > 0) {
                                                                                                                                    let usql = "Update WFCCLIENTRESULT set activeFlow = '0' where PKFIELDVAL = " + data.id + " ";
                                                                                                                                    con.query(usql, function (uerr, udetails) {
                                                                                                                                        if (uerr) {
                                                                                                                                            logData(uerr);
                                                                                                                                            cb(uerr, null);
                                                                                                                                        } else {
                                                                                                                                            if (udetails.affectedRows > 0) {
                                                                                                                                                /*********************************************************************************/
                                                                                                                                                var catList = data.categoryDtlsLt.split(",");
                                                                                                                                                var flg = 1;
                                                                                                                                                var le = 0;
                                                                                                                                                for (var i = 0; i < catList.length; i++) {
                                                                                                                                                    var cat = catList[i].split("#");
                                                                                                                                                    var sql = "Insert into ticketCategory(ticketId,categoryId,parent_categoryId ) values (" + data.id + "," + cat[1] + "," + cat[0] + " ) ";
                                                                                                                                                    logData('\n\ncat sql update--------------------' + sql)
                                                                                                                                                    con.query(sql, function (err, result) {
                                                                                                                                                        if (err) {
                                                                                                                                                            logData(err);
                                                                                                                                                            cb(err, null);
                                                                                                                                                        } else {

                                                                                                                                                            // optimizedreport table starts

                                                                                                                                                            var sql2 = "SELECT count(categoryId) ifix,"
                                                                                                                                                                + "coalesce(replace(group_concat(concat(date_format (ADDTIME(createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',','\n'),'') all_cat_change_dt  "
                                                                                                                                                                + "FROM ticketCategory where ticketId =?;"
                                                                                                                                                            logData("@#" + sql2);
                                                                                                                                                            con.query(sql2, [data.id], function (err, result2) {
                                                                                                                                                                if (err) {
                                                                                                                                                                    console.log(err);
                                                                                                                                                                    cb(err, null);
                                                                                                                                                                } else {
                                                                                                                                                                    console.log("333333333=---", result2);
                                                                                                                                                                    logData("@#" + result2);
                                                                                                                                                                    var sql3 = "update optimizedreport set cat_change_dt =Now(),all_cat_change_dt=?,cat_change_count= ? where ticket_id =? "
                                                                                                                                                                    con.query(sql3, [result2[0].all_cat_change_dt, result2[0].ifix, data.id], function (err, result3) {
                                                                                                                                                                        if (err) {
                                                                                                                                                                            cb(err, null);
                                                                                                                                                                        } else {
                                                                                                                                                                            logData("&&&&&&&&&&&&&&---edf--------->" + sql3);
                                                                                                                                                                            console.log("$$$$$$$$$$$-->", result3);
                                                                                                                                                                            cb(null, true, result3);
                                                                                                                                                                        }
                                                                                                                                                                    })
                                                                                                                                                                }
                                                                                                                                                            });

                                                                                                                                                            // optimizedreport table ends


                                                                                                                                                            var cat1 = catList[le].split("#");
                                                                                                                                                            le++;

                                                                                                                                                            if (flg == catList.length) {
                                                                                                                                                                var fld = {
                                                                                                                                                                    "clientId": data.clientId,
                                                                                                                                                                    "user_id": results[0].userId,
                                                                                                                                                                    "frw_user_id": results[0].userId,
                                                                                                                                                                    "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                                                                                    "wfcclient_id": results[0].id,
                                                                                                                                                                    "supportGroupLevelId": results[0].supportGroupLevelId,
                                                                                                                                                                    "PKFIELDVAL": data.id,
                                                                                                                                                                    "FIELDVAL": catList[cat_level - 1].split("#")[1],
                                                                                                                                                                    "category_id": catList[cat_level - 1].split("#")[0],
                                                                                                                                                                    "tStatus_cd": results[0].tStatus_cd,
                                                                                                                                                                    "createdBy": data.createdBy,
                                                                                                                                                                    "is_1st_entry": 'N',
                                                                                                                                                                    "reopen": 0
                                                                                                                                                                };
                                                                                                                                                                if (data.ticket_type_seq === 6) {
                                                                                                                                                                    fld.supportGroupLevelId = data.userGroupId;
                                                                                                                                                                }
                                                                                                                                                                logData('\n\ngenerateWorkFlow parameter--------------------' + JSON.stringify(fld))
                                                                                                                                                                var asd = "";
                                                                                                                                                                generateWorkFlow(fld, function (err, success, details) {

                                                                                                                                                                    var comSql = "select CONCAT(requesterInfo,tName,longDesc,categoryDtlsLt) conVal from ( " +
                                                                                                                                                                        " SELECT if(( u1.requesterInfo <> u2.requesterInfo ),CONCAT('Requester Info: ', u2.requesterInfo,' to ',u1.requesterInfo,'. '),'') requesterInfo " +
                                                                                                                                                                        " , if(( u1.tName <> u2.tName),CONCAT('Ticket Name: ', u2.tName,' to ',u1.tName,'. '),'') tName " +
                                                                                                                                                                        " , if(( u1.longDesc <> u2.longDesc ),CONCAT('Long Desc: ', u2.longDesc,' to ',u1.longDesc,'. '),'') longDesc " +
                                                                                                                                                                        " , if(( u1.categoryDtlsLt <> u2.categoryDtlsLt ),CONCAT('Category Change: ', (select group_concat(b.ATTRVAL) name from ticketCategory_bck a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + data.id + " and a.createdate = (SELECT max(createdate) FROM ticketCategory_bck where ticketId = " + data.id + ") group by ticketId),' to ',(select group_concat(b.ATTRVAL) name from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + data.id + " group by ticketId),'. '),'') categoryDtlsLt " +
                                                                                                                                                                        " FROM " +
                                                                                                                                                                        " ticket u1, " +
                                                                                                                                                                        " ticket_bck u2 " +
                                                                                                                                                                        " WHERE u1.id = " + data.id + " " +
                                                                                                                                                                        " AND u2.id = " + data.id + " " +
                                                                                                                                                                        " and u2.tbl_id = (select max(tbl_id) from ticket_bck where id = " + data.id + " )) a";
                                                                                                                                                                    con.query(comSql, function (comerr5, comresult5) {
                                                                                                                                                                        if (comerr5) {
                                                                                                                                                                            logData(comerr5);
                                                                                                                                                                            cb(comerr5, null);
                                                                                                                                                                        } else {

                                                                                                                                                                            /***********************************************************/
                                                                                                                                                                            deleteAllSlaDueToCategoryChange(data, function (errCU, successCU, detailsCU) {

                                                                                                                                                                            })

                                                                                                                                                                            /***********************************************************/

                                                                                                                                                                            var fldC = {
                                                                                                                                                                                "clientId": data.clientId,
                                                                                                                                                                                "workflowId": results[0].workflowId,
                                                                                                                                                                                "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                                                                                                "categoryId": catList[2].split("#")[1]
                                                                                                                                                                            };
                                                                                                                                                                            /***********************************************************/
                                                                                                                                                                            checkBackWorkFlowDefined(fldC, function (errC, successC, detailsC) {
                                                                                                                                                                                if (detailsC == '3') {
                                                                                                                                                                                    var fldT = {
                                                                                                                                                                                        "ticketId": data.id
                                                                                                                                                                                    };
                                                                                                                                                                                    getBackwardWorkFlowlastState(fldT, function (errT, successT, detailsT) {
                                                                                                                                                                                        if (detailsT == null || detailsT.length == 0) {

                                                                                                                                                                                        } else {
                                                                                                                                                                                            var fldB = {
                                                                                                                                                                                                "clientId": data.clientId,
                                                                                                                                                                                                "userId": data.user_id,
                                                                                                                                                                                                "supportGroupLevelId": results[0].supportGroupLevelId,
                                                                                                                                                                                                "ticketId": data.id,
                                                                                                                                                                                                "categoryId": catList[2].split("#")[1],
                                                                                                                                                                                                "parent_wfcclient_id": detailsT[0].id,
                                                                                                                                                                                                "STARTENDFLOWINDICATOR": detailsT[0].STARTENDFLOWINDICATOR + 1,
                                                                                                                                                                                                "workflowId": results[0].workflowId,
                                                                                                                                                                                                "work_flow_component_id": results[0].work_flow_component_id,
                                                                                                                                                                                                "wfcclient_id": results[0].id,
                                                                                                                                                                                                "createdBy": data.createdBy
                                                                                                                                                                                            };
                                                                                                                                                                                            insertWFCClientTicketWise(fldB, function (errB, successB, detailsB) {
                                                                                                                                                                                            });
                                                                                                                                                                                        }
                                                                                                                                                                                    });

                                                                                                                                                                                }
                                                                                                                                                                            });
                                                                                                                                                                            // data.ticketTypeId = 32;
                                                                                                                                                                            if (socket) {
                                                                                                                                                                                let val1 = {
                                                                                                                                                                                    ticketId: data.id,
                                                                                                                                                                                    clientId: data.clientId,
                                                                                                                                                                                    ticketTypeId: data.ticketTypeId
                                                                                                                                                                                };
                                                                                                                                                                                getNotificationMenuIdTicketStatusWise(val1, function (err111, success111, details111) {

                                                                                                                                                                                });
                                                                                                                                                                                // socket.emit('dashboard', {
                                                                                                                                                                                //     menuId: 3,
                                                                                                                                                                                //     ticketId: data.id,
                                                                                                                                                                                //     clientId: data.clientId,
                                                                                                                                                                                //     ticketTypeId: data.ticketTypeId
                                                                                                                                                                                // });
                                                                                                                                                                                // socket.emit('dashboard', {
                                                                                                                                                                                //     menuId: 33,
                                                                                                                                                                                //     ticketId: data.id,
                                                                                                                                                                                //     clientId: data.clientId,
                                                                                                                                                                                //     ticketTypeId: data.ticketTypeId
                                                                                                                                                                                // });
                                                                                                                                                                                // socket.emit('dashboard', {
                                                                                                                                                                                //     menuId: 50,
                                                                                                                                                                                //     ticketId: data.id,
                                                                                                                                                                                //     clientId: data.clientId,
                                                                                                                                                                                //     ticketTypeId: data.ticketTypeId
                                                                                                                                                                                // });
                                                                                                                                                                                // socket.emit('dashboard', {
                                                                                                                                                                                //     menuId: 51,
                                                                                                                                                                                //     ticketId: data.id,
                                                                                                                                                                                //     clientId: data.clientId,
                                                                                                                                                                                //     ticketTypeId: data.ticketTypeId
                                                                                                                                                                                // });
                                                                                                                                                                                // socket.emit('dashboard', {
                                                                                                                                                                                //     menuId: 40,
                                                                                                                                                                                //     ticketId: data.id,
                                                                                                                                                                                //     clientId: data.clientId,
                                                                                                                                                                                //     ticketTypeId: data.ticketTypeId
                                                                                                                                                                                // });
                                                                                                                                                                                // socket.emit('dashboard', {
                                                                                                                                                                                //     menuId: 41,
                                                                                                                                                                                //     ticketId: data.id,
                                                                                                                                                                                //     clientId: data.clientId,
                                                                                                                                                                                //     ticketTypeId: data.ticketTypeId
                                                                                                                                                                                // });
                                                                                                                                                                                // socket.emit('dashboard', {
                                                                                                                                                                                //     menuId: 21,
                                                                                                                                                                                //     ticketId: data.id,
                                                                                                                                                                                //     clientId: data.clientId,
                                                                                                                                                                                //     ticketTypeId: data.ticketTypeId
                                                                                                                                                                                // });
                                                                                                                                                                            }
                                                                                                                                                                            /**********************************************************************/
                                                                                                                                                                            var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue ) " +
                                                                                                                                                                                " VALUES (" + data.id + ",10," + details + "," + data.createdBy + ",'" + comresult5[0].conVal + "') ";
                                                                                                                                                                            con.query(sql5, function (err5, result5) {
                                                                                                                                                                                if (err5) {
                                                                                                                                                                                    logData(err5);
                                                                                                                                                                                    cb(err5, null);
                                                                                                                                                                                } else {

                                                                                                                                                                                    // optimizedreport table starts

                                                                                                                                                                                    var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                                                                                        // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                                                                                                                        + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                                                                                                                        + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                                                                                                                        + " from USER where id =? "
                                                                                                                                                                                    con.query(sql90, [data.id, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                                                                                                                                                                                        if (err) {
                                                                                                                                                                                            console.log(err);
                                                                                                                                                                                        } else {
                                                                                                                                                                                            console.log(result55);
                                                                                                                                                                                            var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=? ,"
                                                                                                                                                                                                + "all_analyst_ps= ?,all_analyst_name=?,"
                                                                                                                                                                                                + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                                                                                                                                                            // console.log("WS@###########################",result60[0].id);
                                                                                                                                                                                            con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, comresult5[0].conVal, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                                                                                                                                console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                                                                                                                                if (err) {
                                                                                                                                                                                                    console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                                                                                    cb(err, null);
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    logData("********_____qwed_______>>>" + sql44);
                                                                                                                                                                                                    console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                                                                                                                                                    cb(null, true, result77);
                                                                                                                                                                                                }
                                                                                                                                                                                            })
                                                                                                                                                                                        }
                                                                                                                                                                                    });

                                                                                                                                                                                    // optimizedreport table ends
                                                                 

                                                                                                                                                                                    request
                                                                                                                                                                                        .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=2&actionID=9&actionData=')
                                                                                                                                                                                        .end((err, resp) => {
                                                                                                                                                                                            if (err) {
                                                                                                                                                                                                logData(err);
                                                                                                                                                                                            } else {
                                                                                                                                                                                                logData('done')
                                                                                                                                                                                                logData('done----err---' + err)
                                                                                                                                                                                                logData('done---resp--' + JSON.stringify(resp))
                                                                                                                                                                                            }
                                                                                                                                                                                            // Do something
                                                                                                                                                                                        });
                                                                                                                                                                                    updateSlaCategoryWise({
                                                                                                                                                                                        "id": data.id,
                                                                                                                                                                                        "catList": data.categoryDtlsLt,
                                                                                                                                                                                        "user_id": data.createdBy,
                                                                                                                                                                                        "clientId": data.clientId
                                                                                                                                                                                    }, function (errCU, successCU, detailsUC) {
                                                                                                                                                                                    });
                                                                                                                                                                                    var sql5 = "update ticket_wise_followup_dtls set delete_flag = '1',delete_date = Now(), delete_by_id =? " +
                                                                                                                                                                                        " where ticket_id = ? and delete_flag = '0' ";
                                                                                                                                                                                    con.query(sql5, [data.createdBy, data.id], function (err5, result5) {
                                                                                                                                                                                        if (err5) {
                                                                                                                                                                                            logData(err5);
                                                                                                                                                                                            cb(err5, null);
                                                                                                                                                                                        } else {

                                                                                                                                                                                            cb(null, true, "Updated");
                                                                                                                                                                                        }
                                                                                                                                                                                    });
                                                                                                                                                                                }
                                                                                                                                                                            });
                                                                                                                                                                        }
                                                                                                                                                                    });
                                                                                                                                                                });

                                                                                                                                                            }
                                                                                                                                                            flg++;
                                                                                                                                                            /*}
                                                                                                                                                            });*/
                                                                                                                                                        }
                                                                                                                                                    });

                                                                                                                                                }
                                                                                                                                            } else {
                                                                                                                                                cb(null, false, "Some error");
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    })

                                                                                                                                } else {
                                                                                                                                    cb(null, false, "Some error");
                                                                                                                                }

                                                                                                                            }
                                                                                                                        })
                                                                                                                    } else {
                                                                                                                        cb(null, false, "Some error");
                                                                                                                    }

                                                                                                                }
                                                                                                            })
                                                                                                            /***************************************************************/


                                                                                                        } else {
                                                                                                            cb(null, false, "Data is not inserted");
                                                                                                        }
                                                                                                    }
                                                                                                });
                                                                                            }
                                                                                        }
                                                                                    });
                                                                                }
                                                                            }
                                                                        })////***********
                                                                    }
                                                                })
                                                            }//***************************
                                                        }

                                                    });
                                                }
                                            }
                                            )
                                        }
                                    });

                                }
                            })
                        }
                    }
                })
            }
        }
    })

}

function updateSlaCategoryWise(data, cb) {
    let sql = "select id, sla_recalcultion_type from ticket_sla_recalculation_type a " +
        " where a.DeleteFlag = '0' " +
        " and a.client_id = (select clientid from ticket where  id = " + data.id + ") " +
        " and a.ticket_type = (select ticketTypeId from ticket where  id = " + data.id + ") " +
        " and a.situation_type = 'category_change' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                if (result[0].sla_recalcultion_type == 'resume') {
                    cb(null, true, "No Action required");
                } else {
                    callStopSlaDtlsTicketWise({
                        "id": data.id,
                        "user_id": data.user_id,
                        "reqType": "category",
                        "clientId": data.clientId
                    }, function (errC, successC, detailsC) {
                        cb(null, true, "Done");
                    });
                }
            } else {
                cb(null, true, "No Action required");
            }
        }
    });
}

function getTicketStatusSeq(data, cb) {
    //let sql = "select sequence_no from TICKETATTRIBUTES where DeleteFlag ='0'  and id in (select tStatus from WFCCLIENTRESULT_LAST_STATUS where PKFIELDVAL="+data.id+") ";
    let sql = "select a.id, b.sequence_no,b.is_stopSlaMeter from WFCCLIENTRESULT_LAST_STATUS a, TICKETATTRIBUTES b where a.tStatus = b.id and a.PKFIELDVAL=" + data.id + " and b.DeleteFlag = '0' ";
    con.query(sql, function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                result[0].id = 0;
                result[0].sequence_no = -1;
                cb(null, true, result);
            }
        }
    });
}

function updateSlaSupportGroupWise(data, cb) {
    callStopSlaDtlsTicketWise({
        "id": data.id,
        "user_id": data.user_id,
        "reqType": "supportGrpWise",
        "clientId": data.clientId
    }, function (errC, successC, detailsC) {
        cb(null, true, "Done");
    });
}

function callStopSlaDtlsTicketWise(data, cb) {
    logData('*********************callStopSlaDtlsTicketWise************************')
    if (data.reqType === 'category') {
        request
            .get(SLA_URL + '/getSalResolutionPeriodCategorySpecial')
            .query({ ticketId: data.id }) // query string
            .end((err, resp) => {
                let x = 0;
                if (err) {
                    slaDaoAccess.updateStopSlaDtlsTicketWise({
                        "slaResPrd": x,
                        "id": data.id,
                        "user_id": data.user_id,
                        "reqType": data.reqType,
                        "clientId": data.clientId
                    }, function (errC, successC, detailsC) {
                        if (errC) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (successC) {
                                cb(null, true, detailsC);
                            } else {
                                cb(null, false, detailsC);
                            }
                        }
                    });

                    logData('getSalResolutionPeriod------------------------' + err);
                } else {
                    if (JSON.parse(resp.text).resVal) {
                        x = JSON.parse(resp.text).resVal.slaResponsePeriod;
                    } else {
                        x = 0;
                    }
                    logData('getSalResolutionPeriod------------------------' + x);
                    slaDaoAccess.updateStopSlaDtlsTicketWise({
                        "slaResPrd": x,
                        "id": data.id,
                        "user_id": data.user_id,
                        "reqType": data.reqType,
                        "clientId": data.clientId
                    }, function (errC, successC, detailsC) {
                        if (errC) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (successC) {
                                cb(null, true, detailsC);
                            } else {
                                cb(null, false, detailsC);
                            }
                        }
                    });
                }
            });
    } else {
        request
            .get(SLA_URL + '/getSalResolutionPeriod')
            .query({ ticketId: data.id }) // query string
            .end((err, resp) => {
                let x = 0;
                if (err) {
                    slaDaoAccess.updateStopSlaDtlsTicketWise({
                        "slaResPrd": x,
                        "id": data.id,
                        "user_id": data.user_id,
                        "reqType": data.reqType,
                        "clientId": data.clientId
                    }, function (errC, successC, detailsC) {
                        if (errC) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (successC) {
                                cb(null, true, detailsC);
                            } else {
                                cb(null, false, detailsC);
                            }
                        }
                    });

                    logData('getSalResolutionPeriod------------------------' + err);
                } else {
                    if (JSON.parse(resp.text).resVal) {
                        x = JSON.parse(resp.text).resVal.slaResponsePeriod;
                    } else {
                        x = 0;
                    }
                    logData('getSalResolutionPeriod------------------------' + x);
                    slaDaoAccess.updateStopSlaDtlsTicketWise({
                        "slaResPrd": x,
                        "id": data.id,
                        "user_id": data.user_id,
                        "reqType": data.reqType,
                        "clientId": data.clientId
                    }, function (errC, successC, detailsC) {
                        if (errC) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (successC) {
                                cb(null, true, detailsC);
                            } else {
                                cb(null, false, detailsC);
                            }
                        }
                    });
                }
            });
    }

}


function callforSlaResponseTicketWise(data, cb) {
    console.log('callforSlaResponseTicketWise=====' + JSON.stringify(data));
    request
        .get(SLA_URL + '/getSalResponsePeriod')
        .query({ ticketId: data.id }) // query string
        .end((err, resp) => {
            let x = 0;
            if (err) {
                logData(err);
                slaDaoAccess.updateforSlaResponseTicketWise({
                    "slaResPrd": x,
                    "id": data.id,
                    "user_id": data.user_id,
                    "reqType": data.reqType
                }, function (errC, successC, detailsC) {
                    if (errC) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (successC) {
                            cb(null, true, detailsC);
                        } else {
                            cb(null, false, detailsC);
                        }
                    }
                });
            } else {

                if (JSON.parse(resp.text).resVal) {
                    x = JSON.parse(resp.text).resVal.slaResponsePeriod;
                } else {
                    x = 0;
                }
                slaDaoAccess.updateforSlaResponseTicketWise({
                    "slaResPrd": x,
                    "id": data.id,
                    "user_id": data.user_id,
                    "reqType": data.reqType
                }, function (errC, successC, detailsC) {
                    if (errC) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (successC) {
                            cb(null, true, detailsC);
                        } else {
                            cb(null, false, detailsC);
                        }
                    }
                });
            }
        });
}


function getStatusForClient(data, cb) {
    let sql = 'select id,ATTRVAL name, sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and ATTRID=2 and clientId=' + data.clientId;
    con.query(sql, function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, result);
        }
    });
}

function submitFeedbackTicketWise(data, cb) {
    util.logData('submitFeedbackTicketWise=======' + JSON.stringify(data));
    var activityId = 0;
    if (data.ticketSubType && data.ticketSubType === 'P') {
        activityId = 19;
    } else {
        activityId = 7;
    }
    data.feedback = con.escape(data.feedback);

    let sql = "Insert into ticketFeedBack (ticketId,WFCClientResultId,feedback,createbyid) values(" + data.ticketId + "," + data.WFCClientResultId + "," + data.feedback + "," + data.createdBy + ")";
    //util.logData()
    con.query(sql, function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            util.logData('---------->' + JSON.stringify(result));
            if (result.insertId === 0) {
                cb(null, false, "Data is not updated successfully");
            } else {
                var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,ticketFeedBackId ) VALUES (" + data.ticketId + "," + activityId + "," + data.WFCClientResultId + "," + data.createdBy + "," + result.insertId + ") ";
                con.query(sql5, function (err5, result5) {
                    if (err5) {
                        logData(err5);
                        cb(err5, null);
                    } else {

                         // optimizedreport table starts

                         var sql90 = "Select (select id from optimizedreport where ticket_id =?) id,login_name,name,"
                         // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                         + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                         + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                         + " from USER where id =?"
                     con.query(sql90, [data.ticketId, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                         if (err) {
                             console.log(err);
                         } else {
                             logData("_________________++++>" + sql90);
                             console.log(result55);
                             var sql44 = "update optimizedreport set comments=?,comments_added_by =?,ticket_last_modified_dt=Now(),"
                                 + "all_analyst_ps=?,all_analyst_name=?,"
                                 + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                             //  var sql = "update optimizedreport set latest_analyst_ps ='"+result55[0].login_name+"', current_assignee_ps ='"+result55[0].login_name+"',latest_analyst_name='"+result55[0].name+"',current_assignee_name='"+result55[0].name+"' where id ='"+ data.ticketId +"'"
                             // console.log("WS@###########################",result60[0].id);
                             con.query(sql44, [data.feedback, result55[0].name, result55[0].ps, result55[0].l_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                 console.log("%^&*(*&%^&*()(*&6595639586fds956");
                                 logData("*************____________>" + sql44);
                                 if (err) {
                                     console.log("65342168451326854321698543216853241685426854", err);
                                     cb(err, null);
                                 } else {
                                     logData("@@@@@@@@@@@@@@@@-->>" + sql44)
                                     console.log("000000000000000----", result77);
                                     cb(null, true, result77);
                                 }
                             })
                         }
                     });

                     // optimizedreport table ends


                        // callforSlaResponseTicketWise({
                        //     "id": data.ticketId,
                        //     "user_id": data.createdBy,
                        //     "reqType": ""
                        // }, function (errSS, successSS, detailsSS) {
                        //
                        // });
                        request
                            .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=2&actionID=7&actionData=')
                            .end((err, resp) => {
                                if (err) {
                                    logData(err);
                                } else {
                                    logData('done')
                                    logData('done----err---' + err)
                                    logData('done---resp--' + JSON.stringify(resp))
                                }
                                // Do something
                            });
                        getLastCommentByTicketId({ ticketId: data.ticketId }, function (err, success, details) {
                            if (err || !success) {

                            } else {
                                details[0].ticketId = data.ticketId;
                                if (socket) {
                                    socket.emit('comment', details[0]);
                                }
                            }
                        })
                        //******************************************************
                        /*getIsClientWiseSlaCalculationReq({
                            "clientId": data.clientId,
                            "ticketTypeId": data.ticketTypeId,
                            "working_category": data.cat_id
                        }, function (errCU1, successCU1, detailsUC1) {
                            if (detailsUC1 == 1) {
                                callforSlaResponseTicketWise({
                                    "id": data.ticketId,
                                    "user_id": data.createdBy,
                                    "reqType": ""
                                }, function (errSS, successSS, detailsSS) {

                                });
                            }
                        });*/
                        //******************************************************
                        getIsClientWiseSlaCalculationReq({
                            "clientId": data.clientId,
                            "ticketTypeId": data.ticketTypeId,
                            "working_category": data.cat_id
                        }, function (errCU1, successCU1, detailsUC1) {
                            if (detailsUC1 == 1) {
                                isalreadyResponse({ "id": data.ticketId }, function (errSS1, successSS1, detailsSS1) {
                                    if (detailsSS1.length > 0) {
                                        callforSlaResponseTicketWise({
                                            "id": data.ticketId,
                                            "user_id": data.createdBy,
                                            "reqType": ""
                                        }, function (errSS, successSS, detailsSS) {

                                        });
                                    }
                                });
                            }
                        })
                        //******************************************************
                        //******************************************************
                        cb(null, true, result.insertId);
                    }
                });

            }

        }
    });
}

function submitUserReplyFotTicketIfo(data, cb) {
    logData('*************************------------------------------------*********************')
    logData('\n\nsubmitUserReplyFotTicketIfo----------------------------' + JSON.stringify(data))
    var activityId = 18;
    /* if (data.ticketSubType && data.ticketSubType === 'P') {
         activityId = 18;
     } else {
         activityId = 18;
     }*/
    data.feedback = con.escape(data.feedback);
    logData('submitUserReplyFotTicketIfo-------------' + JSON.stringify(data));
    // data.

    checkMaxAttachment({ attachedFilePath: data.attachmentPath, id: data.ticketId }, function (err, success, message) {
        if (err) {
            cb(err, null);
        } else {
            if (!success) {
                cb(null, false, message);
            } else {
                let sql = "Insert into ticketFeedBack (ticketId,WFCClientResultId,feedback,createbyid) values(" + data.ticketId + "," + data.WFCClientResultId + "," + data.feedback + "," + data.createdBy + ")";
                con.query(sql, function (err1, result) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result.insertId === 0) {
                            cb(null, false, "Data is not updated successfully");
                        } else {
                            logData('result-------------' + JSON.stringify(result))
                            var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,ticketFeedBackId ) VALUES (" + data.ticketId + "," + activityId + "," + data.WFCClientResultId + "," + data.createdBy + "," + result.insertId + ") ";
                            con.query(sql5, function (err5, result5) {
                                if (err5) {
                                    logData(err5);
                                    cb(err5, null);
                                } else {
                                    logData('result5-------------' + JSON.stringify(result5))
                                    var str1 = "select id from TICKETATTRIBUTES where CLIENTID = " + data.clientId + "  and DeleteFlag = '0' and ATTRID = 2  and sequence_no in (13)  ";
                                    con.query(str1, function (err1, result1) {
                                        if (err1) {
                                            logData('result1:  ' + err1 + result1);
                                            cb(err1, null);
                                        } else {
                                            if (result1.length > 0) {
                                                logData('\n\n**********************b4fore submission****************************')
                                                updateTicketStatus({
                                                    "ticketId": data.ticketId,
                                                    "user_id": data.createdBy,
                                                    "clientId": data.clientId,
                                                    "id": data.WFCClientResultId,
                                                    "tStatus": result1[0].id,
                                                    "support_group": data.support_group
                                                }, function (errSS, successSS, detailsSS) {
                                                    if (errSS || !successSS) {
                                                        logData('error: ' + errSS + successSS);
                                                        cb(err5, null);
                                                    } else {
                                                        logData('\n\n***************ssssssssssssssssssssss*******b4fore submission****************************')
                                                        if (data.attachmentPath != null && data.attachmentPath != "") {
                                                            let fieldsFA = {
                                                                "ticketId": data.ticketId,
                                                                "WFCClientResultId": data.WFCClientResultId,
                                                                "attachedFilePath": data.attachmentPath,
                                                                "createdBy": data.createdBy
                                                                //"assetIds": data.assetIds
                                                            };
                                                            submitAttachmentTicketWise(fieldsFA, function (errFA, successFA, detailsFA) {
                                                                logData('==============submitUserReplyFotTicketIfo=========ok================================')
                                                            });
                                                            if (socket) {
                                                                socket.emit('attachment', {
                                                                    ticketId: data.ticketId,
                                                                    attachment: data.attachmentPath,
                                                                    date: new Date()
                                                                });
                                                            }
                                                        }
                                                        cb(null, true, result.insertId);
                                                    }

                                                });
                                            } else {

                                                cb(null, false, 0);
                                            }

                                        }
                                    });


                                }
                            });

                        }

                    }
                });
            }
        }
    });
}


function getUserClientWiseNotAssignInGrp(data, cb) {
    var str = "select a.id,a.name" +
        " from USER a where  a.CLIENTID = " + data.clientId + " AND a.DeleteFlag='0' and a.id not in (select userId from supportGroupUser where CLIENTID = " + data.clientId + " AND DeleteFlag='0' )";
    con.query(str, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getCommentsByTicketId(data, cb) {
    // let sql = 'SELECT ticketFeedBack.feedback,DATE_FORMAT(ticketFeedBack.createdate, "%d/%m/%y %T") createddate,USER.NAME name FROM ticketFeedBack,USER where ticketFeedBack.createbyid=USER.id and ticketFeedBack.ticketId=' + data.ticketId + ' ORDER BY ticketFeedBack.createdate DESC;';
    let sql = 'SELECT ticketFeedBack.feedback,ticketFeedBack.createdate createddate,USER.NAME name FROM ticketFeedBack,USER where ticketFeedBack.createbyid=USER.id and ticketFeedBack.ticketId=' + data.ticketId + ' ORDER BY ticketFeedBack.createdate DESC;';
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getPresentStatus(data, cb) {
    let sql = "Select ATTRVAL,sequence_no from TICKETATTRIBUTES where id = (select tStatus from WFCCLIENTRESULT where id = " + data.wfcClientResultId + ")";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getBackWorkFlowNotify(data, cb) {
    let sql = "SELECT id,flowTypeId FROM WFCCLIENT_back_notify where clientId = " + data.clientId + " and categoryId = " + data.categoryId + " and workflowId = " + data.workflowId + " and work_flow_component_id = " + data.work_flow_component_id + " and DeleteFlag = '0'";
    util.logData('getBackWorkFlowNotify===' + sql);
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                cb(null, true, details[0].flowTypeId);
            } else {
                cb(null, true, 0);
            }
        }
    })
}

function checkStatus(data, cb) {
    let stausCk = "select id,sequence_no,is_stopSlaMeter,clientId  from TICKETATTRIBUTES where DeleteFlag='0' and ATTRID=2 " +
        " and clientId= (SELECT clientid FROM ticket where id =" + data.ticketId + ") " +
        " and id=" + data.tStatus + "";
    logData('stausck-----------------------' + stausCk)
    con.query(stausCk, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                cb(null, true, details);
            } else {
                cb(null, false, 0);
            }
        }
    })
}


function getIsSLAInStopStatus(data, cb) {
    let stausCk = "select id,is_sla_stop from ticket where id = " + data.id + " ";

    con.query(stausCk, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                cb(null, true, details[0].is_sla_stop);
            } else {
                cb(null, true, 'N');
            }
        }
    })
}

function updateActualActivityDt(data, cb) {
    if (data.actual_activity_end_dt !== null && data.actual_activity_end_dt !== null) {
        let stausCk = "Update schedule_ticket_dtl set actual_activity_start_dt = '" + data.actual_activity_start_dt +
            "' , actual_activity_end_dt = '" + data.actual_activity_end_dt + "', modifiydate=Now(), modifiybyid = " + data.user_id + " " +
            " where ticket_id = " + data.ticket_id;
        con.query(stausCk, function (errCk, detailsCk) {
            if (errCk) {
                logData(errCk);
                cb(errCk, null);
            } else {
                cb(null, true, "Done");
            }
        });
    } else {
        cb(null, true, "Done");
    }
}

function resumeSlaMeter(data, cb) {
    let idFetch = "select max(id) mid, ticketId from ticket_sla_response_dtls where ticketId = " + data.id + " and response_stop_status = 'Y' group by ticketId ";

    con.query(idFetch, function (idFetcherr, idFetchdetails) {
        if (idFetcherr) {
            logData(idFetcherr);
            cb(idFetcherr, null);
        } else {
            if (idFetchdetails.length > 0) {
                let stausCk = "Update ticket_sla_response_dtls set resolution_stop_status = 'N'   where id = " + idFetchdetails[0].mid + " and ticketId = " + data.id + " and response_stop_status = 'Y' ";
                con.query(stausCk, function (errCk, detailsCk) {
                    if (errCk) {
                        logData(errCk);
                        cb(errCk, null);
                    } else {
                        logData('resumeSlaMeter&&&&&&&&&&&&&&&--------------: ' + JSON.stringify(data))
                        getTicketDetail(data, function (errT, successT, detailsT) {
                            if (errT) {
                                logData(errT);
                                cb(errT, null);
                            } else {
                                if (!successT) {
                                    cb(null, false, detailsT);
                                } else {
                                    logData('reopenTicket------details-----------------' + JSON.stringify(detailsT))

                                    let str = "select * from WFCCLIENTRESULT where PKFIELDVAL = " + data.id + " order by id desc limit 1 "
                                    logData('reopen------str-----------' + str)

                                    con.query(str, function (errs, results) {
                                        if (errs) {
                                            logData(errs);
                                            cb(errs, null);
                                        } else {
                                            logData('reopen------results-----------' + JSON.stringify(results))
                                            if (results == null || results.length == 0) {
                                                cb(null, false, "Workflow not declare.");
                                            } else {
                                                logData('reopen------results-----------1111----')
                                                var sql1 = "update ticket set is_sla_stop='N',modifydate=Now(),isCloseWF = 'N', modifybyid = " + data.user_id + " where id = " + data.id + " ";
                                                logData('sla resume sql1--------------------' + sql1)
                                                con.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        if (result1.affectedRows > 0) {
                                                            var is_1st_entry = 'N';


                                                            var fld = {
                                                                "clientId": detailsT[0].clientid,
                                                                "user_id": results[0].user_id,
                                                                "frw_user_id": results[0].frw_user_id,
                                                                "work_flow_component_id": results[0].work_flow_component_id,
                                                                "wfcclient_id": results[0].wfcclient_id,
                                                                "supportGroupLevelId": results[0].supportGroupLevelId,
                                                                "PKFIELDVAL": data.id,
                                                                "FIELDVAL": results[0].FIELDVAL,
                                                                "category_id": results[0].category_id,
                                                                "tStatus_cd": data.tStatus,
                                                                "createdBy": data.user_id,
                                                                "is_1st_entry": is_1st_entry,
                                                                "reopen": 0
                                                            };
                                                            if (data.sequence_no) {
                                                                fld.sequence_no = data.sequence_no;
                                                            }
                                                            logData('\n\nsla resume insertion--this is the clpid------------' + JSON.stringify(fld) + "    " + new Date())
                                                            var asd = "";
                                                            generateWorkFlow(fld, function (errW, successW, detailsW) {
                                                                if (errW || !successW) {
                                                                    logData(errW);
                                                                    cb(errW, null);
                                                                } else {
                                                                    asd = detailsW;
                                                                    /***********************************************************/
                                                                    var fldB = {
                                                                        "clientId": detailsT[0].clientid,
                                                                        "user_id": results[0].user_id,
                                                                        "supportGroupLevelId": results[0].supportGroupLevelId,
                                                                        "ticketId": data.id,
                                                                        "categoryId": results[0].category_id,
                                                                        "parent_wfcclient_id": 0,
                                                                        "STARTENDFLOWINDICATOR": 0,
                                                                        "workflowId": results[0].workflowId,
                                                                        "work_flow_component_id": results[0].work_flow_component_id,
                                                                        "wfcclient_id": results[0].id,
                                                                        "createdBy": data.user_id
                                                                    };
                                                                    var fldC = {
                                                                        "clientId": detailsT[0].clientid,
                                                                        "workflowId": 1,//results[0].workflowId,
                                                                        "work_flow_component_id": 1,//results[0].work_flow_component_id,
                                                                        "categoryId": results[0].category_id
                                                                    };
                                                                    /***********************************************************/
                                                                    checkBackWorkFlowDefined(fldC, function (errC, successC, detailsC) {
                                                                        if (detailsC == '3') {
                                                                            insertWFCClientTicketWise(fldB, function (errB, successB, detailsB) {
                                                                                if (errB || !successB) {
                                                                                    logData(errB);
                                                                                    cb(errB, null);
                                                                                }

                                                                            });
                                                                        } else {
                                                                            cb(null, true, result1.affectedRows);
                                                                        }
                                                                    });

                                                                }
                                                            });

                                                        } else {
                                                            cb(null, false, "Data is not updated");
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    });

                                }
                            }
                        })
                    }
                })
            } else {
                cb(null, false, "Data is not updated");
            }
        }
    })


}

function geUserDtlsTicketWise(data, cb) {
    let str = "select a.NAME,date_format(b.createdate,'%Y-%m-%d %T')  solTime,(select ticketTypeId from ticket where id = ?) ticketTypeId from USER a, WFCCLIENTRESULT b  where a.id = b.createbyid and b.id = ? ";
    con.query(str, [data.id, data.WFCClientResultId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function insertWFCResultForUpdation(data, cb) {
    let str1 = "select * from TICKETATTRIBUTES where id = (select tStatus from WFCCLIENTRESULT where id = ? and PKFIELDVAL = ?) and sequence_no in (1)  ";
    con.query(str1, [data.id, data.ticketId], function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length > 0) {
                cb(null, true, data.id);
            } else {
                var dataU = {
                    "id": data.ticketId
                };
                updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                    if (errU || !successU) {
                        logData(errU);
                        cb(errU, null);
                    } else {
                        let str = "insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, " +
                            " END_INDICATOR, createbyid, user_id, frw_user_id, category_id, tStatus) select CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                            " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, (serial_no+1), END_INDICATOR, createbyid, user_id, frw_user_id, category_id, tStatus from WFCCLIENTRESULT " +
                            " where PKFIELDVAL = " + data.ticketId + " and id =" + data.id + "  ";
                        con.query(str, [data.ticketId, data.id], function (err, result) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                insertLatestWFCClientResult({
                                    "ticketId": data.ticketId
                                }, function (errET3, successET3, detailsET3) {
                                    if (errET3 || !successET3) {
                                        cb(null, true, 0);
                                    } else {
                                        cb(null, true, result.insertId);
                                    }
                                })

                            }
                        });
                    }

                })
            }

        }
    });


}


function updateTicketStatus(data, cb) {
    logData('\n\nupdateTicketStatus---------------------' + JSON.stringify(data))
    checkIsSlaCalculationDone({ "id": data.ticketId }, function (errISC, successISC, resultsISC) {
        if (errISC) {
            logData(errISC);
            cb(errISC, null);
        } else {
            // logData('updateTicketStatus-----successISC-----------' + successISC)
            if (!successISC) {
                cb(null, false, resultsISC);
            } else {
                isRemarksDoneByUser({
                    "id": data.ticketId,
                    "WFCClientResultId": data.id,
                    "createdBy": data.user_id
                }, function (errX, successX, resultsX) {
                    if (errX) {
                        logData(errX);
                        cb(errX, null);
                    } else {
                        checkStatus({
                            "ticketId": data.ticketId,
                            "tStatus": data.tStatus
                        }, function (errUC, successUC, resultsUC) {
                            if (errUC || !successUC) {
                                logData(errUC + successUC);
                                cb(errUC, null);
                            } else {
                                // logData('data.feedback===-------------' + (data.feedback === ''));
                                // logData('data.feedback===null-------------' + (data.feedback === null))
                                // logData('\n\nis_command_required-------------' + resultsUC[0].is_command_required)
                                // logData('\n\nis_command_required-------------' + data.feedback)

                                if (resultsUC[0].is_command_required === 'Y' && (typeof data.feedback === 'undefined' || data.feedback === null || data.feedback === '')) {
                                    logData('***************************************************************************************************************************************')
                                    cb(null, false, "Please add some comments in comment section before forwarding");
                                } else {
                                    data.prv_wfcClientResultId = data.id;
                                    // logData('updateTicketStatus--------------------' + JSON.stringify(data))
                                    insertWFCResultForUpdation(data, function (err, success, details) {
                                        data.id = details;
                                        var fld = {
                                            "wfcClientResultId": data.id
                                        };
                                        getPresentStatus(fld, function (err, success, details) {
                                            // let sql = "update  WFCCLIENTRESULT set tStatus=" + data.tStatus + ", modifybyid=" + data.user_id + ", modifydate=Now() " +
                                            //     " where PKFIELDVAL = " + data.ticketId + " and id = " + data.id + " ";
                                            let sql = "update  WFCCLIENTRESULT set tStatus=" + data.tStatus + " where PKFIELDVAL = " + data.ticketId + " and id = " + data.id + " ";
                                            con.query(sql, function (err, result) {
                                                if (err) {
                                                    logData(err);
                                                    cb(err, null);
                                                } else {
                                                    if (result.affectedRows > 0) {
                                                        // ================
                                                        insertLatestWFCClientResult({
                                                            "ticketId": data.ticketId
                                                        }, function (errET3, successET3, detailsET3) {
                                                            if (errET3 || !successET3) {
                                                                cb(null, true, 0);
                                                            }
                                                        })
                                                        // ==================
                                                        let sql1 = "Update ticket set tstatus=" + data.tStatus + " , modifybyid=" + data.user_id + ", modifydate=Now() where id = " + data.ticketId + "";
                                                        con.query(sql1, function (err1, result1) {
                                                            if (err1) {
                                                                logData(err1);
                                                                cb(err1, null);
                                                            } else {
                                                                var sql5 = "";
                                                                var fldP = {
                                                                    "wfcClientResultId": data.id
                                                                };
                                                                getPresentStatus(fldP, function (errP, successP, detailsP) {
                                                                    var changeS = "Status Change :" + details[0].ATTRVAL + " to " + detailsP[0].ATTRVAL + " - " + data.support_group;
                                                                    sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,ticketStatusId,logValue ) " +
                                                                        " VALUES (" + data.ticketId + ",4," + data.id + "," + data.user_id + "," + data.tStatus + ",'" + changeS + "') ";
                                                                    con.query(sql5, function (err5, result5) {
                                                                        if (err5) {
                                                                            logData(err5);
                                                                            cb(err5, null);
                                                                        } else {
                                                                            /************************************************************************/
                                                                            updateTicketStatusForParallelWork({
                                                                                "ticketId": data.ticketId,
                                                                                "userId": data.user_id,
                                                                                "wfcClientResultId": data.id,
                                                                                "actionId": details[0].sequence_no,
                                                                                "clientId": data.clientId
                                                                            }, function (errX, successX, resultsX) {
                                                                                if (errX) {
                                                                                    logData(errX);
                                                                                    cb(errX, null);
                                                                                } else {

                                                                                    
                                                                                    // optimizedreport table starts

                                                                                    var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                        // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                        + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                        + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'')l_name"
                                                                                        + " from USER where id =?"
                                                                                    con.query(sql90, [data.ticketId, data.user_id, data.user_id, data.user_id], function (err, result55) {
                                                                                        if (err) {
                                                                                            console.log(err);
                                                                                        } else {
                                                                                            console.log(result55);
                                                                                            var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                + "all_analyst_ps=?,all_analyst_name=?,"
                                                                                                + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                                                            // console.log("WS@###########################",result60[0].id);
                                                                                            con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, changeS, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                                console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                                if (err) {
                                                                                                    console.log("65342168451326854321698543216853241685426854", err);
                                                                                                    cb(err, null);
                                                                                                } else {
                                                                                                    logData("********____wdf________>>>" + sql44);
                                                                                                    console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                                                    cb(null, true, result77);
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    });

                                                                                    // optimizedreport table ends


                                                                                    /************************************************************************/
                                                                                    request
                                                                                        // .get(MAIL_URL + '/sendemailOther?ticketId=' + data.ticketId + '&notifyType=email')
                                                                                        .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=1&actionID=&actionData=')
                                                                                        .end((err, resp) => {
                                                                                            if (err) {
                                                                                                logData(err);
                                                                                            } else {
                                                                                                logData('done')
                                                                                                logData('done----err---' + err)
                                                                                                logData('done---resp--' + JSON.stringify(resp))
                                                                                            }
                                                                                            // Do something
                                                                                        });
                                                                                    /***********************************************************************************************************/
                                                                                    logData('****************************************************done---resp--' + details[0].sequence_no)
                                                                                    logData('****************************************************done---resp--' + detailsP[0].sequence_no)
                                                                                    /*if (details[0].sequence_no === 24 || details[0].sequence_no === 25 ) {
                                                                                        /!************************************************************!/
                                                                                        insertSlaStopEndTime({
                                                                                            "ticketId": data.ticketId,
                                                                                            "userId": data.user_id,
                                                                                            "wfcClientResultId": data.id,
                                                                                            "actionId": details[0].sequence_no
                                                                                        }, function (errSS, successSS, detailsSS) {
                                                                                            if (errSS || !successSS) {
                                                                                                logData(errSS + successSS);
                                                                                                cb(errSS, null);
                                                                                            } else {
                                                                                                logData('\n\n*******************666666666666666666666666666*********************')
                                                                                                request
                                                                                                    .get(SLA_URL + '/slaCalculation_ticketwise_awaiting')
                                                                                                    .query({
                                                                                                        ticketId: data.ticketId,
                                                                                                        client_id: data.clientId,
                                                                                                        actionId: details[0].sequence_no
                                                                                                    }) // query string
                                                                                                    .end((err, resp) => {
                                                                                                        if (err) {
                                                                                                            logData(err);
                                                                                                        } else {
                                                                                                            logData('****************************************************done---resp--' + details[0].sequence_no)
                                                                                                            logData('****************************************************done---resp--' + detailsP[0].sequence_no)
                                                                                                        }
                                                                                                        // Do something
                                                                                                    });

                                                                                            }
                                                                                        })
                                                                                        /!************************************************************!/

                                                                                    }*/
                                                                                    /***********************************************************************************************************/
                                                                                    checkStatus({
                                                                                        "ticketId": data.ticketId,
                                                                                        "tStatus": data.tStatus
                                                                                    }, function (errU, successU, resultsU) {
                                                                                        if (errU) {
                                                                                            logData(errU);
                                                                                            cb(errU, null);
                                                                                        } else {
                                                                                            if (successU) {
                                                                                                geUserDtlsTicketWise({
                                                                                                    "WFCClientResultId": data.id,
                                                                                                    "id": data.ticketId
                                                                                                }, function (errTD, successTD, resultsTD) {
                                                                                                    if (errTD) {
                                                                                                        logData(errTD);
                                                                                                        cb(errTD, null);
                                                                                                    } else {
                                                                                                        if (successTD) {
                                                                                                            if (socket) {
                                                                                                                let val1 = {
                                                                                                                    ticketId: data.ticketId,
                                                                                                                    clientId: resultsU[0].clientId,
                                                                                                                    ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                                };
                                                                                                                getNotificationMenuIdTicketStatusWise(val1, function (err111, success111, details111) {

                                                                                                                });
                                                                                                            }
                                                                                                            // if (resultsU[0].sequence_no === 15) {
                                                                                                            //     if (socket) {
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 26,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 21,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 44,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 46,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 56,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //     }
                                                                                                            // } else if (resultsU[0].sequence_no === 12) {
                                                                                                            //     if (socket) {
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 2,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 3,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 21,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 25,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 41,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 46,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 49,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 51,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 58,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 60,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //     }
                                                                                                            // } else if (resultsU[0].sequence_no === 13) {
                                                                                                            //     if (socket) {
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 2,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 3,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 21,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 27,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 41,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 45,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 46,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 49,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 51,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 57,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 58,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 60,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //     }
                                                                                                            // } else if (resultsU[0].sequence_no === 16) {
                                                                                                            //     if (socket) {
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 2,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 3,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 27,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 21,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 41,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 45,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 46,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 51,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 57,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 58,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 60,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //     }
                                                                                                            // } else if (resultsU[0].sequence_no === 8) {
                                                                                                            //     if (socket) {
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 2,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 19,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 49,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //         socket.emit('dashboard', {
                                                                                                            //             menuId: 60,
                                                                                                            //             ticketId: data.ticketId,
                                                                                                            //             clientId: resultsU[0].clientId,
                                                                                                            //             ticketTypeId: resultsTD[0].ticketTypeId
                                                                                                            //         });
                                                                                                            //     }
                                                                                                            // }
                                                                                                        }
                                                                                                    }
                                                                                                })

                                                                                            }
                                                                                        }
                                                                                    })
                                                                                    if (data.feedback) {
                                                                                        submitFeedbackTicketWise({
                                                                                            "ticketId": data.ticketId,
                                                                                            "feedback": data.feedback,//
                                                                                            "ticketSubType": data.ticketSubType,
                                                                                            "createdBy": data.user_id,
                                                                                            "clientId": data.clientId,
                                                                                            "WFCClientResultId": data.id
                                                                                        }, function (errUF, successUF, detailsUF) {
                                                                                            if (errUF || !successUF) {
                                                                                                logData('Some Error in Feedback Submission: ' + errUF + successUF);
                                                                                                cb(errUF, null);
                                                                                            }
                                                                                        })
                                                                                    }
                                                                                    checkStatus({
                                                                                        "ticketId": data.ticketId,
                                                                                        "tStatus": data.tStatus
                                                                                    }, function (errU, successU, resultsU) {
                                                                                        if (errU) {
                                                                                            logData(errU);
                                                                                            cb(errU, null);
                                                                                        } else {
                                                                                            if (successU) {
                                                                                                logData('is_stopSlaMeter------1111111111111111111111111111------' + resultsU[0].is_stopSlaMeter)
                                                                                                logData('resultsU[0].sequence_no-----11111111111111111111111-------   ' + resultsU[0].sequence_no)
                                                                                                // logData('resultsU[0].sequence_no------------   ' + (resultsU[0].sequence_no === 12))
                                                                                                if (resultsU[0].sequence_no === 3) {
                                                                                                    updateReOpenTicket({
                                                                                                        "id": data.ticketId,
                                                                                                        "clientId": data.clientId,
                                                                                                        "user_id": data.user_id
                                                                                                    }, function (errC, successC, resultsC) {
                                                                                                        if (errC || !successC) {
                                                                                                            logData(errC + successC);
                                                                                                            cb(errC, null);
                                                                                                        } else {
                                                                                                            // logData('\n\n*******************111111111111111111111111111*********************')
                                                                                                            cb(null, true, result1.affectedRows);
                                                                                                        }
                                                                                                    });
                                                                                                } else if (resultsU[0].sequence_no === 12) {
                                                                                                    //logData('wwwwwwwwwwwwwwwwwwwwwwww')
                                                                                                    callStopSlaDtlsTicketWise({
                                                                                                        "id": data.ticketId,
                                                                                                        "user_id": data.user_id,
                                                                                                        "reqType": "",
                                                                                                        "clientId": data.clientId
                                                                                                    }, function (errC12, successC12, detailsC12) {
                                                                                                        // logData('333333333333333333333333333333')
                                                                                                        if (errC12) {
                                                                                                            logData('error::*** :' + errC12 + successC12);
                                                                                                            cb(errC12, null);
                                                                                                        } else {
                                                                                                            // logData('44444444444444444444444444444')
                                                                                                            let status_Ck = "Update ticket set is_awaiting_for_user_info ='Y' where id = " + data.ticketId + " ";
                                                                                                            logData('status_Ck------------------' + status_Ck)
                                                                                                            con.query(status_Ck, function (errCK, detailsCK) {
                                                                                                                if (errCK) {
                                                                                                                    logData(errCK);
                                                                                                                    cb(errCK, null);
                                                                                                                } else {
                                                                                                                    // util.logData('\n------------------ticket:----------->' + JSON.stringify(detailsCK));
                                                                                                                    if (detailsCK.affectedRows > 0) {
                                                                                                                        let status_ad = "insert into ticket_awaiting_dtls(ticket_id, WFCClientResultId) " +
                                                                                                                            " values(" + data.ticketId + "," + data.id + ") ";
                                                                                                                        logData('status_ad--------12----------' + status_ad)
                                                                                                                        con.query(status_ad, function (errad, detailsad) {
                                                                                                                            if (errad) {
                                                                                                                                logData(errad);
                                                                                                                                cb(errad, null);
                                                                                                                            } else {

                                                                                                                                 // optimizedreport table starts
                                                                                                                                 var sql224 = "select count(ticket_id) usrr,(select id from optimizedreport where ticket_id=?) id, "
                                                                                                                                 + "date_format(ADDTIME(a.ticket_awaiting_start_time, '5:30:0.000000'),'%d-%M-%Y %T') user,a.ticket_awaiting_start_time ifix from ticket_awaiting_dtls a where ticket_id = ? group by a.id order by ifix desc limit 1;"
                                                                                                                             logData("!@#$%45678" + sql224)
                                                                                                                             con.query(sql224, [data.ticketId, data.ticketId], function (err, result224) {
                                                                                                                                 if (err) {
                                                                                                                                     cb(err, null);
                                                                                                                                 } else {
                                                                                                                                     console.log("%%%%%%%%%%%%%%&&&&&&&", result224);
                                                                                                                                     var sql3 = "update optimizedreport set user_reply_time_taken=?,user_reply_dt=?,user_reply_count=? where id =? "
                                                                                                                                     logData("&&&&&&&&&&&&&&------------>" + sql3);
                                                                                                                                     con.query(sql3, [result224[0].ifix, result224[0].user, result224[0].usrr, result224[0].id], function (err, result3) {
                                                                                                                                         if (err) {

                                                                                                                                             console.log("hgfxzdfcgh", err);
                                                                                                                                             cb(err, null);
                                                                                                                                         } else {
                                                                                                                                             logData("&&&&&&&&&&&&&&------------>" + sql3);
                                                                                                                                             console.log("@E#$%^", result3);
                                                                                                                                             cb(null, true, result3);
                                                                                                                                         }
                                                                                                                                     })
                                                                                                                                 }
                                                                                                                             });

                                                                                                                             // optimizedreport table ends



                                                                                                                                // request
                                                                                                                                // // .get(MAIL_URL + '/sendemailOther?ticketId=' + data.ticketId + '&notifyType=email')
                                                                                                                                //     .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=1&actionID=&actionData=')
                                                                                                                                //     .end((err, resp) => {
                                                                                                                                //         if (err) {
                                                                                                                                //             logData(err);
                                                                                                                                //         } else {
                                                                                                                                //             logData('done')
                                                                                                                                //             logData('done----err---' + err)
                                                                                                                                //             logData('done---resp--' + JSON.stringify(resp))
                                                                                                                                //         }
                                                                                                                                //         // Do something
                                                                                                                                //     });
                                                                                                                                cb(null, true, "OK");
                                                                                                                            }
                                                                                                                        })
                                                                                                                    } else {
                                                                                                                        cb(null, false, 0);
                                                                                                                    }
                                                                                                                }
                                                                                                            })
                                                                                                        }

                                                                                                    });
                                                                                                } else if (resultsU[0].sequence_no === 24 || resultsU[0].sequence_no === 25) {
                                                                                                    // logData('wwwwwwwwwwwwwwwwwwwwwwww')
                                                                                                    callStopSlaDtlsTicketWise({
                                                                                                        "id": data.ticketId,
                                                                                                        "user_id": data.user_id,
                                                                                                        "reqType": "",
                                                                                                        "clientId": data.clientId
                                                                                                    }, function (errC12, successC12, detailsC12) {
                                                                                                        // logData('333333333333333333333333333333')
                                                                                                        if (errC12) {
                                                                                                            logData('error::*** :' + errC12 + successC12);
                                                                                                            cb(errC12, null);
                                                                                                        } else {

                                                                                                            let status_ad = "insert into ticket_sla_startstop_logs_all_action(ticket_id, action_id, sla_stop_start_WFCClientResultId, sla_stop_start_by) " +
                                                                                                                " values(" + data.ticketId + "," + resultsU[0].sequence_no + "," + data.id + "," + data.user_id + ") ";
                                                                                                            logData('status_ad--------24--25----------' + status_ad)
                                                                                                            con.query(status_ad, function (errad, detailsad) {
                                                                                                                if (errad) {
                                                                                                                    logData(errad);
                                                                                                                    cb(errad, null);
                                                                                                                } else {

                                                                                                                    // optimizedreport table starts
                                                                                                                    var sql220 = "SELECT ticket_id,count(*) followup_count,count(*) reopen_count,replace(coalesce(group_concat(concat(date_format (ADDTIME(a.sla_stop_end_datetime, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),''),',',' / ') reopen_dates,date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_responded_dt ,"
                                                                                                                        + "date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_time_taken, date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') maxEscalationDtls FROM ticket_sla_startstop_logs_all_action a "
                                                                                                                        + "where ticket_id =? and action_id =? group by a.ticket_id,a.id limit 1;"
                                                                                                                    con.query(sql220, [data.ticketId, resultsU[0].sequence_no], function (err, result220) {
                                                                                                                        if (err) {
                                                                                                                            cb(err, null);
                                                                                                                        } else {
                                                                                                                            logData("_________++__+_+_+2222222222" + sql220);
                                                                                                                            console.log("@@@@@@@@123!!!!!!!!!!", result220);
                                                                                                                            var sql221 = "update optimizedreport set reopen_count =?,follow_up_count =?,reopen_dates =?,follow_up_responded_dt =?, "
                                                                                                                                + "follow_up_time_taken=? where ticket_id =? ;"
                                                                                                                            con.query(sql221, [result220[0].reopen_count, result220[0].followup_count, result220[0].reopen_dates, result220[0].follow_up_responded_dt, result220[0].follow_up_time_taken, data.ticketId], function (err, result221) {
                                                                                                                                if (err) {
                                                                                                                                    cb(err, null);
                                                                                                                                } else {
                                                                                                                                    logData("&&&&&&&&&&&&&&------------>" + sql221);
                                                                                                                                    console.log("!123e!!!!!!!@@", result221);
                                                                                                                                    cb(null, true, result221);
                                                                                                                                }
                                                                                                                            })

                                                                                                                        }
                                                                                                                    });

                                                                                                                    // optimizedreport table ends

                                                                                                                    cb(null, true, "OK");
                                                                                                                }
                                                                                                            })
                                                                                                        }
                                                                                                    });
                                                                                                } else if (resultsU[0].sequence_no === 13) {
                                                                                                    // logData('122222222222222222222222222')
                                                                                                    resumeSlaMeter({
                                                                                                        "id": data.ticketId,
                                                                                                        "sla_recalcultion_type": 'resume',
                                                                                                        "user_id": data.user_id,
                                                                                                        "tStatus": data.tStatus,
                                                                                                        "sequence_no": 13
                                                                                                    }, function (errCR, successCR, detailsCR) {
                                                                                                        //logData('333333333333333333333333333333')
                                                                                                        if (errCR || !successCR) {
                                                                                                            logData(errCR + successCR);
                                                                                                            cb(errCR, null);
                                                                                                        } else {
                                                                                                            logData('44444444444444444444444444444')
                                                                                                            let status_Ck = "Update ticket set is_awaiting_for_user_info ='R' where id = " + data.ticketId + " ";
                                                                                                            logData('status_Ck-----------13-------' + status_Ck)
                                                                                                            con.query(status_Ck, function (errCK, detailsCK) {
                                                                                                                if (errCK) {
                                                                                                                    logData(errCK);
                                                                                                                    cb(errCK, null);
                                                                                                                } else {
                                                                                                                    if (detailsCK.affectedRows > 0) {
                                                                                                                        let status_Aud = "Update ticket_awaiting_dtls set ticket_awaiting_end_time =Now() where ticket_id = " + data.ticketId + " " +
                                                                                                                            " and id =(select v.mid from (select max(m.id) mid from ticket_awaiting_dtls m where m.ticket_id = " + data.ticketId + ") v) ";
                                                                                                                        //logData('status_Aud------------------' + status_Aud)
                                                                                                                        con.query(status_Aud, function (errAud, detailsAud) {
                                                                                                                            if (errAud) {
                                                                                                                                logData(errAud);
                                                                                                                                cb(errAud, null);
                                                                                                                            } else {
                                                                                                                                /**************************************************************************************************************/
                                                                                                                                let sqlS = "select id,date_format (ticket_awaiting_start_time,'%d/%m/%Y %T') startDt,date_format (ticket_awaiting_end_time,'%d/%m/%Y %T') endDate " +
                                                                                                                                    " from  ticket_awaiting_dtls  where ticket_id = " + data.ticketId + " " +
                                                                                                                                    " and id =(select v.mid from (select max(m.id) mid from ticket_awaiting_dtls m where m.ticket_id = " + data.ticketId + ") v) ";
                                                                                                                                con.query(sqlS, function (errS, resultS) {
                                                                                                                                    if (errS) {
                                                                                                                                        logData(errS);
                                                                                                                                        cb(errS, null);
                                                                                                                                    } else {


                                                                                                                                         // optimizedreport below code

                                                                                                                                         let sqlS = "select a.id,count(ticket_id) usrr,(select id from optimizedreport where ticket_id =?) u,date_format (ticket_awaiting_start_time,'%d/%m/%Y %T') startDt,date_format (ticket_awaiting_end_time,'%d/%m/%Y %T') endDate ," +
                                                                                                                                         "date_format(ADDTIME(ticket_awaiting_start_time, '5:30:0.000000'),'%d-%M-%Y %T') user," +
                                                                                                                                         "replace(group_concat(date_format (ADDTIME(ticket_awaiting_start_time, '5:30:0.000000'),'%d-%M-%Y %T')),',',' / ') awaiting_user_reply_dt  from  ticket_awaiting_dtls a where ticket_id = ? " +
                                                                                                                                         " and id =(select v.mid from (select max(m.id) mid from ticket_awaiting_dtls m where m.ticket_id = ?) v) group by a.id";
                                                                                                                                     con.query(sqlS, [data.ticketId, data.ticketId, data.ticketId], function (errS, resultS) {
                                                                                                                                         if (errS) {
                                                                                                                                             logData(errS);
                                                                                                                                             cb(errS, null);
                                                                                                                                         } else {
                                                                                                                                             var sql27 = "update optimizedreport set awating_user_reply_dt=?,user_reply_count=?,user_reply_dt=? where id =? ;"
                                                                                                                                             con.query(sql27, [resultS[0].awaiting_user_reply_dt, resultS[0].usrr, resultS[0].user, resultS[0].u], function (err, result27) {
                                                                                                                                                 if (err) {
                                                                                                                                                     console.log("QWEFDGSZEDS", err);
                                                                                                                                                     cb(err, null);
                                                                                                                                                 } else {
                                                                                                                                                     logData("&&&&&&&&&&&&&&------------>" + sql27);
                                                                                                                                                     console.log("@@@@@@@@@@@$$$$$$$$$", result27);
                                                                                                                                                     cb(null, true, result27);
                                                                                                                                                 }
                                                                                                                                             })

                                                                                                                                             // optimizedreport


                                                                                                                                        if (resultS.length > 0) {
                                                                                                                                            let stDate = resultS[0].startDt;
                                                                                                                                            let toDate = resultS[0].endDate;
                                                                                                                                            logData('stDate-------------------' + stDate);
                                                                                                                                            logData('toDate-------------------' + toDate);
                                                                                                                                            request
                                                                                                                                                .get(SLA_URL + '/getSalPeriodDateWise')
                                                                                                                                                .query({
                                                                                                                                                    ticketId: data.ticketId,
                                                                                                                                                    frDate: stDate,
                                                                                                                                                    toDate: toDate
                                                                                                                                                }) // query string
                                                                                                                                                .end((err, resp) => {
                                                                                                                                                    if (err) {
                                                                                                                                                        logData(err);
                                                                                                                                                    } else {
                                                                                                                                                        let x = JSON.parse(resp.text).resVal.slaResponsePeriod;
                                                                                                                                                        var str = "update ticket_awaiting_dtls set waitng_for_in_minutes = " + x + "" +
                                                                                                                                                            " where id = " + resultS[0].id + " ";
                                                                                                                                                        con.query(str, function (err, result) {
                                                                                                                                                            if (err) {
                                                                                                                                                                logData(err);
                                                                                                                                                                cb(err, null);
                                                                                                                                                            } else {

                                                                                                                                                                // optimizedreport table starts
                                                                                                                                                                var sql224 = "SELECT count(ticket_id) usrd,(select id from optimizedreport where ticket_id=?) id,ticket_id,coalesce(TIME_FORMAT(SEC_TO_TIME(sum(waitng_for_in_minutes)*60), '%H:%i:%s'),'0') user_reply_time_taken,"
                                                                                                                                                                + " date_format(ADDTIME(ticket_awaiting_start_time, '5:30:0.000000'),'%d-%M-%Y %T') user,coalesce(sum(waitng_for_in_minutes),0) tot_awaiting_time  FROM ticket_awaiting_dtls where ticket_id =?  and deleteflag = '0' group by ticket_id ;"
                                                                                                                                                            con.query(sql224, [data.ticketId, data.ticketId], function (err, result224) {
                                                                                                                                                                if (err) {
                                                                                                                                                                    cb(err, null);
                                                                                                                                                                } else {
                                                                                                                                                                    console.log("%%%%%%%%%%%%%%&&&&&&&", result224);
                                                                                                                                                                    var sql3 = "update optimizedreport set user_reply_time_taken=?,user_reply_count =?,user_reply_dt =? where id =? "
                                                                                                                                                                    con.query(sql3, [result224[0].user_reply_time_taken, result224[0].usrd, result224[0].user, result224[0].id], function (err, result3) {
                                                                                                                                                                        if (err) {
                                                                                                                                                                            cb(err, null);
                                                                                                                                                                        } else {
                                                                                                                                                                            logData("&&&&&&&&&&&&&&------------>" + sql3);
                                                                                                                                                                            console.log("@E#$%^", result3);
                                                                                                                                                                            cb(null, true, result3);
                                                                                                                                                                        }
                                                                                                                                                                    })
                                                                                                                                                                }
                                                                                                                                                            });

                                                                                                                                                            // optimizedreport table ends

                                                                                                                                                                request
                                                                                                                                                                    .get(SLA_URL + '/slaCalculation_ticketwise_awaiting')
                                                                                                                                                                    .query({
                                                                                                                                                                        ticketId: data.ticketId,
                                                                                                                                                                        client_id: data.clientId,
                                                                                                                                                                        actionId: 12
                                                                                                                                                                    }) // query string
                                                                                                                                                                    .end((err, resp) => {
                                                                                                                                                                        if (err) {
                                                                                                                                                                            logData(err);
                                                                                                                                                                        } else {
                                                                                                                                                                            cb(null, true, "OK");
                                                                                                                                                                        }
                                                                                                                                                                        // Do something
                                                                                                                                                                    });

                                                                                                                                                            }
                                                                                                                                                        });

                                                                                                                                                    }
                                                                                                                                                    // Do something
                                                                                                                                                });
                                                                                                                                           }
                                                                                                                                        }
                                                                                                                                    })
                                                                                                                                    }
                                                                                                                                });
                                                                                                                                /**************************************************************************************************************/
                                                                                                                                // logData('\n\n*******************333333333333333333333333333333333*********************')

                                                                                                                            }
                                                                                                                        })
                                                                                                                    } else {
                                                                                                                        cb(null, false, 0);
                                                                                                                    }
                                                                                                                }
                                                                                                            })
                                                                                                        }

                                                                                                    });
                                                                                                } else if (resultsU[0].sequence_no === 15) {
                                                                                                    insertFollowupDtls({
                                                                                                        "id": data.ticketId,
                                                                                                        "user_id": data.user_id,
                                                                                                        "WFCClientResultId": data.id,
                                                                                                        "followupUserId": data.followupUserId
                                                                                                    }, function (errUF, successUF, detailsUF) {
                                                                                                        if (errUF || !successUF) {
                                                                                                            logData(errUF + successUF);
                                                                                                            cb(errUF, null);
                                                                                                        } else {
                                                                                                            logData("\n\n b4 insertSlaStopStartTime*******15****************")
                                                                                                            /************************************************************/
                                                                                                            if (resultsU[0].is_stopSlaMeter === 'true') {
                                                                                                                insertSlaStopStartTime({
                                                                                                                    "ticketId": data.ticketId,
                                                                                                                    "userId": data.user_id,
                                                                                                                    "wfcClientResultId": data.id,
                                                                                                                    "actionId": 15
                                                                                                                }, function (errSS, successSS, detailsSS) {
                                                                                                                    if (errSS || !successSS) {
                                                                                                                        logData(errSS + successSS);
                                                                                                                        cb(errSS, null);
                                                                                                                    } else {
                                                                                                                        logData('\n\n*******************666666666666666666666666666*********************')
                                                                                                                        // cb(null, true, detailsUF);
                                                                                                                        callStopSlaDtlsTicketWise({
                                                                                                                            "id": data.ticketId,
                                                                                                                            "user_id": data.user_id,
                                                                                                                            "reqType": "",
                                                                                                                            "clientId": data.clientId
                                                                                                                        }, function (errC, successC, detailsC) {
                                                                                                                            if (errC || !successC) {
                                                                                                                                cb(errC, null);
                                                                                                                            } else {
                                                                                                                                cb(null, true, detailsUF);
                                                                                                                            }
                                                                                                                        });
                                                                                                                    }
                                                                                                                })
                                                                                                            } else {
                                                                                                                cb(null, true, detailsUF);
                                                                                                            }
                                                                                                            /************************************************************/
                                                                                                        }
                                                                                                    })
                                                                                                } else if (resultsU[0].sequence_no === 16) {
                                                                                                    /************************************************************/
                                                                                                    if (resultsU[0].is_stopSlaMeter === 'false') {
                                                                                                        insertSlaStopEndTime({
                                                                                                            "ticketId": data.ticketId,
                                                                                                            "userId": data.user_id,
                                                                                                            "wfcClientResultId": data.id,
                                                                                                            "actionId": 15
                                                                                                        }, function (errSS, successSS, detailsSS) {
                                                                                                            if (errSS || !successSS) {
                                                                                                                logData(errSS + successSS);
                                                                                                                cb(errSS, null);
                                                                                                            } else {
                                                                                                                logData('\n\n*******************16********************')
                                                                                                                request
                                                                                                                    .get(SLA_URL + '/slaCalculation_ticketwise_awaiting')
                                                                                                                    .query({
                                                                                                                        ticketId: data.ticketId,
                                                                                                                        client_id: data.clientId,
                                                                                                                        actionId: 15
                                                                                                                    }) // query string
                                                                                                                    .end((err, resp) => {
                                                                                                                        if (err) {
                                                                                                                            logData(err);
                                                                                                                        } else {
                                                                                                                            cb(null, true, detailsSS);
                                                                                                                        }
                                                                                                                        // Do something
                                                                                                                    });

                                                                                                            }
                                                                                                        })
                                                                                                    } else {
                                                                                                        cb(null, true, "ok");
                                                                                                    }

                                                                                                    /************************************************************/
                                                                                                } else if (resultsU[0].is_stopSlaMeter === 'false') {
                                                                                                    logData('*********************again*********false*****************')
                                                                                                    getIsSLAInStopStatus({ "id": data.ticketId }, function (errSS, successSS, detailsSS) {
                                                                                                        if (errSS || !successSS) {
                                                                                                            logData(errSS);
                                                                                                            cb(errSS, null);
                                                                                                        } else {
                                                                                                            if (detailsSS === 'N') {
                                                                                                                //logData('\n\n*******************444444444444444444444444444444444*********************')
                                                                                                                cb(null, true, "OK");
                                                                                                            } else {
                                                                                                                resumeSlaMeter({
                                                                                                                    "id": data.ticketId,
                                                                                                                    "sla_recalcultion_type": 'resume',
                                                                                                                    "user_id": data.user_id,
                                                                                                                    "tStatus": data.tStatus,
                                                                                                                    "sequence_no": ''
                                                                                                                }, function (errC, successC, detailsC) {
                                                                                                                    if (errC || !successC) {
                                                                                                                        logData(errC);
                                                                                                                        cb(errC, null);
                                                                                                                    } else {
                                                                                                                        logData('\n\n****************************************')
                                                                                                                        cb(null, true, detailsC);
                                                                                                                    }
                                                                                                                });
                                                                                                            }
                                                                                                        }
                                                                                                    })

                                                                                                } else if (resultsU[0].is_stopSlaMeter === 'true') {
                                                                                                    logData('*********************again*******true*33333333333333333333333333333333333******************')
                                                                                                    callStopSlaDtlsTicketWise({
                                                                                                        "id": data.ticketId,
                                                                                                        "user_id": data.user_id,
                                                                                                        "reqType": "",
                                                                                                        "clientId": data.clientId
                                                                                                    }, function (errC, successC, detailsC) {
                                                                                                        cb(null, true, "ok");
                                                                                                    });

                                                                                                }
                                                                                                /*if (resultsU[0].sequence_no === 15) {
                                                                                                    insertFollowupDtls({
                                                                                                        "id": data.ticketId,
                                                                                                        "user_id": data.user_id,
                                                                                                        "WFCClientResultId": data.id,
                                                                                                        "followupUserId": data.followupUserId
                                                                                                    }, function (errUF, successUF, detailsUF) {
                                                                                                        if (errUF || !successUF) {
                                                                                                            logData(errUF + successUF);
                                                                                                            cb(errUF, null);
                                                                                                        } else {
                                                                                                            logData("\n\n b4 insertSlaStopStartTime***********************")
                                                                                                            insertSlaStopStartTime({
                                                                                                                "ticketId": data.ticketId,
                                                                                                                "userId": data.user_id,
                                                                                                                "wfcClientResultId": data.id,
                                                                                                                "actionId": 15
                                                                                                            }, function (errSS, successSS, detailsSS) {
                                                                                                                if (errSS || !successSS) {
                                                                                                                    logData(errSS + successSS);
                                                                                                                    cb(errSS, null);
                                                                                                                } else {
                                                                                                                    logData('\n\n*******************666666666666666666666666666*********************')
                                                                                                                    cb(null, true, detailsUF);
                                                                                                                }
                                                                                                            })

                                                                                                        }
                                                                                                    })

                                                                                                }*/
                                                                                                /*if (resultsU[0].sequence_no === 16) {
                                                                                                    insertSlaStopEndTime({
                                                                                                        "ticketId": data.ticketId,
                                                                                                        "userId": data.user_id,
                                                                                                        "wfcClientResultId": data.id,
                                                                                                        "actionId": 15
                                                                                                    }, function (errSS, successSS, detailsSS) {
                                                                                                        if (errSS || !successSS) {
                                                                                                            logData(errSS + successSS);
                                                                                                            cb(errSS, null);
                                                                                                        } else {
                                                                                                            logData('\n\n*******************666666666666666666666666666*********************')
                                                                                                            request
                                                                                                                .get(SLA_URL + '/slaCalculation_ticketwise_awaiting')
                                                                                                                .query({
                                                                                                                    ticketId: data.ticketId,
                                                                                                                    client_id: data.clientId,
                                                                                                                    actionId: 15
                                                                                                                }) // query string
                                                                                                                .end((err, resp) => {
                                                                                                                    if (err) {
                                                                                                                        logData(err);
                                                                                                                    } else {
                                                                                                                        cb(null, true, detailsSS);
                                                                                                                    }
                                                                                                                    // Do something
                                                                                                                });

                                                                                                        }
                                                                                                    })

                                                                                                }*/
                                                                                                // callforSlaResponseTicketWise({
                                                                                                //     "id": data.ticketId,
                                                                                                //     "user_id": data.user_id,
                                                                                                //     "reqType": ""
                                                                                                // }, function (errSS, successSS, detailsSS) {
                                                                                                //     logData('\n\n*******************7777777777777777777777777777*********************')
                                                                                                // });
                                                                                            } else {
                                                                                                logData('\n\n*******************no matching*********************')
                                                                                                cb(null, true, result1.affectedRows);
                                                                                            }
                                                                                        }
                                                                                    });
                                                                                }
                                                                            })
                                                                        }//else
                                                                    });
                                                                });
                                                            }
                                                        });
                                                    } else {
                                                        cb(null, false, "Some error occured............");
                                                    }
                                                }
                                            });
                                        });
                                    })

                                }
                            }
                        })

                    }
                })
            }

        }
    })
    /******************************************************************************************************/

}


function updateTicketStatusWithClose(data, cb) {
    if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '1') {
        data.sequence_no = 0;
    } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '5') {
        data.sequence_no = 300;
    } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '6') {
        data.sequence_no = 400;
    } else {
        data.sequence_no = 104;
    }
    checkIsSlaCalculationDone({ "id": data.ticketId }, function (errISC, successISC, resultsISC) {
        if (errISC) {
            logData(errISC);
            cb(errISC, null);
        } else {
            logData('updateTicketStatusWithClose-----successISC-----------' + successISC)
            if (!successISC) {
                cb(null, false, resultsISC);
            } else {
                var fld = {
                    "wfcClientResultId": data.id
                };
                logData('\n\n\n updateTicketStatusWithClose:' + JSON.stringify(data));
                data.comm = con.escape(data.comm);
                getPresentStatus(fld, function (err, success, details) {
                    var sql11 = "SELECT CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, " +
                        "frw_user_id, category_id  " +
                        ", (select createbyid from ticket where id = " + data.ticketId + ") creator " +
                        " FROM WFCCLIENTRESULT " +
                        " where id = " + data.id + "  ";
                    con.query(sql11, function (err11, result11) {
                        if (err11) {
                            logData(err11);
                            cb(err11, null);
                        } else {
                            getCreatorEndGrpId(data, function (err, success, data) {
                                var dataU = {
                                    "id": data.ticketId
                                };
                                updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                                    var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid ,tStatus) values " +
                                        " (" + result11[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].wfcclient_id + " ";

                                    // if(data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == '5' || data.ticket_type_seq == '6')){
                                    //     sql1 = sql1+ ", " + data.endUsrGrpId + " ";
                                    // }else{
                                    //     sql1 = sql1+ ", " + data.supportGroupLevelId + " ";
                                    // }
                                    sql1 = sql1 + ", " + data.supportGroupLevelId + " ";
                                    sql1 = sql1 + ", " + data.ticketId + "," + result11[0].FIELDVAL + ",'0'," + (parseInt(result11[0].serial_no) + 1) + ", '1'";

                                    if (data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == '5' || data.ticket_type_seq == '6')) {
                                        sql1 = sql1 + ", " + result11[0].creator + " ";
                                    } else {
                                        sql1 = sql1 + ", " + data.user_id + " ";
                                    }

                                    sql1 = sql1 + " , " + result11[0].category_id + "," + data.user_id + ",(Select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " +
                                        " " + result11[0].CLIENTID + " and ATTRID = 2  and sequence_no in (" + data.sequence_no + ")) ) ";
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            if (result1 != null && result1.insertId > 0) {
                                                var str = "Update ticket set tstatus=(select id from TICKETATTRIBUTES where DeleteFlag = '0' " +
                                                    "                               and CLIENTID = " + result11[0].CLIENTID + " " +
                                                    "                                                   and ATTRID = 2  and sequence_no in (" + data.sequence_no + ")), ";

                                                /* if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '1' ) {
                                                     str = str + "    and sequence_no in (0)), ";
                                                 } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '5' ) {
                                                     str = str + "    and sequence_no in (300)), ";
                                                 } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '6'  ) {
                                                     str = str + "    and sequence_no in (400)), ";
                                                 } else {
                                                     str = str + "    and sequence_no in (104)), ";
                                                 }*/

                                                /*if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq != '1') {
                                                    str = str + "    and sequence_no in (104)), ";
                                                } else {
                                                    str = str + "    and sequence_no in (0)), ";
                                                }*/

                                                str = str + " ticketCloseDate=Now(),  modifybyid=" + data.user_id + ", modifydate=Now() where id = " + data.ticketId + "";
                                                con.query(str, function (errs, results) {
                                                    if (errs) {
                                                        logData(errs);
                                                        cb(errs, null);
                                                    } else {
                                                        var fld1 = {
                                                            "wfcClientResultId": result1.insertId
                                                        };
                                                        getPresentStatus(fld1, function (errP, successP, detailsP) {
                                                            var chngP = "Status Change : " + details[0].ATTRVAL + " To: " + detailsP[0].ATTRVAL;
                                                            var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue ) VALUES (" + data.ticketId + ",6," + data.id + "," + data.user_id + ",'" + chngP + "') ";

                                                            con.query(sql5, function (err5, result5) {
                                                                if (err5) {
                                                                    logData(err5);
                                                                    cb(err5, null);
                                                                } else {

                                                                     // optimizedreport table starts
                                                                     var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                     + "(select ticketCloseDate from ticket where id =?) ticketCloseDate,"
                                                                     + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                     + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                     + " from USER where id = ?"
                                                                 con.query(sql90, [data.ticketId, data.ticketId, data.user_id, data.user_id, data.user_id], function (err, result55) {
                                                                     if (err) {
                                                                         console.log(err);
                                                                     } else {
                                                                         console.log(result55);
                                                                         var sql44 = "update optimizedreport set latest_analyst_ps =?,closed_dt =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                             + "all_analyst_ps= ?,all_analyst_name=?,"
                                                                             + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                         // console.log("WS@###########################",result60[0].id);
                                                                         con.query(sql44, [result55[0].login_name, result55[0].ticketCloseDate, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, chngP, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                             console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                             if (err) {
                                                                                 console.log("65342168451326854321698543216853241685426854", err);
                                                                                 cb(err, null);
                                                                             } else {
                                                                                 logData("********____________>>>" + sql44);
                                                                                 console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                                 cb(null, true, result77);
                                                                             }
                                                                         })
                                                                     }
                                                                 });
                                                                 // optimizedreport table ends


                                                                    insertCSatFormDtls(data, function (errCS, successCS, detailsCS) {
                                                                        if (data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == '2' || data.ticket_type_seq == '3' || data.ticket_type_seq == '4')) {
                                                                            var fldIFS = {
                                                                                "status_seq": 23,
                                                                                "ticketId": data.ticketId,
                                                                                "clientId": result11[0].CLIENTID,
                                                                                "user_id": data.user_id
                                                                            };
                                                                            changeIncidentTicketStatusForProblem(fldIFS, function (errIFS, successIFS, detailsIFS) {
                                                                                updateIncdntTcktStusForProbWthClose({ "ticketId": data.ticketId }, function (errPIU, successPIU, detailsPIU) {

                                                                                    insertLatestWFCClientResult({
                                                                                        "ticketId": data.PKFIELDVAL
                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                        if (errET3 || !successET3) {
                                                                                            cb(null, true, 0);
                                                                                        } else {
                                                                                            cb(null, true, results.affectedRows);
                                                                                        }
                                                                                    })
                                                                                })
                                                                            })
                                                                        } else {
                                                                            getIsSLAInStopStatus({
                                                                                "id": data.ticketId
                                                                            }, function (errS, successS, detailsS) {
                                                                                if (errS || !successS) {
                                                                                    logData('Errin in getIsSLAInStopStatus: ' + errS + successS);
                                                                                    cb(errS, null);
                                                                                } else {
                                                                                    if (detailsS === 'N') {
                                                                                        callStopSlaDtlsTicketWise({
                                                                                            "id": data.ticketId,
                                                                                            "user_id": data.user_id,
                                                                                            "reqType": "",
                                                                                            "clientId": result11[0].CLIENTID
                                                                                        }, function (errC, successC, detailsC) {

                                                                                        });
                                                                                    }
                                                                                }
                                                                            });
                                                                            request
                                                                                // .get(MAIL_URL + '/sendemailOther?ticketId=' + data.ticketId + '&notifyType=email')
                                                                                .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=1&actionID=&actionData=')
                                                                                .end((err, resp) => {
                                                                                    if (err) {
                                                                                        logData(err);
                                                                                    } else {
                                                                                        logData('done')
                                                                                        logData('done----err---' + err)
                                                                                        logData('done---resp--' + JSON.stringify(resp))
                                                                                    }
                                                                                    // Do something
                                                                                });
                                                                            /**************************************************/
                                                                            var sql6 = "update ticket_closure_dtl set is_active = 'N', delete_flag = '1',mail_flag='Y' where ticket_id =? ";
                                                                            con.query(sql6, [data.ticketId], function (err6, result6) {
                                                                                if (err6) {
                                                                                    logData(err6);
                                                                                    cb(err6, null);
                                                                                } else {
                                                                                    insertLatestWFCClientResult({
                                                                                        "ticketId": data.ticketId
                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                        if (errET3 || !successET3) {
                                                                                            cb(null, true, 0);
                                                                                        } else {
                                                                                            cb(null, true, results.affectedRows);
                                                                                        }
                                                                                    })
                                                                                }
                                                                            })
                                                                            /**************************************************/
                                                                        }

                                                                    });

                                                                }
                                                            });
                                                        });


                                                    }
                                                });
                                            } else {
                                                cb(null, false, "Some error in closing ticket process");
                                            }

                                        }
                                    });
                                }); //upto
                            })


                        }// else
                    });
                });
            }
        }
    })


}

function updateTicketStatusWithClose_old(data, cb) {
    if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '1') {
        data.sequence_no = 0;
    } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '5') {
        data.sequence_no = 300;
    } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '6') {
        data.sequence_no = 400;
    } else {
        data.sequence_no = 104;
    }
    checkIsSlaCalculationDone({ "id": data.ticketId }, function (errISC, successISC, resultsISC) {
        if (errISC) {
            logData(errISC);
            cb(errISC, null);
        } else {
            logData('updateTicketStatusWithClose-----successISC-----------' + successISC)
            if (!successISC) {
                cb(null, false, resultsISC);
            } else {
                var fld = {
                    "wfcClientResultId": data.id
                };
                logData('\n\n\n updateTicketStatusWithClose:' + JSON.stringify(data));
                data.comm = con.escape(data.comm);
                getPresentStatus(fld, function (err, success, details) {
                    var sql11 = "SELECT CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, " +
                        "frw_user_id, category_id  " +
                        ", (select createbyid from ticket where id = " + data.ticketId + ") creator " +
                        " FROM WFCCLIENTRESULT " +
                        " where id = " + data.id + "  ";
                    con.query(sql11, function (err11, result11) {
                        if (err11) {
                            logData(err11);
                            cb(err11, null);
                        } else {
                            getCreatorEndGrpId(data, function (err, success, data) {
                                var dataU = {
                                    "id": data.ticketId
                                };
                                updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                                    var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid ,tStatus) values " +
                                        " (" + result11[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].wfcclient_id + " ";

                                    // if(data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == '5' || data.ticket_type_seq == '6')){
                                    //     sql1 = sql1+ ", " + data.endUsrGrpId + " ";
                                    // }else{
                                    //     sql1 = sql1+ ", " + data.supportGroupLevelId + " ";
                                    // }
                                    sql1 = sql1 + ", " + data.supportGroupLevelId + " ";
                                    sql1 = sql1 + ", " + data.ticketId + "," + result11[0].FIELDVAL + ",'0'," + (parseInt(result11[0].serial_no) + 1) + ", '1'";

                                    if (data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == '5' || data.ticket_type_seq == '6')) {
                                        sql1 = sql1 + ", " + result11[0].creator + " ";
                                    } else {
                                        sql1 = sql1 + ", " + data.user_id + " ";
                                    }

                                    sql1 = sql1 + " , " + result11[0].category_id + "," + data.user_id + ",(Select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " +
                                        " " + result11[0].CLIENTID + " and ATTRID = 2  and sequence_no in (" + data.sequence_no + ")) ) ";
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            if (result1 != null && result1.insertId > 0) {
                                                var str = "Update ticket set tstatus=(select id from TICKETATTRIBUTES where DeleteFlag = '0' " +
                                                    "                               and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) " +
                                                    "                                                   and ATTRID = 2  and sequence_no in (" + data.sequence_no + ")), ";

                                                /* if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '1' ) {
                                                     str = str + "    and sequence_no in (0)), ";
                                                 } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '5' ) {
                                                     str = str + "    and sequence_no in (300)), ";
                                                 } else if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '6'  ) {
                                                     str = str + "    and sequence_no in (400)), ";
                                                 } else {
                                                     str = str + "    and sequence_no in (104)), ";
                                                 }*/

                                                /*if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq != '1') {
                                                    str = str + "    and sequence_no in (104)), ";
                                                } else {
                                                    str = str + "    and sequence_no in (0)), ";
                                                }*/

                                                str = str + " ticketCloseDate=Now(),  modifybyid=" + data.user_id + ", modifydate=Now() where id = " + data.ticketId + "";
                                                con.query(str, function (errs, results) {
                                                    if (errs) {
                                                        logData(errs);
                                                        cb(errs, null);
                                                    } else {
                                                        var fld1 = {
                                                            "wfcClientResultId": result1.insertId
                                                        };
                                                        getPresentStatus(fld1, function (errP, successP, detailsP) {
                                                            var chngP = "Status Change : " + details[0].ATTRVAL + " To: " + detailsP[0].ATTRVAL;
                                                            var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue ) VALUES (" + data.ticketId + ",6," + data.id + "," + data.user_id + ",'" + chngP + "') ";

                                                            con.query(sql5, function (err5, result5) {
                                                                if (err5) {
                                                                    logData(err5);
                                                                    cb(err5, null);
                                                                } else {
                                                                    insertCSatFormDtls(data, function (errCS, successCS, detailsCS) {
                                                                        if (data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == '2' || data.ticket_type_seq == '3' || data.ticket_type_seq == '4')) {
                                                                            var fldIFS = {
                                                                                "status_seq": 23,
                                                                                "ticketId": data.ticketId,
                                                                                "clientId": result11[0].CLIENTID,
                                                                                "user_id": data.user_id
                                                                            };
                                                                            changeIncidentTicketStatusForProblem(fldIFS, function (errIFS, successIFS, detailsIFS) {
                                                                                updateIncdntTcktStusForProbWthClose({ "ticketId": data.ticketId }, function (errPIU, successPIU, detailsPIU) {

                                                                                    insertLatestWFCClientResult({
                                                                                        "ticketId": data.PKFIELDVAL
                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                        if (errET3 || !successET3) {
                                                                                            cb(null, true, 0);
                                                                                        } else {
                                                                                            cb(null, true, results.affectedRows);
                                                                                        }
                                                                                    })
                                                                                })
                                                                            })
                                                                        } else {
                                                                            getIsSLAInStopStatus({
                                                                                "id": data.ticketId
                                                                            }, function (errS, successS, detailsS) {
                                                                                if (errS || !successS) {
                                                                                    logData('Errin in getIsSLAInStopStatus: ' + errS + successS);
                                                                                    cb(errS, null);
                                                                                } else {
                                                                                    if (detailsS === 'N') {
                                                                                        callStopSlaDtlsTicketWise({
                                                                                            "id": data.ticketId,
                                                                                            "user_id": data.user_id,
                                                                                            "reqType": "",
                                                                                            "clientId": result11[0].CLIENTID
                                                                                        }, function (errC, successC, detailsC) {

                                                                                        });
                                                                                    }
                                                                                }
                                                                            });
                                                                            request
                                                                                // .get(MAIL_URL + '/sendemailOther?ticketId=' + data.ticketId + '&notifyType=email')
                                                                                .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=1&actionID=&actionData=')
                                                                                .end((err, resp) => {
                                                                                    if (err) {
                                                                                        logData(err);
                                                                                    } else {
                                                                                        logData('done')
                                                                                        logData('done----err---' + err)
                                                                                        logData('done---resp--' + JSON.stringify(resp))
                                                                                    }
                                                                                    // Do something
                                                                                });
                                                                            /**************************************************/
                                                                            var sql6 = "update ticket_closure_dtl set is_active = 'N', delete_flag = '1',mail_flag='Y' where ticket_id =? ";
                                                                            con.query(sql6, [data.ticketId], function (err6, result6) {
                                                                                if (err6) {
                                                                                    logData(err6);
                                                                                    cb(err6, null);
                                                                                } else {
                                                                                    insertLatestWFCClientResult({
                                                                                        "ticketId": data.ticketId
                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                        if (errET3 || !successET3) {
                                                                                            cb(null, true, 0);
                                                                                        } else {
                                                                                            cb(null, true, results.affectedRows);
                                                                                        }
                                                                                    })
                                                                                }
                                                                            })
                                                                            /**************************************************/
                                                                        }

                                                                    });

                                                                }
                                                            });
                                                        });


                                                    }
                                                });
                                            } else {
                                                cb(null, false, "Some error in closing ticket process");
                                            }

                                        }
                                    });
                                }); //upto
                            })


                        }// else
                    });
                });
            }
        }
    })


}


function getCreatorEndGrpId(data, cb) {
    let str = "select createbyid, clientid from ticket where id = ? ";
    con.query(str, [data.ticketId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            // util.logData('++++++++++++++++++++++++++++++' + JSON.stringify(result));
            let str1 = "select a.supportGroupLevelId,b.group_level from supportGroupUser a , SUPPORTGROUPLEVEL b where a.supportGroupLevelId = b.id  and a.userId = ? and a.clientId = ? order by b.group_level limit 1 ";
            con.query(str1, [result[0].createbyid, result[0].clientid], function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    if (result1.length > 0) {
                        data.endUsrGrpId = result1[0].supportGroupLevelId
                        cb(null, true, data);
                    } else {
                        data.endUsrGrpId = 0;
                        cb(null, true, data);
                    }
                }
            });
        }
    });
}

function isThisLastStageWorkFlow(data, cb) {
    let str = "";
    if (data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq === 5 || data.ticket_type_seq === 6)) {
        str = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
            " supportGroupLevelId,categoryId,userId " +
            " FROM WFCCLIENT " +
            " where categoryId =" + data.FIELDVAL + " " +
            " and work_flow_component_id = " + data.work_flow_component_id + " " +
            " AND CLIENTID = " + data.CLIENTID + " " +
            " AND DeleteFlag = '0' " +
            " and id  >= (select max(id) from WFCCLIENT " +
            "                    where categoryId = " + data.FIELDVAL + "  and work_flow_component_id =  " + data.work_flow_component_id + "  " +
            "                    AND CLIENTID = " + data.CLIENTID + " AND DeleteFlag =  '0' " +
            "                    and categoryId = (select categoryId " +
            "                                                from WFCCLIENTRESULT where PKFIELDVAL=" + data.ticketId + " " +
            "                                                 and id = (select max(id) from WFCCLIENTRESULT " +
            "                                                      where PKFIELDVAL=" + data.ticketId + "))) " +
            " AND flowIndicator='B' order by id limit 1 ";
    } else {
        str = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
            " supportGroupLevelId,categoryId,userId " +
            " FROM WFCCLIENT " +
            " where categoryId =" + data.FIELDVAL + " " +
            " and work_flow_component_id = " + data.work_flow_component_id + " " +
            " AND CLIENTID = " + data.CLIENTID + " " +
            " AND DeleteFlag = '0' " +
            " and id  > (select max(id) from WFCCLIENT " +
            "                    where categoryId = " + data.FIELDVAL + "  and work_flow_component_id =  " + data.work_flow_component_id + "  " +
            "                    AND CLIENTID = " + data.CLIENTID + " AND DeleteFlag =  '0' " +
            "                    and supportGroupLevelId = (select supportGroupLevelId " +
            "                                                from WFCCLIENTRESULT where PKFIELDVAL=" + data.ticketId + " " +
            "                                                 and id = (select max(id) from WFCCLIENTRESULT " +
            "                                                      where PKFIELDVAL=" + data.ticketId + "))) " +
            " AND flowIndicator='B' order by id limit 1 ";
    }

    logData('isThisLastStageWorkFlow----------------------------' + str)
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result.length);
        }
    });
}


function isThisLastStageWorkFlow_old(data, cb) {
    let str = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
        " supportGroupLevelId,categoryId,userId " +
        " FROM WFCCLIENT " +
        " where categoryId =" + data.FIELDVAL + " " +
        " and work_flow_component_id = " + data.work_flow_component_id + " " +
        " AND CLIENTID = " + data.CLIENTID + " " +
        " AND DeleteFlag = '0' " +
        " and id  > (select max(id) from WFCCLIENT " +
        "                    where categoryId = " + data.FIELDVAL + "  and work_flow_component_id =  " + data.work_flow_component_id + "  " +
        "                    AND CLIENTID = " + data.CLIENTID + " AND DeleteFlag =  '0' " +
        "                    and supportGroupLevelId = (select supportGroupLevelId " +
        "                                                from WFCCLIENTRESULT where PKFIELDVAL=" + data.ticketId + " " +
        "                                                 and id = (select max(id) from WFCCLIENTRESULT " +
        "                                                      where PKFIELDVAL=" + data.ticketId + "))) " +
        " AND flowIndicator='B' order by id limit 1 ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result.length);
        }
    });
}

function geUserDtls(data, cb) {
    let str = "select NAME,date_format(Now(),'%Y-%m-%d %T')  solTime from USER where id = ? ";
    con.query(str, [data.user_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function callforSlaResolutionReCalculateTicketWise(data, cb) {
    let sql = "select b.id, date_format (coalesce(a.sla_calculation_start_time, a.createdate),'%d/%m/%Y %T') startDt, " +
        " date_format (b.resolution_stop_datetime,'%d/%m/%Y %T') endDt from ticket a, ticket_sla_response_dtls b " +
        " where a.id = b.ticketId and b.deleteflag='0' and a.id =" + data.id + " and b.resolution_stop_datetime is not null  ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                //*****************************************************
                let stDate = result[0].startDt;
                let toDate = result[0].endDt;
                logData('stDate-------------------' + stDate);
                logData('toDate-------------------' + toDate);
                logData('data.ticketId================' + data.id);
                request
                    .get(SLA_URL + '/getSalPeriodDateWise')
                    .query({
                        ticketId: data.id,
                        frDate: stDate,
                        toDate: toDate
                    }) // query string
                    .end((err, resp) => {
                        if (err) {
                            logData(err);
                        } else {
                            util.logData('callforSlaResolutionReCalculateTicketWise====' + JSON.stringify(resp));
                            let x = JSON.parse(resp.text).resVal.slaResponsePeriod;
                            var str = "update ticket_sla_response_dtls set sla_resolution_period = " + x + "" +
                                " where ticketId = " + data.id + " and id = " + result[0].id + " ";
                            con.query(str, function (err1, result1) {
                                if (err1) {
                                    logData(err1);
                                    cb(err1, null);
                                } else {

                                     // optimizedreport table starts
                                     var sql6 = " select (select id from optimizedreport where ticket_id =?) id,coalesce(sla_resolution_period,0) sla_resolution_period from ticket_sla_response_dtls where ticketId =? and deleteflag ='0'"
                                     con.query(sql6, [data.id, data.id], function (err, result6) {
                                         if (err) {
                                             cb(err, null);
                                         } else {
                                             var sql7 = "update optimizedreport set effort_spent =? where id=?;"
                                             con.query(sql7, [result6[0].sla_resolution_period, result6[0].id], function (err, result7) {
                                                 if (err) {
                                                     cb(err, null);
                                                 } else {
                                                     logData("&&&&&&&&&&&&&&------------>" + sql7);
                                                     console.log("@@@@@@@@@@@@@654", result7);
                                                     cb(null, true, result7);
                                                 }
                                             })
 
                                         }
                                     });
                                     // optimizedreport table ends

                                    cb(null, true, "OK");
                                }
                            });

                        }
                        // Do something
                    });
                //*****************************************************
            } else {
                cb(null, true, "No Action required");
            }
        }
    });
}





// function submitSolutionsTicketWise(data, cb) {
//     //   util.logData('\n\naaaaaaaaaaaaaaaaaaaaa------------------' + JSON.stringify(data))
    
//     console.log('+++++++++++++++++++++++ INSIDE OF submitSolutionsTicketWise +++++++++++++++++++++++');
//         data.solutions = con.escape(data.solutions);
//         checkIsSlaCalculationDone({"id": data.ticketId}, function (errISC, successISC, resultsISC) {
//             if (errISC) {
//                 logData(errISC);
//                 cb(errISC, null);
//             } else {
//                 // logData('submitSolutionsTicketWise-----successISC-----------' + successISC)
//                 if (!successISC) {
//                     cb(null, false, resultsISC);
//                 } else {
//                     isTicketGetResolvedStatus(data, function (errTGS, successTGS, detailsTGS) {
//                         if (errTGS) {
//                             logData(errTGS);
//                             cb(errTGS, null);
//                         } else {
//                             if (successTGS) {
//                                 getNextAssigneeDtls({
//                                     "clientId": data.clientId,
//                                     "id": data.ticketId
//                                 }, function (errNA, successNA, detailsNA) {
//                                     if (errNA || !successNA) {
//                                         cb(null, false, "Internal Error: You are unable to provide solution");
//                                     } else {
//                                         //logData(JSON.stringify(successNA) + '\n\nbbbbbbbbbbbbbbbbbbbbbbbb' + JSON.stringify(detailsNA))
//                                         let nxtAssign = detailsNA.length;
//                                         let sql = "Insert into ticketSolutions (ticketId,WFCClientResultId,solutions,rca,createbyid) values(" + data.ticketId + "," + data.WFCClientResultId + "," + data.solutions + ",'" + data.rca + "'," + data.createdBy + ")";
//                                         //logData('\n\nccccccccccc--------------' + sql)
//                                         con.query(sql, function (err1, resultI) {
//                                             if (err1) {
//                                                 logData(err1);
//                                                 cb(err1, null);
//                                             } else {
//                                                 // optimizedreport table starts
    
//                                                 var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,(select count(*) from ticketSolutions where ticketId=?) resolution_count,login_name,name,"
//                                                     + "(select (coalesce(replace(group_concat(concat(date_format (ADDTIME(createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',',' / '),'')) from ticketSolutions where ticketId=?) solution_date_only,"
//                                                     + "(select (TIME_FORMAT(TIMEDIFF(COALESCE(at.createdate,NOW()), t.createdate),'%H:%i:%s')) from ticketSolutions at, ticket t where at.ticketId = t.id and ticketId=? order by t.id desc limit 1) diff,"
//                                                     + "(select (date_format (ADDTIME(max(createdate), '5:30:0.000000'),'%d-%M-%Y %T')) from ticketSolutions where ticketId=?) max_sol_dt,"
//                                                     + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
//                                                     + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
//                                                     + " from USER where id =? "
//                                                 console.log("---------653464--", sql90);
//                                                 //   console.log("4444444",resultI[0].solutions);
//                                                 con.query(sql90, [data.ticketId, data.ticketId, data.ticketId, data.ticketId, data.ticketId, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
//                                                     if (err) {
//                                                         console.log(err);
//                                                     } else {
//                                                         logData("____________+++++++++++++>>" + result55);
//                                                         console.log("222222222", result55);
//                                                         var sql44 = "update optimizedreport set  solution_desc=?,solution_provided_by=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
//                                                             + "all_analyst_ps= ?,first_resolution_dt=?,all_resolution_dt=?,all_analyst_name=?,resolution_count =?,ticket_ageing=?,"
//                                                             + "ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
//                                                         // console.log("WS@###########################",result60[0].id);
//                                                         con.query(sql44, [data.solutions, result55[0].name, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].max_sol_dt, result55[0].solution_date_only, result55[0].l_name, result55[0].resolution_count, result55[0].diff, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
//                                                             console.log("%^&*(*&%^&*(**())(*&6595639586956------------->" + sql44);
//                                                             if (err) {
//                                                                 console.log("65342168451326854321698543216853241685426854", err);
//                                                                 cb(err, null);
//                                                             } else {
//                                                                 logData("_______________2345#$" + sql44);
//                                                                 console.log("solution----------------",result77);
//                                                                 cb(null, true, result77);
//                                                             }
//                                                         })
//                                                     }
//                                                 });
    
//                                                 // optimizedreport table ends
    
//                                                 if (resultI.insertId === 0) {
//                                                     cb(null, false, "Data is not updated successfully");
//                                                 } else {
//                                                     var fldS = {
//                                                         "user_id": data.createdBy,
//                                                         "ticket_type_seq": data.ticket_type_seq,
//                                                         "seq_no": data.seq_no,
//                                                         "ticketId": data.ticketId
//                                                     };
//                                                     getResolveId(fldS, function (errS, successS, detailsS) {
//                                                         //logData('\n\neeeeeeeeeee--------------' + JSON.stringify(detailsS))
//                                                         let sqlT = "Update ticket set tstatus=" + detailsS + " , modifybyid=" + data.createdBy + ", modifydate=CURRENT_TIMESTAMP where id = " + data.ticketId + "";
//                                                         con.query(sqlT, function (errT, resultT) {
//                                                             if (errT) {
//                                                                 logData(errT);
//                                                                 cb(errT, null);
//                                                             } else {
//                                                                 var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,ticketSolutionId ) " +
//                                                                     " VALUES (" + data.ticketId + ",8," + data.WFCClientResultId + "," + data.createdBy + "," + resultI.insertId + ") ";
//                                                                 con.query(sql5, function (err5, result5) {
//                                                                     if (err5) {
//                                                                         logData(err5);
//                                                                         cb(err5, null);
//                                                                     } else {
//                                                                         /**************************************************************************************************************************/
    
//                                                                         // updateFollowUpReceivedDtls({
//                                                                         //     "ticketId": data.ticketId,
//                                                                         //     "actionId": 15,
//                                                                         //     "wfcClientResultId": data.WFCClientResultId,
//                                                                         //     "userId": data.createdBy
//                                                                         // }, function (errFRD, successFRD, detailsFRD) {
//                                                                         //
//                                                                         // })
//                                                                         let actionLt = [12, 15, 24, 25];
//                                                                         for (let k = 0; k < actionLt.length; k++) {
//                                                                             updateFollowUpReceivedDtls({
//                                                                                 "ticketId": data.ticketId,
//                                                                                 "actionId": actionLt[k],
//                                                                                 "wfcClientResultId": data.WFCClientResultId,
//                                                                                 "userId": data.createdBy
//                                                                             }, function (errFRD, successFRD, detailsFRD) {
    
//                                                                             })
//                                                                         }
//                                                                         /**************************************************************************************************************************/
    
    
//                                                                         request
//                                                                             .get(SLA_URL + '/slaCalculation_ticketwise_closure?ticketId=' + data.ticketId + '&client_id=' + data.clientId)
//                                                                             .end((err, resp) => {
//                                                                                 if (err) {
//                                                                                     logData(err);
//                                                                                 } else {
//     //logData('done---resp--' + JSON.stringify(resp))
//                                                                                 }
//                                                                             });
//                                                                         request
//                                                                         // .get(MAIL_URL + '/sendemailOther?ticketId=' + data.ticketId + '&notifyType=email')
//                                                                             .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=1&actionID=&actionData=')
//                                                                             .end((err, resp) => {
//                                                                                 if (err) {
//                                                                                     logData(err);
//                                                                                 } else {
//                                                                                     //logData('done---resp--' + JSON.stringify(resp))
//                                                                                 }
//                                                                             });
//                                                                         geUserDtls({"user_id": data.createdBy}, function (errUD, successUD, detailsUD) {
//                                                                             if (socket) {
//                                                                                 socket.emit('solProvd', {
//                                                                                     ticketId: data.ticketId,
//                                                                                     name: detailsUD[0].NAME,
//                                                                                     solutions: data.solutions,
//                                                                                     date: detailsUD[0].solTime
//                                                                                 })
//                                                                             }
//                                                                             geUserDtlsTicketWise({
//                                                                                 "WFCClientResultId": data.WFCClientResultId,
//                                                                                 "id": data.ticketId
//                                                                             }, function (errTD, successTD, resultsTD) {
//                                                                                 if (errTD) {
//                                                                                     logData(errTD);
//                                                                                     cb(errTD, null);
//                                                                                 } else {
//                                                                                     if (successTD) {
//                                                                                         if (socket) {
//                                                                                             let sql2 = "select ticketTypeId from ticket where id=?";
//                                                                                             con.query(sql2, [data.ticketId], function (err, res) {
//                                                                                                 if (err) {
//                                                                                                     logData(err);
//                                                                                                 } else {
//                                                                                                     if (res.length > 0) {
//                                                                                                         let val1 = {
//                                                                                                             ticketId: data.ticketId,
//                                                                                                             clientId: data.clientId,
//                                                                                                             ticketTypeId: res[0].ticketTypeId
//                                                                                                         };
//                                                                                                         getNotificationMenuIdTicketStatusWise(val1, function (err111, success111, details111) {
    
//                                                                                                         });
//                                                                                                     }
//                                                                                                 }
//                                                                                             })
    
//                                                                                             // socket.emit('dashboard', {
//                                                                                             //     menuId: 3,
//                                                                                             //     ticketId: data.ticketId,
//                                                                                             //     clientId: data.clientId,
//                                                                                             //     ticketTypeId: resultsTD[0].ticketTypeId
//                                                                                             // });
//                                                                                             // socket.emit('dashboard', {
//                                                                                             //     menuId: 2,
//                                                                                             //     ticketId: data.ticketId,
//                                                                                             //     clientId: data.clientId,
//                                                                                             //     ticketTypeId: resultsTD[0].ticketTypeId
//                                                                                             // });
//                                                                                             // socket.emit('dashboard', {
//                                                                                             //     menuId: 51,
//                                                                                             //     ticketId: data.ticketId,
//                                                                                             //     clientId: data.clientId,
//                                                                                             //     ticketTypeId: resultsTD[0].ticketTypeId
//                                                                                             // });
//                                                                                             // socket.emit('dashboard', {
//                                                                                             //     menuId: 41,
//                                                                                             //     ticketId: data.ticketId,
//                                                                                             //     clientId: data.clientId,
//                                                                                             //     ticketTypeId: resultsTD[0].ticketTypeId
//                                                                                             // });
//                                                                                             // socket.emit('dashboard', {
//                                                                                             //     menuId: 21,
//                                                                                             //     ticketId: data.ticketId,
//                                                                                             //     clientId: data.clientId,
//                                                                                             //     ticketTypeId: resultsTD[0].ticketTypeId
//                                                                                             // });
//                                                                                         }
//                                                                                     }
//                                                                                 }
//                                                                             })
//                                                                         })
//                                                                         //mona
//                                                                         //logData('\n\nfffffffffffffff--------------' + JSON.stringify(result5))
//                                                                         if (data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == 2 || data.ticket_type_seq == 3 || data.ticket_type_seq == 4)) {
//                                                                             var fldIFS = {
//                                                                                 //"status_seq": 103,
//                                                                                 "status_seq": 22,
//                                                                                 "ticketId": data.ticketId,
//                                                                                 "user_id": data.createdBy,
//                                                                                 "clientId": data.clientId
//                                                                             };
//                                                                             util.logData('changeIncidentTicketStatusForProblem=================' + JSON.stringify(fldIFS));
//                                                                             changeIncidentTicketStatusForProblem(fldIFS, function (errIFS, successIFS, detailsIFS) {
    
//                                                                                 updateIncdntTcktStusForProbWthSoln({"ticketId": data.ticketId}, function (errPIU, successPIU, detailsPIU) {
    
//                                                                                 })
//                                                                             })
//                                                                         }
//                                                                         let str = "SELECT CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD," +
//                                                                             " serial_no, END_INDICATOR, user_id, frw_user_id, category_id,tStatus " +
//                                                                             " ,1 workflowId " +
//                                                                             // "  , (SELECT workflowId FROM WFCCLIENT where id = a.wfcclient_id) workflowId " +
//                                                                             " , (select isDeviation from ticket where id =" + data.ticketId + " ) isDeviation " +
//                                                                             " ,if((select count(*) from TICKETATTRIBUTES where DeleteFlag='0' and ATTRID=2 and sequence_no in ( 2,103,302,402) and id=(select tstatus from ticket where id =" + data.ticketId + ")>0), 'B','F') flowIndicator " +
//                                                                             " FROM WFCCLIENTRESULT a " +
//                                                                             " where PKFIELDVAL = " + data.ticketId + " and END_INDICATOR=0  order by id desc limit 1 ";
//                                                                         //logData('\n\ngggggggggggg-------results-------' + str)
//                                                                         con.query(str, function (errs, results) {
//                                                                             if (errs) {
//                                                                                 logData(errs);
//                                                                                 cb(errs, null);
//                                                                             } else {
//                                                                                 if (results == null || results.length == 0) {
//                                                                                     cb(null, false, "Data not found.");
//                                                                                 } else {
//                                                                                     //logData('results------------------------------@@@@@@@@@@@@-----' + JSON.stringify(results))
//                                                                                     var fldS = {
//                                                                                         "user_id": data.createdBy,
//                                                                                         "ticket_type_seq": data.ticket_type_seq,
//                                                                                         "fldS": data.fldS,
//                                                                                         "seq_no": data.seq_no,
//                                                                                         "ticketId": data.ticketId
//                                                                                     };
//                                                                                     var fldIF = {
//                                                                                         "FIELDVAL": results[0].FIELDVAL,
//                                                                                         "work_flow_component_id": results[0].work_flow_component_id,
//                                                                                         "CLIENTID": results[0].CLIENTID,
//                                                                                         "ticket_type_seq": data.ticket_type_seq,
//                                                                                         "ticketId": data.ticketId
//                                                                                     };
    
//                                                                                     isThisLastStageWorkFlow(fldIF, function (errIF, successIF, detailsIF) {
//                                                                                         if (errIF || !successIF) {
//                                                                                             logData(errIF + successIF);
//                                                                                             cb(errIF, null);
//                                                                                         } else {
//                                                                                             logData('\n\n  detailsIF------############-------------' + JSON.stringify(detailsIF))
//                                                                                             getResolveId(fldS, function (errS, successS, detailsS) {
//                                                                                                 if (results[0].isDeviation == 'true') {
//                                                                                                     var fldC = {
//                                                                                                         "id": data.ticketId
//                                                                                                     };
//                                                                                                     getCreaterDetail(fldC, function (errC, successC, detailsC) {
//                                                                                                         if (detailsC.length > 0) {
//                                                                                                             var fldS = {
//                                                                                                                 "user_id": data.createdBy,
//                                                                                                                 "ticket_type_seq": data.ticket_type_seq,
//                                                                                                                 "seq_no": data.seq_no,
//                                                                                                                 "ticketId": data.ticketId
//                                                                                                             };
//                                                                                                             getResolveId(fldS, function (errS, successS, detailsS) {
//                                                                                                                 var fld = {
//                                                                                                                     "clientId": detailsC[0].CLIENTID,
//                                                                                                                     "user_id": detailsC[0].createbyid,
//                                                                                                                     "frw_user_id": data.createdBy,
//                                                                                                                     "work_flow_component_id": detailsC[0].work_flow_component_id,
//                                                                                                                     "wfcclient_id": detailsC[0].wfcclient_id,
//                                                                                                                     "supportGroupLevelId": detailsC[0].createor_support_grp_id,
//                                                                                                                     "PKFIELDVAL": data.ticketId,
//                                                                                                                     "FIELDVAL": detailsC[0].FIELDVAL,
//                                                                                                                     "category_id": detailsC[0].category_id,
//                                                                                                                     "tStatus_cd": detailsS,//detailsC[0].tStatus,
//                                                                                                                     "createdBy": data.createdBy,
//                                                                                                                     "is_1st_entry": 'N',
//                                                                                                                     "reopen": 0
//                                                                                                                 };
//                                                                                                                 generateWorkFlow(fld, function (err, success, details) {
//                                                                                                                     if (details > 0) {
//                                                                                                                         callStopSlaDtlsTicketWise({
//                                                                                                                             "id": data.ticketId,
//                                                                                                                             "user_id": data.createdBy,
//                                                                                                                             "reqType": "",
//                                                                                                                             "clientId": detailsC[0].CLIENTID
//                                                                                                                         }, function (errC, successC, detailsC) {
//                                                                                                                             callforSlaResolutionReCalculateTicketWise({
//                                                                                                                                 "id": data.ticketId
//                                                                                                                             }, function (errSS, successSS, detailsSS) {
//                                                                                                                                 //logData('15')
//                                                                                                                             });
//                                                                                                                             cb(null, true);
//                                                                                                                         });
    
//                                                                                                                     } else {
//                                                                                                                         cb(null, false, "Some error occured");
//                                                                                                                     }
//                                                                                                                 });
//                                                                                                             });
    
//                                                                                                         } else {
//                                                                                                             cb(null, false, "Some error occured");
//                                                                                                         }
//                                                                                                     });
//                                                                                                 } else if (detailsIF == 0) {
//                                                                                                     //logData('********************************detailsIF*********************************')
//                                                                                                     let sqlB = "";
//                                                                                                     if (data.ticket_type_seq != 1) {
//                                                                                                         sqlB = "SELECT createbyid, supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
//                                                                                                     } else {
//                                                                                                         sqlB = "SELECT createbyid, createor_support_grp_id supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
//                                                                                                         // sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket " +
//                                                                                                         //     " where id = " + data.ticketId + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
//                                                                                                     }
//                                                                                                     // logData('sqlB ----------sqlB------------' + sqlB)
//                                                                                                     con.query(sqlB, function (errB, detailsB) {
//                                                                                                         if (errB) {
//                                                                                                             logData(errB);
//                                                                                                             cb(errB, null);
//                                                                                                         } else {
//                                                                                                             if (detailsB.length > 0) {
//                                                                                                                 updateWFCResultForDispatch({"id": data.ticketId}, function (errU, successU, resultsU) {
//                                                                                                                     var sql12 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
//                                                                                                                         " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus ) values " +
//                                                                                                                         " (" + results[0].CLIENTID + "," + results[0].work_flow_component_id + ",0,'" + detailsB[0].supportGroupLevelId + "'," +
//                                                                                                                         " " + data.ticketId + "," + results[0].FIELDVAL + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
//                                                                                                                         " " + results[0].category_id + "," + data.createdBy + "," + results[0].tStatus + " ) ";
//                                                                                                                     //logData('sql12 ----------sql12------------' + sql12)
//                                                                                                                     con.query(sql12, function (err12, result12) {
//                                                                                                                         if (err12) {
//                                                                                                                             logData(err12);
//                                                                                                                             cb(err12, null);
//                                                                                                                         } else {
    
//                                                                                                                             // optimizedreport table starts
    
                                                                                                                            
//                                                                                                                             var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
//                                                                                                                                 + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
//                                                                                                                                 + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
//                                                                                                                                 + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
//                                                                                                                                 + " from USER where id = ?"
//                                                                                                                             console.log("---------98765--", sql90);
//                                                                                                                             con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
//                                                                                                                                 if (err) {
//                                                                                                                                     console.log(err);
//                                                                                                                                 } else {
//                                                                                                                                     console.log(result55);
//                                                                                                                                     var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
//                                                                                                                                         + "all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=?,"
//                                                                                                                                         + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
//                                                                                                                                     // console.log("WS@###########################",result60[0].id);
//                                                                                                                                     con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
//                                                                                                                                         console.log("%^&*(*&%^&*()(*&6595639586956------------->");
//                                                                                                                                         if (err) {
//                                                                                                                                             console.log("65342168451326854321698543216853241685426854", err);
//                                                                                                                                             cb(err, null);
//                                                                                                                                         } else {
//                                                                                                                                             logData("_______________45#$" + sql44);
//                                                                                                                                             console.log(result77);
//                                                                                                                                             cb(null, true, result77);
//                                                                                                                                         }
//                                                                                                                                     })
//                                                                                                                                 }
//                                                                                                                             });
    
//                                                                                                                             // optimizedreport table ends
    
    
//                                                                                                                             callStopSlaDtlsTicketWise({
//                                                                                                                                 "id": data.ticketId,
//                                                                                                                                 "user_id": data.createdBy,
//                                                                                                                                 "reqType": "",
//                                                                                                                                 "clientId": results[0].CLIENTID
//                                                                                                                             }, function (errC, successC, detailsC) {
//                                                                                                                                 callforSlaResolutionReCalculateTicketWise({
//                                                                                                                                     "id": data.ticketId
//                                                                                                                                 }, function (errSS, successSS, detailsSS) {
//                                                                                                                                     //logData('15')
//                                                                                                                                 });
//                                                                                                                                 insertLatestWFCClientResult({
//                                                                                                                                     "ticketId": data.ticketId
//                                                                                                                                 }, function (errET3, successET3, detailsET3) {
//                                                                                                                                     if (errET3 || !successET3) {
//                                                                                                                                         cb(null, true, 0);
//                                                                                                                                     } else {
//                                                                                                                                         cb(null, true, resultI.insertId);
//                                                                                                                                     }
//                                                                                                                                 })
    
//                                                                                                                             });
//                                                                                                                         }
//                                                                                                                     });
//                                                                                                                 });
    
//                                                                                                             } else {
//                                                                                                                 cb(null, false, "Some error occured");
//                                                                                                             }
//                                                                                                         }
//                                                                                                     })
//                                                                                                 } else {
//                                                                                                     var sql11 = " ";
//                                                                                                     var dataF = {
//                                                                                                         "clientId": results[0].CLIENTID,
//                                                                                                         "categoryId": results[0].FIELDVAL,
//                                                                                                         "workflowId": results[0].workflowId,
//                                                                                                         "work_flow_component_id": results[0].work_flow_component_id
//                                                                                                     };
//                                                                                                     getBackWorkFlowNotify(dataF, function (errF, successF, detailsF) {
//                                                                                                         util.logData('getBackWorkFlowNotify------------------------------' + JSON.stringify(detailsF))
//                                                                                                         util.logData('detailsF------------------------------' + detailsF)
//                                                                                                         util.logData('nxtAssign------------------------------' + nxtAssign)
//                                                                                                         util.logData('detailsIF------------------------------' + detailsIF)
//                                                                                                         results[0].flowIndicator = 'F';
//                                                                                                         //logData('detairesults[0].flowIndicator lsIF------------------------------' + results[0].flowIndicator)
//                                                                                                         if (detailsF == '5') {
//                                                                                                             //logData('********************detailsF == 3*************************')
    
//                                                                                                             if (results[0].flowIndicator == 'B') {
//                                                                                                                 sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " (select createor_support_grp_id from ticket where id = " + data.ticketId + ") supportGroupLevelId,categoryId " +
//                                                                                                                     " FROM WFCCLIENT where categoryId =" + results[0].FIELDVAL + " " +
//                                                                                                                     " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
//                                                                                                                     " AND CLIENTID = " + results[0].CLIENTID + " " +
//                                                                                                                     " AND DeleteFlag = '0' " +
//                                                                                                                     " and parent_wfcclient_id = " + results[0].wfcclient_id + " AND flowIndicator='B' order by id limit 1 ";
//                                                                                                             } else {
//                                                                                                                 sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " (select createor_support_grp_id from ticket where id = " + data.ticketId + ") supportGroupLevelId,categoryId,userId " +
//                                                                                                                     " FROM WFCCLIENT " +
//                                                                                                                     " where categoryId =" + results[0].FIELDVAL + " " +
//                                                                                                                     " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
//                                                                                                                     " AND CLIENTID = " + results[0].CLIENTID + " " +
//                                                                                                                     " AND DeleteFlag = '0' " +
//                                                                                                                     " AND flowIndicator='B' order by id limit 1 ";
//                                                                                                             }
    
    
//                                                                                                         } else if (detailsF == '3') {
//                                                                                                             //logData('********************detailsF == 3*************************')
//                                                                                                             if (results[0].flowIndicator == 'B') {
//                                                                                                                 sql11 = "SELECT id wfcclient_id_backId,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " supportGroupLevelId,categoryId,wfcclient_id id  ,userId" +
//                                                                                                                     " FROM WFCCLIENT_backward_ticketWise where categoryId =" + results[0].FIELDVAL + " " +
//                                                                                                                     " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
//                                                                                                                     " AND CLIENTID = " + results[0].CLIENTID + " " +
//                                                                                                                     " AND DeleteFlag = '0' " +
//                                                                                                                     " AND ticketId =" + data.ticketId + " " +
//                                                                                                                     " and wfcclient_id> " + results[0].wfcclient_id + "  order by id desc limit 1 ";
//                                                                                                             } else {
//                                                                                                                 sql11 = "SELECT id wfcclient_id_backId,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " supportGroupLevelId,categoryId,wfcclient_id id ,userId " +
//                                                                                                                     " FROM WFCCLIENT_backward_ticketWise a " +
//                                                                                                                     " where ticketId =" + data.ticketId + " " +
//                                                                                                                     " AND DeleteFlag = '0' and id not in (select max(id) from  WFCCLIENT_backward_ticketWise where ticketId =" + data.ticketId + ") " +
//                                                                                                                     " order by a.id desc limit 1 ";
    
//                                                                                                             }
//                                                                                                         } else if (detailsF == '4' || detailsF == '1' || nxtAssign == 0 || detailsIF == 0) {
//                                                                                                             //logData('********************detailsF == 4*************************'+detailsF)
//                                                                                                             if (results[0].flowIndicator == 'B') {
//                                                                                                                 sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " supportGroupLevelId,categoryId " +
//                                                                                                                     " FROM WFCCLIENT where categoryId =" + results[0].FIELDVAL + " " +
//                                                                                                                     " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
//                                                                                                                     " AND CLIENTID = " + results[0].CLIENTID + " " +
//                                                                                                                     " AND DeleteFlag = '0' " +
//                                                                                                                     " and parent_wfcclient_id = " + results[0].wfcclient_id + " AND flowIndicator='B' order by id limit 1 ";
//                                                                                                             } else {
//                                                                                                                 sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " supportGroupLevelId,categoryId,userId " +
//                                                                                                                     " FROM WFCCLIENT " +
//                                                                                                                     " where categoryId =" + results[0].FIELDVAL + " " +
//                                                                                                                     " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
//                                                                                                                     " AND CLIENTID = " + results[0].CLIENTID + " " +
//                                                                                                                     " AND DeleteFlag = '0' " +
//                                                                                                                     " AND flowIndicator='B' order by id limit 1 ";
//                                                                                                             }
//                                                                                                         } else {
//                                                                                                             //logData('*****************else**********************')
//                                                                                                             if (results[0].flowIndicator == 'B') {
//                                                                                                                 sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " supportGroupLevelId,categoryId " +
//                                                                                                                     " FROM WFCCLIENT where categoryId =" + results[0].FIELDVAL + " " +
//                                                                                                                     " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
//                                                                                                                     " AND CLIENTID = " + results[0].CLIENTID + " " +
//                                                                                                                     " AND DeleteFlag = '0' " +
//                                                                                                                     " and parent_wfcclient_id = " + results[0].wfcclient_id + " " +
//                                                                                                                     " AND flowIndicator='B' order by id limit 1 ";
//                                                                                                             } else {
//                                                                                                                 sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
//                                                                                                                     " supportGroupLevelId,categoryId,userId " +
//                                                                                                                     " FROM WFCCLIENT " +
//                                                                                                                     " where categoryId =" + results[0].FIELDVAL + " " +
//                                                                                                                     " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
//                                                                                                                     " AND CLIENTID = " + results[0].CLIENTID + " " +
//                                                                                                                     " AND DeleteFlag = '0' " +
//                                                                                                                     " and id  > (select max(id) from WFCCLIENT " +
//                                                                                                                     "                    where categoryId = " + results[0].FIELDVAL + "  and work_flow_component_id =  " + results[0].work_flow_component_id + "  " +
//                                                                                                                     "                    AND CLIENTID = " + results[0].CLIENTID + " AND DeleteFlag =  '0' " +
//                                                                                                                     "                    and supportGroupLevelId = (select supportGroupLevelId " +
//                                                                                                                     "                                                from WFCCLIENTRESULT where PKFIELDVAL=" + data.ticketId + " " +
//                                                                                                                     "                                                 and id = (select max(id) from WFCCLIENTRESULT " +
//                                                                                                                     "                                                      where PKFIELDVAL=" + data.ticketId + "))) " +
//                                                                                                                     " AND flowIndicator='B' order by id limit 1 ";
    
//                                                                                                             }
//                                                                                                         }
//                                                                                                         //logData('sql11--------------' + sql11)
//                                                                                                         con.query(sql11, function (err11, result11) {
//                                                                                                             if (err11) {
//                                                                                                                 logData(err11);
//                                                                                                                 cb(err11, null);
//                                                                                                             } else {
//                                                                                                                 //logData('result11-------------' + JSON.stringify(result11))
//                                                                                                                 var dataF = {
//                                                                                                                     "clientId": results[0].CLIENTID,
//                                                                                                                     "categoryId": results[0].FIELDVAL,
//                                                                                                                     "workflowId": 1, //result11[0].workflowId,
//                                                                                                                     "work_flow_component_id": results[0].work_flow_component_id
//                                                                                                                 };
//                                                                                                                 getBackWorkFlowNotify(dataF, function (errF, successF, detailsF) {
//                                                                                                                     //logData('detailsF-------------------' + detailsF)
//                                                                                                                     //logData('detailsIF-------------------' + detailsIF)
//                                                                                                                     if (results[0].tStatus == 'B') {
//                                                                                                                         usrId = data.user_id;
//                                                                                                                     } else {
//                                                                                                                         usrId = result11[0].userId;
//                                                                                                                     }
//                                                                                                                     if (detailsF == "3") {
//                                                                                                                         var dataU = {
//                                                                                                                             "id": data.ticketId
//                                                                                                                         };
//                                                                                                                         //logData('3333333333333333333333333-------------------')
//                                                                                                                         updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
//                                                                                                                             var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
//                                                                                                                                 " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
//                                                                                                                                 " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + result11[0].supportGroupLevelId + "'," +
//                                                                                                                                 " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + result11[0].userId + "," +
//                                                                                                                                 " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
//                                                                                                                             //logData('awsd--------------------------' + sql1)
//                                                                                                                             con.query(sql1, function (err1, result12) {
//                                                                                                                                 if (err1) {
//                                                                                                                                     logData(err1);
//                                                                                                                                     cb(err1, null);
//                                                                                                                                 } else {
    
//                                                                                                                                     // optimizedreport table starts
                                                                                                                                                
    
//                                                                                                                                     var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
//                                                                                                                                         + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
//                                                                                                                                         + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
//                                                                                                                                         + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
//                                                                                                                                         + " from USER where id =? "
//                                                                                                                                     console.log("---------98765--098", sql90);
//                                                                                                                                     con.query(sql90, [data.ticketId, result11[0].supportGroupLevelId, result11[0].userId, result11[0].userId, result11[0].userId], function (err, result55) {
//                                                                                                                                         if (err) {
//                                                                                                                                             console.log(err);
//                                                                                                                                         } else {
//                                                                                                                                             console.log(result55);
//                                                                                                                                             var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?,"
//                                                                                                                                                 + " current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
//                                                                                                                                                 + "all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=? "
//                                                                                                                                                 + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
//                                                                                                                                             // console.log("WS@###########################",result60[0].id);
//                                                                                                                                             con.query(sql44, [result11[0].supportGroupLevelId, result11[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
//                                                                                                                                                 console.log("%^&*(*&%^&*()(*&6595639586956------------->");
//                                                                                                                                                 if (err) {
//                                                                                                                                                     console.log("65342168451326854321698543216853241685426854", err);
//                                                                                                                                                     cb(err, null);
//                                                                                                                                                 } else {
//                                                                                                                                                     logData("_______________0945#$" + sql44);
//                                                                                                                                                     console.log(result77);
//                                                                                                                                                     cb(null, true, result77);
//                                                                                                                                                 }
//                                                                                                                                             })
//                                                                                                                                         }
//                                                                                                                                     });
    
//                                                                                                                                     // optimizedreport table ends
    
    
//                                                                                                                                     callStopSlaDtlsTicketWise({
//                                                                                                                                         "id": data.ticketId,
//                                                                                                                                         "user_id": data.createdBy,
//                                                                                                                                         "reqType": "",
//                                                                                                                                         "clientId": results[0].CLIENTID
//                                                                                                                                     }, function (errC, successC, detailsC) {
//                                                                                                                                         callforSlaResolutionReCalculateTicketWise({
//                                                                                                                                             "id": data.ticketId
//                                                                                                                                         }, function (errSS, successSS, detailsSS) {
//                                                                                                                                             //logData('15')
//                                                                                                                                         });
//                                                                                                                                         insertLatestWFCClientResult({
//                                                                                                                                             "ticketId": data.ticketId
//                                                                                                                                         }, function (errET3, successET3, detailsET3) {
//                                                                                                                                             if (errET3 || !successET3) {
//                                                                                                                                                 cb(null, true);
//                                                                                                                                             } else {
//                                                                                                                                                 cb(null, true);
//                                                                                                                                             }
//                                                                                                                                         })
    
//                                                                                                                                     });
    
//                                                                                                                                 }
//                                                                                                                             });
//                                                                                                                         });
    
//                                                                                                                     } else if (detailsF == "2") {
//                                                                                                                         //logData('2222222222222222222222-------------------')
//                                                                                                                         var usrId = "";
//                                                                                                                         if (results[0].tStatus == 'B') {
//                                                                                                                             usrId = data.user_id;
//                                                                                                                         } else {
//                                                                                                                             usrId = result11[0].userId;
//                                                                                                                         }
//                                                                                                                         var dataU = {
//                                                                                                                             "id": data.ticketId
//                                                                                                                         };
//                                                                                                                         //logData('222222222222222kkkkkkkkkkkkkkkkkkkkk-------------------')
//                                                                                                                         updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
//                                                                                                                             var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
//                                                                                                                                 " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
//                                                                                                                                 " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + result11[0].supportGroupLevelId + "'," +
//                                                                                                                                 " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + usrId + "," +
//                                                                                                                                 " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
//                                                                                                                             //logData('sql1----------------------' + sql1)
//                                                                                                                             con.query(sql1, function (err1, result12) {
//                                                                                                                                 if (err1) {
//                                                                                                                                     logData(err1);
//                                                                                                                                     cb(err1, null);
//                                                                                                                                 } else {
    
//                                                                                                                                     // optimizedreport table starts
    
//                                                                                                                                     var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name, "
//                                                                                                                                         + " coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',''),'') multiple_response_stop_datetime,"
//                                                                                                                                         + " coalesce(replace(group_concat(concat((?),'/')),',',''),'') multiple_response_stop_dsxcatetime,"
//                                                                                                                                         + " coalesce(replace(group_concat(concat((select a.name from USER a where id =?),'/')),',',''),'') multiple_response_stop_dkljatetime"
//                                                                                                                                         + "from USER where id = ?"
    
//                                                                                                                                     console.log("---------98765--123", sql90);
//                                                                                                                                     con.query(sql90, [data.ticketId, usrId, result11[0].supportGroupLevelId, usrId, usrId], function (err, result55) {
//                                                                                                                                         if (err) {
//                                                                                                                                             console.log(err);
//                                                                                                                                         } else {
//                                                                                                                                             console.log(result55);
//                                                                                                                                             var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
//                                                                                                                                                 + "all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=?,"
//                                                                                                                                                 + "ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
//                                                                                                                                             // console.log("WS@###########################",result60[0].id);
//                                                                                                                                             con.query(sql44, [result11[0].supportGroupLevelId, result11[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
//                                                                                                                                                 console.log("%^&*(*&%^&*()(*&6595639586956------------->");
//                                                                                                                                                 if (err) {
//                                                                                                                                                     console.log("65342168451326854321698543216853241685426854", err);
//                                                                                                                                                     cb(err, null);
//                                                                                                                                                 } else {
//                                                                                                                                                     logData("_______________145#$" + sql44);
//                                                                                                                                                     console.log(result77);
//                                                                                                                                                     cb(null, true, result77);
//                                                                                                                                                 }
//                                                                                                                                             })
//                                                                                                                                         }
//                                                                                                                                     });
//                                                                                                                                     // optimizedreport table ends
    
    
//                                                                                                                                     callStopSlaDtlsTicketWise({
//                                                                                                                                         "id": data.ticketId,
//                                                                                                                                         "user_id": data.createdBy,
//                                                                                                                                         "reqType": "",
//                                                                                                                                         "clientId": results[0].CLIENTID
//                                                                                                                                     }, function (errC, successC, detailsC) {
//                                                                                                                                         callforSlaResolutionReCalculateTicketWise({
//                                                                                                                                             "id": data.ticketId
//                                                                                                                                         }, function (errSS, successSS, detailsSS) {
//                                                                                                                                             //logData('15')
//                                                                                                                                         });
//                                                                                                                                         insertLatestWFCClientResult({
//                                                                                                                                             "ticketId": data.ticketId
//                                                                                                                                         }, function (errET3, successET3, detailsET3) {
//                                                                                                                                             if (errET3 || !successET3) {
//                                                                                                                                                 cb(null, true, 0);
//                                                                                                                                             } else {
//                                                                                                                                                 cb(null, true, resultI.insertId);
//                                                                                                                                             }
//                                                                                                                                         })
    
//                                                                                                                                     });
    
//                                                                                                                                 }
//                                                                                                                             });
//                                                                                                                         });
    
//                                                                                                                     } else if (detailsF == "4") {
//                                                                                                                         //logData('4444444444444444444444444444444-------------------')
//                                                                                                                         let sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket where id = " + results[0].PKFIELDVAL + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + results[0].PKFIELDVAL + " ";
//                                                                                                                         con.query(sqlB, function (errB, detailsB) {
//                                                                                                                             if (errB) {
//                                                                                                                                 logData(errB);
//                                                                                                                                 cb(errB, null);
//                                                                                                                             } else {
//                                                                                                                                 if (detailsB.length > 0) {
//                                                                                                                                     var dataU = {
//                                                                                                                                         "id": data.ticketId
//                                                                                                                                     };
//                                                                                                                                     updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
//                                                                                                                                         var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
//                                                                                                                                             " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
//                                                                                                                                             " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + detailsB[0].supportGroupLevelId + "'," +
//                                                                                                                                             " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
//                                                                                                                                             " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
//                                                                                                                                         con.query(sql1, function (err1, result12) {
//                                                                                                                                             if (err1) {
//                                                                                                                                                 logData(err1);
//                                                                                                                                                 cb(err1, null);
//                                                                                                                                             } else {
    
//                                                                                                                                                 // optimizedreport table starts
    
//                                                                                                                                                 var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
//                                                                                                                                                     + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
//                                                                                                                                                     + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
//                                                                                                                                                     + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
//                                                                                                                                                     + " from USER where id = ?"
//                                                                                                                                                 console.log("---------98765--11223", sql90);
//                                                                                                                                                 con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
//                                                                                                                                                     if (err) {
//                                                                                                                                                         console.log(err);
//                                                                                                                                                     } else {
//                                                                                                                                                         console.log(result55);
//                                                                                                                                                         var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
//                                                                                                                                                             + "all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?,"
//                                                                                                                                                             + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
//                                                                                                                                                         // console.log("WS@###########################",result60[0].id);
//                                                                                                                                                         con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
//                                                                                                                                                             console.log("%^&*(*&%^&*()(*&6595639586956------------->");
//                                                                                                                                                             if (err) {
//                                                                                                                                                                 console.log("65342168451326854321698543216853241685426854", err);
//                                                                                                                                                                 cb(err, null);
//                                                                                                                                                             } else {
//                                                                                                                                                                 logData("_______________14qw5#$" + sql44);
//                                                                                                                                                                 console.log(result77);
//                                                                                                                                                                 cb(null, true, result77);
//                                                                                                                                                             }
//                                                                                                                                                         })
//                                                                                                                                                     }
//                                                                                                                                                 });
    
//                                                                                                                                                 // optimizedreport table ends
    
    
//                                                                                                                                                 callStopSlaDtlsTicketWise({
//                                                                                                                                                     "id": data.ticketId,
//                                                                                                                                                     "user_id": data.createdBy,
//                                                                                                                                                     "reqType": "",
//                                                                                                                                                     "clientId": results[0].CLIENTID
//                                                                                                                                                 }, function (errC, successC, detailsC) {
//                                                                                                                                                     callforSlaResolutionReCalculateTicketWise({
//                                                                                                                                                         "id": data.ticketId
//                                                                                                                                                     }, function (errSS, successSS, detailsSS) {
//                                                                                                                                                         //logData('15')
//                                                                                                                                                     });
//                                                                                                                                                     insertLatestWFCClientResult({
//                                                                                                                                                         "ticketId": data.ticketId
//                                                                                                                                                     }, function (errET3, successET3, detailsET3) {
//                                                                                                                                                         if (errET3 || !successET3) {
//                                                                                                                                                             cb(null, true);
//                                                                                                                                                         } else {
//                                                                                                                                                             cb(null, true);
//                                                                                                                                                         }
//                                                                                                                                                     })
    
//                                                                                                                                                 });
    
//                                                                                                                                             }
//                                                                                                                                         });
//                                                                                                                                     });
    
//                                                                                                                                 } else {
//                                                                                                                                     cb(null, false, "Some error occured");
//                                                                                                                                 }
//                                                                                                                             }
//                                                                                                                         })
//                                                                                                                     } else if (detailsF == "1" || detailsIF == 0) {
//                                                                                                                         //logData('111111111111111111111111-------------------')
//                                                                                                                         let sqlB = "";
//                                                                                                                         if (data.ticket_type_seq != 1)
//                                                                                                                             sqlB = "SELECT createbyid, supportGroupLevelId FROM ticket where id = " + results[0].PKFIELDVAL + " ";
//                                                                                                                         else
//                                                                                                                             sqlB = "SELECT createbyid, createor_support_grp_id supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
//                                                                                                                         // sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket where id = " + results[0].PKFIELDVAL + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + results[0].PKFIELDVAL + " ";
//                                                                                                                         con.query(sqlB, function (errB, detailsB) {
//                                                                                                                             if (errB) {
//                                                                                                                                 logData(errB);
//                                                                                                                                 cb(errB, null);
//                                                                                                                             } else {
//                                                                                                                                 if (detailsB.length > 0) {
//                                                                                                                                     var dataU = {
//                                                                                                                                         "id": data.ticketId
//                                                                                                                                     };
//                                                                                                                                     updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
//                                                                                                                                         var sql1q = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
//                                                                                                                                             " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
//                                                                                                                                             " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + detailsB[0].supportGroupLevelId + "'," +
//                                                                                                                                             " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
//                                                                                                                                             " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
//                                                                                                                                         con.query(sql1q, function (err1, result12) {
//                                                                                                                                             if (err1) {
//                                                                                                                                                 logData(err1);
//                                                                                                                                                 cb(err1, null);
//                                                                                                                                             } else {
    
//                                                                                                                                                 // optimizedreport table starts
    
//                                                                                                                                                 var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
//                                                                                                                                                     + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
//                                                                                                                                                     + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
//                                                                                                                                                     + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
//                                                                                                                                                     + " from USER where id =? "
//                                                                                                                                                 console.log("---------98765--123", sql90);
//                                                                                                                                                 con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
//                                                                                                                                                     if (err) {
//                                                                                                                                                         console.log(err);
//                                                                                                                                                     } else {
//                                                                                                                                                         console.log(result55);
//                                                                                                                                                         var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
//                                                                                                                                                             + "all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?,"
//                                                                                                                                                             + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
//                                                                                                                                                         // console.log("WS@###########################",result60[0].id);
//                                                                                                                                                         con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
//                                                                                                                                                             console.log("%^&*(*&%^&*()(*&6595639586956------------->");
//                                                                                                                                                             if (err) {
//                                                                                                                                                                 console.log("65342168451326854321698543216853241685426854", err);
//                                                                                                                                                                 cb(err, null);
//                                                                                                                                                             } else {
//                                                                                                                                                                 logData("_______________123#$" + sql44);
//                                                                                                                                                                 console.log(result77);
//                                                                                                                                                                 cb(null, true, result77);
//                                                                                                                                                             }
//                                                                                                                                                         })
//                                                                                                                                                     }
//                                                                                                                                                 });
    
//                                                                                                                                                 // optimizedreport table ends
                                                                                                                                                
//                                                                                                                                                 callStopSlaDtlsTicketWise({
//                                                                                                                                                     "id": data.ticketId,
//                                                                                                                                                     "user_id": data.createdBy,
//                                                                                                                                                     "reqType": "",
//                                                                                                                                                     "clientId": results[0].CLIENTID
//                                                                                                                                                 }, function (errC, successC, detailsC) {
//                                                                                                                                                     callforSlaResolutionReCalculateTicketWise({
//                                                                                                                                                         "id": data.ticketId
//                                                                                                                                                     }, function (errSS, successSS, detailsSS) {
//                                                                                                                                                         //logData('15')
//                                                                                                                                                     });
//                                                                                                                                                     insertLatestWFCClientResult({
//                                                                                                                                                         "ticketId": data.ticketId
//                                                                                                                                                     }, function (errET3, successET3, detailsET3) {
//                                                                                                                                                         if (errET3 || !successET3) {
//                                                                                                                                                             cb(null, true);
//                                                                                                                                                         } else {
//                                                                                                                                                             cb(null, true);
//                                                                                                                                                         }
//                                                                                                                                                     })
    
//                                                                                                                                                 });
    
//                                                                                                                                             }
//                                                                                                                                         });
//                                                                                                                                     });
    
//                                                                                                                                 } else {
//                                                                                                                                     cb(null, false, "Some error occured");
//                                                                                                                                 }
//                                                                                                                             }
//                                                                                                                         })
//                                                                                                                     } else {
//                                                                                                                         //logData('2222222222222222222222-------------------')
//                                                                                                                         var usrId = "";
//                                                                                                                         if (results[0].tStatus == 'B') {
//                                                                                                                             usrId = data.user_id;
//                                                                                                                         } else {
//                                                                                                                             usrId = result11[0].userId;
//                                                                                                                         }
//                                                                                                                         var dataU = {
//                                                                                                                             "id": data.ticketId
//                                                                                                                         };
//                                                                                                                         //logData('222222222222222kkkkkkkkkkkkkkkkkkkkk-------------------')
//                                                                                                                         updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
//                                                                                                                             var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
//                                                                                                                                 " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
//                                                                                                                                 " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + result11[0].supportGroupLevelId + "'," +
//                                                                                                                                 " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + usrId + "," +
//                                                                                                                                 " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
//                                                                                                                             //logData('sql1----------------------' + sql1)
//                                                                                                                             con.query(sql1, function (err1, result12) {
//                                                                                                                                 if (err1) {
//                                                                                                                                     logData(err1);
//                                                                                                                                     cb(err1, null);
//                                                                                                                                 } else {
    
//                                                                                                                                     // optimizedreport table starts
    
//                                                                                                                                     var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
//                                                                                                                                     + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
//                                                                                                                                     + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
//                                                                                                                                     + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
//                                                                                                                                     + " from USER where id =?"
//                                                                                                                                 console.log("---------98765--34", sql90);
//                                                                                                                                 con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, usrId, usrId, usrId], function (err, result55) {
//                                                                                                                                     if (err) {
//                                                                                                                                         console.log(err);
//                                                                                                                                     } else {
//                                                                                                                                         console.log(result55);
//                                                                                                                                         var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?,"
//                                                                                                                                             + " current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
//                                                                                                                                             + "all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?"
//                                                                                                                                             + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
//                                                                                                                                         // console.log("WS@###########################",result60[0].id);
//                                                                                                                                         con.query(sql44, [result11[0].supportGroupLevelId, result11[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
//                                                                                                                                             console.log("%^&*(*&%^&*()(*&6595639586956------------->");
//                                                                                                                                             if (err) {
//                                                                                                                                                 console.log("65342168451326854321698543216853241685426854", err);
//                                                                                                                                                 cb(err, null);
//                                                                                                                                             } else {
//                                                                                                                                                 logData("_______________56#$" + sql44);
//                                                                                                                                                 console.log(result77);
//                                                                                                                                                 cb(null, true, result77);
//                                                                                                                                             }
//                                                                                                                                         })
//                                                                                                                                     }
//                                                                                                                                 });
    
//                                                                                                                                 // optimizedreport table ends
    
//                                                                                                                                     callStopSlaDtlsTicketWise({
//                                                                                                                                         "id": data.ticketId,
//                                                                                                                                         "user_id": data.createdBy,
//                                                                                                                                         "reqType": "",
//                                                                                                                                         "clientId": results[0].CLIENTID
//                                                                                                                                     }, function (errC, successC, detailsC) {
//                                                                                                                                         callforSlaResolutionReCalculateTicketWise({
//                                                                                                                                             "id": data.ticketId
//                                                                                                                                         }, function (errSS, successSS, detailsSS) {
//                                                                                                                                             //logData('15')
//                                                                                                                                         });
//                                                                                                                                         insertLatestWFCClientResult({
//                                                                                                                                             "ticketId": data.ticketId
//                                                                                                                                         }, function (errET3, successET3, detailsET3) {
//                                                                                                                                             if (errET3 || !successET3) {
//                                                                                                                                                 cb(null, true, 0);
//                                                                                                                                             } else {
//                                                                                                                                                 cb(null, true, resultI.insertId);
//                                                                                                                                             }
//                                                                                                                                         })
    
//                                                                                                                                     });
    
//                                                                                                                                 }
//                                                                                                                             });
//                                                                                                                         });
    
//                                                                                                                     }
//                                                                                                                 });
//                                                                                                             }
//                                                                                                         });
    
//                                                                                                     });
//                                                                                                 }
//                                                                                             });
//                                                                                         }
//                                                                                     })
    
//                                                                                 }
//                                                                             }
//                                                                         });
//                                                                     }
//                                                                 });
//                                                             }
//                                                         });
//                                                     });
//                                                 }
    
//                                             }
//                                         });
//                                     }
//                                 })
//                             } else {
//                                 cb(null, false, detailsTGS);
//                             }
//                         }
//                     })
//                 }
//             }
//         })
//     }
    

function submitSolutionsTicketWise(data, cb) {
    // util.logData('\n\naaaaaaaaaaaaaaaaaaaaa------------------' + JSON.stringify(data))
    console.log("INSIDE SUBMIT SOLUTION TICKET WISE ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
    data.solutions = con.escape(data.solutions);
    checkIsSlaCalculationDone({"id": data.ticketId}, function (errISC, successISC, resultsISC) {
        if (errISC) {
            logData(errISC);
            cb(errISC, null);
        } else {
            // logData('submitSolutionsTicketWise-----successISC-----------' + successISC)
            if (!successISC) {
                cb(null, false, resultsISC);
            } else {
                isTicketGetResolvedStatus(data, function (errTGS, successTGS, detailsTGS) {
                    if (errTGS) {
                        logData(errTGS);
                        cb(errTGS, null);
                    } else {
                        if (successTGS) {
                            getNextAssigneeDtls({
                                "clientId": data.clientId,
                                "id": data.ticketId
                            }, function (errNA, successNA, detailsNA) {
                                if (errNA || !successNA) {
                                    cb(null, false, "Internal Error: You are unable to provide solution");
                                } else {
                                    //logData(JSON.stringify(successNA) + '\n\nbbbbbbbbbbbbbbbbbbbbbbbb' + JSON.stringify(detailsNA))
                                    let nxtAssign = detailsNA.length;
                                    let sql = "Insert into ticketSolutions (ticketId,WFCClientResultId,solutions,rca,createbyid) values(" + data.ticketId + "," + data.WFCClientResultId + "," + data.solutions + ",'" + data.rca + "'," + data.createdBy + ")";
                                    //logData('\n\nccccccccccc--------------' + sql)
                                    con.query(sql, function (err1, resultI) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            // optimizedreport table starts

                                            var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,(select count(*) from ticketSolutions where ticketId=?) resolution_count,login_name,name,"
                                                + "(select (coalesce(replace(group_concat(concat(date_format (ADDTIME(createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',',' / '),'')) from ticketSolutions where ticketId=?) solution_date_only,"
                                                + "(select (TIME_FORMAT(TIMEDIFF(COALESCE(at.createdate,NOW()), t.createdate),'%H:%i:%s')) from ticketSolutions at, ticket t where at.ticketId = t.id and ticketId=? order by t.id desc limit 1) diff,"
                                                + "(select (date_format (ADDTIME(max(createdate), '5:30:0.000000'),'%d-%M-%Y %T')) from ticketSolutions where ticketId=?) max_sol_dt,"
                                                + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                + " from USER where id =? "
                                            console.log("---------653464--", sql90);
                                            //   console.log("4444444",resultI[0].solutions);
                                            con.query(sql90, [data.ticketId, data.ticketId, data.ticketId, data.ticketId, data.ticketId, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                                                if (err) {
                                                    console.log(err);
                                                } else {
                                                    logData("____________+++++++++++++>>" + result55);
                                                    console.log("222222222", result55);
                                                    var sql44 = "update optimizedreport set  solution_desc=?,solution_provided_by=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                        + "all_analyst_ps= ?,first_resolution_dt=?,all_resolution_dt=?,all_analyst_name=?,resolution_count =?,ticket_ageing=?,"
                                                        + "ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                    // console.log("WS@###########################",result60[0].id);
                                                    con.query(sql44, [data.solutions, result55[0].name, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].max_sol_dt, result55[0].solution_date_only, result55[0].l_name, result55[0].resolution_count, result55[0].diff, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                        console.log("%^&*(*&%^&*(**())(*&6595639586956------------->" + sql44);
                                                        if (err) {
                                                            console.log("65342168451326854321698543216853241685426854", err);
                                                            cb(err, null);
                                                        } else {
                                                            logData("_______________2345#$" + sql44);
                                                            console.log("solution----------------",result77);
                                                            cb(null, true, result77);
                                                        }
                                                    })
                                                }
                                            });

                                            // optimizedreport table ends

                                            if (resultI.insertId === 0) {
                                                cb(null, false, "Data is not updated successfully");
                                            } else {
                                                var fldS = {
                                                    "user_id": data.createdBy,
                                                    "ticket_type_seq": data.ticket_type_seq,
                                                    "seq_no": data.seq_no,
                                                    "ticketId": data.ticketId
                                                };
                                                getResolveId(fldS, function (errS, successS, detailsS) {
                                                    //logData('\n\neeeeeeeeeee--------------' + JSON.stringify(detailsS))
                                                    let sqlT = "Update ticket set tstatus=" + detailsS + " , modifybyid=" + data.createdBy + ", modifydate=CURRENT_TIMESTAMP where id = " + data.ticketId + "";
                                                    con.query(sqlT, function (errT, resultT) {
                                                        if (errT) {
                                                            logData(errT);
                                                            cb(errT, null);
                                                        } else {
                                                            var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,ticketSolutionId ) " +
                                                                " VALUES (" + data.ticketId + ",8," + data.WFCClientResultId + "," + data.createdBy + "," + resultI.insertId + ") ";
                                                            con.query(sql5, function (err5, result5) {
                                                                if (err5) {
                                                                    logData(err5);
                                                                    cb(err5, null);
                                                                } else {
                                                                    /**************************************************************************************************************************/

                                                                    // updateFollowUpReceivedDtls({
                                                                    //     "ticketId": data.ticketId,
                                                                    //     "actionId": 15,
                                                                    //     "wfcClientResultId": data.WFCClientResultId,
                                                                    //     "userId": data.createdBy
                                                                    // }, function (errFRD, successFRD, detailsFRD) {
                                                                    //
                                                                    // })
                                                                    let actionLt = [12, 15, 24, 25];
                                                                    for (let k = 0; k < actionLt.length; k++) {
                                                                        updateFollowUpReceivedDtls({
                                                                            "ticketId": data.ticketId,
                                                                            "actionId": actionLt[k],
                                                                            "wfcClientResultId": data.WFCClientResultId,
                                                                            "userId": data.createdBy
                                                                        }, function (errFRD, successFRD, detailsFRD) {

                                                                        })
                                                                    }
                                                                    /**************************************************************************************************************************/


                                                                    request
                                                                        .get(SLA_URL + '/slaCalculation_ticketwise_closure?ticketId=' + data.ticketId + '&client_id=' + data.clientId)
                                                                        .end((err, resp) => {
                                                                            if (err) {
                                                                                logData(err);
                                                                            } else {
//logData('done---resp--' + JSON.stringify(resp))
                                                                            }
                                                                        });
                                                                    request
                                                                    // .get(MAIL_URL + '/sendemailOther?ticketId=' + data.ticketId + '&notifyType=email')
                                                                        .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=1&actionID=&actionData=')
                                                                        .end((err, resp) => {
                                                                            if (err) {
                                                                                logData(err);
                                                                            } else {
                                                                                //logData('done---resp--' + JSON.stringify(resp))
                                                                            }
                                                                        });
                                                                    geUserDtls({"user_id": data.createdBy}, function (errUD, successUD, detailsUD) {
                                                                        if (socket) {
                                                                            socket.emit('solProvd', {
                                                                                ticketId: data.ticketId,
                                                                                name: detailsUD[0].NAME,
                                                                                solutions: data.solutions,
                                                                                date: detailsUD[0].solTime
                                                                            })
                                                                        }
                                                                        geUserDtlsTicketWise({
                                                                            "WFCClientResultId": data.WFCClientResultId,
                                                                            "id": data.ticketId
                                                                        }, function (errTD, successTD, resultsTD) {
                                                                            if (errTD) {
                                                                                logData(errTD);
                                                                                cb(errTD, null);
                                                                            } else {
                                                                                if (successTD) {
                                                                                    if (socket) {
                                                                                        let sql2 = "select ticketTypeId from ticket where id=?";
                                                                                        con.query(sql2, [data.ticketId], function (err, res) {
                                                                                            if (err) {
                                                                                                logData(err);
                                                                                            } else {
                                                                                                if (res.length > 0) {
                                                                                                    let val1 = {
                                                                                                        ticketId: data.ticketId,
                                                                                                        clientId: data.clientId,
                                                                                                        ticketTypeId: res[0].ticketTypeId
                                                                                                    };
                                                                                                    getNotificationMenuIdTicketStatusWise(val1, function (err111, success111, details111) {

                                                                                                    });
                                                                                                }
                                                                                            }
                                                                                        })

                                                                                        // socket.emit('dashboard', {
                                                                                        //     menuId: 3,
                                                                                        //     ticketId: data.ticketId,
                                                                                        //     clientId: data.clientId,
                                                                                        //     ticketTypeId: resultsTD[0].ticketTypeId
                                                                                        // });
                                                                                        // socket.emit('dashboard', {
                                                                                        //     menuId: 2,
                                                                                        //     ticketId: data.ticketId,
                                                                                        //     clientId: data.clientId,
                                                                                        //     ticketTypeId: resultsTD[0].ticketTypeId
                                                                                        // });
                                                                                        // socket.emit('dashboard', {
                                                                                        //     menuId: 51,
                                                                                        //     ticketId: data.ticketId,
                                                                                        //     clientId: data.clientId,
                                                                                        //     ticketTypeId: resultsTD[0].ticketTypeId
                                                                                        // });
                                                                                        // socket.emit('dashboard', {
                                                                                        //     menuId: 41,
                                                                                        //     ticketId: data.ticketId,
                                                                                        //     clientId: data.clientId,
                                                                                        //     ticketTypeId: resultsTD[0].ticketTypeId
                                                                                        // });
                                                                                        // socket.emit('dashboard', {
                                                                                        //     menuId: 21,
                                                                                        //     ticketId: data.ticketId,
                                                                                        //     clientId: data.clientId,
                                                                                        //     ticketTypeId: resultsTD[0].ticketTypeId
                                                                                        // });
                                                                                    }
                                                                                }
                                                                            }
                                                                        })
                                                                    })
                                                                    //mona
                                                                    //logData('\n\nfffffffffffffff--------------' + JSON.stringify(result5))
                                                                    if (data.ticket_type_seq && data.ticket_type_seq != null && (data.ticket_type_seq == 2 || data.ticket_type_seq == 3 || data.ticket_type_seq == 4)) {
                                                                        var fldIFS = {
                                                                            //"status_seq": 103,
                                                                            "status_seq": 22,
                                                                            "ticketId": data.ticketId,
                                                                            "user_id": data.createdBy,
                                                                            "clientId": data.clientId
                                                                        };
                                                                        util.logData('changeIncidentTicketStatusForProblem=================' + JSON.stringify(fldIFS));
                                                                        changeIncidentTicketStatusForProblem(fldIFS, function (errIFS, successIFS, detailsIFS) {

                                                                            updateIncdntTcktStusForProbWthSoln({"ticketId": data.ticketId}, function (errPIU, successPIU, detailsPIU) {

                                                                            })
                                                                        })
                                                                    }
                                                                    let str = "SELECT CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD," +
                                                                        " serial_no, END_INDICATOR, user_id, frw_user_id, category_id,tStatus " +
                                                                        " ,1 workflowId " +
                                                                        // "  , (SELECT workflowId FROM WFCCLIENT where id = a.wfcclient_id) workflowId " +
                                                                        " , (select isDeviation from ticket where id =" + data.ticketId + " ) isDeviation " +
                                                                        " ,if((select count(*) from TICKETATTRIBUTES where DeleteFlag='0' and ATTRID=2 and sequence_no in ( 2,103,302,402) and id=(select tstatus from ticket where id =" + data.ticketId + ")>0), 'B','F') flowIndicator " +
                                                                        " FROM WFCCLIENTRESULT a " +
                                                                        " where PKFIELDVAL = " + data.ticketId + " and END_INDICATOR=0  order by id desc limit 1 ";
                                                                    //logData('\n\ngggggggggggg-------results-------' + str)
                                                                    con.query(str, function (errs, results) {
                                                                        if (errs) {
                                                                            logData(errs);
                                                                            cb(errs, null);
                                                                        } else {
                                                                            if (results == null || results.length == 0) {
                                                                                cb(null, false, "Data not found.");
                                                                            } else {
                                                                                //logData('results------------------------------@@@@@@@@@@@@-----' + JSON.stringify(results))
                                                                                var fldS = {
                                                                                    "user_id": data.createdBy,
                                                                                    "ticket_type_seq": data.ticket_type_seq,
                                                                                    "fldS": data.fldS,
                                                                                    "seq_no": data.seq_no,
                                                                                    "ticketId": data.ticketId
                                                                                };
                                                                                var fldIF = {
                                                                                    "FIELDVAL": results[0].FIELDVAL,
                                                                                    "work_flow_component_id": results[0].work_flow_component_id,
                                                                                    "CLIENTID": results[0].CLIENTID,
                                                                                    "ticket_type_seq": data.ticket_type_seq,
                                                                                    "ticketId": data.ticketId
                                                                                };

                                                                                isThisLastStageWorkFlow(fldIF, function (errIF, successIF, detailsIF) {
                                                                                    if (errIF || !successIF) {
                                                                                        logData(errIF + successIF);
                                                                                        cb(errIF, null);
                                                                                    } else {
                                                                                        logData('\n\n  detailsIF------############-------------' + JSON.stringify(detailsIF))
                                                                                        getResolveId(fldS, function (errS, successS, detailsS) {
                                                                                            if (results[0].isDeviation == 'true') {
                                                                                                var fldC = {
                                                                                                    "id": data.ticketId
                                                                                                };
                                                                                                getCreaterDetail(fldC, function (errC, successC, detailsC) {
                                                                                                    if (detailsC.length > 0) {
                                                                                                        var fldS = {
                                                                                                            "user_id": data.createdBy,
                                                                                                            "ticket_type_seq": data.ticket_type_seq,
                                                                                                            "seq_no": data.seq_no,
                                                                                                            "ticketId": data.ticketId
                                                                                                        };
                                                                                                        getResolveId(fldS, function (errS, successS, detailsS) {
                                                                                                            var fld = {
                                                                                                                "clientId": detailsC[0].CLIENTID,
                                                                                                                "user_id": detailsC[0].createbyid,
                                                                                                                "frw_user_id": data.createdBy,
                                                                                                                "work_flow_component_id": detailsC[0].work_flow_component_id,
                                                                                                                "wfcclient_id": detailsC[0].wfcclient_id,
                                                                                                                "supportGroupLevelId": detailsC[0].createor_support_grp_id,
                                                                                                                "PKFIELDVAL": data.ticketId,
                                                                                                                "FIELDVAL": detailsC[0].FIELDVAL,
                                                                                                                "category_id": detailsC[0].category_id,
                                                                                                                "tStatus_cd": detailsS,//detailsC[0].tStatus,
                                                                                                                "createdBy": data.createdBy,
                                                                                                                "is_1st_entry": 'N',
                                                                                                                "reopen": 0
                                                                                                            };
                                                                                                            generateWorkFlow(fld, function (err, success, details) {
                                                                                                                if (details > 0) {
                                                                                                                    callStopSlaDtlsTicketWise({
                                                                                                                        "id": data.ticketId,
                                                                                                                        "user_id": data.createdBy,
                                                                                                                        "reqType": "",
                                                                                                                        "clientId": detailsC[0].CLIENTID
                                                                                                                    }, function (errC, successC, detailsC) {
                                                                                                                        callforSlaResolutionReCalculateTicketWise({
                                                                                                                            "id": data.ticketId
                                                                                                                        }, function (errSS, successSS, detailsSS) {
                                                                                                                            //logData('15')
                                                                                                                        });
                                                                                                                        cb(null, true);
                                                                                                                    });

                                                                                                                } else {
                                                                                                                    cb(null, false, "Some error occured");
                                                                                                                }
                                                                                                            });
                                                                                                        });

                                                                                                    } else {
                                                                                                        cb(null, false, "Some error occured");
                                                                                                    }
                                                                                                });
                                                                                            } else if (detailsIF == 0) {
                                                                                                //logData('********************************detailsIF*********************************')
                                                                                                let sqlB = "";
                                                                                                if (data.ticket_type_seq != 1) {
                                                                                                    sqlB = "SELECT createbyid, supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
                                                                                                } else {
                                                                                                    sqlB = "SELECT createbyid, createor_support_grp_id supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
                                                                                                    // sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket " +
                                                                                                    //     " where id = " + data.ticketId + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
                                                                                                }
                                                                                                // logData('sqlB ----------sqlB------------' + sqlB)
                                                                                                con.query(sqlB, function (errB, detailsB) {
                                                                                                    if (errB) {
                                                                                                        logData(errB);
                                                                                                        cb(errB, null);
                                                                                                    } else {
                                                                                                        if (detailsB.length > 0) {
                                                                                                            updateWFCResultForDispatch({"id": data.ticketId}, function (errU, successU, resultsU) {
                                                                                                                var sql12 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                                                    " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus ) values " +
                                                                                                                    " (" + results[0].CLIENTID + "," + results[0].work_flow_component_id + ",0,'" + detailsB[0].supportGroupLevelId + "'," +
                                                                                                                    " " + data.ticketId + "," + results[0].FIELDVAL + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
                                                                                                                    " " + results[0].category_id + "," + data.createdBy + "," + results[0].tStatus + " ) ";
                                                                                                                //logData('sql12 ----------sql12------------' + sql12)
                                                                                                                con.query(sql12, function (err12, result12) {
                                                                                                                    if (err12) {
                                                                                                                        logData(err12);
                                                                                                                        cb(err12, null);
                                                                                                                    } else {

                                                                                                                        // optimizedreport table starts

                                                                                                                        
                                                                                                                        var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                            + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
                                                                                                                            + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                                                            + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                                                            + " from USER where id = ?"
                                                                                                                        console.log("---------98765--", sql90);
                                                                                                                        con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
                                                                                                                            if (err) {
                                                                                                                                console.log(err);
                                                                                                                            } else {
                                                                                                                                console.log(result55);
                                                                                                                                var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                                                    + "all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=?,"
                                                                                                                                    + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                                                // console.log("WS@###########################",result60[0].id);
                                                                                                                                con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                                                    console.log("%^&*(*&%^&*()(*&6595639586956------------->");
                                                                                                                                    if (err) {
                                                                                                                                        console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                        cb(err, null);
                                                                                                                                    } else {
                                                                                                                                        logData("_______________45#$" + sql44);
                                                                                                                                        console.log(result77);
                                                                                                                                        cb(null, true, result77);
                                                                                                                                    }
                                                                                                                                })
                                                                                                                            }
                                                                                                                        });

                                                                                                                        // optimizedreport table ends


                                                                                                                        callStopSlaDtlsTicketWise({
                                                                                                                            "id": data.ticketId,
                                                                                                                            "user_id": data.createdBy,
                                                                                                                            "reqType": "",
                                                                                                                            "clientId": results[0].CLIENTID
                                                                                                                        }, function (errC, successC, detailsC) {
                                                                                                                            callforSlaResolutionReCalculateTicketWise({
                                                                                                                                "id": data.ticketId
                                                                                                                            }, function (errSS, successSS, detailsSS) {
                                                                                                                                //logData('15')
                                                                                                                            });
                                                                                                                            insertLatestWFCClientResult({
                                                                                                                                "ticketId": data.ticketId
                                                                                                                            }, function (errET3, successET3, detailsET3) {
                                                                                                                                if (errET3 || !successET3) {
                                                                                                                                    cb(null, true, 0);
                                                                                                                                } else {
                                                                                                                                    cb(null, true, resultI.insertId);
                                                                                                                                }
                                                                                                                            })

                                                                                                                        });
                                                                                                                    }
                                                                                                                });
                                                                                                            });

                                                                                                        } else {
                                                                                                            cb(null, false, "Some error occured");
                                                                                                        }
                                                                                                    }
                                                                                                })
                                                                                            } else {
                                                                                                var sql11 = " ";
                                                                                                var dataF = {
                                                                                                    "clientId": results[0].CLIENTID,
                                                                                                    "categoryId": results[0].FIELDVAL,
                                                                                                    "workflowId": results[0].workflowId,
                                                                                                    "work_flow_component_id": results[0].work_flow_component_id
                                                                                                };
                                                                                                getBackWorkFlowNotify(dataF, function (errF, successF, detailsF) {
                                                                                                    util.logData('getBackWorkFlowNotify------------------------------' + JSON.stringify(detailsF))
                                                                                                    util.logData('detailsF------------------------------' + detailsF)
                                                                                                    util.logData('nxtAssign------------------------------' + nxtAssign)
                                                                                                    util.logData('detailsIF------------------------------' + detailsIF)
                                                                                                    results[0].flowIndicator = 'F';
                                                                                                    //logData('detairesults[0].flowIndicator lsIF------------------------------' + results[0].flowIndicator)
                                                                                                    if (detailsF == '5') {
                                                                                                        //logData('********************detailsF == 3*************************')

                                                                                                        if (results[0].flowIndicator == 'B') {
                                                                                                            sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " (select createor_support_grp_id from ticket where id = " + data.ticketId + ") supportGroupLevelId,categoryId " +
                                                                                                                " FROM WFCCLIENT where categoryId =" + results[0].FIELDVAL + " " +
                                                                                                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                                                                " AND CLIENTID = " + results[0].CLIENTID + " " +
                                                                                                                " AND DeleteFlag = '0' " +
                                                                                                                " and parent_wfcclient_id = " + results[0].wfcclient_id + " AND flowIndicator='B' order by id limit 1 ";
                                                                                                        } else {
                                                                                                            sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " (select createor_support_grp_id from ticket where id = " + data.ticketId + ") supportGroupLevelId,categoryId,userId " +
                                                                                                                " FROM WFCCLIENT " +
                                                                                                                " where categoryId =" + results[0].FIELDVAL + " " +
                                                                                                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                                                                " AND CLIENTID = " + results[0].CLIENTID + " " +
                                                                                                                " AND DeleteFlag = '0' " +
                                                                                                                " AND flowIndicator='B' order by id limit 1 ";
                                                                                                        }


                                                                                                    } else if (detailsF == '3') {
                                                                                                        //logData('********************detailsF == 3*************************')
                                                                                                        if (results[0].flowIndicator == 'B') {
                                                                                                            sql11 = "SELECT id wfcclient_id_backId,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " supportGroupLevelId,categoryId,wfcclient_id id  ,userId" +
                                                                                                                " FROM WFCCLIENT_backward_ticketWise where categoryId =" + results[0].FIELDVAL + " " +
                                                                                                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                                                                " AND CLIENTID = " + results[0].CLIENTID + " " +
                                                                                                                " AND DeleteFlag = '0' " +
                                                                                                                " AND ticketId =" + data.ticketId + " " +
                                                                                                                " and wfcclient_id> " + results[0].wfcclient_id + "  order by id desc limit 1 ";
                                                                                                        } else {
                                                                                                            sql11 = "SELECT id wfcclient_id_backId,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " supportGroupLevelId,categoryId,wfcclient_id id ,userId " +
                                                                                                                " FROM WFCCLIENT_backward_ticketWise a " +
                                                                                                                " where ticketId =" + data.ticketId + " " +
                                                                                                                " AND DeleteFlag = '0' and id not in (select max(id) from  WFCCLIENT_backward_ticketWise where ticketId =" + data.ticketId + ") " +
                                                                                                                " order by a.id desc limit 1 ";

                                                                                                        }
                                                                                                    } else if (detailsF == '4' || detailsF == '1' || nxtAssign == 0 || detailsIF == 0) {
                                                                                                        //logData('********************detailsF == 4*************************'+detailsF)
                                                                                                        if (results[0].flowIndicator == 'B') {
                                                                                                            sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " supportGroupLevelId,categoryId " +
                                                                                                                " FROM WFCCLIENT where categoryId =" + results[0].FIELDVAL + " " +
                                                                                                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                                                                " AND CLIENTID = " + results[0].CLIENTID + " " +
                                                                                                                " AND DeleteFlag = '0' " +
                                                                                                                " and parent_wfcclient_id = " + results[0].wfcclient_id + " AND flowIndicator='B' order by id limit 1 ";
                                                                                                        } else {
                                                                                                            sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " supportGroupLevelId,categoryId,userId " +
                                                                                                                " FROM WFCCLIENT " +
                                                                                                                " where categoryId =" + results[0].FIELDVAL + " " +
                                                                                                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                                                                " AND CLIENTID = " + results[0].CLIENTID + " " +
                                                                                                                " AND DeleteFlag = '0' " +
                                                                                                                " AND flowIndicator='B' order by id limit 1 ";
                                                                                                        }
                                                                                                    } else {
                                                                                                        //logData('*****************else**********************')
                                                                                                        if (results[0].flowIndicator == 'B') {
                                                                                                            sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " supportGroupLevelId,categoryId " +
                                                                                                                " FROM WFCCLIENT where categoryId =" + results[0].FIELDVAL + " " +
                                                                                                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                                                                " AND CLIENTID = " + results[0].CLIENTID + " " +
                                                                                                                " AND DeleteFlag = '0' " +
                                                                                                                " and parent_wfcclient_id = " + results[0].wfcclient_id + " " +
                                                                                                                " AND flowIndicator='B' order by id limit 1 ";
                                                                                                        } else {
                                                                                                            sql11 = "SELECT id,workflowId,work_flow_component_id,WORKFLOWLEVEL,STARTENDFLOWINDICATOR," +
                                                                                                                " supportGroupLevelId,categoryId,userId " +
                                                                                                                " FROM WFCCLIENT " +
                                                                                                                " where categoryId =" + results[0].FIELDVAL + " " +
                                                                                                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                                                                                                " AND CLIENTID = " + results[0].CLIENTID + " " +
                                                                                                                " AND DeleteFlag = '0' " +
                                                                                                                " and id  > (select max(id) from WFCCLIENT " +
                                                                                                                "                    where categoryId = " + results[0].FIELDVAL + "  and work_flow_component_id =  " + results[0].work_flow_component_id + "  " +
                                                                                                                "                    AND CLIENTID = " + results[0].CLIENTID + " AND DeleteFlag =  '0' " +
                                                                                                                "                    and supportGroupLevelId = (select supportGroupLevelId " +
                                                                                                                "                                                from WFCCLIENTRESULT where PKFIELDVAL=" + data.ticketId + " " +
                                                                                                                "                                                 and id = (select max(id) from WFCCLIENTRESULT " +
                                                                                                                "                                                      where PKFIELDVAL=" + data.ticketId + "))) " +
                                                                                                                " AND flowIndicator='B' order by id limit 1 ";

                                                                                                        }
                                                                                                    }
                                                                                                    //logData('sql11--------------' + sql11)
                                                                                                    con.query(sql11, function (err11, result11) {
                                                                                                        if (err11) {
                                                                                                            logData(err11);
                                                                                                            cb(err11, null);
                                                                                                        } else {
                                                                                                            //logData('result11-------------' + JSON.stringify(result11))
                                                                                                            var dataF = {
                                                                                                                "clientId": results[0].CLIENTID,
                                                                                                                "categoryId": results[0].FIELDVAL,
                                                                                                                "workflowId": 1, //result11[0].workflowId,
                                                                                                                "work_flow_component_id": results[0].work_flow_component_id
                                                                                                            };
                                                                                                            getBackWorkFlowNotify(dataF, function (errF, successF, detailsF) {
                                                                                                                //logData('detailsF-------------------' + detailsF)
                                                                                                                //logData('detailsIF-------------------' + detailsIF)
                                                                                                                if (results[0].tStatus == 'B') {
                                                                                                                    usrId = data.user_id;
                                                                                                                } else {
                                                                                                                    usrId = result11[0].userId;
                                                                                                                }
                                                                                                                if (detailsF == "3") {
                                                                                                                    var dataU = {
                                                                                                                        "id": data.ticketId
                                                                                                                    };
                                                                                                                    //logData('3333333333333333333333333-------------------')
                                                                                                                    updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                                                                                                                        var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                                                            " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
                                                                                                                            " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + result11[0].supportGroupLevelId + "'," +
                                                                                                                            " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + result11[0].userId + "," +
                                                                                                                            " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
                                                                                                                        //logData('awsd--------------------------' + sql1)
                                                                                                                        con.query(sql1, function (err1, result12) {
                                                                                                                            if (err1) {
                                                                                                                                logData(err1);
                                                                                                                                cb(err1, null);
                                                                                                                            } else {

                                                                                                                                // optimizedreport table starts
                                                                                                                                            

                                                                                                                                var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                                    + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
                                                                                                                                    + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                                                                    + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                                                                    + " from USER where id =? "
                                                                                                                                console.log("---------98765--098", sql90);
                                                                                                                                con.query(sql90, [data.ticketId, result11[0].supportGroupLevelId, result11[0].userId, result11[0].userId, result11[0].userId], function (err, result55) {
                                                                                                                                    if (err) {
                                                                                                                                        console.log(err);
                                                                                                                                    } else {
                                                                                                                                        console.log(result55);
                                                                                                                                        var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?,"
                                                                                                                                            + " current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
                                                                                                                                            + "all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=? "
                                                                                                                                            + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                                                        // console.log("WS@###########################",result60[0].id);
                                                                                                                                        con.query(sql44, [result11[0].supportGroupLevelId, result11[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                                                            console.log("%^&*(*&%^&*()(*&6595639586956------------->");
                                                                                                                                            if (err) {
                                                                                                                                                console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                                cb(err, null);
                                                                                                                                            } else {
                                                                                                                                                logData("_______________0945#$" + sql44);
                                                                                                                                                console.log(result77);
                                                                                                                                                cb(null, true, result77);
                                                                                                                                            }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                });

                                                                                                                                // optimizedreport table ends


                                                                                                                                callStopSlaDtlsTicketWise({
                                                                                                                                    "id": data.ticketId,
                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                    "reqType": "",
                                                                                                                                    "clientId": results[0].CLIENTID
                                                                                                                                }, function (errC, successC, detailsC) {
                                                                                                                                    callforSlaResolutionReCalculateTicketWise({
                                                                                                                                        "id": data.ticketId
                                                                                                                                    }, function (errSS, successSS, detailsSS) {
                                                                                                                                        //logData('15')
                                                                                                                                    });
                                                                                                                                    insertLatestWFCClientResult({
                                                                                                                                        "ticketId": data.ticketId
                                                                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                                                                        if (errET3 || !successET3) {
                                                                                                                                            cb(null, true);
                                                                                                                                        } else {
                                                                                                                                            cb(null, true);
                                                                                                                                        }
                                                                                                                                    })

                                                                                                                                });

                                                                                                                            }
                                                                                                                        });
                                                                                                                    });

                                                                                                                } else if (detailsF == "2") {
                                                                                                                    //logData('2222222222222222222222-------------------')
                                                                                                                    var usrId = "";
                                                                                                                    if (results[0].tStatus == 'B') {
                                                                                                                        usrId = data.user_id;
                                                                                                                    } else {
                                                                                                                        usrId = result11[0].userId;
                                                                                                                    }
                                                                                                                    var dataU = {
                                                                                                                        "id": data.ticketId
                                                                                                                    };
                                                                                                                    //logData('222222222222222kkkkkkkkkkkkkkkkkkkkk-------------------')
                                                                                                                    updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                                                                                                                        var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                                                            " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
                                                                                                                            " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + result11[0].supportGroupLevelId + "'," +
                                                                                                                            " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + usrId + "," +
                                                                                                                            " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
                                                                                                                        //logData('sql1----------------------' + sql1)
                                                                                                                        con.query(sql1, function (err1, result12) {
                                                                                                                            if (err1) {
                                                                                                                                logData(err1);
                                                                                                                                cb(err1, null);
                                                                                                                            } else {

                                                                                                                                // optimizedreport table starts

                                                                                                                                var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name, "
                                                                                                                                    + " coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',''),'') multiple_response_stop_datetime,"
                                                                                                                                    + " coalesce(replace(group_concat(concat((?),'/')),',',''),'') multiple_response_stop_dsxcatetime,"
                                                                                                                                    + " coalesce(replace(group_concat(concat((select a.name from USER a where id =?),'/')),',',''),'') multiple_response_stop_dkljatetime"
                                                                                                                                    + "from USER where id = ?"

                                                                                                                                console.log("---------98765--123", sql90);
                                                                                                                                con.query(sql90, [data.ticketId, usrId, result11[0].supportGroupLevelId, usrId, usrId], function (err, result55) {
                                                                                                                                    if (err) {
                                                                                                                                        console.log(err);
                                                                                                                                    } else {
                                                                                                                                        console.log(result55);
                                                                                                                                        var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                                                            + "all_analyst_ps= ?,all_analyst_sg =?,all_analyst_name=?,"
                                                                                                                                            + "ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                                                        // console.log("WS@###########################",result60[0].id);
                                                                                                                                        con.query(sql44, [result11[0].supportGroupLevelId, result11[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                                                            console.log("%^&*(*&%^&*()(*&6595639586956------------->");
                                                                                                                                            if (err) {
                                                                                                                                                console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                                cb(err, null);
                                                                                                                                            } else {
                                                                                                                                                logData("_______________145#$" + sql44);
                                                                                                                                                console.log(result77);
                                                                                                                                                cb(null, true, result77);
                                                                                                                                            }
                                                                                                                                        })
                                                                                                                                    }
                                                                                                                                });
                                                                                                                                // optimizedreport table ends


                                                                                                                                callStopSlaDtlsTicketWise({
                                                                                                                                    "id": data.ticketId,
                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                    "reqType": "",
                                                                                                                                    "clientId": results[0].CLIENTID
                                                                                                                                }, function (errC, successC, detailsC) {
                                                                                                                                    callforSlaResolutionReCalculateTicketWise({
                                                                                                                                        "id": data.ticketId
                                                                                                                                    }, function (errSS, successSS, detailsSS) {
                                                                                                                                        //logData('15')
                                                                                                                                    });
                                                                                                                                    insertLatestWFCClientResult({
                                                                                                                                        "ticketId": data.ticketId
                                                                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                                                                        if (errET3 || !successET3) {
                                                                                                                                            cb(null, true, 0);
                                                                                                                                        } else {
                                                                                                                                            cb(null, true, resultI.insertId);
                                                                                                                                        }
                                                                                                                                    })

                                                                                                                                });

                                                                                                                            }
                                                                                                                        });
                                                                                                                    });

                                                                                                                } else if (detailsF == "4") {
                                                                                                                    //logData('4444444444444444444444444444444-------------------')
                                                                                                                    let sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket where id = " + results[0].PKFIELDVAL + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + results[0].PKFIELDVAL + " ";
                                                                                                                    con.query(sqlB, function (errB, detailsB) {
                                                                                                                        if (errB) {
                                                                                                                            logData(errB);
                                                                                                                            cb(errB, null);
                                                                                                                        } else {
                                                                                                                            if (detailsB.length > 0) {
                                                                                                                                var dataU = {
                                                                                                                                    "id": data.ticketId
                                                                                                                                };
                                                                                                                                updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                                                                                                                                    var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                                                                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
                                                                                                                                        " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + detailsB[0].supportGroupLevelId + "'," +
                                                                                                                                        " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
                                                                                                                                        " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
                                                                                                                                    con.query(sql1, function (err1, result12) {
                                                                                                                                        if (err1) {
                                                                                                                                            logData(err1);
                                                                                                                                            cb(err1, null);
                                                                                                                                        } else {

                                                                                                                                            // optimizedreport table starts

                                                                                                                                            var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                                                + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
                                                                                                                                                + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                                                                                + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                                                                                + " from USER where id = ?"
                                                                                                                                            console.log("---------98765--11223", sql90);
                                                                                                                                            con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
                                                                                                                                                if (err) {
                                                                                                                                                    console.log(err);
                                                                                                                                                } else {
                                                                                                                                                    console.log(result55);
                                                                                                                                                    var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
                                                                                                                                                        + "all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?,"
                                                                                                                                                        + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                                                                    // console.log("WS@###########################",result60[0].id);
                                                                                                                                                    con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                                                                        console.log("%^&*(*&%^&*()(*&6595639586956------------->");
                                                                                                                                                        if (err) {
                                                                                                                                                            console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                                            cb(err, null);
                                                                                                                                                        } else {
                                                                                                                                                            logData("_______________14qw5#$" + sql44);
                                                                                                                                                            console.log(result77);
                                                                                                                                                            cb(null, true, result77);
                                                                                                                                                        }
                                                                                                                                                    })
                                                                                                                                                }
                                                                                                                                            });

                                                                                                                                            // optimizedreport table ends


                                                                                                                                            callStopSlaDtlsTicketWise({
                                                                                                                                                "id": data.ticketId,
                                                                                                                                                "user_id": data.createdBy,
                                                                                                                                                "reqType": "",
                                                                                                                                                "clientId": results[0].CLIENTID
                                                                                                                                            }, function (errC, successC, detailsC) {
                                                                                                                                                callforSlaResolutionReCalculateTicketWise({
                                                                                                                                                    "id": data.ticketId
                                                                                                                                                }, function (errSS, successSS, detailsSS) {
                                                                                                                                                    //logData('15')
                                                                                                                                                });
                                                                                                                                                insertLatestWFCClientResult({
                                                                                                                                                    "ticketId": data.ticketId
                                                                                                                                                }, function (errET3, successET3, detailsET3) {
                                                                                                                                                    if (errET3 || !successET3) {
                                                                                                                                                        cb(null, true);
                                                                                                                                                    } else {
                                                                                                                                                        cb(null, true);
                                                                                                                                                    }
                                                                                                                                                })

                                                                                                                                            });

                                                                                                                                        }
                                                                                                                                    });
                                                                                                                                });

                                                                                                                            } else {
                                                                                                                                cb(null, false, "Some error occured");
                                                                                                                            }
                                                                                                                        }
                                                                                                                    })
                                                                                                                } else if (detailsF == "1" || detailsIF == 0) {
                                                                                                                    //logData('111111111111111111111111-------------------')
                                                                                                                    let sqlB = "";
                                                                                                                    if (data.ticket_type_seq != 1)
                                                                                                                        sqlB = "SELECT createbyid, supportGroupLevelId FROM ticket where id = " + results[0].PKFIELDVAL + " ";
                                                                                                                    else
                                                                                                                        sqlB = "SELECT createbyid, createor_support_grp_id supportGroupLevelId FROM ticket where id = " + data.ticketId + " ";
                                                                                                                    // sqlB = "SELECT createbyid,(SELECT supportGroupLevelId FROM supportGroupUser where userId= (select createbyid from ticket where id = " + results[0].PKFIELDVAL + ") and DeleteFlag='0') supportGroupLevelId FROM ticket where id = " + results[0].PKFIELDVAL + " ";
                                                                                                                    con.query(sqlB, function (errB, detailsB) {
                                                                                                                        if (errB) {
                                                                                                                            logData(errB);
                                                                                                                            cb(errB, null);
                                                                                                                        } else {
                                                                                                                            if (detailsB.length > 0) {
                                                                                                                                var dataU = {
                                                                                                                                    "id": data.ticketId
                                                                                                                                };
                                                                                                                                updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                                                                                                                                    var sql1q = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                                                                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
                                                                                                                                        " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + detailsB[0].supportGroupLevelId + "'," +
                                                                                                                                        " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + detailsB[0].createbyid + "," +
                                                                                                                                        " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
                                                                                                                                    con.query(sql1q, function (err1, result12) {
                                                                                                                                        if (err1) {
                                                                                                                                            logData(err1);
                                                                                                                                            cb(err1, null);
                                                                                                                                        } else {

                                                                                                                                            // optimizedreport table starts

                                                                                                                                            var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                                                + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
                                                                                                                                                + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                                                                                + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                                                                                + " from USER where id =? "
                                                                                                                                            console.log("---------98765--123", sql90);
                                                                                                                                            con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, detailsB[0].createbyid, detailsB[0].createbyid, detailsB[0].createbyid], function (err, result55) {
                                                                                                                                                if (err) {
                                                                                                                                                    console.log(err);
                                                                                                                                                } else {
                                                                                                                                                    console.log(result55);
                                                                                                                                                    var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
                                                                                                                                                        + "all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?,"
                                                                                                                                                        + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                                                                                                                                    // console.log("WS@###########################",result60[0].id);
                                                                                                                                                    con.query(sql44, [detailsB[0].supportGroupLevelId, detailsB[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                                                                        console.log("%^&*(*&%^&*()(*&6595639586956------------->");
                                                                                                                                                        if (err) {
                                                                                                                                                            console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                                            cb(err, null);
                                                                                                                                                        } else {
                                                                                                                                                            logData("_______________123#$" + sql44);
                                                                                                                                                            console.log(result77);
                                                                                                                                                            cb(null, true, result77);
                                                                                                                                                        }
                                                                                                                                                    })
                                                                                                                                                }
                                                                                                                                            });

                                                                                                                                            // optimizedreport table ends
                                                                                                                                            
                                                                                                                                            callStopSlaDtlsTicketWise({
                                                                                                                                                "id": data.ticketId,
                                                                                                                                                "user_id": data.createdBy,
                                                                                                                                                "reqType": "",
                                                                                                                                                "clientId": results[0].CLIENTID
                                                                                                                                            }, function (errC, successC, detailsC) {
                                                                                                                                                callforSlaResolutionReCalculateTicketWise({
                                                                                                                                                    "id": data.ticketId
                                                                                                                                                }, function (errSS, successSS, detailsSS) {
                                                                                                                                                    //logData('15')
                                                                                                                                                });
                                                                                                                                                insertLatestWFCClientResult({
                                                                                                                                                    "ticketId": data.ticketId
                                                                                                                                                }, function (errET3, successET3, detailsET3) {
                                                                                                                                                    if (errET3 || !successET3) {
                                                                                                                                                        cb(null, true);
                                                                                                                                                    } else {
                                                                                                                                                        cb(null, true);
                                                                                                                                                    }
                                                                                                                                                })

                                                                                                                                            });

                                                                                                                                        }
                                                                                                                                    });
                                                                                                                                });

                                                                                                                            } else {
                                                                                                                                cb(null, false, "Some error occured");
                                                                                                                            }
                                                                                                                        }
                                                                                                                    })
                                                                                                                } else {
                                                                                                                    //logData('2222222222222222222222-------------------')
                                                                                                                    var usrId = "";
                                                                                                                    if (results[0].tStatus == 'B') {
                                                                                                                        usrId = data.user_id;
                                                                                                                    } else {
                                                                                                                        usrId = result11[0].userId;
                                                                                                                    }
                                                                                                                    var dataU = {
                                                                                                                        "id": data.ticketId
                                                                                                                    };
                                                                                                                    //logData('222222222222222kkkkkkkkkkkkkkkkkkkkk-------------------')
                                                                                                                    updateWFCResultForDispatch(dataU, function (errU, successU, resultsU) {
                                                                                                                        var sql1 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                                                                            " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus,frw_user_id ) values " +
                                                                                                                            " (" + results[0].CLIENTID + "," + result11[0].work_flow_component_id + "," + result11[0].id + ",'" + result11[0].supportGroupLevelId + "'," +
                                                                                                                            " " + data.ticketId + "," + result11[0].categoryId + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + usrId + "," +
                                                                                                                            " " + results[0].category_id + "," + data.createdBy + "," + detailsS + "," + data.createdBy + " ) ";
                                                                                                                        //logData('sql1----------------------' + sql1)
                                                                                                                        con.query(sql1, function (err1, result12) {
                                                                                                                            if (err1) {
                                                                                                                                logData(err1);
                                                                                                                                cb(err1, null);
                                                                                                                            } else {

                                                                                                                                // optimizedreport table starts

                                                                                                                                var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                                                + "coalesce(replace(group_concat(concat((?),'@')),',',' / '),'') supportgroup,"
                                                                                                                                + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                                                                + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                                                                + " from USER where id =?"
                                                                                                                            console.log("---------98765--34", sql90);
                                                                                                                            con.query(sql90, [data.ticketId, detailsB[0].supportGroupLevelId, usrId, usrId, usrId], function (err, result55) {
                                                                                                                                if (err) {
                                                                                                                                    console.log(err);
                                                                                                                                } else {
                                                                                                                                    console.log(result55);
                                                                                                                                    var sql44 = "update optimizedreport set  latest_analyst_sg=?,current_assignee_sg=?,latest_analyst_ps =?,"
                                                                                                                                        + " current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,ticket_last_modified_dt=Now(),"
                                                                                                                                        + "all_analyst_ps=?,all_analyst_sg =?,all_analyst_name=?"
                                                                                                                                        + ",last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                                                    // console.log("WS@###########################",result60[0].id);
                                                                                                                                    con.query(sql44, [result11[0].supportGroupLevelId, result11[0].supportGroupLevelId, result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].supportgroup, result55[0].l_name, result55[0].login_name, result55[0].name, data.createdBy, result55[0].id], function (err, result77) {
                                                                                                                                        console.log("%^&*(*&%^&*()(*&6595639586956------------->");
                                                                                                                                        if (err) {
                                                                                                                                            console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                                            cb(err, null);
                                                                                                                                        } else {
                                                                                                                                            logData("_______________56#$" + sql44);
                                                                                                                                            console.log(result77);
                                                                                                                                            cb(null, true, result77);
                                                                                                                                        }
                                                                                                                                    })
                                                                                                                                }
                                                                                                                            });

                                                                                                                            // optimizedreport table ends

                                                                                                                                callStopSlaDtlsTicketWise({
                                                                                                                                    "id": data.ticketId,
                                                                                                                                    "user_id": data.createdBy,
                                                                                                                                    "reqType": "",
                                                                                                                                    "clientId": results[0].CLIENTID
                                                                                                                                }, function (errC, successC, detailsC) {
                                                                                                                                    callforSlaResolutionReCalculateTicketWise({
                                                                                                                                        "id": data.ticketId
                                                                                                                                    }, function (errSS, successSS, detailsSS) {
                                                                                                                                        //logData('15')
                                                                                                                                    });
                                                                                                                                    insertLatestWFCClientResult({
                                                                                                                                        "ticketId": data.ticketId
                                                                                                                                    }, function (errET3, successET3, detailsET3) {
                                                                                                                                        if (errET3 || !successET3) {
                                                                                                                                            cb(null, true, 0);
                                                                                                                                        } else {
                                                                                                                                            cb(null, true, resultI.insertId);
                                                                                                                                        }
                                                                                                                                    })

                                                                                                                                });

                                                                                                                            }
                                                                                                                        });
                                                                                                                    });

                                                                                                                }
                                                                                                            });
                                                                                                        }
                                                                                                    });

                                                                                                });
                                                                                            }
                                                                                        });
                                                                                    }
                                                                                })

                                                                            }
                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        }
                                                    });
                                                });
                                            }

                                        }
                                    });
                                }
                            })
                        } else {
                            cb(null, false, detailsTGS);
                        }
                    }
                })
            }
        }
    })
}



function getSolutionsTicketWise(data, cb) {
    // let sql = 'SELECT a.solutions,a.rca,DATE_FORMAT(a.createdate, "%d/%m/%y %T") createddate,b.NAME name FROM ticketSolutions a ,USER b ' +
    //     ' where a.createbyid=b.id and a.ticketId=' + data.ticketId + ' ORDER BY a.createdate DESC;';
    let sql = 'SELECT a.solutions,a.rca,a.createdate createddate,b.NAME name, a.WFCClientResultId, a.createbyid  FROM ticketSolutions a ,USER b ' +
        ' where a.createbyid=b.id and a.ticketId=' + data.ticketId + ' ORDER BY a.createdate DESC;';
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getLogsTicketWise(data, cb) {
    let sql = "SELECT a.*,c.NAME,b.activity_desc ,d.feedback,e.solutions,e.rca FROM TicketActivityMst b, USER c,TicketActivityLogs a left join ticketFeedBack d on a.ticketFeedBackId = d.id left join ticketSolutions e on a.ticketSolutionId = e.id where a.activity_id = b.id and a.active_userId = c.id " +
        "and a.ticketId = " + data.ticketId + " order by a.createdate desc";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}


function submitAttachmentTicketWise(data, cb) {
    logData('\n\n-------------------submitAttachmentTicketWise: ' + JSON.stringify(data.attachedFilePath) + '   jj  ' + data.attachedFilePath.length)
    if (data.attachedFilePath.length > 0) {
        let count = 0;
        for (let i = 0; i < data.attachedFilePath.length; i++) {
            let sql = "Insert into ticketFileAttachementLog (ticketId,WFCClientResultId,actual_attachedFilePath,attachedFilePath,createbyid) " +
                " values(" + data.ticketId + "," + data.WFCClientResultId + "," + con.escape(data.attachedFilePath[i].originalName) + "," + con.escape(data.attachedFilePath[i].fileName) + "," + data.createdBy + ")";
            con.query(sql, function (err1, result) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    if (result.insertId === 0) {
                        count++;
                        // cb(null, false, "Data is not updated successfully");
                    } else {
                        var x = 'New File name : ' + data.attachedFilePath[i].originalName;
                        var sql5 = 'INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,ticketSolutionId,logValue ) VALUES' +
                            ' (' + data.ticketId + ',11,' + data.WFCClientResultId + ',' + data.createdBy + ',' + result.insertId + ',"' + x + '") ';
                        con.query(sql5, function (err5, result5) {
                            if (err5) {
                                logData(err5);
                                cb(err5, null);
                            } else {

                                // optimizedreport table starts
                                var sql3 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                    // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                    + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                    + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                    + " from USER where id =? ;"
                                logData("SQL---------3" + sql3);
                                con.query(sql3, [data.ticketId, data.createdBy, data.createdBy, data.createdBy], function (err, result3) {
                                    if (err) {
                                        logData(err);
                                        cb(err, null);
                                    } else {
                                        console.log("result3", result3);
                                        var sql33 = "update optimizedreport set ticket_activity_log=?,ticket_last_modified_dt=Now(),"
                                            + "all_analyst_ps=?,all_analyst_name=?,"
                                            + "last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                        console.log("x", x);
                                        console.log("result3[0].ps", result3[0].ps);
                                        console.log("result3[0].l_name", result3[0].l_name);

                                        console.log("result3[0].login_name", result3[0].login_name);
                                        console.log("result3[0].name", result3[0].name);
                                        console.log("data.createdBy", data.createdBy);

                                        console.log("result3[0].ticketId", result3[0].id);
                                        con.query(sql33, [x, result3[0].ps, result3[0].l_name, result3[0].login_name, result3[0].name, data.createdBy, result3[0].id], function (err, result33) {
                                            if (err) {
                                                logData(err);
                                                cb(err, null)
                                            } else {
                                                logData("&&&&&&&&&&&&&&------------>" + sql33);
                                                console.log("$$$$$$$$$$$$$$", result33);
                                                cb(null, true, result33);
                                            }
                                        })
                                    }
                                });

                                // optimizedreport table ends

                                count++;
                                if (data.attachedFilePath.length === count) {
                                    cb(null, true, result.insertId);
                                }
                            }
                        });

                    }

                }
            });
        }
    } else {
        logData('else')
        cb(null, true, []);
    }
}


function getAttachmentTicketWise(data, cb) {
    let sql = "SELECT id,ticketId,createDate,attachedFilePath,actual_attachedFilePath FROM ticketFileAttachementLog  where ticketId = " + data.ticketId + " order by createDate desc";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getSupportGrpWithoutVendor(data, cb) {
    var data = preventSqlInjection(data);
    let sql = "select id,LEVELSHORTDESC name from SUPPORTGROUPLEVEL where CLIENTID =" +
        data.clientId + " and DeleteFlag =0 and id not in (select supportGroupLevelId from supportGroupVendor" +
        " where clientId = " + data.clientId + " and DeleteFlag =0 ) order by LEVELSHORTDESC ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details != null && details.length > 0) {
                cb(null, true, details);
            } else {
                cb(null, false, "No Data Found");
            }

        }
    })
}

function getUserWithOrWithoutVendorMapping(data, cb) {
    data.reqFlg = stringToBool(data.reqFlg);
    var sql = "";
    // logData('validation--------------------' + (data.reqFlg !== true))
    if (data.reqFlg !== true) {
        // sql = "select id,NAME name from USER where CLIENTID = " + data.clientId + " and DeleteFlag ='0' and " +
        //     " id not in (select USERID from CLIENTVENDORUSER where CLIENTID = " + data.clientId + " and DeleteFlag ='0' ) " +
        //     " and id not in (select userId from supportGroupUser where CLIENTID = " + data.clientId + " and supportGroupLevelId = " + data.groupId + " and DeleteFlag ='0' ) ";
        sql = "select id,NAME name, login_name from USER a where a.CLIENTID = " + data.clientId + " and a.DeleteFlag ='0' and " +
            " a.id not in (select USERID from CLIENTVENDORUSER where CLIENTID = " + data.clientId + " and DeleteFlag ='0' ) " +
            " and (a.login_name like '%" + data.psOrName + "%' or a.NAME like '%" + data.psOrName + "%') limit 10 ";
    } else {
        sql = "select id,NAME name, login_name from USER where id in (SELECT USERID FROM CLIENTVENDORUSER WHERE clientId = " +
            data.clientId + " AND DeleteFlag = '0' AND VENDORID = (SELECT vendorId FROM supportGroupVendor WHERE" +
            " clientId = " + data.clientId + " AND supportGroupLevelId =" + data.groupId + " AND DeleteFlag = '0') )" +
            " and id not in (select userId from supportGroupUser where CLIENTID = " + data.clientId + " and" +
            " supportGroupLevelId = " + data.groupId + " and DeleteFlag ='0' ) ";
    }
    // util.logData('SSSSSSSSSSSSSS==' + sql);
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getAdditionalFuncTicketTypeWise(data, cb) {
    // var data = preventSqlInjection(data);
    var sql = "select func_desc_id id,funcDescription name,coalesce(sequence_no,'') seq from TicketFuctionalityDetails " +
        " where functionalityId = " + data.functionalityId + " and client_id = " + data.clientId + " " +
        " and DeleteFlag = '0' ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                cb(null, true, details);
            } else {
                cb(null, true, []);
            }

        }
    })
}

function getAdditionalFuncTicketTypeUserWise(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id,b.ATTRVAL type,c.LEVELSHORTDESC groupname,coalesce(e.NAME,'') user," +
                "(select funcionalityName from FuctionalityMst where id =d.functionalityId) actionType," +
                " d.funcDescription value, d.func_desc_id,b.sequence_no seq FROM TICKETATTRIBUTES b, SUPPORTGROUPLEVEL c," +
                " TicketFuctionalityDetails d, AdditionalFuncMappingWithUser a LEFT JOIN USER e on" +
                " a.userId = e.id where a.ticketType = b.id and a.supportGroupLevelId = c.id and" +
                " a.functionDtlsId = d.func_desc_id and  a.functionalityId = d.functionalityId and a.clientId = d.client_id and coalesce(e.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' and " +
                " c.DeleteFlag = '0' and b.ATTRID = 3 and b.DeleteFlag = '0' and a.clientId =" + data.clientId +
                " and a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT a.id,b.ATTRVAL type,c.LEVELSHORTDESC groupname,coalesce(e.NAME,'') user," +
                " (select funcionalityName from FuctionalityMst where id =d.functionalityId) actionType," +
                " d.funcDescription value, d.func_desc_id, b.sequence_no seq FROM TICKETATTRIBUTES b, SUPPORTGROUPLEVEL c," +
                " TicketFuctionalityDetails d, AdditionalFuncMappingWithUser a LEFT JOIN USER e on" +
                " a.userId = e.id where a.ticketType = b.id and a.supportGroupLevelId = c.id and" +
                " a.functionDtlsId =  d.func_desc_id and  a.functionalityId = d.functionalityId and a.clientId = d.client_id and coalesce(e.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' and " +
                " c.DeleteFlag = '0' and b.ATTRID = 3 and b.DeleteFlag = '0' and a.clientId =" + data.clientId + " and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ") z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(*) count FROM TICKETATTRIBUTES b, SUPPORTGROUPLEVEL c," +
            " TicketFuctionalityDetails d, AdditionalFuncMappingWithUser a LEFT JOIN USER e on" +
            " a.userId = e.id where a.ticketType = b.id and a.supportGroupLevelId = c.id and" +
            " a.functionDtlsId =  d.func_desc_id and  a.functionalityId = d.functionalityId and  a.clientId = d.client_id and coalesce(e.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' and" +
            " c.DeleteFlag = '0' and b.ATTRID = 3 and b.DeleteFlag = '0' and a.clientId =" + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getAdditionalFunc(data, cb) {
    let sql = 'select id,funcionalityName name from FuctionalityMst where DeleteFlag=0';
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function insertAdditionalFuncTicketTypeUserWise(data, cb) {
    logData('insertAdditionalFuncTicketTypeUserWise---------------' + JSON.stringify(data))
    if (data.userLt) {
        if (data.addActivityLt != null || data.addActivityLt.length > 0) {
            var usrLt = data.userLt;
            var flgJ = 1;
            var rslt = "";
            for (var i = 0; i < usrLt.length; i++) {
                var activityLt = data.addActivityLt;
                var flgI = 1 * usrLt.length * activityLt.length;
                for (var j = 0; j < activityLt.length; j++) {
                    var fld = {
                        "clientId": data.clientId,
                        "ticketTypeId": data.ticketTypeId,
                        "supportGroupLevelId": data.supportGroupLevelId,
                        "usrLt": usrLt[i],
                        "activityLt": activityLt[j],
                        "createdBy": data.createdBy,
                        "functionalityId": data.functionalityId
                    };
                    checkDuplicateAdditionalFuncMappingWithUser(fld, function (errA, successA, detailsA) {
                        if (errA || !successA) {
                            logData(errA);
                            logData(successA);
                            cb(errA, null);
                        } else {
                            if (detailsA === 'duplicate') {
                                rslt = 'duplicate';
                            }
                            if (flgJ === flgI) {
                                if (rslt.length > 0) {
                                    cb(null, true, "Successfully created with some duplicate value");
                                } else {
                                    cb(null, true, "Successfully created");
                                }

                            }
                            flgJ++;
                        }

                    });
                }
            }
        } else {
            cb(null, false, "Select at-least one additional activity");
        }
    } else {
        if (data.allUser) {
            if (data.addActivityLt != null) {
                var flgJ = 1;
                var rslt = "";
                var activityLt = data.addActivityLt;
                for (var j = 0; j < activityLt.length; j++) {
                    var fld = {
                        "clientId": data.clientId,
                        "ticketTypeId": data.ticketTypeId,
                        "supportGroupLevelId": data.supportGroupLevelId,
                        "activityLt": activityLt[j],
                        "createdBy": data.createdBy,
                        "allUser": "true",
                        "functionalityId": data.functionalityId
                    };
                    checkDuplicateAdditionalFuncMappingWithAllUser(fld, function (errA, successA, detailsA) {
                        if (errA || !successA) {
                            logData(errA);
                            logData(successA);
                            cb(errA, null);
                        } else {
                            if (detailsA === 'duplicate') {
                                rslt = 'duplicate';
                            }
                            if (flgJ === activityLt.length) {
                                if (rslt.length > 0) {
                                    cb(null, true, "Successfully created with some duplicate value");
                                } else {
                                    cb(null, true, "Successfully created");
                                }
                            }
                            flgJ++;
                        }
                    });
                }
            } else {
                cb(null, false, "Select at-least one additional activity");
            }
        } else {
            cb(null, false, "Select at-least one user");
        }
    }
}


function getFirstLevelCategory(data, cb) {
    let sql = 'SELECT id FROM attributesHeaderMst where CLIENTID=' + data.clientId + ' and DeleteFlag=0 ORDER BY sequence_no limit 1;'
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var headerId = result[0].id;
                let sql1 = 'SELECT id, ATTRVAL name FROM TICKETATTRIBUTES where CLIENTID=' + data.clientId + ' and DeleteFlag=0 and ATTRID=1 and attrHeaderMstId=' + headerId + ' ;';
                con.query(sql1, function (err, result1) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result1)
                    }
                })
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function getFirstLevelCategoryByTicket(data, cb) {
    var data = preventSqlInjection(data);
    let sql = 'SELECT id FROM attributesHeaderMst where CLIENTID=' + data.clientId + ' and ticket_type=' + data.ticket_type + ' and DeleteFlag=0 ORDER BY sequence_no limit 1;'
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var headerId = result[0].id;
                let sql1 = 'SELECT id, ATTRVAL name FROM TICKETATTRIBUTES where CLIENTID=' + data.clientId + ' and DeleteFlag=0 and ATTRID=1 and attrHeaderMstId=' + headerId + ' ;';
                con.query(sql1, function (err, result1) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result1)
                    }
                })
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}


function getDynamicMenuTicketTypeWise(data, cb) {
    var sql = "select distinct a.func_desc_id fid,b.id, a.funcDescription,a.image, coalesce(a.sequence_no,0),a.color_code " +
        " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
        " where a.func_desc_id = b.functionDtlsId and a.client_id = b.clientId " +
        // " and a.clientId = b.clientId and a.ticketType = b.ticketType " +
        " and a.functionalityId = b.functionalityId " +
        " and a.functionalityId = " + data.functionalityId + " ";
    if (data.workspaceType !== "null") {
        sql = sql + " and a.isManagerialview=" + data.workspaceType;
    }
    sql = sql + " and b.clientId = " + data.clientId + " " +
        " and b.ticketType = " + data.ticketTypeId + " " +
        " and b.supportGroupLevelId = " + data.supportgrp + " " +

        " and b.userId = " + data.user_id + "  and a.DeleteFlag = '0' and b.DeleteFlag = '0' order by coalesce(a.sequence_no,0) ";
    logData('sql---------------------------' + sql)
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details !== null && details.length > 0) {
                cb(null, true, details);
            } else {

                var sql1 = "select distinct a.func_desc_id fid,b.id, a.funcDescription,a.image, coalesce(a.sequence_no,0),a.color_code " +
                    " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
                    " where a.func_desc_id = b.functionDtlsId and a.client_id = b.clientId " +
                    // " and a.clientId = b.clientId and a.ticketType = b.ticketType " +
                    " and a.functionalityId = b.functionalityId " +
                    " and a.functionalityId = " + data.functionalityId + " ";
                if (data.workspaceType !== "null") {
                    sql1 = sql1 + " and a.isManagerialview=" + data.workspaceType;
                }
                sql1 = sql1 + " and b.clientId = " + data.clientId + " " +
                    " and b.ticketType = " + data.ticketTypeId + " " +
                    " and b.isAllUser = 'true' " +
                    " and b.supportGroupLevelId =  " + data.supportgrp + " " +
                    " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
                    " order by coalesce(a.sequence_no,0) ";
                logData('sql1---------------------------' + sql1)
                con.query(sql1, function (err1, details1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (details1 != null && details1.length > 0) {

                            cb(null, true, details1);
                        } else {
                            cb(null, true, []);
                        }

                    }
                })
            }

        }
        ;
    })
}


function getWorkflowType(data, cb) {
    let sql = 'select * from WorkflowType';
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                details[0].checked = true;
            }
            cb(null, true, details);
        }
    })

}

function insertTicketExtandMstTbl(data, cb) {
    //var nameArr = data.fieldName.split(',');
    // util.logData('nameArr===' + nameArr[0]);
    for (let i = 0; i < data.additionalField.length; i++) {
        // util.logData('nameArr===' + nameArr[i]);
        let sql1 = "SELECT * FROM ticketExtandMstTbl where clientId = ? and category_id = ? and ticketType = ? and fieldName = ? and deleteFlag=0 ";
        con.query(sql1, [data.clientId, data.category_id, data.ticketType, data.additionalField[i].name], function (err, details) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (details.length === 0) {

                    let sql;
                    if (data.additionalField[i].dropdown) {
                        sql = "Insert into ticketExtandMstTbl(clientId, category_id, ticketType, fieldName, fieldType, predifinedValue, createbyid,isQuestion) " +
                            " values(?,?,?,?,?,?,?,?)";

                        con.query(sql, [data.clientId, data.category_id, data.ticketType, data.additionalField[i].name, data.additionalField[i].typeSelected, data.additionalField[i].dropdown, data.createdBy, data.additionalField[i].isQuestion], function (err, details) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                cb(null, true, 'Record insert successfully');

                            }
                        });
                    } else {
                        sql = "Insert into ticketExtandMstTbl(clientId, category_id, ticketType, fieldName, fieldType, createbyid,isQuestion) " +
                            " values(?,?,?,?,?,?,?)";
                        con.query(sql, [data.clientId, data.category_id, data.ticketType, data.additionalField[i].name, data.additionalField[i].typeSelected, data.createdBy, data.additionalField[i].isQuestion], function (err, details) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                cb(null, true, 'Record insert successfully');
                            }
                        })
                    }
                } else {
                    cb(null, false, 'duplicate data');
                }

            }
        })
    }
}


function getTicketExtandMstTbl(data, cb) {
    // util.logData('data====' + JSON.stringify(data));
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.category_id))) category_id, c.ATTRVAL ttype, a.fieldName name,a.predifinedValue, a.fieldType, a.defaultValue,a.isQuestion " +
                " from ticketExtandMstTbl a, TICKETATTRIBUTES b , TICKETATTRIBUTES c " +
                " where a.category_id = b.id  " +
                " and a.ticketType = c.id  " +
                " and a.DeleteFlag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' " +
                " and b.clientId = " + data.clientId + " and" +
                " a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = " select * from (select a.id, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.category_id))) category_id, c.ATTRVAL ttype, a.fieldName name,a.predifinedValue, a.fieldType, a.defaultValue,a.isQuestion " +
                " from ticketExtandMstTbl a, TICKETATTRIBUTES b , TICKETATTRIBUTES c " +
                " where a.category_id = b.id  " +
                " and a.ticketType = c.id  " +
                " and a.DeleteFlag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' " +
                " and b.clientId = " + data.clientId + " and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                for (let i = 0; i < done.length; i++) {
                    done[i].isQuestion = stringToBool(done[i].isQuestion);
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " select count(*) count " +
            " from ticketExtandMstTbl a, TICKETATTRIBUTES b , TICKETATTRIBUTES c " +
            " where a.category_id = b.id  " +
            " and a.ticketType = c.id  " +
            " and a.DeleteFlag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' " +
            " and b.clientId = " + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function checkDuplicateAdditionalFuncMappingWithAllUser(data, cb) {
    let sql = "select * from AdditionalFuncMappingWithUser where clientId= " + data.clientId + " and ticketType= " + data.ticketTypeId + " " +
        " and supportGroupLevelId = " + data.supportGroupLevelId + " and functionDtlsId = " + data.activityLt + "  and functionalityId = " + data.functionalityId + " and DeleteFlag = '0'  and isAllUser = 'true' ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details != null && details.length > 0) {
                cb(null, true, "Ok");
            } else {
                var sql1 = "Insert into AdditionalFuncMappingWithUser (clientId,ticketType,supportGroupLevelId,functionDtlsId,createbyid,isAllUser,functionalityId) " +
                    " values(" + data.clientId + "," + data.ticketTypeId + "," + data.supportGroupLevelId + "," + data.activityLt + "," + data.createdBy + ",'true'," + data.functionalityId + ")";
                con.query(sql1, function (err1, details1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (details1.insertId > 0) {
                            cb(null, true, "Ok");
                        } else {
                            cb(null, true, "Ok");
                        }

                    }
                })
            }

        }
    })
}

function deleteTicketExtandMstTbl(data, cb) {
    var data = preventSqlInjection(data);
    var sql = "update ticketExtandMstTbl set DeleteFlag = '1',delete_by_id = " + data.user_id + ", DeleteDate = Now() where id = " + data.id + " ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.affectedRows > 0) {
                cb(null, true, details);
            } else {
                cb(null, false, "Some error");
            }
        }
    })
}


// function getBackwardWorkFlowType(data, cb) {
//     var sql = "SELECT a.id,b.ATTRVAL,c.name  WORKFLOW_Name,d.title flowTypeTitle  ,ticket_type, (select ATTRVAL from TICKETATTRIBUTES where id = ticket_type) ticket_type_nm " +
//         " FROM WFCCLIENT_back_notify a,TICKETATTRIBUTES b, WORKFLOW c, WorkflowType d " +
//         " where a.categoryId = b.id and b.ATTRID = 1 and a.workflowId = c.id and a.flowTypeId = d.id and a.DeleteFlag = '0'  and a.clientId = " + data.clientId + " ";
//     con.query(sql, function (err, details) {
//         if (err) {
//             logData(err);
//             cb(err, null);
//         } else {
//             cb(null, true, details);
//
//         }
//     })
// }

function getBackwardWorkFlowType(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id,b.ATTRVAL,c.name  WORKFLOW_Name,d.title flowTypeTitle  ,ticket_type, (select ATTRVAL from TICKETATTRIBUTES where id = ticket_type) ticket_type_nm " +
                " FROM WFCCLIENT_back_notify a,TICKETATTRIBUTES b, WORKFLOW c, WorkflowType d " +
                " where a.id > " + offset + " and a.categoryId = b.id and b.ATTRID = 1 and a.workflowId = c.id and a.flowTypeId = d.id and" +
                " a.DeleteFlag = '0'  and a.clientId = " + data.clientId + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id,b.ATTRVAL,c.name  WORKFLOW_Name,d.title flowTypeTitle  ,ticket_type, (select ATTRVAL from TICKETATTRIBUTES where id = ticket_type) ticket_type_nm " +
                " FROM WFCCLIENT_back_notify a,TICKETATTRIBUTES b, WORKFLOW c, WorkflowType d " +
                " where a.id < " + offset + " and a.categoryId = b.id and b.ATTRID = 1 and a.workflowId = c.id and a.flowTypeId = d.id and" +
                " a.DeleteFlag = '0'  and a.clientId = " + data.clientId + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count " +
            " FROM WFCCLIENT_back_notify a,TICKETATTRIBUTES b, WORKFLOW c, WorkflowType d " +
            " where a.categoryId = b.id and b.ATTRID = 1 and a.workflowId = c.id and a.flowTypeId = d.id and a.DeleteFlag = '0'  and a.clientId = " + data.clientId + " ";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function deleteDynamicTabActionTicketTypeWise(data, cb) {
    var data = preventSqlInjection(data);
    var sql = "update AdditionalFuncMappingWithUser set DeleteFlag = '1',delete_by_id = " + data.user_id +
        ", DeleteDate = Now() where id = " + data.id + " ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.affectedRows > 0) {
                cb(null, true, details);
            } else {
                cb(null, false, "Some error");
            }
        }
    })
}

function getUrlByClient(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select MODULEURLMAP.id,MODULE.MODULENAME as moduleName,URLKEY.URL as url,URLKEY.URLDESCRIPTION as urlDesc," +
                " URLKEY.URLKEY as urlKey from MODULEURLMAP INNER JOIN MODULE INNER JOIN URLKEY ON MODULEURLMAP.MODULEID=MODULE.id " +
                " AND MODULEURLMAP.URLID=URLKEY.id AND MODULEURLMAP.id > " + offset + " AND MODULEURLMAP.DeleteFlag='0' AND MODULEURLMAP.CLIENTID=" + data.client_id +
                " ORDER BY MODULEURLMAP.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (select MODULEURLMAP.id,MODULE.MODULENAME as moduleName,URLKEY.URL as url,URLKEY.URLDESCRIPTION as urlDesc," +
                " URLKEY.URLKEY as urlKey from MODULEURLMAP INNER JOIN MODULE INNER JOIN URLKEY ON MODULEURLMAP.MODULEID=MODULE.id " +
                " AND MODULEURLMAP.URLID=URLKEY.id AND MODULEURLMAP.id < " + offset + " AND MODULEURLMAP.DeleteFlag='0' AND MODULEURLMAP.CLIENTID=" + data.client_id +
                " ORDER BY MODULEURLMAP.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(*) count from MODULEURLMAP INNER JOIN MODULE INNER JOIN URLKEY ON MODULEURLMAP.MODULEID=MODULE.id " +
            " AND MODULEURLMAP.URLID=URLKEY.id AND MODULEURLMAP.DeleteFlag='0' AND MODULEURLMAP.CLIENTID=" + data.client_id;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getSomeVendorMst(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select id,NAME as name,KeyPersonName as username,KeyPersonMailId as email,KeyPersonAddr as address, " +
                " KeyPersonCell as mobile from VENDOR where id > " + offset + " and clientId=" + data.clientId +
                " and DeleteFlag=0 ORDER BY id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (select id,NAME as name,KeyPersonName as username,KeyPersonMailId as email,KeyPersonAddr as address, " +
                " KeyPersonCell as mobile from VENDOR where id < " + offset + " and clientId=" + data.clientId +
                " and DeleteFlag=0 ORDER BY id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(*) count from VENDOR where clientId=" + data.clientId + " and DeleteFlag=0";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function getUnmappedLeafMenu(data, cb) {

    var str = " SELECT a.client_id,a.parent_menu_id as  parent ,a.id id,a.menu_desc name, a.sequence_no " +
        " FROM tbl_client_menu_details a " +
        " WHERE a.client_id=" + data.clientId + " " +
        " and a.module_id = " + data.moduleId + " " +
        " and a.DeleteFlag = '0' and a.url_id is null and a.leafnode ='true'";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getRemainingUrlDtls(data, cb) {
    var sql = "select b.id,b.URL url,b.URLKEY urlKey,b.URLDESCRIPTION urlDesc from MODULEURLMAP a, URLKEY b where a.CLIENTID=1 and a.MODULEID = " + data.moduleId + " " +
        " and a.DeleteFlag = '0' and a.URLID not in (select URLID from MODULEURLMAP  where CLIENTID=" + data.clientId + " " +
        " and MODULEID = " + data.moduleId + " and a.DeleteFlag = '0') and a.URLID = b.id and b.DeleteFlag = '0' ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                cb(null, true, details);
            } else {
                cb(null, true, []);
            }
        }
    })
}

function mapNewUrlToModule(data, cb) {
    let sql = 'insert into MODULEURLMAP (CLIENTID,MODULEID,URLID,createbyid) ' +
        'values(' + data.clientId + ',' + data.moduleId + ',' + data.urlId + ',' + data.createbyid + ');'
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result.insertId);
        }
    });
}

function getUrlSequence(data, callback) {
    getUserdetails({ user_id: data.user_id }, function (err, success, details) {
        if (err) {
            callback(err, null);
        } else {
            if (success) {
                data.clientId = details[0].clientId;
                let sql = " select id from URLKEY where URL like ('%" + data.url + "') and DeleteFlag='0' ";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        if (result.length > 0) {
                            var urlId = result[0].id;
                            let sql1 = " select sequence_no seq_no,parent_menu_id  from tbl_client_menu_details where url_id =" + urlId + " and client_id =" + data.clientId + " ";
                            con.query(sql1, function (err1, result1) {
                                if (err1) {
                                    logData(err1);
                                    callback(err1, null);
                                } else {
                                    if (result1.length == 0) {
                                        callback(null, "No Data Found");
                                    } else {
                                        var seq_no = parseInt(result1[0].seq_no);
                                        let sql2 = " select a.id, a.menu_desc,b.url, a.sequence_no from tbl_client_menu_details a, URLKEY b  " +
                                            " where a.url_id = b.id and  a.client_id =" + data.clientId + " and  a.parent_menu_id =" + result1[0].parent_menu_id + " " +
                                            " and  a.sequence_no in (" + (seq_no - 1) + "," + (seq_no + 1) + ") and  a.DeleteFlag = '0'  and b.DeleteFlag = '0' ";
                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                callback(err2, null);
                                            } else {

                                                for (var i = 0; i < result2.length; i++) {
                                                    if (result2[i].sequence_no == (seq_no - 1)) {
                                                        result2[i].previous = true;
                                                        result2[i].next = false;
                                                    }
                                                    if (result2[i].sequence_no == (seq_no + 1)) {
                                                        result2[i].previous = false;
                                                        result2[i].next = true;
                                                    }

                                                }
                                                callback(null, true, result2);
                                            }
                                        });
                                    }
                                }
                            });
                        } else {
                            callback(null, true, []);
                        }
                    }
                });
            } else {
                callback(null, false, 'Something Went Wrong')
            }
        }
    })
}

function updateMenuDtls(data, cb) {
    var sql = "update tbl_client_menu_details set menu_desc='" + data.name + "',modifybyid = " + data.user_id + ", modifydate = Now() where id = " + data.id + " ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                cb(null, true, details);
            } else {
                cb(null, true, []);
            }
        }
    })
}

function checkDuplicateAdditionalFuncMappingWithUser(data, cb) {
    let sql = "select * from AdditionalFuncMappingWithUser where clientId= " + data.clientId + " and ticketType= " + data.ticketTypeId + " " +
        " and supportGroupLevelId = " + data.supportGroupLevelId + " and userId= " + data.usrLt + " and functionDtlsId = " + data.activityLt + "  and functionalityId = " + data.functionalityId + " and DeleteFlag = '0' ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details != null && details.length > 0) {
                cb(null, true, "duplicate");
            } else {
                var sql1 = "Insert into AdditionalFuncMappingWithUser (clientId,ticketType,supportGroupLevelId,userId,functionDtlsId,createbyid,functionalityId) " +
                    " values(" + data.clientId + "," + data.ticketTypeId + "," + data.supportGroupLevelId + "," + data.usrLt + "," + data.activityLt + "," + data.createdBy + "," + data.functionalityId + ")";
                con.query(sql1, function (err1, details1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (details1.insertId > 0) {
                            cb(null, true, "Ok");
                        } else {
                            cb(null, true, "Ok");
                        }

                    }
                })
            }

        }
    })
}

function getAllClients(cb) {
    var str = 'SELECT id,NAME as name ,startDate,endDate FROM  CLIENT where DeleteFlag="0"';
    con.query(str, function (err, done, fields) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    })
}

function getTicketExtandDtlsTicketWise(data, cb) {
    var sql = "Select id, ticketExtandMstId, ticketId, fieldValue from ticketExtandDtlsTbl  where ticketId = " + data.ticketId + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, []);
            }
        }
    });
}

function getTicketExtandDtlsTicketNFieldWise(data, cb) {
    var sql = "Select id, ticketExtandMstId, ticketId, fieldValue from ticketExtandDtlsTbl  where ticketId = " + data.ticketId + " and ticketExtandMstId = " + data.ticketExtandMstId + "";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, []);
            }
        }
    });
}

function updateAdditionalFieldTicketWise(data, cb) {
    let sql = "Update ticketExtandDtlsTbl set DeleteFlag=1 where ticketId=? and DeleteFlag=0";
    con.query(sql, [data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            insertAdditionalFieldTicketWise(data, function (err, success) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    cb(null, true);
                }
            })
        }
    })
}

function logData(data) {
    util.logData(data, new Date());
    logger.log(data);
}

function getTicketFieldsCatWise(data, cb) {
    const catgId = data.catId.split(',');
    var allField = [];
    let count = 0;
    let catagoryId = '';
    for (let i = 0; i < catgId.length; i++) {
        if (i === 0) {
            catagoryId = catgId[i];
        } else {
            catagoryId += ',' + catgId[i];
        }
        let sql = "select a.id, a.type,a.category_id, b.ATTRVAL categoryNm, c.ATTRVAL ticketType, a.fieldName, a.fieldType,a.predifinedValue,a.isQuestion " +
            " from ticketExtandMstTbl a, TICKETATTRIBUTES b , TICKETATTRIBUTES c " +
            " where a.category_id = b.id  " +
            " and a.ticketType = c.id  " +
            " and a.DeleteFlag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' " +
            " and b.clientId = ? and a.category_id = ? and a.ticketType=? order by a.id";
        // util.logData(sql, catagoryId);
        con.query(sql, [data.clientId, catagoryId, data.ticketTypeId], function (err, details) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                for (let j = 0; j < details.length; j++) {
                    details[j].isQuestion = stringToBool(details[j].isQuestion)
                    allField.push(details[j]);
                }
                count++;
                if (count === catgId.length) {
                    cb(null, true, allField);
                }
            }
        })
    }
}

function insertAdditionalFieldTicketWise(data, cb) {
    // util.logData(JSON.stringify(data))
    if (data.fieldValueDtls) {
        var fldVal = data.fieldValueDtls.split("#");
        var flg = 0;
        for (var i = 0; i < fldVal.length; i++) {
            var x = fldVal[i];
            let sql = " Insert into ticketExtandDtlsTbl (ticketId,ticketExtandMstId,fieldValue,createbyid) " +
                " values(" + data.ticketId + "," + x.split("@")[0] + "," + con.escape(x.split("@")[1]) + "," + data.createdBy + ") ";
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    flg++;
                    if (flg === fldVal.length) {
                        cb(null, true);
                    }

                }
            });
        }
    } else {
        cb(null, true);
    }
}

function insertPlannedActivityTicketWise(data, cb) {
    if (data.ticket_type_seq === 5) {
        let sql = "INSERT INTO `schedule_ticket_dtl` (`ticket_id`, `clientId`, `planned_activity_start_dt`, `planned_activity_end_dt`," +
            " `schedule_start_date`, `schedule_duration`, `createbyid`) VALUES (" + data.ticketId + "," + data.clientId + ",'" +
            data.planned_start_dt + "','" + data.planned_end_dt + "','" + data.schedule_start_date + "'," + data.schedule_duration + "," + data.createdBy + ");";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                cb(null, true);
            }
        });
    } else {
        cb(null, true);
    }
}

function getAddionalFieldWithValue(data, cb) {
    let sql = "select b.id,b.isQuestion,b.type,a.id ticket_id,b.category_id,b.ticketType,b.fieldName,b.fieldType,b.predifinedValue,c.fieldValue value from ticket a,ticketExtandMstTbl b ,ticketExtandDtlsTbl c where a.ticketTypeId = b.ticketType and a.id = " + data.ticketId + " and a.id = c.ticketId and b.id = c.ticketExtandMstId and c.DeleteFlag=0 and a.DeleteFlag=0 and b.DeleteFlag=0 order by b.id";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function insertCSatFormDtls(data, cb) {
    let sql = "insert into ticketwise_csat_form (ticket_id,csat_command,csat_scrore) values(" + data.ticketId + "," + data.comm + " , " + data.scrore + ") ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

             // optimizedreport table starts
             var sql6 = "select id from optimizedreport where ticket_id=?;"
             logData("$%^&*()*&^%$%^&*()(*" + sql6);
             con.query(sql6, [data.ticketId], function (err, result6) {
                 logData("$%^&*()*&^%$%^2&*()(*" + sql6);
                 console.log("kjnbhgf", result6);
                 if (err) {
                     cb(err, null);
                 } else {
                     console.log("kjnbhgf");
                     var sql7 = "update optimizedreport set csat_score=?,csat_comment=? where id=?;"
                     logData("@@@@@@@@@@@@@@" + sql7)
                     con.query(sql7, [data.scrore, data.comm, result6[0].id], function (err, result7) {
                         if (err) {
                             console.log("####@#@#@#@#");
                             cb(err, null);
                         } else {
                             logData("&&&&&&&&&&&&&&------------>" + sql7);
                             console.log("@@@@@@@@@@@@@654", result7);
                             cb(null, true, result7);
                         }
                     })
 
                 }
             });
             // optimizedreport table ends
 
            if (details.insertId > 0) {
                cb(null, true, details.insertId);
            } else {
                cb(null, false, "Data is not inserted");
            }

        }
    })
}

function getCSatFormDtls(data, cb) {
    let sql = "select * from ticketwise_csat_form where ticket_id = " + data.ticketId + " and deleteflag =0  ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function updateCSatFormDtls(data, cb) {
    let sql = "update ticketwise_csat_form set csat_command = '" + data.comm + "' , csat_scrore = " + data.scrore + ",modifybyid = " + data.user_id + ", modifydate = Now()  where id = " + data.id + "  ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.affectedRows > 0) {
                cb(null, true, details.affectedRows);
            } else {
                cb(null, false, "Data is not updated");
            }
        }
    })
}

function deleteCSatFormDtls(data, cb) {
    let sql = "update ticketwise_csat_form set deleteflag='1',delete_by_id = " + data.user_id + ", deletedate = Now()  where id = " + data.id + "  ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.affectedRows > 0) {

                // optimizedreport table starts

                var sql6 = "select id from optimizedreport where ticket_id =?;"
                con.query(sql6, [data.ticketId], function (err, result6) {
                    if (err) {
                        cb(err, null);
                    } else {
                        logData("WWWWWWWWWWWWWWW" + sql6);
                        var sql7 = "update optimizedreport set csat_score=?,csat_comment=? where id=?;"
                        con.query(sql7, [data.scrore, data.comm, result6[0].id], function (err, result7) {
                            if (err) {
                                cb(err, null);
                            } else {
                                logData("&&&&&&&&&&&&&&------------>" + sql7);
                                console.log("@@@@@@@@@@@@@000646540", result7);
                                cb(null, true, result7);
                            }
                        })

                    }
                });

                // optimizedreport table ends

                cb(null, true, details.affectedRows);
            } else {
                cb(null, false, "Data is not updated");
            }
        }
    })
}

function insertTicketEscalationDtlsSupportGrpWise(data, cb) {
    let sql1 = "select * from ticket_escalation_supportgroupwise where client_id = " + data.clientId + " and ticket_type = " + data.ticketType + " " +
        " and  busi_priority_id =" + data.busi_priority_id + " and  supportGroupLevelId=" + data.supportGroupLevelId + " and  category_id=" + data.category_id + "  and deleteflag = '0'  ";
    con.query(sql1, function (err1, details1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (details1.length > 0) {
                cb(null, false, "Duplicate data");
            } else {
                let sql = "insert into ticket_escalation_supportgroupwise(client_id, ticket_type, busi_priority_id, supportGroupLevelId, escalation_dtls,category_id) " +
                    " values(" + data.clientId + "," + data.ticketType + "," + data.busi_priority_id + "," + data.supportGroupLevelId + ",'" + data.escalation_dtls + "'," + data.category_id + ") ";
                con.query(sql, function (err, details) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (details.insertId > 0) {
                            cb(null, true, details.insertId);
                        } else {
                            cb(null, false, "Data is not inserted");
                        }
                    }
                })
            }
        }
    })
}

// function getTicketEscalationDtlsSupportGrpWise(data, cb) {
//     let sql = "SELECT a.id, a.ticket_type,d.ATTRVAL ticketType, a.busi_priority_id,c.busi_priority_name priority, a.supportGroupLevelId,b.LEVELSHORTDESC sgroup, a.escalation_dtls escalation, a.deleteflag ,e.ATTRVAL category " +
//         " FROM ticket_escalation_supportgroupwise a, SUPPORTGROUPLEVEL b, BUSINESSPRIORITY c, TICKETATTRIBUTES d, TICKETATTRIBUTES e " +
//         " where a.supportGroupLevelId = b.id and a.busi_priority_id = c.id and a.ticket_type = d.id and a.category_id = e.id " +
//         " and a.deleteflag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0'" +
//         "  and a.client_id = " + data.clientId + " ";
//     con.query(sql, function (err, details) {
//         if (err) {
//             logData(err);
//             cb(err, null);
//         } else {
//             cb(null, true, details);
//         }
//     })
// }

function getTicketEscalationDtlsSupportGrpWise(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, a.ticket_type,d.ATTRVAL ticketType, a.busi_priority_id,c.busi_priority_name priority, a.supportGroupLevelId,b.LEVELSHORTDESC sgroup, a.escalation_dtls escalation, a.deleteflag ,e.ATTRVAL category " +
                " FROM ticket_escalation_supportgroupwise a, SUPPORTGROUPLEVEL b, BUSINESSPRIORITY c, TICKETATTRIBUTES d, TICKETATTRIBUTES e " +
                " where a.id > " + offset + " and a.supportGroupLevelId = b.id and a.busi_priority_id = c.id and a.ticket_type = d.id and a.category_id = e.id " +
                " and a.deleteflag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0'" +
                "  and a.client_id = " + data.clientId + " ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id, a.ticket_type,d.ATTRVAL ticketType, a.busi_priority_id,c.busi_priority_name priority, a.supportGroupLevelId,b.LEVELSHORTDESC sgroup, a.escalation_dtls escalation, a.deleteflag ,e.ATTRVAL category " +
                " FROM ticket_escalation_supportgroupwise a, SUPPORTGROUPLEVEL b, BUSINESSPRIORITY c, TICKETATTRIBUTES d, TICKETATTRIBUTES e " +
                " where a.id > " + offset + " and a.supportGroupLevelId = b.id and a.busi_priority_id = c.id and a.ticket_type = d.id and a.category_id = e.id " +
                " and a.deleteflag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0'" +
                "  and a.client_id = " + data.clientId + " ORDER BY a.id ASC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count " +
            " FROM ticket_escalation_supportgroupwise a, SUPPORTGROUPLEVEL b, BUSINESSPRIORITY c, TICKETATTRIBUTES d, TICKETATTRIBUTES e " +
            " where a.supportGroupLevelId = b.id and a.busi_priority_id = c.id and a.ticket_type = d.id and a.category_id = e.id " +
            " and a.deleteflag = '0' and b.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0'" +
            "  and a.client_id = " + data.clientId + " ";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function insertTicketIdConfigure(data, cb) {
    var data = preventSqlInjection(data);
    if (data.prefix1 === null || data.prefix1 === 'null') {
        data.prefix1 = "";
    }
    if (data.prefix2 === null || data.prefix2 === 'null') {
        data.prefix2 = "";
    }
    if (data.prefix3 === null || data.prefix3 === 'null') {
        data.prefix3 = "";
    }

    let sql1 = "select * from ticket_id_configuration where client_id = " + data.clientId + " and ticket_type = " + data.ticketType + " " +
        " and  category_id =" + data.category_id + " " +
        " and deleteflag = '0'  ";
    con.query(sql1, function (err1, details1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (details1.length > 0) {
                cb(null, false, "Duplicate data");
            } else {
                let sql2 = "select id,is_running_serial_no from ticket_id_configuration where client_id = " + data.clientId + " and ticket_type = " + data.ticketType + " " +
                    " and deleteflag = '0' and is_running_serial_no!= '" + data.is_running_serial_no + "' ";
                con.query(sql2, function (err2, details2) {
                    if (err2) {
                        logData(err2);
                        cb(err2, null);
                    } else {
                        if (details2.length > 0) {
                            cb(null, false, "Ticket Numbering reset logic should be identical accross all categories for the client.");
                        } else {
                            let sql = "insert into ticket_id_configuration(client_id, ticket_type, prefix1, category_id, prefix2," +
                                " prefix3, is_running_serial_no, createbyid) " +
                                " values('" + data.clientId + "','" + data.ticketType + "','" + data.prefix1 + "','" +
                                data.category_id + "','" + data.prefix2 + "','" + data.prefix3 + "','" + data.is_running_serial_no + "','" + data.user_id + "') ";
                            con.query(sql, function (err, details) {
                                if (err) {
                                    logData(err);
                                    cb(err, null);
                                } else {
                                    if (details.insertId > 0) {
                                        /***************************************************************/
                                        let yr = (new Date()).getFullYear();
                                        let sql4 = "select count(id) count from ticket_yearly_status where client_id = " + data.clientId + " and ticket_type = " + data.ticketType +
                                            " and DeleteFlag = 0";
                                        con.query(sql4, function (err4, result4) {
                                            if (err4) {
                                                logData(err4);
                                                cb(err4, null);
                                            } else {
                                                if (result4[0].count === 0) {
                                                    let sql3 = " insert into ticket_yearly_status (client_id, year_val,ticket_type,yr_count,createbyid) " +
                                                        "values( " + data.clientId + " ," + yr + "," + data.ticketType + "," + data.yrCntNo + "," + data.user_id + " ) ";
                                                    con.query(sql3, function (err3, result3) {
                                                        if (err3) {
                                                            logData(err3);
                                                            cb(err3, null);
                                                        } else {
                                                            cb(null, true, details.insertId);
                                                        }
                                                    });
                                                }
                                            }
                                        });
                                        cb(null, true, details.insertId);
                                        /***************************************************************/

                                    } else {
                                        cb(null, false, "Data is not inserted");
                                    }
                                }
                            })
                        }
                    }
                })
            }
        }
    })
}

function getTicketIdConfigure(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, a.ticket_type,d.ATTRVAL ttype, a.prefix1 prefix1, a.category_id," +
                " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.category_id and DeleteFlag = '0') category ," +
                " a.prefix2  prefix2,a.prefix3  prefix3, (select yr_count from ticket_yearly_status where" +
                " ticket_type = a.ticket_type and DeleteFlag = '0') start_number " +
                " FROM ticket_id_configuration a, TICKETATTRIBUTES d " +
                " where a.ticket_type = d.id and a.deleteflag = '0' and d.DeleteFlag = '0' " +
                " and a.client_id = ? and a.id > ? ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from ( SELECT a.id, a.ticket_type,d.ATTRVAL ttype, a.prefix1 prefix1, a.category_id," +
                " (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.category_id  and DeleteFlag = '0' ) category " +
                " ,a.prefix2  prefix2,a.prefix3  prefix3, (select yr_count from ticket_yearly_status where " +
                " ticket_type = a.ticket_type and DeleteFlag = '0') start_number " +
                " FROM ticket_id_configuration a, TICKETATTRIBUTES d " +
                " where a.ticket_type = d.id and a.deleteflag = '0' and d.DeleteFlag = '0' " +
                " and a.client_id = ? and a.id < ? " +
                " ORDER BY a.id DESC LIMIT ? ) z ORDER BY z.id  ASC;";
        }
        con.query(str, [data.clientId, Number(offset), Number(page_size)], function (err, done) {
            if (err) {
                util.logData('---Error from getTicketIdConfigure ----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count " +
            " FROM ticket_id_configuration a, TICKETATTRIBUTES d " +
            " where a.ticket_type = d.id and a.deleteflag = '0' and d.DeleteFlag = '0' " +
            " and a.client_id = ?";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData('---Error from getTicketIdConfigure ----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getClientWiseSupportGroupList(data, cb) {
    let sql = "SELECT LEVELSHORTDESC name, id field FROM SUPPORTGROUPLEVEL where CLIENTID = " + data.clientId + " and DeleteFlag = '0'  ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getMappedModuleUserClientCWise(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = '';

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT MODULECLIENTUSERMAP.id,tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                ' USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name,USER.NAME as user_name' +
                ' from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where' +
                ' MODULECLIENTUSERMAP.deleteFlag="0" and MODULECLIENTUSERMAP.client_id=' + data.clientId +
                ' and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id and MODULECLIENTUSERMAP.client_id=CLIENT.id and' +
                ' MODULECLIENTUSERMAP.role_id=USERROLE.id and MODULECLIENTUSERMAP.module_id=MODULE.id and' +
                ' MODULECLIENTUSERMAP.user_id=USER.id and MODULECLIENTUSERMAP.id > ' + offset +
                ' LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'select *from (SELECT MODULECLIENTUSERMAP.id,tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                ' USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name,USER.NAME as user_name' +
                ' from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where' +
                ' MODULECLIENTUSERMAP.deleteFlag="0" and MODULECLIENTUSERMAP.client_id=' + data.clientId +
                ' and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id and MODULECLIENTUSERMAP.client_id=CLIENT.id and' +
                ' MODULECLIENTUSERMAP.role_id=USERROLE.id and MODULECLIENTUSERMAP.module_id=MODULE.id and' +
                ' MODULECLIENTUSERMAP.user_id=USER.id and MODULECLIENTUSERMAP.id < ' + offset +
                ' ORDER BY MODULECLIENTUSERMAP.id DESC LIMIT ' + page_size + ')a ORDER BY a.id  ASC;';
        }

        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'select count(*) count ' +
            ' from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where' +
            ' MODULECLIENTUSERMAP.deleteFlag="0" and MODULECLIENTUSERMAP.client_id=' + data.clientId +
            ' and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id and MODULECLIENTUSERMAP.client_id=CLIENT.id and' +
            ' MODULECLIENTUSERMAP.role_id=USERROLE.id and MODULECLIENTUSERMAP.module_id=MODULE.id and' +
            ' MODULECLIENTUSERMAP.user_id=USER.id';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function getModuleRolesMappingClientWise(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT MODULECLIENTUSERROLEMAP.id,' +
                ' tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                ' USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP,MODULE,' +
                ' tbl_client_menu_details,USERROLE,CLIENT where MODULECLIENTUSERROLEMAP.deleteFlag="0" and' +
                ' MODULECLIENTUSERROLEMAP.clientId=' + data.clientId + ' and MODULECLIENTUSERROLEMAP.clientId=CLIENT.id and' +
                ' MODULECLIENTUSERROLEMAP.menuId=tbl_client_menu_details.id and MODULECLIENTUSERROLEMAP.roleId=USERROLE.id' +
                ' and MODULECLIENTUSERROLEMAP.moduleId=MODULE.id and MODULECLIENTUSERROLEMAP.id > ' + offset +
                ' LIMIT ' + page_size;
        } else if (paginationType == 'prev') {
            str = 'SELECT * from (SELECT MODULECLIENTUSERROLEMAP.id,' +
                ' tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,' +
                ' USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP,MODULE,' +
                ' tbl_client_menu_details,USERROLE,CLIENT where MODULECLIENTUSERROLEMAP.deleteFlag="0" and' +
                ' MODULECLIENTUSERROLEMAP.clientId=' + data.clientId + ' and MODULECLIENTUSERROLEMAP.clientId=CLIENT.id and' +
                ' MODULECLIENTUSERROLEMAP.menuId=tbl_client_menu_details.id and MODULECLIENTUSERROLEMAP.roleId=USERROLE.id' +
                ' and MODULECLIENTUSERROLEMAP.moduleId=MODULE.id and MODULECLIENTUSERROLEMAP.id < ' + offset +
                ' ORDER BY MODULECLIENTUSERROLEMAP.id DESC LIMIT ' + page_size + ')a ORDER BY a.id  ASC';
        }

        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(*) count from MODULECLIENTUSERROLEMAP,MODULE,' +
            ' tbl_client_menu_details,USERROLE,CLIENT where MODULECLIENTUSERROLEMAP.deleteFlag="0" and' +
            ' MODULECLIENTUSERROLEMAP.clientId=' + data.clientId + ' and MODULECLIENTUSERROLEMAP.clientId=CLIENT.id and' +
            ' MODULECLIENTUSERROLEMAP.menuId=tbl_client_menu_details.id and MODULECLIENTUSERROLEMAP.roleId=USERROLE.id' +
            ' and MODULECLIENTUSERROLEMAP.moduleId=MODULE.id';
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function insertTicketPriorityConfiguration(data, cb) {
    var str = "select * from ticket_priority_configuration where client_id = " + data.clientId + " and ticket_type=" + data.ticket_type + " " +
        " and deleteflag = '0' ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var str = "insert into ticket_priority_configuration (client_id, ticket_type, ticket_priority_type) " +
                    " values(" + data.clientId + ", " + data.ticket_type + "," + data.ticket_priority_type + ") ";
                con.query(str, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.insertId > 0) {
                            cb(null, true, result.insertId);
                        } else {
                            cb(null, false, "Some error occured");
                        }
                    }
                });
            } else {
                cb(null, false, "Duplicate entry");
            }
        }
    });
}

function updateTicketPriorityConfiguration(data, cb) {
    var str = "select * from ticket_priority_configuration where client_id = " + data.clientId + " and ticket_type=" + data.ticket_type + " " +
        " and deleteflag = '0' and ticket_priority_type = " + data.ticket_priority_type + " ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var str = "update ticket_priority_configuration set ticket_priority_type = " + data.ticket_priority_type + " , " +
                    " modifybyid = " + data.user_id + ", modifydate = Now()  where id = " + data.id + " ";
                con.query(str, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.affectedRows > 0) {
                            cb(null, true, result.affectedRows);
                        } else {
                            cb(null, false, "Some error occured");
                        }
                    }
                });
            } else {
                cb(null, false, "Duplicate entry");
            }
        }
    });
}

function deleteTicketPriorityConfiguration(data, cb) {
    var data = util.preventSqlInjection(data);
    var str = "update ticket_priority_configuration set deleteflag = '1', " +
        " delete_by_id = " + data.user_id + ", DeleteDate = Now()  where id = " + data.id + " ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, "Some error occured");
            }
        }
    });
}

function getTicketPriorityConfiguration(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id,a.ticket_type,(select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type)" +
                " ticket_type_nm, if((a.ticket_priority_type='1'),'Urgency Wise','Category Wise') ticket_priority_type " +
                " from ticket_priority_configuration a" +
                " where a.deleteflag = '0' " +
                " and a.client_id = " + data.clientId +
                " and a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (select a.id,a.ticket_type,(select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type)" +
                " ticket_type_nm, if((a.ticket_priority_type='1'),'Urgency Wise','Category Wise') ticket_priority_type " +
                " from ticket_priority_configuration a" +
                " where a.deleteflag = '0' " +
                " and a.client_id = " + data.clientId + " and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(*) count " +
            " from ticket_priority_configuration a" +
            " where a.deleteflag = '0' " +
            " and a.client_id = " + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}



function getPriorityMapping(data, cb) {
    var str = "SELECT id,ticket_priority_type FROM ticket_priority_configuration" +
        " where deleteflag = '0' " +
        " and client_id = " + data.clientId + " and ticket_type = " + data.ticket_type + " ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                getBusinessPriorityTicketTypeWise({
                    clientId: data.clientId,
                    ticket_type: data.ticket_type
                }, function (errP, successP, detailsP) {
                    result[0].priority = detailsP;
                    if (result[0].ticket_priority_type == '1') {
                        getBusinessImpactTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (errB, successB, detailsB) {
                            result[0].impact = detailsB;
                            getBusinessUrgencyTicketTypeWise({
                                clientId: data.clientId,
                                ticket_type: data.ticket_type
                            }, function (errB, successB, detailsB) {
                                result[0].urgency = detailsB;
                                cb(null, true, result);
                            });
                        });
                    } else {
                        // getLastLevelCategoryByTicketType({
                        //     clientId: data.clientId,
                        //     ticket_type: data.ticket_type
                        // }, function (errC, successC, detailsC) {
                        //     result[0].category = detailsC;
                        //     cb(null, true, result);
                        // });

                        getLastLevelCategoryByTicketTypeForbusinessMatrix({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (errC, successC, detailsC) {
                            result[0].category = detailsC;
                            cb(null, true, result);
                        });
                    }
                });
            } else {
                cb(null, false, "Create proper Ticket Configuration1");
            }

        }
    });
}


function getLastLevelCategoryByTicketTypeForbusinessMatrix(data, cb) {
    let sql = 'SELECT id FROM attributesHeaderMst where CLIENTID=? and ticket_type=? and DeleteFlag=0 ORDER BY sequence_no DESC limit 1;'
    con.query(sql, [data.clientId, data.ticket_type], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var headerId = result[0].id;
                let sql1 = "SELECT a.id id, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.parentPath))) name FROM TICKETATTRIBUTES a  " +
                    " WHERE  a.CLIENTID=? and a.attrHeaderMstId = ? and a.DeleteFlag = '0' and a.id not in (SELECT category_id from BUSINESSMATRIX where DeleteFlag  = 0 and CLIENTID = ?);";
                con.query(sql1, [data.clientId, headerId, data.clientId], function (err, result1) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result1)
                    }
                })
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}



function getPriorityMapping_old(data, cb) {
    var str = "SELECT id,ticket_priority_type FROM ticket_priority_configuration" +
        " where deleteflag = '0' " +
        " and client_id = " + data.clientId + " and ticket_type = " + data.ticket_type + " ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                getBusinessPriorityTicketTypeWise({
                    clientId: data.clientId,
                    ticket_type: data.ticket_type
                }, function (errP, successP, detailsP) {
                    result[0].priority = detailsP;
                    if (result[0].ticket_priority_type == '1') {
                        getBusinessImpactTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (errB, successB, detailsB) {
                            result[0].impact = detailsB;
                            getBusinessUrgencyTicketTypeWise({
                                clientId: data.clientId,
                                ticket_type: data.ticket_type
                            }, function (errB, successB, detailsB) {
                                result[0].urgency = detailsB;
                                cb(null, true, result);
                            });
                        });
                    } else {
                        getLastLevelCategoryByTicketType({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (errC, successC, detailsC) {
                            result[0].category = detailsC;
                            cb(null, true, result);
                        });
                    }
                });
            } else {
                cb(null, false, "Create proper Ticket Configuration1");
            }

        }
    });
}

function updateReOpenTicket(data, cb) {
    var str = "SELECT id,ticketTypeId FROM ticket where id = " + data.id + " and ticketCloseDate is not null  ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var str1 = "SELECT id,sla_recalcultion_type FROM ticket_sla_recalculation_type where client_id = " + data.clientId + " " +
                    " and ticket_type =" + result[0].ticketTypeId + "  and situation_type = 'reopen' ";
                con.query(str1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err, null);
                    } else {
                        if (result1.length > 0) {
                            reopenTicket({
                                "id": data.id,
                                "sla_recalcultion_type": result1[0].sla_recalcultion_type,
                                "user_id": data.user_id
                            }, function (errC, successC, detailsC) {
                                if (errC || !successC) {
                                    logData(errC);
                                    cb(errC, null);
                                } else {
                                    cb(null, true, detailsC);
                                }
                            });
                        } else {
                            cb(null, false, "Create proper Ticket Configuration2");
                        }
                    }
                });
            } else {
                cb(null, false, "Ticket is not in closed status");
            }
        }
    });
}

function getPriorityCategoryWise(data, cb) {
    var str = "  SELECT a.id id, f.ATTRVAL category , d.busi_priority_name priority " +
        " from BUSINESSMATRIX a, BUSINESSPRIORITY d, TICKETATTRIBUTES f " +
        " where a.CLIENTID =" + data.clientId + "  and a.busi_priority_id = d.id  and a.category_id = f.id" +
        " and a.ticket_type = " + data.ticket_type + "  and a.category_id = " + data.category + " and a.DeleteFlag = '0'  and f.DeleteFlag = '0' and a.category_id is not null ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function insertSlaRecalculationMstForm(data, cb) {
    var str = "  SELECT * from ticket_sla_recalculation_type a  " +
        " where a.client_id =" + data.clientId + "  and ticket_type = " + data.ticket_type + " and a.sla_recalcultion_type = '" + data.type + "' and DeleteFlag=0  ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, false, "Duplicate data");
            } else {
                var str1 = " insert into ticket_sla_recalculation_type ( client_id, ticket_type, sla_recalcultion_type,situation_type)  " +
                    " values (" + data.clientId + "," + data.ticket_type + ",'" + data.situation_type + "' ,'" + data.type + "') ";
                con.query(str1, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.affectedRows);
                    }
                });
            }
        }
    });
}

function getSlaRecalculationMstForm(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id,b.ATTRVAL ticket_type,a.situation_type,a.sla_recalcultion_type ticket_priority_type " +
                " from ticket_sla_recalculation_type a, TICKETATTRIBUTES b  " +
                " where a.ticket_type = b.id " +
                " and a.client_id =" + data.clientId + "  and a.DeleteFlag = '0'  and b.DeleteFlag = '0'" +
                " and a.id > " + offset + " ORDER BY a.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT a.id,b.ATTRVAL ticket_type,a.situation_type,a.sla_recalcultion_type ticket_priority_type " +
                " from ticket_sla_recalculation_type a, TICKETATTRIBUTES b  " +
                " where a.ticket_type = b.id " +
                " and a.client_id =" + data.clientId + "  and a.DeleteFlag = '0'  and b.DeleteFlag = '0' and a.id < " +
                offset + " ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";

        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count " +
            " from ticket_sla_recalculation_type a, TICKETATTRIBUTES b  " +
            " where a.ticket_type = b.id " +
            " and a.client_id =" + data.clientId + "  and a.DeleteFlag = '0'  and b.DeleteFlag = '0'";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getAttributesParentWiseWithPriority(data, cb) {
    let sql = "select id,ATTRVAL title,attachedField from TICKETATTRIBUTES where DeleteFlag = '0'  and (CLIENTID=? or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and PARENT_ID =? ";
    con.query(sql, [data.clientId, data.clientId, data.parentId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            util.logData("----------->:" + JSON.stringify(result))
            if (result.length > 0) {
                for (let i = 0; i < result.length; i++) {
                    result[i].attachedField = stringToBool(result[i].attachedField);
                }
                cb(null, true, { val: result });
            } else {
                if (Number(data.pType) === 2) {
                    let sql1 = 'SELECT p.id id,p.busi_priority_name name FROM BUSINESSPRIORITY p,BUSINESSMATRIX m where p.DeleteFlag=0 and' +
                        ' m.DeleteFlag=0 and p.id=m.busi_priority_id and (m.CLIENTID=? or m.CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and m.category_id=? ' +
                        ' and m.ticket_type=?';
                    con.query(sql1, [data.clientId, data.clientId, data.parentId, data.tType], function (err, result1) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            cb(null, true, { priority: result1[0] });
                        }
                    })
                } else {
                    cb(null, false, "No data found");
                }
            }
        }
    });
}

function getTicketDetail(data, cb) {
    // let sql = "select * from ticket where id = " + data.id + " ";
    let sql = "select a.*, (select feedback from ticketFeedBack b where ticketId = a.id order by b.id desc limit 1) lastComment, " +
        " (SELECT c.Name FROM ticketFeedBack b, USER c WHERE b.ticketId = a.id and b.createbyid=c.id ORDER BY b.id DESC LIMIT 1) lastCommentUser from ticket a where a.id = " + data.id + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function reopenTicket(data, cb) {
    logData('reopenTicket: ' + JSON.stringify(data))
    getTicketDetail(data, function (errT, successT, detailsT) {
        if (errT) {
            logData(errT);
            cb(errT, null);
        } else {
            if (!successT) {
                cb(null, false, detailsT);
            } else {
                logData('reopenTicket------details-----------------' + JSON.stringify(detailsT))
                getWFCGeneratedFor({
                    // "clientId": data.clientId,
                    // "ticket_type": data.ticketTypeId
                    "clientId": detailsT[0].clientid,
                    "ticket_type": detailsT[0].ticketTypeId
                }, function (errDyn, successDyn, detailsDyn) {
                    if (errDyn || !successDyn) {
                        logData('Error: ' + errDyn + successDyn)
                    } else {
                        util.logData('---------getWFCGeneratedFor------' + JSON.stringify(detailsDyn));
                        var cat_level = detailsDyn[0].category_level;
                        var catLt = detailsT[0].categoryDtlsLt.split(",");
                        var catVal = catLt[cat_level - 1].split("#")[1];
                        let str = "select a.supportGroupLevelId,a.work_flow_component_id,a.id,a.userId,b.tStatus_cd, a.workflowId from " +
                            " (select supportGroupLevelId,work_flow_component_id,id,userId,CLIENTID,workflowId " +
                            " from WFCCLIENT where DeleteFlag = '0' and CLIENTID = " + detailsT[0].clientid + " and STARTENDFLOWINDICATOR = '1' and categoryId=" + catVal + ") a," +
                            " (select id tStatus_cd,CLIENTID,sequence_no from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + detailsT[0].clientid + " and ATTRID = 2 " +
                            " and sequence_no = 1) b " +
                            " where a.CLIENTID= b.CLIENTID  "
                        logData('reopen------str-----------' + str)

                        con.query(str, function (errs, results) {
                            if (errs) {
                                logData(errs);
                                cb(errs, null);
                            } else {
                                if (results == null || results.length == 0) {
                                    cb(null, false, "Workflow not declare.");
                                } else {
                                    var sql1 = "update ticket set is_reopen = '1',is_sla_stop='N',modifydate=Now(),isCloseWF = 'N', modifybyid = " + data.user_id + " where id = " + data.id + " ";
                                    logData('re-open----------------------sql1----------' + sql1)
                                    con.query(sql1, function (err1, result1) {
                                        logData('re-open----------------------result1----------' + JSON.stringify(result1))
                                        if (err1) {
                                            logData('reopen error:----' + err1);
                                            cb(err1, null);
                                        } else {
                                            logData('data.sla_recalcultion_type--------------' + data.sla_recalcultion_type)
                                            if (result1.affectedRows > 0) {
                                                var catList = detailsT[0].categoryDtlsLt.split(",");
                                                var is_1st_entry = '';
                                                if (data.sla_recalcultion_type === 'new') {
                                                    is_1st_entry = 'Y';
                                                } else {
                                                    is_1st_entry = 'N';
                                                    var strRes = " update ticket_sla_response_dtls set resolution_stop_status = 'N' where ticketId = " + data.id + " and deleteflag = '0' ";
                                                    con.query(strRes, function (errRes, resultRes) {
                                                        if (errRes) {
                                                            logData(errRes);
                                                            cb(errRes, null);
                                                        } else {

                                                        }
                                                    });
                                                }
                                                /**************************************************************************/
                                                var fld = {
                                                    "clientId": detailsT[0].clientid,
                                                    "user_id": results[0].userId,
                                                    "frw_user_id": results[0].userId,
                                                    "work_flow_component_id": results[0].work_flow_component_id,
                                                    "wfcclient_id": results[0].id,
                                                    "supportGroupLevelId": results[0].supportGroupLevelId,
                                                    "PKFIELDVAL": data.id,
                                                    "FIELDVAL": catList[cat_level - 1].split("#")[1],
                                                    "category_id": catList[cat_level - 1].split("#")[0],
                                                    "tStatus_cd": results[0].tStatus_cd,
                                                    "createdBy": data.user_id,
                                                    "is_1st_entry": is_1st_entry,
                                                    "reopen": 1
                                                };
                                                var asd = "";
                                                generateWorkFlow(fld, function (errW, successW, detailsW) {
                                                    if (errW || !successW) {
                                                        logData(errW);
                                                        cb(errW, null);
                                                    } else {
                                                        asd = detailsW;
                                                        /***********************************************************/
                                                        var fldB = {
                                                            "clientId": detailsT[0].clientid,
                                                            "user_id": results[0].userId,
                                                            "supportGroupLevelId": results[0].supportGroupLevelId,
                                                            "ticketId": data.id,
                                                            "categoryId": catList[cat_level - 1].split("#")[1],
                                                            "parent_wfcclient_id": 0,
                                                            "STARTENDFLOWINDICATOR": 0,
                                                            "workflowId": results[0].workflowId,
                                                            "work_flow_component_id": results[0].work_flow_component_id,
                                                            "wfcclient_id": results[0].id,
                                                            "createdBy": data.user_id
                                                        };
                                                        var fldC = {
                                                            "clientId": detailsT[0].clientid,
                                                            "workflowId": results[0].workflowId,
                                                            "work_flow_component_id": results[0].work_flow_component_id,
                                                            "categoryId": catList[cat_level - 1].split("#")[1]
                                                        };
                                                        /***********************************************************/
                                                        checkBackWorkFlowDefined(fldC, function (errC, successC, detailsC) {
                                                            if (detailsC == '3') {
                                                                insertWFCClientTicketWise(fldB, function (errB, successB, detailsB) {
                                                                    if (errB || !successB) {
                                                                        logData(errB);
                                                                        cb(errB, null);
                                                                    }

                                                                });
                                                            }
                                                        });
                                                        var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId ) " +
                                                            //  " VALUES (" + result1.insertId + ",1,1," + data.createdBy + ") ";
                                                            " VALUES (" + data.id + ",12," + detailsW + "," + data.user_id + ") ";
                                                        logData('re-open---------------------sql5----------' + sql5)
                                                        con.query(sql5, function (err5, result5) {
                                                            if (err5) {
                                                                logData(err5);
                                                                cb(err5, null);
                                                            } else {
                                                                if (data.sla_recalcultion_type === 'new') {
                                                                    var sqlT = "Update ticket set is_sla_stop = 'N' , sla_calculation_start_time = Now() where id = " + data.id + "";
                                                                    logData('updateSlaStopinAllTable-------------------sql----------------------' + sqlT)
                                                                    con.query(sqlT, function (errT, resultT) {
                                                                        if (errT) {
                                                                            logData(errT);
                                                                            cb(errT, null);
                                                                        } else {
                                                                            request
                                                                                .get(SLA_URL + '/slaCalculation')
                                                                                .query({
                                                                                    ticketId: data.id,
                                                                                    reqType: 'reopen'
                                                                                }) // query string
                                                                                .end((err, resp) => {
                                                                                    if (err) {
                                                                                        logData(err);
                                                                                    } else {
                                                                                        logData('slaCalculation------------reopen-------------' + JSON.stringify(resp));
                                                                                        cb(null, true, result1.affectedRows);
                                                                                    }
                                                                                });
                                                                        }
                                                                    })


                                                                } else {
                                                                    cb(null, true, result1.affectedRows);
                                                                }
                                                            }
                                                        });
                                                    }
                                                });

                                            } else {
                                                cb(null, false, "Data is not updated");
                                            }
                                        }
                                    });
                                }
                            }
                        });
                    }//
                });

            }
        }
    })
}


function getMenuDtlsAllClientWise(data, cb) {
    var data = preventSqlInjection(data);
    var str = " SELECT a.client_id,a.parent_menu_id as  parent ,a.id id,a.menu_desc name, a.sequence_no " +
        " FROM tbl_client_menu_details a " +
        " WHERE a.client_id=" + data.clientId +
        " and a.module_id = " + data.moduleId +
        " and a.DeleteFlag = '0' ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function insertApiTime(data, cb) {
    const sql1 = 'INSERT into API_TRANSACTION (user_id) values(' + data.id + ')';

    con.query(sql1, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true);
        }
    })

}

function getApiTime(data, cb) {
    const sql = 'SELECT IF(TIMESTAMPDIFF(SECOND,MAX(`time`),NOW()) IS NULL,0,TIMESTAMPDIFF(SECOND,MAX(`time`),NOW()))`second_diff` FROM API_TRANSACTION where user_id=' + data.id;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result[0].second_diff);
        }
    })
}

function getUsrActionMappingWithClientId(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            util.logData('typeof offset=======' + typeof offset + offset);
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT roleAction.id,USERROLE.ROLENAME as role," +
                " CLIENT.NAME as client, action.name as action FROM CLIENT," +
                " roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and " +
                " roleAction.roleId=USERROLE.id and roleAction.actionId=action.id and roleAction.clientId=" +
                data.clientId + " and roleAction.id > " + offset +
                " ORDER BY roleAction.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT roleAction.id,USERROLE.ROLENAME as role," +
                " CLIENT.NAME as client, action.name as action FROM CLIENT," +
                " roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and " +
                " roleAction.roleId=USERROLE.id and roleAction.actionId=action.id and roleAction.clientId=" +
                data.clientId + " and roleAction.id < " + offset +
                " ORDER BY roleAction.id DESC LIMIT " + page_size + ")a ORDER BY a.id  ASC;";
        }

        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(*) count FROM CLIENT,' +
            ' roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and ' +
            ' roleAction.roleId=USERROLE.id and roleAction.actionId=action.id and roleAction.clientId=' +
            data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getRoleUserActionMapWithClientId(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = 'SELECT RoleUserAction.id,USER.NAME as user, USERROLE.ROLENAME as role,CLIENT.NAME as client,' +
                ' action.name as action FROM USER,CLIENT,RoleUserAction,USERROLE,action where RoleUserAction.DeleteFlag=0 and' +
                ' RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and' +
                ' RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id and' +
                ' RoleUserAction.clientId=' + data.clientId + ' and RoleUserAction.id > ' + offset + ' LIMIT ' + page_size;
            util.logData('str---------------->' + str);
        } else if (paginationType == 'prev') {
            str = 'select * from ( SELECT RoleUserAction.id,USER.NAME as user, USERROLE.ROLENAME as role,CLIENT.NAME as client,' +
                ' action.name as action FROM USER,CLIENT,RoleUserAction,USERROLE,action where RoleUserAction.DeleteFlag=0 and' +
                ' RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and' +
                ' RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id and' +
                ' RoleUserAction.clientId=' + data.clientId + ' and RoleUserAction.id < ' + offset +
                ' ORDER BY RoleUserAction.id DESC LIMIT ' + page_size + ') z ORDER BY z.id  ASC;';
            util.logData('str1---------------->' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = 'SELECT count(*) count ' +
            ' FROM USER,CLIENT,RoleUserAction,USERROLE,action where RoleUserAction.DeleteFlag=0 and' +
            ' RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and' +
            ' RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id and' +
            ' RoleUserAction.clientId=' + data.clientId
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getAttributesHeaderMstClientTicketTypeWise(data, cb) {
    var data = preventSqlInjection(data);
    var str = " SELECT c.name clientNm,a.id id,a.header_desc description,a.header_name name ,a.sequence_no seq," +
        " b.ATTRDESC attr, alphanum(a.header_name) field, d.ATTRVAL ticket_type " +
        " FROM CLIENT c, " +
        " attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d " +
        " WHERE a.ATTRID = b.id  " +
        " and a.CLIENTID  = c.id " +
        " and a.ticket_type  = d.id " +
        " and a.DeleteFlag = '0' " +
        " and c.DeleteFlag = '0' " +
        " and b.DeleteFlag = '0' " +
        " and a.CLIENTID=" + data.clientId + " " +
        " and a.ticket_type=" + data.ticket_type + "  order by a.sequence_no ASC ";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function checkTotalNoTicketInOpenGrpWise(data, cb) {
    var sql = "SELECT * FROM ticket where clientid =" + data.clientId + " and ticketTypeId =" + data.ticket_type + " " +
        " and categoryDtlsLt like '%#" + data.categoryId + ",%' " +
        " and (is_reopen = 1 or ticketCloseDate is null)";
    logData('checkTotalNoTicketInOpenGrpWise-------------------' + sql)
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function deleteBackwardWorkFlow(data, cb) {
    const sql = "SELECT id,clientId,categoryId,ticket_type,workflowId,work_flow_component_id,flowTypeId " +
        " FROM WFCCLIENT_back_notify where DeleteFlag = 0 and id = " + data.id;

    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var fldC = {
                    "clientId": result[0].clientId,
                    "workflowId": result[0].workflowId,
                    "work_flow_component_id": result[0].work_flow_component_id,
                    "ticket_type": result[0].ticket_type,
                    "categoryId": result[0].categoryId
                };
                checkTotalNoTicketInOpenGrpWise(fldC, function (errC, successC, detailsC) {
                    logData('detailsC-------------' + JSON.stringify(detailsC))
                    if (detailsC > 0) {
                        cb(null, false, "Cant delete this flow. Any one or more ticket is in Open status");
                    } else {
                        var sql1 = "Update WFCCLIENT set DeleteFlag= '1',modifydate= Now(),modifybyid=" + data.user_id + " where CLIENTID =" + result[0].clientId + " " +
                            " and categoryId=" + result[0].categoryId + " and workflowId=" + result[0].workflowId + " and work_flow_component_id=" + result[0].work_flow_component_id + "  " +
                            " and flowIndicator='B' and ticket_type=" + result[0].ticket_type + " and DeleteFlag= '0' ";
                        logData('sql---------------------------------------' + sql1)
                        con.query(sql1, function (err1, result1) {
                            if (err1) {
                                logData(err1);
                                cb(err1, null);
                            } else {
                                if (result1.affectedRows > 0 || result[0].flowTypeId == 3) {
                                    var sql2 = "Update WFCCLIENT_back_notify set DeleteFlag= '1',modifydate= Now(),modifybyid=" + data.user_id + " where id = " + data.id + " ";
                                    con.query(sql2, function (err2, result2) {
                                        if (err1) {
                                            logData(err2);
                                            cb(err2, null);
                                        } else {
                                            if (result2.affectedRows > 0) {
                                                cb(null, true, "Done");
                                            } else {
                                                cb(null, false, "Something Went Wrong");
                                            }
                                        }
                                    })
                                } else {
                                    cb(null, true, "Done");
                                }
                            }
                        })
                    }

                });
            } else {
                cb(null, false, "Select valid row");
            }
        }
    })
}

function getDynamicActionTicketTypeWise(data, cb) {
    var sql = "select distinct a.func_desc_id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
        " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
        " where a.func_desc_id = b.functionDtlsId and a.client_id = b.clientId " +
        // " and a.clientId = b.clientId and a.ticketType = b.ticketType " +
        " and a.functionalityId = 2  " +
        " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
        " and b.clientId = " + data.clientId + " " +
        " and b.ticketType = " + data.ticketTypeId + " " +
        " and b.supportGroupLevelId =" + data.supportgrp_id + "" +
        " and b.userId = " + data.user_id + " order by coalesce(a.sequence_no,0) ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details != null && details.length > 0) {
                cb(null, true, details);
            } else {
                var sql1 = "select distinct a.id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
                    " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
                    " where a.func_desc_id = b.functionDtlsId and a.client_id = b.clientId " +
                    //" and a.clientId = b.clientId and a.ticketType = b.ticketType " +
                    " and a.functionalityId =2 " +
                    " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
                    " and b.clientId = " + data.clientId + " " +
                    " and b.ticketType = " + data.ticketTypeId + " " +
                    " and b.isAllUser = 'true' " +
                    " and b.supportGroupLevelId = (SELECT supportGroupLevelId FROM supportGroupUser where userId = " + data.user_id + " and DeleteFlag = '0') " +
                    " order by coalesce(a.sequence_no,0) ";
                con.query(sql1, function (err1, details1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (details1 != null && details1.length > 0) {
                            cb(null, true, details1);
                        } else {
                            cb(null, true, []);
                        }

                    }
                })
            }

        }
    })
}


function getDynamicTabTicketTypeWise(data, cb) {
    var sql = "select distinct a.func_desc_id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
        " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
        " where a.func_desc_id = b.functionDtlsId and a.client_id = b.clientId " +
        // " and a.clientId = b.clientId and a.ticketType = b.ticketType " +
        " and a.functionalityId =3  " +
        " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
        " and b.clientId = " + data.clientId + " " +
        " and b.ticketType = " + data.ticketTypeId + " " +
        " and b.supportGroupLevelId = " + data.supportgrp_id + " " +
        " and b.userId = " + data.user_id + " order by coalesce(a.sequence_no,0) ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details != null && details.length > 0) {
                cb(null, true, details);
            } else {
                var sql1 = "select distinct a.func_desc_id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
                    " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
                    " where a.func_desc_id = b.functionDtlsId and a.client_id = b.clientId " +
                    //" and a.clientId = b.clientId and a.ticketType = b.ticketType " +
                    " and a.functionalityId =3 " +
                    " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
                    " and b.clientId = " + data.clientId + " " +
                    " and b.ticketType = " + data.ticketTypeId + " " +
                    " and b.isAllUser = 'true' " +
                    " and b.supportGroupLevelId = (SELECT supportGroupLevelId FROM supportGroupUser where userId = " + data.user_id + " and DeleteFlag = '0') " +
                    " order by coalesce(a.sequence_no,0) ";
                con.query(sql1, function (err1, details1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (details1 != null && details1.length > 0) {
                            cb(null, true, details1);
                        } else {
                            cb(null, true, []);
                        }

                    }
                })
            }

        }
    })
}

function getDynamicTabActionTicketTypeWise(data, cb) {
    function getTabs(callback) {
        con.getConnection(function (err, conn) {
            if (err) {
                util.logData(err);
                conn.release();
                cb(err, false)
            } else {
                var sql = "select distinct a.func_desc_id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
                    " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
                    " where a.func_desc_id = b.functionDtlsId and a.functionalityId = b.functionalityId and a.client_id = b.clientId " +
                    // " and a.clientId = b.clientId and a.ticketType = b.ticketType " +
                    " and a.functionalityId =3  " +
                    " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
                    " and b.clientId = " + data.clientId + " " +
                    " and b.ticketType = " + data.ticketTypeId + " " +
                    " and b.supportGroupLevelId  = " + data.supportgrp_id + " " +
                    " and b.userId = " + data.user_id + " order by coalesce(a.sequence_no,0) ";
                util.logData("\n\ntabs1------------------------:" + sql)
                conn.query(sql, function (err, details) {
                    if (err) {
                        logData(err);
                        conn.release();
                        callback(err, null);
                    } else {
                        //util.logData('--------getDynamicTabActionTicketTypeWise1:' + details.length)
                        if (details != null && details.length > 0) {
                            conn.release();
                            callback(null, details);
                        } else {
                            var sql1 = "select distinct a.func_desc_id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
                                " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
                                " where a.func_desc_id = b.functionDtlsId and a.functionalityId = b.functionalityId and a.client_id = b.clientId " +
                                //" and a.clientId = b.clientId and a.ticketType = b.ticketType " +
                                " and a.functionalityId =3 " +
                                " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
                                " and b.clientId = " + data.clientId + " " +
                                " and b.ticketType = " + data.ticketTypeId + " " +
                                " and b.isAllUser = 'true' " +
                                " and b.supportGroupLevelId = " + data.supportgrp_id + " " +
                                " order by coalesce(a.sequence_no,0) ";
                            util.logData("tabs2:" + sql1)
                            con.query(sql1, function (err1, details1) {
                                if (err1) {
                                    logData(err1);
                                    conn.release();
                                    callback(err1, null);
                                } else {
                                    util.logData('--------getDynamicTabActionTicketTypeWise1:' + details1.length)
                                    conn.release();
                                    if (details1 != null && details1.length > 0) {
                                        callback(null, details1);
                                    } else {
                                        callback(null, []);
                                    }

                                }
                            })
                        }

                    }
                })
            }
        })

    }

    function getActions(callback) {
        con.getConnection(function (err, conn) {
            if (err) {
                util.logData(err);
                conn.release();
                cb(err, false)
            } else {
                var sql = "select distinct a.func_desc_id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
                    " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
                    " where a.func_desc_id = b.functionDtlsId and a.functionalityId = b.functionalityId and a.client_id = b.clientId " +
                    // " and a.clientId = b.clientId and a.ticketType = b.ticketType " +
                    " and a.functionalityId = 2  " +
                    " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
                    " and b.clientId = " + data.clientId + " " +
                    " and b.ticketType = " + data.ticketTypeId + " " +
                    " and b.supportGroupLevelId = " + data.supportgrp_id + " " +
                    " and b.userId = " + data.user_id + " order by coalesce(a.sequence_no,0) ";
                conn.query(sql, function (err, details) {
                    if (err) {
                        logData(err);
                        conn.release();
                        cb(err, null);
                    } else {
                        if (details != null && details.length > 0) {
                            conn.release();
                            callback(null, details);
                        } else {
                            var sql1 = "select distinct a.func_desc_id fid,b.id, a.funcDescription, coalesce(a.sequence_no,0) " +
                                " from TicketFuctionalityDetails a, AdditionalFuncMappingWithUser b " +
                                " where a.func_desc_id = b.functionDtlsId and a.functionalityId = b.functionalityId and a.client_id = b.clientId " +
                                //" and a.clientId = b.clientId and a.ticketType = b.ticketType " +
                                " and a.functionalityId =2 " +
                                " and a.DeleteFlag = '0' and b.DeleteFlag = '0'" +
                                " and b.clientId = " + data.clientId + " " +
                                " and b.ticketType = " + data.ticketTypeId + " " +
                                " and b.isAllUser = 'true' " +
                                " and b.supportGroupLevelId = " + data.supportgrp_id + "" +
                                " order by coalesce(a.sequence_no,0) ";
                            conn.query(sql1, function (err1, details1) {
                                if (err1) {
                                    logData(err1);
                                    conn.release();
                                    callback(err1, null);
                                } else {
                                    conn.release();
                                    if (details1 != null && details1.length > 0) {
                                        callback(null, details1);
                                    } else {
                                        callback(null, []);
                                    }

                                }
                            })
                        }

                    }
                })
            }
        })

    }

    async.parallel([getTabs, getActions], function (err, results) {
        if (err) {
            cb(err, false);
        } else {
            cb(null, true, { tabs: results[0], actions: results[1] });
        }
    })
}

function getWFCClientBackward(data, cb) {
    var str1 = "SELECT clientId,categoryId,ticket_type,workflowId,work_flow_component_id,flowTypeId FROM WFCCLIENT_back_notify where id=" + data.id + " ";
    con.query(str1, function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length > 0) {
                if (result1[0].flowTypeId == 3) {
                    cb(null, false, "Backward workflow will be generated after ticket forward flow started.");
                } else {
                    var str = "select m.*,coalesce(n.WORKFLOWLEVEL,'') parent from (SELECT a.id,b.NAME client, c.ATTRVAL category,coalesce(d.NAME,'') user,f.NAME workflow, " +
                        " concat(g.TABLENAME,'  : ',g.PKFIELDNAME) comp,a.work_flow_component_id component, a.WORKFLOWLEVEL level, a.STARTENDFLOWINDICATOR indicator,a.parent_wfcclient_id , " +
                        " h.LEVELSHORTDESC groupName, (SELECT ATTRVAL FROM TICKETATTRIBUTES where id = a.ticket_type) ticket_type " +
                        " FROM CLIENT b, TICKETATTRIBUTES c , WORKFLOW f, WORKFLOWCOMPONENT g, SUPPORTGROUPLEVEL h, WFCCLIENT a left join USER d on a.userId = d.id " +
                        " where a.CLIENTID=" + result1[0].clientId + " and a.flowIndicator='B' " +
                        " and a.categoryId =" + result1[0].categoryId + " and a.ticket_type=" + result1[0].ticket_type + " and a.workflowId =" + result1[0].workflowId + " and a.work_flow_component_id =" + result1[0].work_flow_component_id + " " +
                        " and a.CLIENTID = b.id and a.categoryId = c.id and a.workflowId = f.id " +
                        " and a.work_flow_component_id = g.id and a.supportGroupLevelId = h.id and a.DeleteFlag = '0'  and b.DeleteFlag = '0'  and c.DeleteFlag = '0'  " +
                        " and coalesce(d.DeleteFlag,'0') = '0'  and f.DeleteFlag = '0'  and g.DeleteFlag = '0'  and h.DeleteFlag = '0') m left join WFCCLIENT n on m.parent_wfcclient_id = n.id";
                    con.query(str, function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            cb(null, true, result);
                        }
                    });
                }
            } else {
                cb(null, false, "Invalid row selection");
            }
        }
    });
}

function getUserSupprtGrpForTicketEscalate_old(data, cb) {
    var str = "select id,isSolutionProvider,supportGroupLevelId  from escalation_workflow  where CLIENTID = " + data.clientId + " and ticket_type = " + data.ticketTypeId + " and categoryId = " + data.FIELDVAL + " and DeleteFlag = '0' ";
    logData('escalate------------------' + str)
    con.query(str, function (err, results) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (results.length > 0) {
                if (results[0].isSolutionProvider === 'true') {
                    cb(null, true, data);
                } else {
                    data.supportGroupLevelId = results[0].supportGroupLevelId
                    cb(null, true, data);
                }
            } else {
                cb(null, true, data);
            }
        }
    })

}

function getUserSupprtGrpForTicketEscalate(data, cb) {
    var str = "select id,isSolutionProvider,supportGroupLevelId  from escalation_workflow  " +
        " where CLIENTID = " + data.clientId + " and ticket_type = " + data.ticketTypeId + " and categoryId = " + data.FIELDVAL + " and DeleteFlag = '0' " +
        " and Status_sequence_action_id = " + data.ticketStatusSeq + " ";
    logData('escalate------------------' + str);
    con.query(str, function (err, results) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (results.length > 0) {
                if (results[0].isSolutionProvider === 'true') {
                    cb(null, true, data);
                } else {
                    data.supportGroupLevelId = results[0].supportGroupLevelId
                    cb(null, true, data);
                }
            } else {
                cb(null, true, data);
            }
        }
    })

}

function escalationByCreatorAfterResolve(data, cb) {
    logData('\n\n\n-----------------------------------------escalationByCreatorAfterResolve------------' + JSON.stringify(data));
    //data.ticketStatusSeq = 7;
    checkMaxAttachment(data, function (err, success, message) {
        if (err) {
            cb(err, null);
        } else {
            if (!success) {
                cb(null, false, message);
            } else {
                isRemarksDoneByUser(data, function (errX, successX, resultsX) {
                    if (errX) {
                        logData(errX);
                        cb(errX, null);
                    } else {
                        if (!successX) {
                            cb(null, false, "Please add some comments in comment section before forwarding");
                        } else {
                            var str1 = "SELECT a.* " +
                                " FROM WFCCLIENTRESULT a, ticket b where a.PKFIELDVAL = b.id and a.PKFIELDVAL = " + data.id + " and a.DeleteFlag = '0' and a.activeFlow = '1' " +
                                " and a.id=" + data.WFCClientResultId + " " +
                                " and a.tStatus in (SELECT id FROM TICKETATTRIBUTES where CLIENTID = " + data.clientId + " and ATTRID = 2 and sequence_no in ( 2,103) and DeleteFlag = 0)  and a.PKFIELDVAL = " + data.id + " " +
                                " and b.createbyid = " + data.createdBy + " ";
                            logData('str1--------es--------' + str1)
                            con.query(str1, function (err1, result) {
                                if (err1) {
                                    logData(err1);
                                    cb(err1, null);
                                } else {
                                    logData('res------------esc-------' + JSON.stringify(result))
                                    if (result.length > 0) {

                                        var str = "select a.*  from WFCCLIENTRESULT a where a.id =(SELECT max(WFCClientResultId) FROM ticketSolutions where ticketId = " + data.id + " group by ticketId)";
                                        logData('escalate------------------' + str)
                                        con.query(str, function (err, results1) {
                                            if (err) {
                                                logData(err);
                                                cb(err, null);
                                            } else {
                                                if (results1.length > 0) {
                                                    getEscalationIdByCreator({
                                                        "clientId": data.clientId,
                                                        "ticketStatusSeq": data.ticketStatusSeq
                                                    }, function (errI, successI, detailsI) {
                                                        if (errI || !successI) {
                                                            cb(null, false, "Internal Error: You are unable to escalate.");
                                                        } else {
                                                            /************************************************************************/
                                                            getUserOrGroupSelectionForTicketStatus({
                                                                "clientId": data.clientId,
                                                                "ticketTypeId": data.ticketTypeId,
                                                                "ticketId": data.id,
                                                                "ticketStatusSeq": data.ticketStatusSeq
                                                            }, function (errET, successET, detailsET) {
                                                                if (errET || !successET) {
                                                                    cb(null, false, "Internal Error: You are unable to escalate..");
                                                                } else {
                                                                    util.logData('detailsET====' + detailsET);
                                                                    var fld = {
                                                                        "clientId": data.clientId,
                                                                        "frw_user_id": data.createdBy,
                                                                        "user_id": results1[0].user_id,
                                                                        "work_flow_component_id": results1[0].work_flow_component_id,
                                                                        "wfcclient_id": results1[0].id,
                                                                        // "supportGroupLevelId": results1[0].supportGroupLevelIdForUser,
                                                                        "supportGroupLevelId": results1[0].supportGroupLevelId,
                                                                        "PKFIELDVAL": data.id,
                                                                        "FIELDVAL": results1[0].FIELDVAL,
                                                                        "category_id": results1[0].category_id,
                                                                        "tStatus_cd": detailsI,
                                                                        "createdBy": data.createdBy,
                                                                        "is_1st_entry": 'N',
                                                                        "reopen": 0,
                                                                        "ticketTypeId": data.ticketTypeId,
                                                                        "ticketStatusSeq": data.ticketStatusSeq
                                                                    };
                                                                    if (detailsET == 'user') {
                                                                        util.logData('detailsET111====' + results1[0].user_id);
                                                                        fld.user_id = results1[0].user_id;
                                                                    } else {
                                                                        util.logData('detailsET222====' + detailsET);
                                                                        fld.user_id = null;
                                                                    }
                                                                    //**************************************************************
                                                                    getUserSupprtGrpForTicketEscalate(fld, function (errSET, successSET, detailsSET) {
                                                                        if (errSET || !successSET) {
                                                                            cb(null, false, "Internal Error: You are unable to escalate...");
                                                                        } else {

                                                                            logData('\n\nescalation data----------------->>>' + JSON.stringify(fld))
                                                                            generateWorkFlow(detailsSET, function (errf, successf, detailsf) {
                                                                                if (errf || !successf) {
                                                                                    cb(null, false, "Internal Error: You are unable to escalate....");
                                                                                } else {
                                                                                    let sqlEE = "Update ticket set tstatus=" + detailsI + " ,isCloseWF='N', modifybyid=" + data.createdBy + ", modifydate=Now() where id = " + data.id + "";
                                                                                    con.query(sqlEE, function (errEE, detailsEE) {
                                                                                        if (errEE) {
                                                                                            logData(errEE);
                                                                                            cb(errEE, null);
                                                                                        } else {
                                                                                            if (data.ticketStatusSeq === 26) {
                                                                                                var usr = "Re-opened.. ";
                                                                                                var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                                                    " VALUES (" + data.id + ",12," + data.WFCClientResultId + "," + data.createdBy + ",'" + usr + "') ";
                                                                                            } else {
                                                                                                var usr = "Escalated.. ";
                                                                                                var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                                                    " VALUES (" + data.id + ",17," + data.WFCClientResultId + "," + data.createdBy + ",'" + usr + "') ";
                                                                                            }
                                                                                            con.query(sql5, function (err5, result5) {
                                                                                                if (err5) {
                                                                                                    logData(err5);
                                                                                                    cb(err5, null);
                                                                                                } else {

                                                                                                    // optimizedreport table starts

                                                                                                    var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                                        // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                                        + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                                        + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                                        + " from USER where id =? "
                                                                                                    con.query(sql90, [data.id, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                                                                                                        if (err) {
                                                                                                            console.log(err);
                                                                                                        } else {
                                                                                                            console.log(result55);
                                                                                                            var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                                                + "all_analyst_ps=?,all_analyst_name=?,"
                                                                                                                + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                                            // console.log("WS@###########################",result60[0].id);
                                                                                                            con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result3[0].ps, result3[0].l_name, usr, result3[0].login_name, result3[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                                                console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                                                if (err) {
                                                                                                                    console.log("65342168451326854321698543216853241685426854", err);
                                                                                                                    cb(err, null);
                                                                                                                } else {
                                                                                                                    logData("********_____23_______>>>" + sql44);
                                                                                                                    console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                                                                    cb(null, true, result77);
                                                                                                                }
                                                                                                            })
                                                                                                        }
                                                                                                    });

                                                                                                    // optimizedreport table ends


                                                                                                    data.ticketId = data.id;
                                                                                                    submitAttachmentTicketWise(data, function (err, success, done) {
                                                                                                        if (err) {
                                                                                                            cb(null, false, "Internal Error: You are unable to escalate.....");
                                                                                                        }
                                                                                                    })
                                                                                                    /**************************************************/
                                                                                                    var sql6 = "update ticket_closure_dtl set is_active = 'N', delete_flag = '1',mail_flag='Y' where ticket_id =? ";
                                                                                                    con.query(sql6, [data.id], function (err6, result6) {
                                                                                                        if (err6) {
                                                                                                            logData(err6);
                                                                                                            cb(err6, null);
                                                                                                        } else {
                                                                                                            //**********************************************************

                                                                                                            getSolutionsTicketWise({ "ticketId": data.id }, function (err10, success10, done10) {
                                                                                                                if (err10 || !success10) {
                                                                                                                    cb(null, false, "Internal Error: You are unable to escalate" + err10 + success10);
                                                                                                                } else {
                                                                                                                    if (done10.length > 0) {
                                                                                                                        var sql9 = "insert into ticket_sla_startstop_logs_all_action(ticket_id,action_id,sla_stop_start_WFCClientResultId,sla_stop_start_datetime,sla_stop_start_by) " +
                                                                                                                            " values(" + data.id + "," + data.ticketStatusSeq + "," + done10[0].WFCClientResultId + ",(select max(createdate) from ticketSolutions where ticketId = " + data.id + ")," + done10[0].createbyid + ")";
                                                                                                                        con.query(sql9, [data.id], function (err9, result9) {
                                                                                                                            if (err9) {
                                                                                                                                logData(err9);
                                                                                                                                cb(err9, null);
                                                                                                                            } else {

                                                                                                                                
                                                                                                                                // optimizedreport table starts

                                                                                                                                var sql220 = "SELECT ticket_id,count(*) followup_count,count(*) reopen_count,replace(coalesce(group_concat(concat(date_format (ADDTIME(a.sla_stop_end_datetime, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),''),',',' / ') reopen_dates,date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_responded_dt ,"
                                                                                                                                    + "date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_time_taken, date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') maxEscalationDtls FROM ticket_sla_startstop_logs_all_action a "
                                                                                                                                    + "where ticket_id =? and action_id =? group by a.ticket_id,a.id limit 1;"
                                                                                                                                con.query(sql220, [data.id, data.ticketStatusSeq], function (err, result220) {
                                                                                                                                    if (err) {
                                                                                                                                        cb(err, null);
                                                                                                                                    } else {
                                                                                                                                        logData("_________++__+_+_+33333333333333" + sql220);
                                                                                                                                        console.log("@@@@@@@@!!!!!!!!wer!!", result220);
                                                                                                                                        var sql221 = "update optimizedreport set reopen_count =?,follow_up_count =?,reopen_dates =?,follow_up_responded_dt =?,"
                                                                                                                                            + "follow_up_time_taken=? where ticket_id =? ;"
                                                                                                                                        con.query(sql221, [result220[0].reopen_count, result220[0].followup_count, result220[0].reopen_dates, result220[0].follow_up_responded_dt, result220[0].follow_up_time_taken, data.id], function (err, result221) {
                                                                                                                                            if (err) {
                                                                                                                                                cb(err, null);
                                                                                                                                            } else {
                                                                                                                                                logData("&&&&&&&&&&&&&&------------>" + sql221);
                                                                                                                                                console.log("!!!!!!!!@@", result221);
                                                                                                                                                cb(null, true, result221);
                                                                                                                                            }
                                                                                                                                        })

                                                                                                                                    }
                                                                                                                                });

                                                                                                                                // optimizedreport table ends


                                                                    
                                                                                                                                //******************************************************
                                                                                                                                insertSlaStopEndTime({
                                                                                                                                    "ticketId": data.id,
                                                                                                                                    "userId": data.createdBy,
                                                                                                                                    "wfcClientResultId": data.WFCClientResultId,
                                                                                                                                    "actionId": data.ticketStatusSeq
                                                                                                                                }, function (errSS, successSS, detailsSS) {
                                                                                                                                    if (errSS || !successSS) {
                                                                                                                                        logData(errSS + successSS);
                                                                                                                                        cb(errSS, null);
                                                                                                                                    } else {
                                                                                                                                        logData('\n\n*******************16********************')
                                                                                                                                        request
                                                                                                                                            .get(SLA_URL + '/slaCalculation_ticketwise_awaiting')
                                                                                                                                            .query({
                                                                                                                                                ticketId: data.ticketId,
                                                                                                                                                client_id: data.clientId,
                                                                                                                                                actionId: data.ticketStatusSeq
                                                                                                                                            }) // query string
                                                                                                                                            .end((err, resp) => {
                                                                                                                                                if (err) {
                                                                                                                                                    logData(err);
                                                                                                                                                } else {
                                                                                                                                                    cb(null, true, detailsSS);
                                                                                                                                                }
                                                                                                                                                // Do something
                                                                                                                                            });

                                                                                                                                    }
                                                                                                                                })
                                                                                                                                //******************************************************


                                                                                                                                // var sql7 = "update ticket_sla_response_dtls set resolution_stop_status = 'N' where ticketId =? and deleteflag = '0' ";
                                                                                                                                // con.query(sql7, [data.id], function (err7, result7) {
                                                                                                                                //     if (err7) {
                                                                                                                                //         logData(err7);
                                                                                                                                //         cb(err7, null);
                                                                                                                                //     } else {
                                                                                                                                request
                                                                                                                                    // .get(MAIL_URL + '/sendemailOther?ticketId=' + data.ticketId + '&notifyType=email')
                                                                                                                                    .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.ticketId + '&actionType=1&actionID=&actionData=')
                                                                                                                                    .end((err, resp) => {
                                                                                                                                        if (err) {
                                                                                                                                            logData(err);
                                                                                                                                        } else {
                                                                                                                                            //logData('done---resp--' + JSON.stringify(resp))
                                                                                                                                        }
                                                                                                                                    });
                                                                                                                                if (socket) {
                                                                                                                                    let val1 = {
                                                                                                                                        ticketId: data.id,
                                                                                                                                        clientId: data.clientId,
                                                                                                                                        ticketTypeId: data.ticketTypeId
                                                                                                                                    };
                                                                                                                                    getNotificationMenuIdTicketStatusWise(val1, function (err111, success111, details111) {

                                                                                                                                    });
                                                                                                                                }
                                                                                                                                cb(null, true, "Successfully Escalated..");
                                                                                                                                // }
                                                                                                                                //})//
                                                                                                                            }
                                                                                                                        })
                                                                                                                        //**********************************************************
                                                                                                                    } else {
                                                                                                                        cb(null, false, "Internal Error: You are unable to escalate... ...");
                                                                                                                    }

                                                                                                                }
                                                                                                            })


                                                                                                        }
                                                                                                    })
                                                                                                    /**************************************************/
                                                                                                }
                                                                                            })
                                                                                        }
                                                                                    })

                                                                                }
                                                                            });
                                                                        }
                                                                    })
                                                                    //**************************************************************

                                                                }
                                                            })
                                                            /************************************************************************/


                                                        }
                                                    });
                                                } else {
                                                    cb(null, false, "You are unable to escalate");
                                                }
                                            }
                                        });
                                    } else {
                                        cb(null, false, "This is not the right time to escalate");
                                    }
                                }
                            });
                        }
                    }
                })
            }
        }
    })
}


function getAttributesHeaderMstClientWiseWithTicket(data, cb) {

    var str = " SELECT c.name clientNm,a.id id,a.header_desc description,a.header_name name ,a.sequence_no seq," +
        " b.ATTRDESC attr, alphanum(a.header_name) field, d.ATTRVAL ticket_type " +
        " FROM CLIENT c, " +
        " attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d " +
        " WHERE a.ATTRID = b.id  " +
        " and a.CLIENTID  = c.id " +
        " and a.ticket_type  = d.id " +
        " and a.DeleteFlag = '0' " +
        " and c.DeleteFlag = '0' " +
        " and b.DeleteFlag = '0' " +
        " and a.CLIENTID=" + data.clientId + " and a.ticket_type=" + data.ticket_type;
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function updateTicketForApprovingProblemTicket(data, cb) {
    if (data.isApproveTicket === 2 || data.isApproveTicket === '2') {
        cb(null, true, "ok");
    } else {
        var str = " update ticket set is_approved_problem_ticket = '" + data.isApproveTicket + "', is_approved_problem_ticket_by = " + data.createdBy + ", is_approved_problem_ticket_datetime = Now()," +
            " is_approved_problem_ticket_remarks = " + con.escape(data.appr_remarks) + "  " +
            " , modifydate = Now(), modifybyid =" + data.createdBy + " " +
            " where id = " + data.id + " ";
        con.query(str, function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result.affectedRows > 0) {
                    var str1 = " update WFCCLIENTRESULT set is_approved_problem_ticket = '" + data.isApproveTicket + "', is_approved_problem_ticket_by = " + data.createdBy + ", is_approved_problem_ticket_datetime = Now()," +
                        " is_approved_problem_ticket_remarks = " + con.escape(data.appr_remarks) + " " +
                        " , modifydate = Now(), modifybyid =" + data.createdBy + " " +
                        " where PKFIELDVAL = " + data.id + " and id = " + data.WFCClientResultId + " ";
                    con.query(str1, function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {
                            if (result1.affectedRows > 0) {
                                data.ticketId = data.id;
                                data.feedback = data.appr_remarks;
                                data.ticketSubType = "P";
                                if (data.isApproveTicket !== 90) {
                                    submitFeedbackTicketWise(data, function (errU, successU, detailsU) {
                                        if (errU || !successU) {
                                            logData(errU + successU);
                                            cb(errU, null);
                                        } else {
                                            cb(null, true, "ok");
                                        }
                                    })
                                } else {
                                    cb(null, true, "ok");
                                }
                            } else {
                                cb(null, false, "Some Error.");
                            }
                        }
                    });
                } else {
                    cb(null, false, "Some Error.");
                }
            }
        });
    }
}


function approveProblemTicket(data, cb) {
    delete data.user_id;
    data.user_id = data.refer_user_id;
    // data.appr_remarks = con.escape(data.appr_remarks);
    logData('approveProblemTicket-----------------------' + JSON.stringify(data))
    updateTicketForApprovingProblemTicket(data, function (errU, successU, detailsU) {
        if (errU || !successU) {
            logData(errU + successU);
            cb(errU, null);
        } else {
            if (data.isApproveTicket == '1' || data.isApproveTicket == '90') {

                let str = "SELECT CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                    " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD," +
                    " serial_no, END_INDICATOR, user_id, frw_user_id, category_id,tStatus" +
                    " ,(select workflowId from WFCCLIENT where id = a.wfcclient_id) workflowId " +
                    " ,(select createor_support_grp_id from ticket where id = " + data.id + ") createor_support_grp_id " +
                    " ,(select createbyid from ticket where id = " + data.id + ") createor_id " +
                    "  FROM WFCCLIENTRESULT a" +
                    " where PKFIELDVAL = " + data.id + " and END_INDICATOR=0  order by id desc limit 1 ";
                logData('\n str--------------------------------' + str)
                con.query(str, function (errs, results) {
                    if (errs) {
                        logData(errs);
                        cb(errs, null);
                    } else {
                        util.logData('select query result===' + JSON.stringify(results));
                        if (results == null || results.length == 0) {
                            cb(null, false, "Data not found.");
                        } else {

                            var sql11 = "SELECT id,workflowId,ticket_type,supportGroupLevelId," +
                                " (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + results[0].CLIENTID + " and ATTRID = 2 " +
                                " and sequence_no = " + data.seq_no + ") ticket_status " +
                                " FROM WFCCLIENT where categoryId =" + data.cat_id + " " +
                                " and work_flow_component_id = " + results[0].work_flow_component_id + " " +
                                " and parent_wfcclient_id =" + results[0].wfcclient_id + " order by id limit 1 ";
                            logData('\n str11--------------------------------' + sql11)
                            con.query(sql11, function (err11, result11) {
                                if (err11) {
                                    logData(err11);
                                    cb(err11, null);
                                } else {
                                    var wfcclientId = "";
                                    var workflowId = "";
                                    if (result11.length > 0) {
                                        wfcclientId = result11[0].id;
                                        workflowId = result11[0].workflowId;
                                        //*******************************************************
                                        getUserOrGroupSelectionForTicketStatus({
                                            "clientId": results[0].CLIENTID,
                                            "ticketTypeId": result11[0].ticket_type,
                                            "ticketId": data.id,
                                            "ticketStatusSeq": data.seq_no
                                        }, function (errET, successET, detailsET) {
                                            if (errET || !successET) {
                                                cb(null, true, 0);
                                            } else {
                                                if (data.ticket_type_seq === 5 || data.ticket_type_seq === '5') {
                                                    //data.supportGroupLevelId = results[0].createor_support_grp_id;
                                                    if (data.isApproveTicket == '90') {
                                                        data.supportGroupLevelId = result11[0].supportGroupLevelId;
                                                    } else {
                                                        data.supportGroupLevelId = results[0].createor_support_grp_id;
                                                    }
                                                    if (detailsET == 'user') {
                                                        data.user_id = results[0].createor_id;
                                                    } else {
                                                        data.user_id = null;
                                                    }
                                                }
                                                var fld = {
                                                    "clientId": results[0].CLIENTID,
                                                    "user_id": data.user_id,
                                                    "frw_user_id": data.createdBy,
                                                    "work_flow_component_id": results[0].work_flow_component_id,
                                                    "wfcclient_id": wfcclientId,
                                                    "supportGroupLevelId": data.supportGroupLevelId,
                                                    "PKFIELDVAL": data.id,
                                                    "FIELDVAL": data.cat_id,
                                                    "category_id": data.parent_cat_id,
                                                    "tStatus_cd": result11[0].ticket_status,
                                                    "createdBy": data.createdBy,
                                                    "ticket_type": result11[0].ticket_type,
                                                    "is_1st_entry": 'N',
                                                    "reopen": 0
                                                };
                                                // util.logData('work flow support group id===' + JSON.stringify(fld));
                                                generateWorkFlow(fld, function (errF, successF, detailsF) {
                                                    if (errF || !successF) {
                                                        logData(errF);
                                                        cb(errF, null);
                                                    } else {
                                                        var usr = "";
                                                        var fldC = {
                                                            "clientId": results[0].CLIENTID,
                                                            "workflowId": workflowId,
                                                            "work_flow_component_id": results[0].work_flow_component_id,
                                                            "categoryId": data.cat_id
                                                        };
                                                        checkBackWorkFlowDefined(fldC, function (errC, successC, detailsC) {
                                                            if (detailsC == '3') {
                                                                var fldT = {
                                                                    "ticketId": data.id
                                                                };
                                                                getBackwardWorkFlowlastState(fldT, function (errT, successT, detailsT) {
                                                                    if (detailsT == null || detailsT.length == 0) {
                                                                        cb(null, false, "Some error");
                                                                    } else {
                                                                        var fld = {
                                                                            "clientId": results[0].CLIENTID,
                                                                            "ticketId": data.id,
                                                                            "categoryId": data.cat_id,
                                                                            "user_id": data.user_id,
                                                                            "sfIndecator": (parseInt(results[0].serial_no) + 1),
                                                                            "supportGroupLevelId": data.supportGroupLevelId,
                                                                            "parent_wfcclient_id": detailsT[0].id,
                                                                            "STARTENDFLOWINDICATOR": detailsT[0].STARTENDFLOWINDICATOR + 1,
                                                                            "createdBy": data.createdBy,
                                                                            "workflowId": workflowId,
                                                                            "work_flow_component_id": results[0].work_flow_component_id,
                                                                            "wfcclient_id": wfcclientId,
                                                                            "flowIndicator": 'B'
                                                                        };
                                                                        insertWFCClientTicketWise(fld, function (err1, success1, details) {
                                                                            if (success1) {
                                                                                changeParentIdTicketWise(fld, function (err2, success2, details2) {
                                                                                    if (err2 || !success2) {
                                                                                        logData('ok')
                                                                                    }
                                                                                });
                                                                            } else {
                                                                                cb(null, false, details);
                                                                            }
                                                                        });
                                                                    }
                                                                });

                                                            }
                                                        });
                                                        var usrId = "";
                                                        if (data.user_id == null || data.user_id == "") {
                                                            usrId = 0;
                                                        } else {
                                                            usrId = data.user_id;
                                                        }
                                                        let usrS = "SELECT NAME nm FROM USER  where id = " + usrId + " ";
                                                        con.query(usrS, function (usrSerr, usrSdetails) {
                                                            if (usrSerr) {
                                                                logData(usrSerr);
                                                                cb(usrSerr, null);
                                                            } else {
                                                                let grpS = "SELECT LEVELSHORTDESC grp FROM SUPPORTGROUPLEVEL where id = " + data.supportGroupLevelId + " ";
                                                                con.query(grpS, function (grpSerr, grpSdetails) {
                                                                    if (grpSerr) {
                                                                        logData(grpSerr);
                                                                        cb(grpSerr, null);
                                                                    } else {
                                                                        var usrN = "";
                                                                        var grpN = "";
                                                                        if (usrSdetails.length > 0) {
                                                                            usrN = usrSdetails[0].nm;
                                                                        }
                                                                        if (grpSdetails.length > 0) {
                                                                            grpN = grpSdetails[0].grp;
                                                                        }
                                                                        usr = "Forwarded With Approval To : " + grpN + ". User: " + usrN;
                                                                        var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                            " VALUES (" + data.id + ",15," + detailsF + "," + data.createdBy + ",'" + usr + "') ";
                                                                        con.query(sql5, function (err5, result5) {
                                                                            if (err5) {
                                                                                logData(err5);
                                                                                cb(err5, null);
                                                                            } else {

                                                                                // callforSlaResponseTicketWise({
                                                                                //     "id": data.id,
                                                                                //     "user_id": data.createdBy,
                                                                                //     "reqType": ""
                                                                                // }, function (errSS, successSS, detailsSS) {
                                                                                //
                                                                                // });
                                                                                var strUP = " update ticket set tstatus = (select id from TICKETATTRIBUTES where CLIENTID =" + results[0].CLIENTID + " and ATTRID =2 and sequence_no = " + data.seq_no + " ) " +
                                                                                    " , modifydate = Now(), modifybyid =" + data.createdBy + " " +
                                                                                    " where id = " + data.id + " ";
                                                                                con.query(strUP, function (errUP, resultUP) {
                                                                                    if (errUP) {
                                                                                        logData(errUP);
                                                                                        cb(errUP, null);
                                                                                    } else {
                                                                                        request
                                                                                            .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=1&actionID=&actionData=')
                                                                                            .end((err, resp) => {
                                                                                                if (err) {
                                                                                                    logData(err);
                                                                                                } else {
                                                                                                    logData('done---resp--' + JSON.stringify(resp))
                                                                                                }
                                                                                                // Do something
                                                                                            });
                                                                                        cb(null, true, detailsU);
                                                                                    }
                                                                                });
                                                                            }
                                                                        });
                                                                    }
                                                                })
                                                            }
                                                        })
                                                    }
                                                });

                                            }
                                        })
                                        //*******************************************************


                                    } else {
                                        cb(null, false, "Some error occured");
                                    }
                                }//**************************
                            });
                        }
                    }
                });
            } else {
                logData('data.seq_no------------------------' + data.seq_no)
                getLatestStateTicketWise(data, function (err, success, results) {
                    if (err || !success) {
                        logData(err + success);
                        cb(err + success, null);
                    } else {
                        if (results.length > 0) {
                            let sqlB = "SELECT createbyid, ticketTypeId,clientid,createor_support_grp_id " +
                                " , (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + results[0].CLIENTID + " and ATTRID = 2 and sequence_no = " + data.seq_no + ") ticket_status, " +
                                " (select createor_support_grp_id from ticket where id= " + data.id + ")  supportGroupLevelId " +
                                " FROM ticket where id = " + data.id + " ";
                            logData('sqlB--------------' + sqlB);
                            con.query(sqlB, function (errB, detailsB) {
                                if (errB) {
                                    logData(errB);
                                    cb(errB, null);
                                } else {
                                    data.user_id = detailsB[0].createbyid;
                                    if (detailsB.length > 0) {
                                        //*******************************************************************************
                                        getUserOrGroupSelectionForTicketStatus({
                                            "clientId": detailsB[0].clientid,
                                            "ticketTypeId": detailsB[0].ticketTypeId,
                                            "ticketId": data.id,
                                            "ticketStatusSeq": data.seq_no
                                        }, function (errET, successET, detailsET) {
                                            if (errET || !successET) {
                                                cb(null, false, 0);
                                            } else {
                                                data.createor_support_grp_id = detailsB[0].createor_support_grp_id;
                                                data.createbyid = detailsB[0].createbyid;
                                                data.detailsET = detailsET;
                                                setUserIdNGrp(data, function (errET, successET, data) {
                                                    if (errET || !successET) {
                                                        cb(null, false, 0);
                                                    } else {
                                                        logData('data.user_id---------------' + data.user_id)
                                                        ///**********************************************************************************************************
                                                        updateWFCResultForDispatch(data, function (errU, successU, resultsU) {
                                                            var sql12 = "Insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                                " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, END_INDICATOR, user_id, category_id,createbyid,tStatus ) values " +
                                                                " (" + results[0].CLIENTID + "," + results[0].work_flow_component_id + ",0,'" + detailsB[0].supportGroupLevelId + "'," +
                                                                " " + data.id + "," + results[0].FIELDVAL + ",'1'," + (parseInt(results[0].serial_no) + 1) + ",'0'," + data.user_id + "," +
                                                                " " + results[0].category_id + "," + data.createdBy + "," + detailsB[0].ticket_status + " ) ";
                                                            //" " + results[0].category_id + "," + results[0].user_id + "," + detailsB[0].ticket_status + " ) ";
                                                            con.query(sql12, function (err12, result12) {
                                                                if (err12) {
                                                                    logData(err12);
                                                                    cb(err12, null);
                                                                } else {
                                                                    if (data.isApproveTicket === 0 || data.isApproveTicket === '0') {
                                                                        var usr = "Rejected.. ";
                                                                        var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                            " VALUES (" + data.id + ",16," + result12.insertId + "," + data.createdBy + ",'" + usr + "') ";
                                                                    } else if (data.isApproveTicket === 2 || data.isApproveTicket === '2') {
                                                                        var usr = "Cancel.. ";
                                                                        var sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                                            " VALUES (" + data.id + ",23," + result12.insertId + "," + data.createdBy + ",'" + usr + "') ";
                                                                    }
                                                                    con.query(sql5, function (err5, result5) {
                                                                        if (err5) {
                                                                            logData(err5);
                                                                            cb(err5, null);
                                                                        } else {

                                                                            // optimizedreport table starts


                                                                            var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                                // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                                + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                                + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                                + " from USER where id =? "
                                                                            con.query(sql90, [data.id, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                                                                                if (err) {
                                                                                    console.log(err);
                                                                                } else {
                                                                                    console.log(result55);
                                                                                    var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                                        + "all_analyst_ps= ?,all_analyst_name=?,"
                                                                                        + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                                    // console.log("WS@###########################",result60[0].id);
                                                                                    con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, usr, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                                        console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                                        if (err) {
                                                                                            console.log("65342168451326854321698543216853241685426854", err);
                                                                                            cb(err, null);
                                                                                        } else {
                                                                                            logData("********______wed______>>>" + sql44);
                                                                                            console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                                            cb(null, true, result77);
                                                                                        }
                                                                                    })
                                                                                }
                                                                            });

                                                                            // optimizedreport table ends


                                                                            if (data.ticket_type_seq && data.ticket_type_seq != null && data.ticket_type_seq == '4') {
                                                                                var fldIFS = {
                                                                                    "status_seq": 23,
                                                                                    "ticketId": data.id,
                                                                                    "clientId": results[0].CLIENTID,
                                                                                    "user_id": data.createdBy
                                                                                };
                                                                                util.logData('changeIncidentTicketStatusForProblem=========' + JSON.stringify(fldIFS));
                                                                                changeIncidentTicketStatusForProblem(fldIFS, function (errIFS, successIFS, detailsIFS) {

                                                                                })
                                                                            }
                                                                            var str111 = " update ticket set tstatus = (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + results[0].CLIENTID + " and ATTRID = 2 and sequence_no =  " + data.seq_no + ") " +
                                                                                " , modifydate = Now(), modifybyid =" + data.createdBy + " " +
                                                                                " where id = " + data.id + "";
                                                                            con.query(str111, function (err111, result111) {
                                                                                if (err111) {
                                                                                    logData(err111);
                                                                                    cb(err111, null);
                                                                                } else {
                                                                                    //cb(null, true, "ok");
                                                                                }
                                                                            });
                                                                            request
                                                                                .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=1&actionID=&actionData=')
                                                                                .end((err, resp) => {
                                                                                    if (err) {
                                                                                        logData(err);
                                                                                    } else {
                                                                                        logData('done---resp--' + JSON.stringify(resp))
                                                                                    }
                                                                                    // Do something
                                                                                });
                                                                            insertLatestWFCClientResult({
                                                                                "ticketId": data.id
                                                                            }, function (errET3, successET3, detailsET3) {
                                                                                if (errET3 || !successET3) {
                                                                                    cb(null, true, 0);
                                                                                } else {
                                                                                    cb(null, true, detailsU);
                                                                                }
                                                                            })

                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        });
                                                    }
                                                })


                                            }
                                        })
                                        //*******************************************************************************


                                    } else {
                                        cb(null, false, "Some error occured");
                                    }
                                }
                            })
                        } else {
                            cb(null, false, "Some error occured");
                        }
                    }
                })
            }
        }
    })
}

function getAllIncidentTicketDetails(data, cb) {
    let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
        " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy " +
        " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id  group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
        " and a.tstatus = f.id " +
        " and b.DeleteFlag = '0' " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and g.id = e.supportGroupLevelId " +
        "and a.sub_ticket_type is null " +
        " and  b.DeleteFlag = '0' and a.clientid=" + data.clientId;
    sql = sql + " order by e.id desc ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            /***********************************************************************************/
                            let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                " and a.PKFIELDVAL = " + result[j].id + " " +
                                " and a.activeFlow = '1' " +
                                " and a.serial_no = 1 " +
                                " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    logData(err2);
                                    cb(err2, null);
                                } else {
                                    if (result2.length > 0) {
                                        result[j]['last_cat'] = result2[0].child;
                                        result[j]['last_cat_parent'] = result2[0].parent;
                                        result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                        result[j]['last_cat_parent_id'] = result2[0].category_id;
                                    }
                                    /***********************************************************************************/
                                    let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                        " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";

                                    le++;
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {

                                            if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, true, result);
                                                }
                                                flg++;
                                            } else {
                                                cb(null, true, []);
                                            }

                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            } else {
                cb(null, true, result);
            }
        }
    });
}

function getTicketById(data, cb) {
    let sql = "SELECT distinct a.id id,g.group_level,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg " +
        " where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) escalated_to_grp_nm, a.busi_priority_id, a.tName, " +
        " b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,f.sequence_no seq, " +
        " a.busi_impact_id,a.busi_urgency_id,a.is_approved_problem_ticket,d.busi_priority_name priority, a.requesterInfo reqInfo, " +
        " a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate, coalesce(c.NAME,b.NAME) updateBy,e.id  ids,a.createbyid, " +
        " a.longDesc,a.requestedDate requestedDate, coalesce(a.ticketCloseDate,'') ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ," +
        " g.id gid ,coalesce(sub_ticket_type,0) sub_ticket_type  " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id  group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
        " and a.tstatus = f.id " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and g.id = e.supportGroupLevelId " +
        " and a.sub_ticket_type is null" +
        " and b.DeleteFlag = '0' and a.ticket_id=? and (a.clientId=? or a.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?))" +
        " and if(coalesce((select count(*) from incident_problem_ticket_mapping where deleteflag='0' and incident_ticket_id=a.id ),0)>0 ,  " +
        "( a.tstatus in (SELECT id FROM TICKETATTRIBUTES where (CLIENTID=? or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and ATTRID= 2 and sequence_no = 23 ) ),true )  ";
    sql = sql + " order by e.id desc ";
    logData('getTicketById------------------------------------' + sql)
    con.query(sql, [data.ticketId, data.clientId, data.clientId, data.clientId, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";

                            le++;
                            con.query(sql1, function (err1, result1) {
                                if (err1) {
                                    logData(err1);
                                    cb(err1, null);
                                } else {

                                    if (result1.length > 0) {
                                        for (let i = 0; i < result1.length; i++) {
                                            result[j][result1[i].parent] = result1[i].child;
                                        }
                                        if (flg == result.length) {
                                            cb(null, true, result);
                                        }
                                        flg++;
                                    } else {
                                        cb(null, true, []);
                                    }

                                }
                            });
                        }
                    });
                }
            } else {
                cb(null, true, result);
            }
        }
    });
}

function getIncidentTicketDetailsProblemWise(data, cb) {
    let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
        " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy " +
        " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id  group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
        " and a.tstatus = f.id " +
        " and b.DeleteFlag = '0' " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and g.id = e.supportGroupLevelId " +
        "and a.sub_ticket_type is null " +
        " and  b.DeleteFlag = '0' " +
        " and a.id in (select x.incident_ticket_id from incident_problem_ticket_mapping x where x.problem_ticket_id = " + data.id + " and x.deleteflag = '0' )";


    sql = sql + " order by e.id desc ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            /***********************************************************************************/
                            let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                " and a.PKFIELDVAL = " + result[j].id + " " +
                                " and a.activeFlow = '1' " +
                                " and a.serial_no = 1 " +
                                " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    logData(err2);
                                    cb(err2, null);
                                } else {
                                    if (result2.length > 0) {
                                        result[j]['last_cat'] = result2[0].child;
                                        result[j]['last_cat_parent'] = result2[0].parent;
                                        result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                        result[j]['last_cat_parent_id'] = result2[0].category_id;
                                    }
                                    /***********************************************************************************/
                                    let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                        " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";

                                    le++;
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, true, result);
                                                }
                                                flg++;
                                            } else {
                                                cb(null, true, []);
                                            }

                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            } else {
                cb(null, true, result);
            }
        }
    });
}

function getIncidentTicketDetails(data, cb) {
    function getHeader(callback) {
        getAttributesHeaderMstClientWiseWithTicket(data, function (err, success, result) {
            if (err) {
                callback(err, null)
            } else {
                callback(null, result)
            }
        })
    }

    function getData(callback) {
        // data.ticketTypeId=data.ticket_type;
        getAllIncidentTicketDetails(data, function (err, success, result) {
            if (err) {
                callback(err, null)
            } else {
                callback(null, result)
            }
        })
    }

    async.parallel([getHeader, getData], function (err, results) {
        if (err) {
            cb(err, false)
        } else {
            cb(null, true, results)
        }
    })
}

function getMappedIncidentTicketDetails(data, cb) {
    function getHeader(callback) {
        getAttributesHeaderMstClientWiseWithTicket(data, function (err, success, result) {
            if (err) {
                callback(err, null)
            } else {
                callback(null, result)
            }
        })
    }

    function getData(callback) {
        //data.ticketTypeId=data.ticket_type;
        getIncidentTicketDetailsProblemWise(data, function (err, success, result) {
            if (err) {
                callback(err, null)
            } else {
                callback(null, result)
            }
        })
    }

    async.parallel([getHeader, getData], function (err, results) {
        if (err) {
            cb(err, false)
        } else {
            cb(null, true, results)
        }
    })
}

//
function addNewIncidentInProblem_old(data, cb) {
    let sql3 = " select * from ticket where id = " + data.ticketId + " and tStatus in (SELECT id FROM TICKETATTRIBUTES where CLIENTID = " + data.client_id + " and ATTRID= 2 and sequence_no in (103,104) ) ";
    con.query(sql3, function (err3, result3) {
        if (err3) {
            logData(err3);
            cb(err3, null);
        } else {
            if (result3.length > 0) {
                cb(null, false, "Sorry, Problem Ticket is in resolved state.");
            } else {
                data.seq = 21;
                changeTicketStatus(data, function (errIFS, successIFS, detailsIFS) {
                    if (errIFS || !successIFS) {
                        cb(null, false, "Some internal error occured.");
                    } else {
                        cb(null, true, "Ticket added successfully");
                    }
                })
            }
        }
    });
}

function addNewIncidentInProblem(data, cb) {
    let sql3 = " select * from ticket where id = " + data.ticketId + " and tStatus in (SELECT id FROM TICKETATTRIBUTES where CLIENTID = " + data.client_id + " and ATTRID= 2 " +
        " and sequence_no in (103,104,400,404,402,300,302,305) ) ";
    con.query(sql3, function (err3, result3) {
        if (err3) {
            logData(err3);
            cb(err3, null);
        } else {
            if (result3.length > 0) {
                cb(null, false, "Sorry, Problem Ticket is in resolved state.");
            } else {
                //data.seq = 21;
                // data.seq = 301;
                if (data.seq === 401 || data.seq === 301) {
                    changeTicketStatusForCR(data, function (errIFS, successIFS, detailsIFS) {
                        if (errIFS || !successIFS) {
                            cb(null, false, "Some internal error occured.");
                        } else {
                            util.logData('detailsIFS===' + detailsIFS);
                            if (detailsIFS > 0) {
                                cb(null, true, "Ticket already attatched");
                            } else {
                                cb(null, true, "Ticket added successfully");
                            }
                        }
                    })
                } else {
                    changeTicketStatus(data, function (errIFS, successIFS, detailsIFS) {
                        if (errIFS || !successIFS) {
                            cb(null, false, "Some internal error occured.");
                        } else {
                            cb(null, true, "Ticket added successfully");
                        }
                    })
                }

            }
        }
    });
}


function changeTicketStatusForCR(data, cb) {
    logData('\n\ndata.incident_ticket_list----------------------' + data.incident_ticket_list)
    if (data.incident_ticket_list) {
        let flag = 0;
        var ticket_list = data.incident_ticket_list.split(",");
        var incidentLt = "Incident Ticket List: ";
        let count = 0;
        for (let i = 0; i < ticket_list.length; i++) {
            let sql3 = " select * from  incident_problem_ticket_mapping a, ticket b where a.incident_ticket_id = b.id and a.incident_ticket_id =" + ticket_list[i] + " " +
                " and a.deleteflag = '0' and b.tstatus in (SELECT id FROM TICKETATTRIBUTES where CLIENTID = " + data.client_id + " and ATTRID= 2 and sequence_no != 23 ) ";
            logData('\n\nchangeTicketStatus   1------------------' + sql3)
            logData('1----' + new Date())
            con.query(sql3, function (err3, result3) {
                if (err3) {
                    logData(err3);
                    cb(err3, null);
                } else {
                    if (result3.length > 0) {
                        flag++;
                        count++;
                        if (flag === ticket_list.length) {
                            cb(null, true, count);
                        }
                    } else {
                        getWorkflowResultMaxId({ "id": ticket_list[i] }, function (errI, successI, resultsI) {
                            if (errI || !successI) {
                                logData(errI);
                                cb(errI, null);
                            } else {
                                getClientIdFromTicketTbl({
                                    ticketId: ticket_list[i]
                                }, function (errCC, successCC, resCC) {
                                    if (errCC) {
                                        logData(errCC);
                                        callback(errCC, null);
                                    } else {
                                        logData("\n\n resCC----------------" + JSON.stringify(resCC))
                                        incidentLt = incidentLt + resCC[0].ticket_id + ", ";
                                        let sql2 = " insert into incident_problem_ticket_mapping(problem_ticket_id,incident_ticket_id,created_by) values(" + data.ticketId + "," + ticket_list[i] + "," + data.createdBy + ") ";
                                        logData('\n\nchangeTicketStatus   4------------------' + sql2)
                                        logData('4----' + new Date())
                                        con.query(sql2, function (err2, result2) {
                                            if (err2) {
                                                logData(err2);
                                                cb(err2, null);
                                            } else {
                                                flag++;
                                                logData('\n\nchangeTicketStatus   5-----------------' + flag);

                                                // optimizedreport table starts
                                                var sql2 = " select (select id from optimizedreport where ticket_id =?) id,incident_ticket_id,replace(group_concat(concat((select ticket_id from ticket where id=problem_ticket_id) ,'@')),',','\n') otherTicketId,"
                                                    + " replace(group_concat(concat(created_date,'@')),',','\n') otherCreatedate from incident_problem_ticket_mapping  where incident_ticket_id =? and deleteflag = '0'"
                                                con.query(sql2, [ticket_list[i], ticket_list[i]], function (err, result2) {
                                                    if (err) {
                                                        cb(err, null);
                                                    } else {
                                                        console.log("33333333asd3=---", result2);
                                                        var sql3 = "update optimizedreport set other_ticket_raised=?,other_ticket_raised_dt=? where id =? "
                                                        con.query(sql3, [result2[0].otherTicketId, result2[0].otherCreatedate, ticket_list[i]], function (err, result3) {
                                                            if (err) {
                                                                cb(err, null);
                                                            } else {
                                                                logData("&&&&&&&&&&&&&&------------>" + sql3);
                                                                console.log("$$$asd$$$$$$$$-->", result3);
                                                                cb(null, true, result3);
                                                            }
                                                        })
                                                    }
                                                });

                                                // optimizedreport table ends

                                                if (flag === ticket_list.length) {
                                                    let sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                                                        " VALUES (" + data.ticketId + ",20, " + resultsI + "," + data.createdBy + ",'" + incidentLt + "') ";
                                                    logData('sql5*************************************' + sql5)
                                                    logData('5----' + new Date())
                                                    con.query(sql5, function (err5, result5) {
                                                        if (err5) {
                                                            logData(err5);
                                                            cb(err5, null);
                                                        } else {

                                                            // optimizedreport table starts
                                                            var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                                                // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                                                + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                                                + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                                                + " from USER where id =? "
                                                            con.query(sql90, [data.ticketId, data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                                                                if (err) {
                                                                    console.log(err);
                                                                } else {
                                                                    console.log(result55);
                                                                    var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                                                        + "all_analyst_ps=?,all_analyst_name=?,"
                                                                        + "ticket_activity_log =?,ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                                                    // console.log("WS@###########################",result60[0].id);
                                                                    con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, incidentLt, result55[0].login_name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                                                        console.log("%^&*(*&%^&*()(*&6595639586956");
                                                                        if (err) {
                                                                            console.log("65342168451326854321698543216853241685426854", err);
                                                                            cb(err, null);
                                                                        } else {
                                                                            logData("********______qwsd______>>>" + sql44);
                                                                            console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                                                            cb(null, true, result77);
                                                                        }
                                                                    })
                                                                }
                                                            });

                                                            // optimizedreport table ends

                                                            cb(null, true);
                                                        }
                                                    })

                                                }

                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }// else
                }
            });
        }
    } else {
        cb(null, true);
    }
}

function forwardProblemTicketAfterChangesToApprover(data, cb) {
    let str = "select a.supportGroupLevelId,a.work_flow_component_id,a.id,a.userId,b.tStatus_cd, a.workflowId from " +
        " (select supportGroupLevelId,work_flow_component_id,id,userId,CLIENTID,workflowId " +
        " from WFCCLIENT where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and STARTENDFLOWINDICATOR = '1' and categoryId=" + data.cat_id + " and ticket_type = " + data.ticketTypeId + " AND flowIndicator = 'F' ) a," +
        " (select id tStatus_cd,CLIENTID,sequence_no from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and ATTRID = 2 and sequence_no in ( 101,29, 308)) b where a.CLIENTID= b.CLIENTID";
    console.log(str)
    con.query(str, function (err3, results) {
        if (err3) {
            logData(err3);
            cb(err3, null);
        } else {
            if (results.length == 0) {
                cb(null, false, "Sorry, Some error occurred.");
            } else {
                var fld = {
                    "clientId": data.clientId,
                    "user_id": results[0].userId,
                    "frw_user_id": data.createdBy,
                    "work_flow_component_id": results[0].work_flow_component_id,
                    "wfcclient_id": results[0].id,
                    "supportGroupLevelId": results[0].supportGroupLevelId,
                    "PKFIELDVAL": data.id,
                    "FIELDVAL": data.cat_id,
                    "category_id": data.parent_cat_id,
                    "tStatus_cd": results[0].tStatus_cd,
                    "createdBy": data.createdBy,
                    "ticket_type": data.ticketTypeId,
                    "is_1st_entry": 'Y',
                    "reopen": 0
                };
                var asd = "";
                generateWorkFlow(fld, function (err, success, details) {
                    if (err || !success) {
                        cb(null, false, "Some error");
                    } else {
                        let sql1 = "update ticket set is_approved_problem_ticket=90, tstatus = " + results[0].tStatus_cd + ", modifybyid = " + data.createdBy + ", modifydate = Now() where id=" + data.id;
                        con.query(sql1, function (err3, results) {
                            if (err3) {
                                logData(err3);
                                cb(err3, null);
                            } else {
                                request
                                    .get(MAIL_URL + '/sendnotificationmail?ticketId=' + data.id + '&actionType=1&actionID=&actionData=')
                                    .end((err, resp) => {
                                        if (err) {
                                            logData(err);
                                        } else {
                                            logData('done---resp--' + JSON.stringify(resp))
                                        }
                                        // Do something
                                    });
                                cb(null, true, "Ticket forward successfully");
                            }
                        })

                    }
                })
            }
        }
    });
}


function getNoOfIncidentInProb(data, cb) {
    var ticket_list = data.incident_ticket_list.split(",");
    let sql3 = " SELECT count(distinct incident_ticket_id) cntInc ,problem_ticket_id FROM incident_problem_ticket_mapping where problem_ticket_id =? and deleteflag = '0' group by problem_ticket_id ";
    con.query(sql3, [data.id], function (err3, result3) {
        if (err3) {
            logData(err3);
            cb(err3, null);
        } else {
            if (result3[0].cntInc == 0) {
                cb(null, false, "no data found");
            } else {
                if (result3[0].cntInc > ticket_list.length) {
                    cb(null, true, "ok");
                } else {
                    cb(null, false, "limited data");
                }
            }
        }
    });
}

function deleteNewIncidentInProblem(data, cb) {
    let tstate;
    if (data.incident_ticket_list) {
        let flag = 0;
        var ticket_list = data.incident_ticket_list.split(",");
        getNoOfIncidentInProb(data, function (errAsy, successAsy, resultAsy) {
            if (errAsy) {
                cb(errAsy, null, resultAsy);
            } else {
                logData('\n\n getNoOfIncidentInProb------------' + successAsy)
                if (successAsy) {
                    for (let i = 0; i < ticket_list.length; i++) {
                        let sql3 = " SELECT id,tStatus FROM WFCCLIENTRESULT where PKFIELDVAL = " + ticket_list[i] + " " +
                            " and  id not in (select max(id) mid from WFCCLIENTRESULT where PKFIELDVAL = " + ticket_list[i] + " and DeleteFlag = '0' and activeFlow = '1' )  " +
                            " and DeleteFlag = '0' and activeFlow = '1' order by id desc limit 1 ";
                        con.query(sql3, function (err3, result3) {
                            if (err3) {
                                logData(err3);
                                cb(err3, null);
                            } else {
                                let sql4 = " SELECT id,tStatus FROM WFCCLIENTRESULT where PKFIELDVAL = " + ticket_list[i] + " " +
                                    " and  id = (select max(id) mid from WFCCLIENTRESULT where PKFIELDVAL = " + ticket_list[i] + " and DeleteFlag = '0' and activeFlow = '1' )  " +
                                    " and DeleteFlag = '0' and activeFlow = '1' order by id desc limit 1 ";
                                con.query(sql4, function (err4, result4) {
                                    if (err4) {
                                        logData(err4);
                                        cb(err4, null);
                                    } else {
                                        if (result3.length == 0 && result4.length == 0) {
                                            flag++;
                                            if (flag === ticket_list.length) {
                                                cb(null, true);
                                            }
                                        } else {
                                            if (result3.length > 0) {
                                                tstate = result3[0].tStatus;
                                            } else if (result3.length == 0 && result4.length > 0) {
                                                tstate = result4[0].tStatus;
                                            }
                                            /*******************************************************************************************************************/
                                            var dataU = {
                                                "id": ticket_list[i]
                                            };
                                            updateWFCResultForDispatch(dataU, function (errU1, successU1, resultsU1) {
                                                if (errU1 || !successU1) {
                                                    logData(errU1);
                                                    cb(errU1, null);
                                                } else {
                                                    let str = "insert into WFCCLIENTRESULT(CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, serial_no, " +
                                                        " END_INDICATOR, createbyid, user_id, frw_user_id, category_id, tStatus) select CLIENTID, work_flow_component_id, wfcclient_id, supportGroupLevelId, " +
                                                        " PKFIELDVAL, FIELDVAL, RESOLUTIONFIELD, (serial_no+1), END_INDICATOR, createbyid, user_id, frw_user_id, category_id, tStatus from WFCCLIENTRESULT " +
                                                        " where PKFIELDVAL = " + ticket_list[i] + " and id =" + result4[0].id + "  ";
                                                    con.query(str, function (err, result) {
                                                        if (err) {
                                                            logData(err);
                                                            cb(err, null);
                                                        } else {
                                                            insertLatestWFCClientResult({
                                                                "ticketId": ticket_list[i]
                                                            }, function (errET3, successET3, detailsET3) {
                                                                if (errET3 || !successET3) {
                                                                    cb(null, true, 0);
                                                                } else {
                                                                    let sql5 = "select mid,'111' from (select max(id) mid from WFCCLIENTRESULT x where x.PKFIELDVAL = " + ticket_list[i] + ")  a ";
                                                                    con.query(sql5, function (err5, result5) {
                                                                        if (err5) {
                                                                            logData(err5);
                                                                            cb(err5, null);
                                                                        } else {

                                                                            let sql = " update WFCCLIENTRESULT set tstatus =" + tstate + ", modifydate = Now(), modifybyid =" + data.user_id + "  where PKFIELDVAL = " + ticket_list[i] + " and id = " + result5[0].mid + "; " +
                                                                                " update WFCCLIENTRESULT_LAST_STATUS set tstatus =" + tstate + ", modifydate = Now(), modifybyid =" + data.user_id + "  where PKFIELDVAL = " + ticket_list[i] + " and id = " + result5[0].mid + "; ";
                                                                            con.query(sql, function (err, result) {
                                                                                if (err) {
                                                                                    logData(err);
                                                                                    cb(err, null);
                                                                                } else {
                                                                                    let sql1 = " update ticket set tStatus =" + tstate + ", modifydate = Now(), modifybyid =" + data.user_id + "  where  id = " + ticket_list[i] + " ";
                                                                                    con.query(sql1, function (err1, result1) {
                                                                                        if (err1) {
                                                                                            logData(err1);
                                                                                            cb(err1, null);
                                                                                        } else {
                                                                                            let sql2 = " update incident_problem_ticket_mapping set deleteflag = '1' where deleteflag = '0' and problem_ticket_id = " + data.id + " and incident_ticket_id = " + ticket_list[i] + "";
                                                                                            con.query(sql2, function (err2, result2) {
                                                                                                if (err2) {
                                                                                                    logData(err2);
                                                                                                    cb(err2, null);
                                                                                                } else {
                                                                                                    flag++;
                                                                                                    if (data.ticket_type_seq == 2) {
                                                                                                        if (flag === ticket_list.length) {
                                                                                                            cb(null, true, "ok");
                                                                                                        }
                                                                                                    } else {
                                                                                                        reopenTicket({
                                                                                                            "id": ticket_list[i],
                                                                                                            "sla_recalcultion_type": "resume",
                                                                                                            "user_id": data.user_id
                                                                                                        }, function (errC, successC, detailsC) {
                                                                                                            if (errC || !successC) {
                                                                                                                logData(errC);
                                                                                                                cb(errC, null);
                                                                                                            } else {
                                                                                                                flag++;
                                                                                                                if (flag === ticket_list.length) {
                                                                                                                    cb(null, true, detailsC);
                                                                                                                }

                                                                                                            }
                                                                                                        });
                                                                                                    }
                                                                                                }
                                                                                            });
                                                                                        }
                                                                                    });

                                                                                }
                                                                            });

                                                                        }
                                                                    });
                                                                }
                                                            })

                                                        }
                                                    });
                                                }

                                            })
                                            /*******************************************************************************************************************/


                                        }
                                    }
                                })


                            }
                        });
                    }
                } else {
                    cb(null, false, "Limited Data");
                }
            }
        })

    } else {
        cb(null, false)
    }
}

function getDocuTicketDetails(data, cb) {
    async.waterfall([
        function userIdClientWise(done) {
            let sql = " SELECT CLIENTID from USER where DeleteFlag=0 and id = " + data.user_id;
            con.query(sql, function (err, result) {
                if (err) {
                    logData(err);
                    done(null);
                } else {
                    done(null, result);
                }
            });
        },
        function getAllOtherDetails(step1Result, callback) {
            function getAttributesHeaderMst(callback) {
                logData('aaa--------------3333333333333--------' + JSON.stringify(data))
                let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
                    " and CLIENTID = " + step1Result[0].CLIENTID + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
                logData('aaa-----sql----------11----------' + sql)
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        for (let i = 0; i < result.length; i++) {
                            result[i].type = 'header';
                        }
                        callback(null, result);
                    }
                });
            }

            function getAttributesMstParentWise(callback) {
                let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + step1Result[0].CLIENTID + " and PARENT_ID =0 and ATTRID = 1 " +
                    "  and attrHeaderMstId in (select id from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
                    " and CLIENTID = " + step1Result[0].CLIENTID + " and ticket_type = " + data.ticket_type + " );";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        callback(null, result);
                    }
                });
            }


            async.parallel([getAttributesHeaderMst, getAttributesMstParentWise], function (err, results) {
                if (err) {
                    callback(err, null)
                } else {

                    let arr = [];
                    for (let i = 0; i < results[0].length; i++) {
                        if (i === 0) {
                            let inner = [];
                            inner = results[1];
                            inner.unshift(results[0][i]);
                            arr.push({ id: i + 1, options: inner })
                        } else {
                            arr.push({ id: i + 1, options: [results[0][i]] })
                        }
                    }
                    logData(JSON.stringify(arr))

                    callback(null, [{
                        attribute: arr,
                        clientId: step1Result[0].CLIENTID,

                    }])
                }
            })
        }
    ],
        function (err, results) {
            if (err) {
                cb(err)
            } else {
                cb(null, true, results)
            }
        });

}

// function getDocuActions(data, cb) {
//     let sql = 'select * from docuAction';
//     con.query(sql, function (err, resp) {
//         if (err) {
//             cb(err, null);
//         } else {
//             cb(null, true, resp);
//         }
//     })
// }

function getUsersByMultiGroup(data, cb) {
    let sql = 'SELECT USER.NAME name,USER.id  FROM USER,supportGroupUser where supportGroupUser.DeleteFlag=0 and USER.DeleteFlag=0 and supportGroupUser.userId=USER.id and supportGroupUser.clientId=' + data.clientId + ' and supportGroupUser.supportGroupLevelId in (' + data.groups + ');';
    con.query(sql, function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function validatedTicketId(data, cb) {
    util.logData('\n\n -------------inside validatedTicketId --------------------');
    // let sql = " select * from ticket where ticket_id = ? ";
    // con.query(sql, [data.ticketId], function (err, result) {
    //     if (err) {
    //         logData(err);
    //         cb(err, null);
    //     } else {
    //         if (result.length > 0) {
    //             let sqlI = " update ticket_yearly_status set yr_count =yr_count+1 " +
    //                 " where DeleteFlag = '0' " +
    //                 " and client_id = " + data.clientId + " and ticket_type=" + data.ticket_type + " and year_val=" + data.year_val + " and enddate is null ";
    //             con.query(sqlI, function (err1, resp1) {
    //                 if (err1) {
    //                     cb(err1, null);
    //                 } else {
    //                     generateTicketId(data, function (err3, success3, result3) {
    //                         if (err3 || !success3) {
    //                             logData(err3);
    //                             cb(err3, null);
    //                         } else {
    //                             logData('\n\n******************************recursive*****************************************************')
    //                             cb(null, true, "ok");
    //                         }
    //                     })
    //                 }
    //             })
    //
    //         } else {
    //             cb(null, true, "ok");
    //         }
    //     }
    // });
    cb(null, true, "ok");
}


function validationB4CreateTicket(data, cb) {

    function checkTicketConfig(callback) {
        var FstCategory = data.categoryDtlsLt.split(',')[0].split("#")[1];
        let sql = "SELECT id FROM ticket_id_configuration where client_id = " + data.clientId + " and ticket_type = " + data.ticketTypeId + " and category_id = " + FstCategory + " and deleteflag  = '0' ";
        util.logData('checkTicketConfig----' + sql)
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                logData('checkTicketConfig----' + JSON.stringify(result))
                if (result.length > 0) {
                    callback(null, true);
                } else {
                    callback(null, false);
                }
            }
        });
    }

    function checkYearCount(callback) {
        var currYear = (new Date()).getFullYear();
        let sql = "SELECT id FROM ticket_yearly_status where client_id = " + data.clientId + " and year_val = " + currYear + " and ticket_type = " + data.ticketTypeId + " and DeleteFlag = '0' ";
        logData('checkYearCount----' + sql)
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                logData('checkYearCount----' + JSON.stringify(result))
                if (result.length > 0) {
                    callback(null, true);
                } else {
                    callback(null, true);
                }
            }
        });
    }

    function checkPriority(callback) {
        let sql = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =" + data.clientId + " and TICKETTYPEID =" + data.ticketTypeId + " and busi_priority_id =" + data.busi_priority_id + "  and ACTIVESLA = 'true' and deleteflag = '0'";
        logData('checkPriority----' + sql)
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                logData('\n\n**********************************checkPriority**************************' + JSON.stringify(result))
                if (result.length > 0) {
                    callback(null, true);
                } else {
                    callback(null, false);
                }
            }
        });
    }

    function checkAllTicketStatus(callback) {
        let sql = "";
        if (data.ticket_type_seq === 1) {
            sql = "SELECT a.disCount - b.redunCount cnt FROM (SELECT COUNT(DISTINCT sequence_no) - 5 disCount FROM TICKETATTRIBUTES " +
                "WHERE CLIENTID = " + data.clientId + "  AND ATTRID = 2 AND sequence_no IN (0 , 1, 2, 3, 7) AND DeleteFlag = '0') a, " +
                "(SELECT COUNT(sequence_no) - 5 redunCount FROM TICKETATTRIBUTES WHERE CLIENTID = " + data.clientId + " AND ATTRID = 2 " +
                "AND sequence_no IN (0 , 1, 2, 3, 7) AND DeleteFlag = '0') b ";
        } else if (data.ticket_type_seq === 2) {
            sql = "SELECT a.disCount - b.redunCount cnt FROM (SELECT COUNT(DISTINCT sequence_no) - 13 disCount FROM TICKETATTRIBUTES " +
                "WHERE CLIENTID = " + data.clientId + "  AND ATTRID = 2 AND sequence_no IN (0 , 1, 2, 3, 7,21,22,23,101,102,103,104,105) AND DeleteFlag = '0') a, " +
                "(SELECT COUNT(sequence_no) - 13 redunCount FROM TICKETATTRIBUTES WHERE CLIENTID = " + data.clientId + " AND ATTRID = 2 " +
                "AND sequence_no IN (0 , 1, 2, 3, 7,21,22,23,101,102,103,104,105) AND DeleteFlag = '0') b ";
        } else {
            sql = "SELECT a.disCount - b.redunCount cnt FROM (SELECT COUNT(DISTINCT sequence_no) - 5 disCount FROM TICKETATTRIBUTES " +
                "WHERE CLIENTID = " + data.clientId + "  AND ATTRID = 2 AND sequence_no IN (0 , 1, 2, 3, 7) AND DeleteFlag = '0') a, " +
                "(SELECT COUNT(sequence_no) - 5 redunCount FROM TICKETATTRIBUTES WHERE CLIENTID = " + data.clientId + " AND ATTRID = 2 " +
                "AND sequence_no IN (0 , 1, 2, 3, 7) AND DeleteFlag = '0') b ";
        }

        logData('checkAllTicketStatus----' + sql)
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                logData('checkAllTicketStatus----' + JSON.stringify(result))
                if (result[0].cnt == 0) {
                    callback(null, true);
                } else {
                    callback(null, false);
                }
            }
        });
    }

    function checkIsTodayHoliday(callback) {
        var today = (new Date()).getDate();
        logData('today------------' + today)
        // let sql = "select * from holiDaysListMst where holidaytype ='F' and deleteflag = '0' and holyday = '' ";
        let sql = "select * from holiDaysListMst where holidaytype ='F' and deleteflag = '0'";
        logData('checkAllTicketStatus----' + sql)
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                logData('checkAllTicketStatus----' + JSON.stringify(result))
                if (result.length > 0) {
                    callback(null, true);
                } else {
                    callback(null, true);
                }
            }
        });
    }

    function checkAttachment(callback) {
        if (data.attachmentPath.length > MAX_FILE) {
            callback(null, false);
        } else {
            callback(null, true);
        }
    }

    async.series([checkTicketConfig, checkYearCount, checkPriority, checkAllTicketStatus, checkIsTodayHoliday, checkAttachment], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            if (results[0] && results[1] && results[2] && results[3]) {
                cb(null, true, "OK");
            } else {
                logData('fff-----' + results[0] + "     " + results[1] + "     " + results[2] + "     " + results[3])
                if (!results[0]) {
                    cb(null, false, "Create Proper Ticket ID Configuration.");
                } else if (!results[1]) {
                    cb(null, false, "Some Configuration Error: Ticket Sequense Missing");
                } else if (!results[2]) {
                    cb(null, false, "Some Configuration Error: Create Proper SLA Configuration.");
                } else if (!results[3]) {
                    cb(null, false, "Some Configuration Error: Create All Ticket Status.");
                } else if (!results[5]) {
                    cb(null, false, "Can't attach more than " + MAX_FILE + " files.");
                } else {
                    cb(null, false, "Some Configuration Error.");
                }

            }

        }
    })
}

function deleteAllSlaDueToCategoryChange(data, cb) {
    let sql = "Update ticket_awaiting_dtls set deleteflag='1' where ticket_id=? ";
    con.query(sql, [data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            let sql1 = "Update ticket_sla_startstop_logs_all_action set deleteflag='1' where ticket_id=? ";
            con.query(sql1, [data.id], function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    cb(null, true, "ok");
                }
            })
        }
    })
}

function checkIsTodayHoliday1(data, cb) {
    var today = (new Date()).getDate();
    logData('today------------' + today)
    let sql = "select * from holiDaysListMst where holidaytype ='F' and deleteflag = '0' and holyday = '' ";
    logData('checkAllTicketStatus----' + sql)
    con.query(sql, function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function getSlaCompletionPercentage(data, cb) {
    request
        .get(SLA_URL + '/getSlaCompletionPercentage')
        .query({
            ticketId: data.ticketId,
        }) // query string
        .end((err, resp) => {
            if (err) {
                // logData(err);
                cb(err, false)
            } else {
                const res = JSON.parse(resp.text);
                if (res.success) {
                    cb(null, true, res.resVal);
                } else {
                    cb(null, false, 'Something Went Wrong')
                }
            }
        });
}

function getSalReport(data, cb) {
    request
        .get(SLA_URL + '/getSalReport?fromDt=' + data.fromDt + '&toDt=' + data.toDt + '&clientid=' + data.clientid + '&ticket_type=' + data.ticket_type + '&category=' + data.category + '&ticket_status=' + data.ticket_status)
        .end((err, resp) => {
            if (err) {
                // logData(err);
                cb(err, false)
            } else {
                const res = JSON.parse(resp.text);
                if (res.success) {
                    cb(null, true, res.TotalSLADtls);
                } else {
                    cb(null, false, 'Something Went Wrong')
                }
            }
        });
}


function getCategoryByTicketTypeNDynamicLevel(data, cb) {
    // var data = preventSqlInjection(data);
    let sql = "SELECT category_header_id,category_level FROM ticket_workflow_generated_on_category where client_id=" + data.clientId + " and ticket_type_id=" + data.ticket_type + " and delete_flag=0 ";
    logData('hhh------------------' + sql)
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                logData('kkkk------------------------' + JSON.stringify(result))
                var headerId = result[0].category_header_id;
                logData('headerId------------------------' + headerId)
                let sql1 = 'SELECT id, ATTRVAL name FROM TICKETATTRIBUTES where CLIENTID=' + data.clientId + ' and DeleteFlag=0 and ATTRID=1 and attrHeaderMstId=' + headerId + ' ;';
                logData('sql1------------------------' + sql1)
                con.query(sql1, function (err, result1) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result1)
                    }
                })
            } else {
                cb(null, false, "No Category Mapped with Ticket Type.");
            }
        }
    });
}

function getWFCGeneratedFor(data, cb) {
    // var data = preventSqlInjection(data);
    let sql = "SELECT category_header_id,category_level FROM ticket_workflow_generated_on_category where client_id=" + data.clientId + " and ticket_type_id=" + data.ticket_type + " and delete_flag='0' ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function getLoginClientList(cb) {
    var str = 'SELECT id,NAME as name ,startDate,endDate FROM  CLIENT where BASE_FLAG="false" and DeleteFlag="0"';
    con.query(str, function (err, done, fields) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    })
}

function loginlt(data, cb) {
    util.logData('inside loginlt');
    if (data.loginName === undefined) {
        data.loginName = '';
    }
    var str = "SELECT PASSWORD,CLIENTID as clientId,id FROM USER where login_name=? and CLIENTID in (select id from CLIENT where clientCode=? and DeleteFlag=0) and DeleteFlag=0";
  console.log("checking con" + con);
  logData("str======================="+str);
  console.log("data.loginName",data.loginName, "data.clientCode===",data.clientCode);
    con.query(str, [data.loginName.toLowerCase(), data.clientCode.toLowerCase()], function (err, details) {
        if (err) {
            logData('===================',err);
            cb(err, null);
        } else {
            console.log(details);
            if (details.length > 0) {
                console.log("checking con----1",data.password, details[0].PASSWORD) ;
                bcrypt.compare(data.password, details[0].PASSWORD).then(function (res) {
                    if (res) {
                        console.log("checking con----2") ;
                        delete details[0].PASSWORD;
                        const token = jwt.sign({ id: details[0].id }, global.gConfig.JWT_SECRET_TOKEN, { expiresIn: global.gConfig.JWT_EXPIRY_TIME });
                        details[0].token = token;
                        let sql1 = 'insert into ticket_token(clientId,login_name,token,user_id) value(?,?,?,?)';
                        con.query(sql1, [details[0].clientId, data.loginName.toLowerCase(), token, details[0].id], function (err) {
                            if (err) {
                                logData("_++==",err);
                                cb(err, null);
                            } else {
                                console.log("checking con----3") ;
                                if (Number(details[0].clientId) !== 1) {
                                    let sql4 = "SELECT a.id ,a.SUPERADMINFLAG isAdmin FROM USERROLE a,ROLEUSER b where b.ROLEID=a.id and b.CLIENTID= ? and b.USERID=? and  b.DeleteFlag=0 and a.DeleteFlag=0;";
                                    con.query(sql4, [details[0].clientId, details[0].id], function (err, details4) {
                                        if (err) {
                                            logData(err);
                                            cb(err, null);
                                        } else {
                                            console.log("checking con----4") ;
                                            if (details4.length > 0) {
                                                let sql2 = 'select url from client_specific_url where client_id=? and url_id in (SELECT id FROM url  where name="dashboard") and isAdmin = ? and DeleteFlag=0';
                                                con.query(sql2, [details[0].clientId, stringToBool(details4[0].isAdmin) + ""], function (err, details2) {
                                                    if (err) {
                                                        logData(err);
                                                        cb(err, null);
                                                    } else {
                                                        console.log("checking con----5") ;
                                                        if (details2.length > 0) {
                                                            console.log("checking con----6") ;
                                                            details[0].dashboard = details2[0].url;
                                                        }
                                                        // util.logData(JSON.stringify(details[0]));
                                                        console.log("checking con---7") ;
                                                        cb(null, true, details[0]);
                                                    }
                                                });
                                            } else {
                                                cb(null, false, "User is not mapped with any role.");
                                            }
                                        }
                                    });
                                } else {
                                    cb(null, true, details[0]);
                                }
                            }
                        })

                    } else {
                        cb(null, false, "Sorry...Invalid Credentials--1");
                    }
                });

            } else {
                cb(null, false, "Sorry...Invalid Credentials--2");
            }
        }
    })
}

function generateToken(data, cb) {
    console.log("inside generateToken");
    let sql = 'select id from USER where CLIENTID=? and login_name=? and DeleteFlag=0';

    console.log("inside sql", sql);

    con.query(sql, [data.clientId, data.login_name], function (err, result) {
        if (err) {
            //oken
            logData(err);
            cb(err, null);
        } else {
            util.logData('result============' + JSON.stringify(result));
            if (result.length > 0) {
                const id = result[0].id;
                const token = jwt.sign({ id: id }, global.gConfig.JWT_SECRET_TOKEN, { expiresIn: global.gConfig.JWT_EXPIRY_TIME });
                saveToken({ user_id: id, token: token }, function (err) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        let sql1 = 'insert into ticket_token(clientId,login_name,token,user_id) value(?,?,?,?)';
                        con.query(sql1, [data.clientId, data.login_name, token, id], function (err) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                let sql = "select a.supportGroupLevelId as groupId, b.LEVELSHORTDESC grpName, b.group_level level from supportGroupUser a, SUPPORTGROUPLEVEL b where a.supportGroupLevelId = b.id and a.userId=" + id + " and a.DeleteFlag='0' and b.DeleteFlag=0 order by b.group_level desc ";
                                // let start1 = Date.now();
                                con.query(sql, function (err, result1) {
                                    if (err) {
                                        logData(err);
                                        cb(err, null);
                                    } else {
                                        util.logData('supportGroup::' + JSON.stringify(result1))
                                        const loginName = btoa(util.xorEncode(data.login_name, SECRET_TOKEN));
                                        if (result1.length > 0) {
                                            cb(null, true, {
                                                token: token,
                                                loginName: loginName,
                                                id: result[0].id,
                                                groups: result1
                                            });
                                        } else {
                                            cb(null, true, { token: token, loginName: loginName, id: result[0].id });
                                        }
                                    }
                                })

                            }
                        });
                    }
                })

            } else {
                cb(null, false, 'Invalid Client Id / User Id');
            }
        }
    })
}

// function generateToken(data, cb) {
//     let sql = 'select id from USER where CLIENTID=? and login_name=? and DeleteFlag=0';
//     con.query(sql, [data.clientId, data.login_name], function (err, result) {
//         if (err) {
//             //oken
//             logData(err);
//             cb(err, null);
//         } else {
//             if (result.length > 0) {
//                 const id = result[0].id;
//                 const token = jwt.sign({id: id}, global.gConfig.JWT_SECRET_TOKEN, {expiresIn: global.gConfig.JWT_EXPIRY_TIME});
//                 saveToken({user_id: id, token: token}, function (err3) {
//                     if (err3) {
//                         logData(err3);
//                         cb(err, null);
//                     } else {
//                         let sql1 = 'insert into ticket_token(clientId, login_name, token, user_id) value(?,?,?,?)';
//                         con.query(sql1, [data.clientId, data.login_name, token, id], function (err1,result1) {
//                             if (err1) {
//                                 logData('ticket_token-------------------'+err1);
//                                 logData('ticket_token----------sql1---------'+sql1);
//                                 cb(err1, null);
//                             } else {
//                                 let sql2 = "select a.supportGroupLevelId as groupId, b.LEVELSHORTDESC grpName, b.group_level level from supportGroupUser a, SUPPORTGROUPLEVEL b where a.supportGroupLevelId = b.id and a.userId=" + id + " and a.DeleteFlag='0' and b.DeleteFlag=0 order by b.group_level desc ";
//                                 // let start1 = Date.now();
//                                 con.query(sql2, function (err2, result2) {
//                                     if (err2) {
//                                         logData(err2);
//                                         cb(err2, null);
//                                     } else {
//                                         util.logData('supportGroup::' + JSON.stringify(result2))
//                                         const loginName = btoa(util.xorEncode(data.login_name, SECRET_TOKEN));
//                                         if (result2.length > 0) {
//                                             cb(null, true, {
//                                                 token: token,
//                                                 loginName: loginName,
//                                                 id: result[0].id,
//                                                 groups: result2
//                                             });
//                                         } else {
//                                             cb(null, true, {token: token, loginName: loginName, id: result[0].id});
//                                         }
//                                     }
//                                 })
//
//                             }
//                         });
//                     }
//                 })
//
//             } else {
//                 cb(null, false, 'Invalid Client Id / User Id');
//             }
//         }
//     })
// }

function tokenValidation(data, cb) {
    util.logData('tokenValidation :' + JSON.stringify(data));
    // let sql = 'select token,time from ticket_token where clientId=? and login_name=? and DeleteFlag=0 ORDER BY time desc';
    let sql = 'select token,time from ticket_token where clientId=? and login_name=? ORDER BY time desc';
    con.query(sql, [data.clientId, data.loginName], function (err, results) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (results.length > 0) {
                if (data.token === results[0].token) {
                    const last_time = new Date(results[0].time);
                    const now_time = new Date().getTime();
                    const time_diff = now_time - last_time;
                    if (time_diff > TOKEN_EXP_TIME) {
                        util.logData('Token Expired');
                        cb(null, false, 'TOKEN ERROR:1003');
                    } else {
                        let sql3 = 'select id from USER where CLIENTID=? and login_name=? and DeleteFlag=0';
                        util.logData(sql3)
                        con.query(sql3, [data.clientId, data.loginName], function (err, result) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                if (result.length > 0) {
                                    const id = result[0].id;
                                    const decodedId = jwt.decode(data.token);
                                    if (decodedId.id === id) {
                                        jwt.verify(data.token, global.gConfig.JWT_SECRET_TOKEN, function (err, decoded) {
                                            if (err) {
                                                util.logData(err);
                                                util.logData('Token not verified');
                                                cb(null, false, 'TOKEN ERROR:1006')
                                            } else {
                                                // let sql2 = 'update ticket_token SET DeleteFlag=1 where clientId=? and login_name=? and token=? and DeleteFlag=0 ';
                                                // con.query(sql2, [data.clientId, data.loginName, data.token], function (err) {
                                                //     if (err) {
                                                //         util.logData('update failed :')
                                                //         util.logData(err);
                                                //     }
                                                // });
                                                cb(null, true, id);
                                            }
                                        })
                                    } else {
                                        util.logData('User Id not matched with token');
                                        cb(null, false, 'TOKEN ERROR:1005')
                                    }

                                } else {
                                    util.logData('User Id not found');
                                    cb(null, false, 'TOKEN ERROR:1004')
                                }
                            }
                        })

                    }
                } else {
                    util.logData('Token Mismatch');
                    util.logData('\nToken Mismatch data :' + data.token, results[0].token);
                    util.logData('\nToken Mismatch data type:' + typeof data.token, typeof results[0].token);
                    cb(null, false, 'TOKEN ERROR:1002');
                }
            } else {
                util.logData('No token found :' + data.loginName);
                cb(null, false, 'TOKEN ERROR:1001')
            }
        }
    })
}

function getAttributesHeaderMstTicketTypewise(data, cb) {
    let sql = "SELECT id,sequence_no,header_name FROM attributesHeaderMst where CLIENTID = ? and ATTRID = 1 and ticket_type = ? and DeleteFlag = '0' ";
    con.query(sql, [data.client_id, data.ticket_type], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function insertWFCGeneratedFor(data, cb) {
    let sql = "SELECT * FROM ticket_workflow_generated_on_category where client_id = ? and ticket_type_id = ? and delete_flag = '0' ";
    con.query(sql, [data.client_id, data.ticket_type], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, false, "Duplicate data");
            } else {
                let sql1 = "Insert into ticket_workflow_generated_on_category(client_id,ticket_type_id,category_header_id,category_level,create_by_id) " +
                    " values (?,?,?,?,?) ";
                con.query(sql1, [data.client_id, data.ticket_type, data.category_header_id, data.category_level, data.user_id], function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result1.insertId > 0) {
                            cb(null, true, result1.insertId);
                        } else {
                            cb(null, true, "No data found");
                        }
                    }
                });
            }
        }
    });

}

function getWFCGeneratedDetails(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id,a.category_header_id,(SELECT header_name FROM attributesHeaderMst where id = a.category_header_id) header_name,a.category_level, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type_id ) ticket_type FROM ticket_workflow_generated_on_category a, attributesHeaderMst b " +
                " where a.id > " + offset + " and a.category_header_id = b.id and a.client_id=" + data.clientId + " and a.delete_flag=0 and b.DeleteFlag = '0' " +
                "  ORDER BY a.id ASC LIMIT " + page_size;
            util.logData('sql=' + str);
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT a.id,a.category_header_id,(SELECT header_name FROM attributesHeaderMst where id = a.category_header_id) header_name,a.category_level, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type_id ) ticket_type FROM ticket_workflow_generated_on_category a, attributesHeaderMst b " +
                " where a.id < " + offset + " and a.category_header_id = b.id and a.client_id=" + data.clientId + " and a.delete_flag=0 and b.DeleteFlag = '0' " +
                "  ORDER BY a.id DESC LIMIT " + page_size + ")z ORDER BY z.id  ASC;";
            util.logData('sql1=' + str);
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(*) count FROM ticket_workflow_generated_on_category a, attributesHeaderMst b " +
            " where a.category_header_id = b.id and a.client_id=" + data.clientId + " and a.delete_flag=0 and b.DeleteFlag = '0' ";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getRSDBData(data, cb) {
    logData('\n\ngetRSDBData--------------' + JSON.stringify(data))
    if (data.categoryId === null || data.categoryId === 0 || data.creatorId == null || data.creatorId === 0 || data.ticket_type === null || data.ticket_type === 0 || data.clientId === null || data.clientId === 0) {
        cb(null, false, "Session out");

    } else {
        let sql = "SELECT id,rsdb_sql_str FROM ticket_rsdb_mst where client_id = ? and rsdb_type = ? and delete_flag = '0' ";
        logData('getRSDBData-------------------sql------------' + sql)
        con.query(sql, [data.clientId, data.rsdb_type], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result.length > 0) {
                    let sql1 = result[0].rsdb_sql_str;

                    let params = [];
                    if (data.rsdb_type === '1') {
                        params = [data.categoryId, data.creatorId, data.ticket_type];
                    } else {
                        params = [data.creatorId, data.ticket_type];
                    }
                    con.query(sql1, params, function (err1, result1) {
                        logData('getRSDBData sql-------------------' + sql1)
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {
                            if (result1.length > 0) {
                                cb(null, true, result1);
                            } else {
                                cb(null, true, []);
                            }
                        }
                    });
                } else {
                    cb(null, true, []);
                }
            }
        });
    }
}

function getTicketDetailForRSDB(data, cb) {
    let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
        " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy " +
        " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + "  group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
        " and a.tstatus = f.id " +
        " and b.DeleteFlag = '0' " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and g.id = e.supportGroupLevelId " +
        " and a.id =" + data.id + " and  b.DeleteFlag = '0' ";

    sql = sql + " order by e.id desc ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                let j = 0;
                // for (let j = 0; j < result.length; j++) {
                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                    " left join " +
                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                    " on m.wfcclient_result_id = n.wfcclient_result_id ";
                con.query(sql12, function (err12, result12) {
                    if (err12) {
                        logData(err12);
                        cb(err12, null);
                    } else {
                        if (result12.length > 0) {
                            result[j]['assignee'] = result12[0].assignee;
                            result[j]['aid'] = result12[0].assigned_user_id;
                        }
                        /***********************************************************************************/
                        let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                            " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                            " where a.FIELDVAL = c.id and a.category_id = b.id " +
                            " and a.PKFIELDVAL = " + result[j].id + " " +
                            " and a.activeFlow = '1' " +
                            " and a.serial_no = 1 " +
                            " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                        con.query(sql2, function (err2, result2) {
                            if (err2) {
                                logData(err2);
                                cb(err2, null);
                            } else {
                                if (result2.length > 0) {
                                    result[j]['last_cat'] = result2[0].child;
                                    result[j]['last_cat_parent'] = result2[0].parent;
                                    result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                    result[j]['last_cat_parent_id'] = result2[0].category_id;
                                }
                                /***********************************************************************************/
                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";

                                le++;
                                con.query(sql1, function (err1, result1) {
                                    if (err1) {
                                        logData(err1);
                                        cb(err1, null);
                                    } else {
                                        if (result1.length > 0) {
                                            for (let i = 0; i < result1.length; i++) {
                                                result[j][result1[i].parent] = result1[i].child;
                                            }
                                            if (flg == result.length) {
                                                cb(null, true, result[0]);
                                            }
                                            flg++;
                                        } else {
                                            cb(null, true, []);
                                        }

                                    }
                                });
                            }
                        });
                    }
                });
                // }
            } else {
                cb(null, true, result[0]);
            }
        }
    });
}


function isTicketGetResolvedStatus(data, cb) {
    logData("\n\n**********************isTicketGetResolvedStatus******************")
    var sql = "select * from ticket where id = ? and DeleteFlag = '0' and tstatus in " +
        " (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID =? and ATTRID = 2  " +
        " and sequence_no in (0,2,12)) ";
    con.query(sql, [data.ticketId, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, false, "Currently the ticket is pending for User's Reply. This ticket cannot be resolved");
            } else {
                cb(null, true, "ok");
            }
        }
    });
}

function isTicketInSameCategory(data, cb) {
    logData("\n\n**********************isTicketInSameCategory******************" + JSON.stringify(data));
    var sql = "select * from ticket where id = ? and DeleteFlag = '0' and  working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes  " +
        " where clientId = ? and ticket_type = (select ticketTypeId from ticket where id = ? and DeleteFlag = '0') and supportGroupLevelId =? and DeleteFlag = '0') ";
    logData('isTicketInSameCategory-----------------' + sql)
    con.query(sql, [data.id, data.clientId, data.id, data.supportGroupLevelId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            logData("result.length-----------------------" + result.length)
            if (result.length > 0) {
                cb(null, true, "ok");
            } else {

                var sql1 = "select * from ticket where id = ? and DeleteFlag = '0' and  working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes " +
                    " where (clientId = ? or clientId =(SELECT masterId FROM client_subclient_mapping where subclientId = ?)" +
                    " or clientId in (SELECT subclientId FROM client_subclient_mapping where masterId = ?) ) " +
                    " and ticket_type = (select ticketTypeId from ticket where id = ? and DeleteFlag = '0') and supportGroupLevelId =? and DeleteFlag = '0') ";
                logData('isTicketInSameCategory-----------------' + sql1)
                con.query(sql1, [data.id, data.clientId, data.clientId, data.clientId, data.id, data.supportGroupLevelId], function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result1.length > 0) {
                            cb(null, true, "ok");
                        } else {
                            cb(null, false, "Selected user and category are not aligned please change the ticket category or please select the correct user");
                        }
                    }
                });
            }
        }
    });
}

function insertLNTEmployeeDtls(data, cb) {
    // util.logData('------------------insertLNTEmployeeDtls-------------' + JSON.stringify(data));
    for (key in data) {
        data[key] = con.escape(data[key]);
    }
    let sql = "INSERT INTO LNT_employee_details " +
        " (ticket_id,psno,name,std_code,phone,ic,sbu,status,band,grade,location,gender,sm,overseas,isd_code,mobile_no,email_id,date_of_separation,entity_code,unit,doj) " +
        " VALUES (" + data.ticketId + "," + data.PSNO + "," + data.NAME + "," + data.STD_CODE + "," + data.PHONE + "," + data.IC + "," + data.SBU + "," + data.EMPLOYEE_STATUS + "," + data.BAND + "," +
        " " + data.GRADE + "," + data.LOCATION + "," + data.GENDER + "," + data.SM + "," + data.OVERSEAS + "," + data.ISD_MOBILE + "," + data.MOBILE + "," + data.EMAILID + "," + data.DATE_OF_SEPARATION + "," + data.ENTITY_CODE + "," + data.UNIT + "," + data.DOJ + ") ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.insertId > 0) {

                 // optimizedreport table starts
                 var sql4 = "select id from optimizedreport where ticket_id =?;"
                 logData("^^^^^^^^^^^^++++++++" + sql4);
                 con.query(sql4, [data.ticketId], function (err, result4) {
                     logData("^^^^^^^^^^^^++++++21345++" + sql4);
                     if (err) {
                         console.log("@QWESFD", err);
                         cb(err, null);
                     } else {
                         console.log(result4);
                         if (result4 > 0) {
                             var sql34 = "update optimizedreport set requester_ps =?,requestor_name =?,ticket_last_modified_dt=Now(),last_modified_dt=Now() where id =" + result4[0].id + " "
                             con.query(sql34, [data.PSNO, data.NAME, result4[0].id], function (err, result34) {
                                 logData("#@$RET#$@!WQS" + sql34);
                                 if (err) {
                                     console.log("SADFSGFDTRFZ", err);
                                     cb(err, null);
                                 } else {
                                     logData("&&&&&&&&&&&&&&------------>" + sql34);
                                     console.log("@@@@@@@@@@@@@@@", result34);
                                     cb(null, true, result34);
                                 }
                             })
                         }
                     }
                 });
 
                 // optimizedreprot table ends
 

                cb(null, true, "successfully inserted");
            } else {
                cb(null, false, "No data found....");
            }
        }
    });
}

function getLNTEmployeeDtls(data, cb) {
    let sql = "select * from LNT_employee_details where ticket_id = " + data.ticketId + " ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, false, "No data found....");
            }
        }
    });
}

function getWorkFlowWithPagination(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " select a.id, a.name, a.descriptions des " +
                " from WORKFLOW a " +
                " where a.id > " + offset + " and a.DeleteFlag = '0' ORDER BY a.id ASC LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "SELECT * from (select a.id, a.name, a.descriptions des " +
                " from WORKFLOW a " +
                " where a.id < " + offset + " and a.DeleteFlag = '0' ORDER BY a.id DESC LIMIT " + page_size + ") Z ORDER BY Z.id  ASC";
        }


        con.query(str, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " select count(a.id) count from WORKFLOW a where a.DeleteFlag = '0' ";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getUserDetailsByLoginId(data, cb) {
    let sql = 'select id, NAME as name ,USERMAIL as email,USERMOBILENO as mobile,address FROM USER where login_name=? and clientId=? and DeleteFlag=0';
    con.query(sql, [data.loginId, data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            // /util.logData('result1=' + done);
            cb(null, true, done);
        }
    });
}


function insertUserSession(data, cb) {
    data.userId = data.user_id;
    delete data.user_id;
    request
        .get(SLA_URL + '/usrsession')
        .query(data) // query string
        .end((err, resp) => {
            if (err) {
                logData(err);
            } else {
                logData('insertUserSession--' + JSON.stringify(resp));
                cb(null, true)
            }
        });
}

function searchTicket(data, cb) {
    let sql;
    util.logData(JSON.stringify(data))
    if (data.type === 'psNo') {
        sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
            " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
            " ,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
            " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
            " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
            " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' " +
            " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
            " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
            " and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + ") and ATTRID = 2  and sequence_no in (0))" +
            " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
            "  and is_awaiting_for_user_info in ('N','R') AND b.login_name='" + data.value + "' ";
    }
    if (data.type === 'id') {
        sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
            " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
            " ,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
            " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
            " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
            " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' " +
            " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
            " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
            " and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0))" +
            " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
            "  and is_awaiting_for_user_info in ('N','R') AND a.ticket_id='" + data.value + "' ";
    }
    if (data.type === 'email') {
        sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
            " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
            " ,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
            " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
            " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
            " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' " +
            " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
            " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
            " and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0))" +
            " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
            "  and is_awaiting_for_user_info in ('N','R') AND b.USERMOBILENO='" + data.value + "'";
    }
    if (data.type === 'mobile') {
        sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
            " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
            " ,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
            " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
            " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
            " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' " +
            " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
            " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
            " and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0))" +
            " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
            " and is_awaiting_for_user_info in ('N','R') AND b.USERMOBILENO='" + data.value + "'";
    }
    //and e.supportGroupLevelId ="+data.supportgrp_id+ "

    if (data.statusType == 'opn') {
        sql = sql + " and a.tstatus not in (select id from TICKETATTRIBUTES where ATTRVAL='Close' and CLIENTID=(select CLIENTID from USER where id=" + data.user_id + " ))";
    }
    sql = sql + " order by e.id desc ";

    util.logData(">>>>>>>> Search Query >>>>>>>" + sql);
    con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.user_id, data.supportgrp_id, data.value], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            /***********************************************************************************/
                            let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                " and a.PKFIELDVAL = " + result[j].id + " " +
                                " and a.serial_no = 1 " +
                                " and a.activeFlow = '1' " +
                                " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    logData(err2);
                                    cb(err2, null);
                                } else {
                                    if (result2.length > 0) {
                                        result[j]['last_cat'] = result2[0].child;
                                        result[j]['last_cat_parent'] = result2[0].parent;
                                        result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                        result[j]['last_cat_parent_id'] = result2[0].category_id;
                                    }
                                    /***********************************************************************************/
                                    let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                        " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                    le++;
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, true, result);
                                                }
                                                flg++;
                                            } else {
                                                cb(null, true, []);
                                            }

                                        }
                                    });
                                    /***********************************************************************************/

                                }
                            });
                            /***********************************************************************************/
                        }
                    });
                }
            } else {
                cb(null, true, []);
            }
            // cb(null, true, result);
        }
    })
}

function getRequesterInfo(data, cb) {
    let sql = 'select * from LNT_employee_details where ticket_id=?';
    con.query(sql, [data.ticketId], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getPriorityForLTSSC(data, cb) {
    if (data.priority === 'Y' || data.priority === 'y') {
        data.priority = 'High';
    } else {
        data.priority = 'Normal';
    }
    let sql, params;
    if (data.ticket_type === 2 && data.ticket_type === '2') {
        sql = 'select id,busi_priority_name as priority from BUSINESSPRIORITY where CLIENTID=? and ticket_type =? and DeleteFlag=0';
        params = [data.clientId, data.ticket_type];
    } else {
        sql = 'select id,busi_priority_name name from BUSINESSPRIORITY where busi_priority_name=? and clientId=? and ticket_type=? and DeleteFlag=0';
        params = [data.priority, data.clientId, data.ticket_type];
    }
    con.query(sql, params, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })

}

function getOpenTicketInMyCategoryGroup(data, cb) {
    let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
        " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
        " ,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
        " and g.id = e.supportGroupLevelId " +
        " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0))" +
        " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
        //" and e.supportGroupLevelId =" + data.supportgrp_id + " " +
        " and is_awaiting_for_user_info in ('N','R') " +
        " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = (select CLIENTID from USER where id=" + data.user_id + " ) and ticket_type = " + data.ticketTypeId + " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =" + data.supportgrp_id + " and management = 'true'),0)  and DeleteFlag = '0') ";
    if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
        sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    }
    sql = sql + " order by e.id desc ";
    logData('getOpenTicketInMyGroup-----------' + sql)
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    // logData('assignee---------------------------'+sql12)
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            /***********************************************************************************/
                            let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                " and a.PKFIELDVAL = " + result[j].id + " " +
                                " and a.serial_no = 1 " +
                                " and a.activeFlow = '1' " +
                                " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    logData(err2);
                                    cb(err2, null);
                                } else {
                                    if (result2.length > 0) {
                                        result[j]['last_cat'] = result2[0].child;
                                        result[j]['last_cat_parent'] = result2[0].parent;
                                        result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                        result[j]['last_cat_parent_id'] = result2[0].category_id;
                                    }
                                    /***********************************************************************************/
                                    let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                        " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                    le++;
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, true, result);
                                                }
                                                flg++;
                                            } else {
                                                cb(null, true, []);
                                            }

                                        }
                                    });
                                    /***********************************************************************************/

                                }
                            });
                            /***********************************************************************************/
                        }
                    });
                }
            } else {
                cb(null, true, []);
            }
        }
    });
}

function getLastCommentByTicketId(data, cb) {
    // let sql = 'select feedback from ticketFeedBack where ticketId=? order by id desc limit 1';
    let sql = 'SELECT ticketFeedBack.feedback,ticketFeedBack.createdate createddate,USER.NAME name,USER.id userId FROM ticketFeedBack,USER where ticketFeedBack.createbyid=USER.id and ticketFeedBack.ticketId=? ORDER BY ticketFeedBack.createdate DESC limit 1;';
    con.query(sql, [data.ticketId], function (err, done) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    })
}

function getCloseTicketInMyCategoryGroup(data, cb) {
    logData('\n\ngetCloseTicketInMyCategoryGroup------------------' + JSON.stringify(data))
    let sql = "SELECT a.id id,a.ticket_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, " +
        " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy  " +
        " ,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =" + data.ticketTypeId + " group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and a.ticketTypeId =" + data.ticketTypeId + " and  b.DeleteFlag = '0' " +
        " and g.id = e.supportGroupLevelId " +
        " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = (select CLIENTID from USER where id=" + data.user_id + " ) and ATTRID = 2  and sequence_no in (0,104))" +
        " and a.ticketCloseDate is not null and e.END_INDICATOR = '1' " +
        //" and e.supportGroupLevelId =" + data.supportgrp_id + " " +
        // " and is_awaiting_for_user_info in ('N','R') " +
        " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = (select CLIENTID from USER where id=" + data.user_id + " ) and ticket_type = " + data.ticketTypeId + " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =" + data.supportgrp_id + " and management = 'true'),0)  and DeleteFlag = '0') ";
    if (data.sub_ticket_type != null && data.sub_ticket_type != '' && data.sub_ticket_type != 0) {
        sql = sql + " and a.sub_ticket_type = " + data.sub_ticket_type + " ";
    }
    sql = sql + " order by e.id desc ";
    logData('getCloseTicketInMyCategoryGroup-----------' + sql)
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    // logData('assignee---------------------------'+sql12)
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            /***********************************************************************************/
                            let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                " and a.PKFIELDVAL = " + result[j].id + " " +
                                " and a.serial_no = 1 " +
                                " and a.activeFlow = '1' " +
                                " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    logData(err2);
                                    cb(err2, null);
                                } else {
                                    if (result2.length > 0) {
                                        result[j]['last_cat'] = result2[0].child;
                                        result[j]['last_cat_parent'] = result2[0].parent;
                                        result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                        result[j]['last_cat_parent_id'] = result2[0].category_id;
                                    }
                                    /***********************************************************************************/
                                    let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                        " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                    le++;
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, true, result);
                                                }
                                                flg++;
                                            } else {
                                                cb(null, true, []);
                                            }

                                        }
                                    });
                                    /***********************************************************************************/

                                }
                            });
                            /***********************************************************************************/
                        }
                    });
                }
            } else {
                cb(null, true, []);
            }
        }
    });
}

// function getDashBoardDtls(data, cb) {
//     logData('***********************************************************getDashBoardDtls------------------' + JSON.stringify(data))
//
//     function getTicketByMeCount(callback) {
//         let sql = " select '1' id, m.value from (SELECT count(distinct a.id) value " +
//             " FROM  ticket a  " +
//             " where a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,23,104,21,22))" +
//             " and (a.ticketCloseDate is null or  a.is_reopen = '1' )" +
//             " and a.createbyid =? and a.DeleteFlag = '0' and a.ticketTypeId =?) m ";
//         logData('getTicketByMeCount---' + sql)
//         con.query(sql, [data.clientId, data.user_id, data.ticketTypeId], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getTicketByMeCount-------------------')
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getAssignedByMeCount(callback) {
//         let sql = "SELECT '2' id, m.value FROM (SELECT COUNT(DISTINCT a.id) value FROM  WFCCLIENTRESULT e, ticket a WHERE  e.id IN (SELECT   MAX(x.id) " +
//             " FROM WFCCLIENTRESULT x, ticket a WHERE x.PKFIELDVAL = a.id AND a.ticketTypeId = ? GROUP BY x.PKFIELDVAL) AND a.id = e.PKFIELDVAL AND a.DeleteFlag = '0' " +
//             " AND ((a.ticketCloseDate IS NULL AND e.END_INDICATOR = '0') OR a.is_reopen = '1') AND a.ticketTypeId = ? " +
//             " AND if((is_awaiting_for_user_info ='Y') ,(a.createbyid = ? ),(e.user_id = ? and e.supportGroupLevelId =?)) " +
//             "        AND a.tstatus NOT IN (SELECT taY.id FROM TICKETATTRIBUTES taY WHERE taY.DeleteFlag = '0' " +
//             "        AND taY.CLIENTID = ? " +
//             "        AND taY.ATTRID = 2 AND taY.sequence_no IN (0,23,104,21,22))) m ";
//
//         logData('**************************************getAssignedByMeCount---' + sql)
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id, data.clientId], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getAssignedByMeCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//
//     function getTicketInOpenStatusCount(callback) {
//         let sql = "SELECT '33' id, m.value from ( SELECT  count(distinct a.id) value " +
//             " FROM WFCCLIENTRESULT e, ticket a " +
//             " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//             " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (1))" +
//             " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//             " and e.supportGroupLevelId =? and a.DeleteFlag = '0'  and a.is_awaiting_for_user_info in ('N','R')) m ";//and e.user_id = ?
//         logData('\n\ngetTicketInOpenStatusCount-------------l1----------------' + sql);
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getTicketInOpenStatusCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getOpenTicketInMyGroupCount(callback) {
//         let sql = "SELECT '3' id, m.value from ( SELECT  count(distinct a.id) value " +
//             " FROM WFCCLIENTRESULT e, ticket a " +
//             " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//             " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0))" +
//             " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//             " and e.supportGroupLevelId =? and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R')) m ";
//
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getOpenTicketInMyGroupCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getMyCloseTicketCount(callback) {
//         let sql = " SELECT '4' id, m.value from ( SELECT  count(distinct a.id) value " +
//             " FROM WFCCLIENTRESULT e, ticket a " +
//             " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and a.id = e.PKFIELDVAL  and a.createbyid =? and a.ticketTypeId =? and a.DeleteFlag = '0' " +
//             " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,104,23))" +
//             " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) and a.DeleteFlag = '0' ) m";
//         con.query(sql, [data.ticketTypeId, data.user_id, data.ticketTypeId, data.clientId], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getMyCloseTicketCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getCloseTicketInMyGroupCount(callback) {
//         // let sql = "SELECT '5' id, m.value from ( SELECT  count(distinct a.id) value " +
//         //     " FROM WFCCLIENTRESULT e, ticket a  " +
//         //     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL)  " +
//         //     " and a.id = e.PKFIELDVAL and a.DeleteFlag = '0'  and a.ticketTypeId =? " +
//         //     " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,104) ) " +
//         //     " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) and a.DeleteFlag = '0' and e.supportGroupLevelId =? ) m ";
//         let sql = "SELECT '5' id, m.value from (SELECT count(distinct a.id) value FROM WFCCLIENTRESULT e, " +
//             "ticket a where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and " +
//             "a.ticketTypeId = ? group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.tstatus in " +
//             "(select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0 , 104) " +
//             "and DeleteFlag = '0') and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or a.is_reopen = '0') a" +
//             "nd e.supportGroupLevelId = ? and a.DeleteFlag = '0') m";
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getCloseTicketInMyGroupCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getEscalationCount(callback) {
//         let sql = "SELECT '32' id, m.value from ( select count(distinct ticketId) value from ticket_sla_response_dtls a,ticket b where a.ticketId = b.id and a.clientid =? and a.deleteflag = '0' " +
//             " and a.resolution_stop_status = 'N' and a.resolution_datetime < Now() and b.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes " +
//             " where clientId = ? and ticket_type = ? and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? " +
//             " and management = 'true'),0) and DeleteFlag = '0') and b.DeleteFlag = '0' " +
//             " and b.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and " +
//             " ticket_type = ? and supportGroupLevelId =? and DeleteFlag = '0')) m ";
//         con.query(sql, [data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.ticketTypeId, data.supportgrp_id], function (err, result) {
//             if (err) {
//                 logData(err);
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getEscalationCount-------------------');
//                 callback(null, result);
//             }
//         })
//         // callback(null, []);
//     }
//
//     function getEscalationByUserCount(callback) {
//         let sql = "SELECT '28' id, m.value from ( SELECT  count(distinct a.id) value " +
//             " FROM WFCCLIENTRESULT e, ticket a " +
//             " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//             " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (7))" +
//             " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//             " and e.supportGroupLevelId =? and a.DeleteFlag = '0' and e.user_id = ? and a.is_awaiting_for_user_info in ('N','R')) m ";
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id], function (err, result) {
//             if (err) {
//                 logData(err);
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getEscalationByUserCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     8
//
//     function getSlaViolationAlterCount(callback) {
//         let sql = "SELECT '30' id, m.value from ( select count(distinct a.id) value from ticket_sla_response_dtls h, ticket a, ticket_escalation_notification_mst c," +
//             " WFCCLIENTRESULT e where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and h.ticketId = a.id and c.client_id = h.clientid and a.ticketTypeId = c.ticket_type_id  and a.working_category = c.category_id  and a.DeleteFlag = '0' " +
//             " and a.busi_priority_id = c.priority_id and h.clientid =? and h.deleteflag = '0' and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' " +
//             " and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,2,23,103,104,21,22)) and h.resolution_stop_status = 'N' and a.ticketCloseDate is null and a.is_reopen = '0' " +
//             " and TIMEDIFF(date_format(h.resolution_datetime,'%Y-%m-%d %T'),date_format(Now(),'%Y-%m-%d %T'))>0 " +
//             " and TIMEDIFF(date_format(h.resolution_datetime,'%Y-%m-%d %T'),date_format(DATE_ADD(Now(),INTERVAL c.sla_given_time MINUTE),'%Y-%m-%d %T'))<0 " +
//             " AND IF((a.is_awaiting_for_user_info = 'Y'), (a.createbyid = ?),   (e.user_id = ? AND e.supportGroupLevelId = ? )) and a.ticketTypeId = ? ) m ";
//         logData('\n\ngetSlaViolationAlterCount   --l1---------------' + sql)
//         con.query(sql, [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id, data.ticketTypeId], function (err, result) {
//             if (err) {
//                 logData(err);
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getSlaViolationAlterCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getTicketInFollowupCount(callback) {
//         let sql = "SELECT '26' id, m.value from ( SELECT count(distinct a.id) value " +
//             " FROM WFCCLIENTRESULT e, ticket a " +
//             " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? and a.DeleteFlag = '0' " +
//             " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (15))" +
//             " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//             " and e.supportGroupLevelId =? and e.user_id =? and a.is_awaiting_for_user_info in ('N','R')) m ";
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getTicketInFollowupCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getUserReplyTicketInMyGroupCount(callback) {
//         let sql = "SELECT '27' id, m.value from ( SELECT count(distinct a.id) value " +
//             " FROM WFCCLIENTRESULT e, ticket a " +
//             " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? and a.DeleteFlag = '0' " +
//             " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (13))" +
//             " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//             " and e.supportGroupLevelId =? and e.user_id =? and a.is_awaiting_for_user_info in ('N','R')) m ";
//         logData('getUserReplyTicketInMyGroupCount------------' + sql)
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getUserReplyTicketInMyGroupCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getTicketInSMCount(callback) {
//         let sql = "SELECT '21' id, m.value from ( SELECT count(distinct a.id) value " +
//             " FROM WFCCLIENTRESULT e, ticket a, LNT_employee_details l " +
//             " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) " +
//             " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? and a.id = l.ticket_id " +
//             " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,2,23,104,21,22))" +
//             " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//             " and e.supportGroupLevelId =? and e.user_id =? and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R') and l.sm = 'Y' ) m ";
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getTicketInSMCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getAssignedByMeCountForAnalyst(callback) {
//         let sql = "SELECT '19' id, m.value FROM (SELECT COUNT(DISTINCT a.id) value FROM  WFCCLIENTRESULT e, ticket a WHERE  e.id IN (SELECT   MAX(x.id) " +
//             " FROM WFCCLIENTRESULT x, ticket a WHERE x.PKFIELDVAL = a.id AND a.ticketTypeId = ? GROUP BY x.PKFIELDVAL) AND a.id = e.PKFIELDVAL AND a.DeleteFlag = '0' " +
//             " AND ((a.ticketCloseDate IS NULL AND e.END_INDICATOR = '0') OR a.is_reopen = '1') AND a.ticketTypeId = ? " +
//             " AND IF((is_awaiting_for_user_info = 'Y'), (a.createbyid = ? ), " +
//             "   (e.user_id = ? AND e.supportGroupLevelId = ? )) AND a.tstatus IN (SELECT taN.id FROM TICKETATTRIBUTES taN WHERE taN.DeleteFlag = '0'  " +
//             " AND taN.CLIENTID = ? AND taN.ATTRID = 2 AND taN.sequence_no IN (8,16)))m ";
//         logData('**********getAssignedByMeCountForAnalyst---' + sql)
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id, data.clientId], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getAssignedByMeCountForAnalyst-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     function getTicketInResolvedStatusCount(callback) {
//         let sql = "SELECT '61' id,m.value FROM (SELECT count(distinct a.id) value FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, " +
//             " SUPPORTGROUPLEVEL g,ticketSolutions s, ticket a left join USER c  on a.modifybyid = c.id where e.id in (select max(x.id) " +
//             " from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) and a.createbyid = b.id " +
//             "and a.id = e.PKFIELDVAL and a.id = s.ticketId and a.busi_priority_id = d.id and a.tstatus = f.id " +
//             "and b.DeleteFlag = '0' and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' and a.ticketTypeId = ? " +
//             "and  b.DeleteFlag = '0' and g.id = e.supportGroupLevelId  and a.tstatus in (select id from TICKETATTRIBUTES " +
//             "where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,2,103,104)) and s.createbyid = ?  and e.supportGroupLevelId = ? " +
//             "order by e.id desc )m";
//         logData('\n\ngetTicketInOpenStatusCount-------------l1----------------' + sql);
//         con.query(sql, [data.ticketTypeId, data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id], function (err, result) {
//             if (err) {
//                 callback(err, null);
//             } else {
//                 util.logData('\n---------------getTicketInOpenStatusCount-------------------');
//                 callback(null, result);
//             }
//         })
//     }
//
//     async.parallel([getTicketByMeCount, getAssignedByMeCount, getTicketInOpenStatusCount, getMyCloseTicketCount, getCloseTicketInMyGroupCount, getEscalationCount
//         , getSlaViolationAlterCount, getTicketInFollowupCount, getUserReplyTicketInMyGroupCount, getTicketInSMCount, getEscalationByUserCount,
//         getOpenTicketInMyGroupCount, getAssignedByMeCountForAnalyst, getTicketInResolvedStatusCount], function (err, results) {
//         if (err) {
//             cb(err, null);
//         } else {
//             util.logData('--------done----------------');
//             const value = [results[0][0], results[1][0], results[2][0], results[3][0], results[4][0], results[5][0], results[6][0], results[7][0], results[8][0],
//                 results[9][0], results[10][0], results[11][0], results[12][0], results[13][0]];
//             cb(null, true, value);
//         }
//     })
// }
//
// function getDashBoardDtls_new(data, cb) {
//     logData('***********************************************************getDashBoardDtls------------------' + JSON.stringify(data))
//     let sql, params;
//     switch (Number(data.type)) {
//         case 1:
//             sql = "select '1' id, m.value from(SELECT count(distinct a.id) value FROM ticket a where a.ticketTypeId = ? " +
//                 "and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and " +
//                 "sequence_no in (0 , 23, 104, 21, 22) and DeleteFlag = '0') and (a.ticketCloseDate is null or a.is_reopen = '1') " +
//                 "and a.createbyid = ? and a.DeleteFlag = '0' and ticket_id is not null) m";
//             params = [data.ticketTypeId, data.clientId, data.user_id];
//             break;
//         case 2:
//             sql = "SELECT '2' id, m.value FROM(SELECT COUNT(DISTINCT a.id) value FROM WFCCLIENTRESULT e, ticket a " +
//                 "WHERE e.id IN (SELECT MAX(x.id) FROM WFCCLIENTRESULT x, ticket a WHERE x.PKFIELDVAL = a.id AND a.ticketTypeId = ? " +
//                 " and a.DeleteFlag = '0' GROUP BY x.PKFIELDVAL) AND a.id = e.PKFIELDVAL AND a.ticketTypeId = ? AND a.tstatus IN " +
//                 "(SELECT taY.id FROM TICKETATTRIBUTES taY WHERE taY.CLIENTID = ? AND taY.ATTRID = 2 AND taY.sequence_no IN" +
//                 " (2,12) AND taY.DeleteFlag = '0') AND ((a.ticketCloseDate IS NULL AND e.END_INDICATOR = '0') " +
//                 "OR a.is_reopen = '1') AND if((a.is_awaiting_for_user_info = 'Y'), (a.createbyid = ? AND a.DeleteFlag = '0'), " +
//                 "(e.user_id = ? and e.supportGroupLevelId = ? AND a.DeleteFlag = '0'))) m";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.user_id, data.user_id, data.supportgrp_id];
//             break;
//         case 33:
//             //done
//             sql = "SELECT '33' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and " +
//                 " a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (1) and DeleteFlag = '0' ) and " +
//                 " ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and e.supportGroupLevelId = ? " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0'";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//
//             sql = sql + " ) m ";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 3:
//             sql = "SELECT '3' id, m.value from ( SELECT  count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0))" +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//                 " and e.supportGroupLevelId =? and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R')) m ";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//             break;
//         case 4:
//             //done
//             /*sql = "SELECT '4' id,  count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? " +
//                 " and a.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and " +
//                 " ATTRID = 2 and sequence_no in (0 , 104, 23) and DeleteFlag = '0') and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or a.is_reopen = '0') " +
//                 " and a.createbyid = ? and a.clientid = ? and e.supportGroupLevelId =? and a.DeleteFlag = '0' "
//             params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.user_id, data.clientId, data.supportgrp_id];
//             */
//
//             sql = " SELECT '4' id, m.value from ( SELECT  count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.createbyid =? and a.ticketTypeId =? and a.DeleteFlag = '0' " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,104,23))" +
//                 " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) and a.DeleteFlag = '0' ) m";
//             params = [data.ticketTypeId, data.user_id, data.ticketTypeId, data.clientId];
//             break;
//         case 5:
//             sql = "SELECT '5' id, m.value from (SELECT count(distinct a.id) value FROM WFCCLIENTRESULT e, " +
//                 "ticket a where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and " +
//                 "a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.tstatus in " +
//                 "(select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0 , 104) " +
//                 "and DeleteFlag = '0') and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or a.is_reopen = '0') a" +
//                 "nd e.supportGroupLevelId = ? and a.DeleteFlag = '0') m";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
//             break;
//         case 32:
//             sql = "SELECT '32' id, m.value from ( select count(distinct ticketId) value from ticket_sla_response_dtls a,ticket b where a.ticketId = b.id and a.clientid =? and a.deleteflag = '0' " +
//                 " and a.resolution_stop_status = 'N' and a.resolution_datetime < Now() and b.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes " +
//                 " where clientId = ? and ticket_type = ? and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? " +
//                 " and management = 'true'),0) and DeleteFlag = '0') and b.DeleteFlag = '0' " +
//                 " and b.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and " +
//                 " ticket_type = ? and supportGroupLevelId =? and DeleteFlag = '0')) m ";
//             params = [data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.ticketTypeId, data.supportgrp_id];
//             break;
//         case 28:
//             //done
//             sql = "SELECT '28' id, m.value FROM (SELECT COUNT(DISTINCT a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " WHERE e.id IN (SELECT MAX(x.id) FROM WFCCLIENTRESULT x, ticket a WHERE x.PKFIELDVAL = a.id AND a.ticketTypeId = ? and a.DeleteFlag = '0' GROUP BY x.PKFIELDVAL) " +
//                 " AND a.id = e.PKFIELDVAL AND a.ticketTypeId = ? AND " +
//                 " a.tstatus IN (SELECT id FROM TICKETATTRIBUTES WHERE CLIENTID = ? AND ATTRID = 2 AND sequence_no IN (7) AND DeleteFlag = '0') " +
//                 " AND ((a.ticketCloseDate IS NULL AND e.END_INDICATOR = '0') OR a.is_reopen = '1') AND e.supportGroupLevelId = ? AND e.user_id = ? " +
//                 " AND a.is_awaiting_for_user_info IN ('N' , 'R') AND a.DeleteFlag = '0'";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 30:
//             sql = "SELECT '30' id, m.value from ( select count(distinct a.id) value from ticket_sla_response_dtls h, ticket a, ticket_escalation_notification_mst c," +
//                 " WFCCLIENTRESULT e where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " AND a.id = e.PKFIELDVAL and h.ticketId = a.id and c.client_id = h.clientid and a.ticketTypeId = c.ticket_type_id  and a.working_category = c.category_id  and a.DeleteFlag = '0' " +
//                 " and a.busi_priority_id = c.priority_id and h.clientid =? and h.deleteflag = '0' and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' " +
//                 " and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,2,23,103,104,21,22)) and h.resolution_stop_status = 'N' and a.ticketCloseDate is null and a.is_reopen = '0' " +
//                 " and TIMEDIFF(date_format(h.resolution_datetime,'%Y-%m-%d %T'),date_format(Now(),'%Y-%m-%d %T'))>0 " +
//                 " and TIMEDIFF(date_format(h.resolution_datetime,'%Y-%m-%d %T'),date_format(DATE_ADD(Now(),INTERVAL c.sla_given_time MINUTE),'%Y-%m-%d %T'))<0 " +
//                 " AND IF((a.is_awaiting_for_user_info = 'Y'), (a.createbyid = ?),   (e.user_id = ? AND e.supportGroupLevelId = ? )) and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//             util.logData('30 sql===' + sql);
//             params = [data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             util.logData('30 param===' + JSON.stringify(params));
//             break;
//         case 26:
//             //done
//             sql = "SELECT '26' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? " +
//                 " and a.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and " +
//                 " a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (15) and DeleteFlag = '0') " +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and e.supportGroupLevelId = ? and e.user_id = ? " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0'";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 27:
//             //done
//             sql = "SELECT '27' id, m.value from (SELECT count(distinct a.id) value FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from  WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ?  and a.DeleteFlag = '0' " +
//                 " group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? " +
//                 " and ATTRID = 2 and sequence_no in (13) and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') " +
//                 " or a.is_reopen = '1') and e.supportGroupLevelId = ? and e.user_id = ? and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0'";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 21:
//             //done
//             if (data.clientId == '2') {
//                 sql = "SELECT '21' id, m.value from (SELECT count(distinct a.id) value FROM WFCCLIENTRESULT e, " +
//                     " ticket a, LNT_employee_details l where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? " +
//                     " and a.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.id = l.ticket_id and " +
//                     " a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and " +
//                     " sequence_no in (0 , 2, 23, 104, 21, 22) and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') " +
//                     " and e.supportGroupLevelId = ? and e.user_id = ? and a.is_awaiting_for_user_info in ('N' , 'R') and l.sm = 'Y' and a.DeleteFlag = '0') m";
//                 params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//                 break;
//             } else if (data.clientId == '3' || data.clientId == '7') {
//                 sql = "SELECT '21' id, count(distinct a.id) value FROM WFCCLIENTRESULT e, " +
//                     " ticket a where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? " +
//                     " and a.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and " +
//                     " a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and " +
//                     " sequence_no in (0 , 2, 23, 104, 21, 22) and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') " +
//                     " and e.supportGroupLevelId = ? and e.user_id = ? and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0' and a.busi_priority_id=5 ";
//                 if (data.catFilterVal !== '0') {
//                     sql = sql + " and a.working_category =? ";
//                 }
//                 util.logData('21 sql=======' + sql);
//                 params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//                 if (data.catFilterVal !== '0') {
//                     params.push(data.catFilterVal);
//                 }
//                 util.logData('21 param=======' + JSON.stringify(params));
//                 break;
//             }
//         case 19:
//             //done
//             sql = "SELECT '19' id, m.value FROM (SELECT COUNT(DISTINCT a.id) value FROM WFCCLIENTRESULT e, ticket a WHERE e.id IN (SELECT MAX(x.id) " +
//                 " FROM  WFCCLIENTRESULT x, ticket a WHERE x.PKFIELDVAL = a.id AND a.ticketTypeId = ? and a.DeleteFlag = '0' GROUP BY x.PKFIELDVAL) AND a.id = e.PKFIELDVAL " +
//                 " AND a.ticketTypeId = ? AND a.tstatus IN (SELECT taN.id FROM TICKETATTRIBUTES taN WHERE taN.CLIENTID = ? AND taN.ATTRID = 2 " +
//                 " AND taN.sequence_no IN (8 , 16) and taN.DeleteFlag = '0') AND ((a.ticketCloseDate IS NULL AND e.END_INDICATOR = '0') OR a.is_reopen = '1') " +
//                 " AND IF((is_awaiting_for_user_info = 'Y'), (a.createbyid = ?), (e.user_id = ? AND e.supportGroupLevelId = ?)) AND a.DeleteFlag = '0'";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.user_id, data.user_id, data.supportgrp_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 61:
//             sql = "SELECT '61' id, count(distinct a.id) value FROM WFCCLIENTRESULT e, ticket a  where a.id = e.PKFIELDVAL and a.DeleteFlag = '0' " +
//                 " and a.ticketTypeId =? and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID =? and ATTRID = 2  " +
//                 " and sequence_no in (0,2,103,104)) and e.user_id = ? and e.supportGroupLevelId = ? and a.clientid = ? and e.createdate  BETWEEN NOW() - INTERVAL 30 DAY AND NOW() ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             params = [data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 40:
//             //done
//             sql = "SELECT '40' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where a.DeleteFlag = '0' and e.id in (select max(x.id) from  WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and " +
//                 " a.ticketTypeId = ? group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 " +
//                 " and sequence_no in (1) " +
//                 " and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0' and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? " +
//                 " and ticket_type = ? and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0') ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             sql = sql + " ) m ";
//             util.logData('40 count=====' + sql);
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             util.logData('40 count param=====' + JSON.stringify(params));
//             break;
//         case 41:
//             sql = "SELECT '41' id, m.value from ( SELECT  count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0))" +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//                 " and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R') " +
//                 " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) and DeleteFlag = '0') ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 48:
//             sql = "SELECT '48' id, m.value from ( SELECT  count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a  " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL)  " +
//                 " and a.id = e.PKFIELDVAL   and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,23,104) ) " +
//                 " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) and a.DeleteFlag = '0' " +
//                 " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
//                 "and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) and DeleteFlag = '0') ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//         case 42:
//             //done
//             sql = "SELECT '42' id, m.value from (select count(distinct ticketId) value from ticket_sla_response_dtls c, ticket a, WFCCLIENTRESULT e " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and c.clientid = ? and c.ticketId = a.id and c.resolution_stop_status = 'N' and c.resolution_datetime < Now() " +
//                 " and c.deleteflag = '0'" +
//                 " and a.ticketTypeId = ? and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
//                 " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0') " +
//                 " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and " +
//                 " sequence_no in (0 , 2, 21, 22, 23, 104, 12) and DeleteFlag = '0') and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') " +
//                 " or a.is_reopen = '0') and a.DeleteFlag = '0' and is_awaiting_for_user_info in ('N' , 'R')";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             sql = sql + " ) m ";
//             // util.logData('42 count=====' + sql);
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             // util.logData('42 count param=====' + JSON.stringify(params));
//             break;
//         case 43:
//             //done
//             sql = "SELECT '43' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.working_category in " +
//                 " (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? and " +
//                 " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0') " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and " +
//                 " sequence_no in (7) and DeleteFlag = '0') and ((a.ticketCloseDate is null " +
//                 " and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N' , 'R')";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             sql = sql + " ) m ";
//             // util.logData('43 count=====' + sql);
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             // util.logData('43 count param=====' + JSON.stringify(params));
//             break;
//         case 47:
//             //done
//             sql = "SELECT '47' id, m.value from (select count(distinct a.id) value " +
//                 " from ticket_sla_response_dtls d, ticket a, ticket_escalation_notification_mst c " +
//                 " where d.ticketId = a.id and d.clientid = ? and d.deleteflag = '0' and d.resolution_stop_status = 'N' and c.client_id = d.clientid " +
//                 " and a.ticketTypeId = c.ticket_type_id and a.working_category = c.category_id and " +
//                 " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
//                 " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where " +
//                 " id = ? and management = 'true'), 0) and DeleteFlag = '0') and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? " +
//                 " and ATTRID = 2 and sequence_no in (0 , 2, 21, 22, 23, 104) and DeleteFlag = '0') and a.busi_priority_id = c.priority_id " +
//                 " and a.ticketCloseDate is null and a.is_reopen = '0' and a.DeleteFlag = '0' and " +
//                 " TIMEDIFF(date_format(d.resolution_datetime, '%Y-%m-%d %T'), date_format(Now(), '%Y-%m-%d %T')) > 0 and " +
//                 " TIMEDIFF(date_format(d.resolution_datetime, '%Y-%m-%d %T'), date_format(DATE_ADD(Now(), INTERVAL c.sla_given_time MINUTE), '%Y-%m-%d %T')) < 0";
//
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             sql = sql + " ) m ";
//             // util.logData('47======' + sql);
//             params = [data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             // util.logData('47======' + JSON.stringify(params));
//             break;
//         case 44:
//             //done
//             sql = "SELECT '44' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? " +
//                 " and ticket_type = ? and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) " +
//                 " and DeleteFlag = '0') and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2 and " +
//                 " sequence_no in (15)) and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R')";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             sql = sql + " ) m ";
//             // util.logData('44 count=====' + sql);
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             // util.logData('44 count param=====' + JSON.stringify(params));
//             break;
//         case 45:
//             //done
//             sql = "SELECT '45' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and" +
//                 " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? and " +
//                 " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0') " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (13) and DeleteFlag = '0') " +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' and " +
//                 " a.is_awaiting_for_user_info in ('N' , 'R') ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             sql = sql + " ) m ";
//             // util.logData('45 =====' + sql);
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             // util.logData('45 count param=====' + JSON.stringify(params));
//             break;
//         case 46:
//             //done
//             if (data.clientId == '2') {
//                 sql = "SELECT '46' id, m.value from (SELECT count(distinct a.id) value " +
//                     " FROM WFCCLIENTRESULT e, ticket a, LNT_employee_details l where e.id in (select  max(x.id) from WFCCLIENTRESULT x, ticket a " +
//                     " where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? " +
//                     " and a.id = l.ticket_id and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
//                     " and supportGroupLevelId = coalesce((SELECT  id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0') " +
//                     " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0,2) and DeleteFlag = '0') " +
//                     " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' " +
//                     " and l.sm = 'Y'";
//                 if (data.catFilterVal !== '0') {
//                     sql = sql + " and a.working_category =? ";
//                 }
//
//                 sql = sql + " ) m ";
//                 // util.logData('46 count=====' + sql);
//                 params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//                 if (data.catFilterVal !== '0') {
//                     params.push(data.catFilterVal);
//                 }
//
//                 // util.logData('46 count param=====' + JSON.stringify(params));
//                 break;
//             } else if (data.clientId == '3' || data.clientId == '7') {
//                 sql = "SELECT '46' id, count(distinct a.id) value " +
//                     " FROM WFCCLIENTRESULT e, ticket a where e.id in (select  max(x.id) from WFCCLIENTRESULT x, ticket a " +
//                     " where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and a.ticketTypeId = ? " +
//                     " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
//                     " and supportGroupLevelId = coalesce((SELECT  id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0') " +
//                     " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0) and DeleteFlag = '0') " +
//                     " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' " +
//                     " and a.busi_priority_id=5  and e.supportGroupLevelId =?";
//                 if (data.catFilterVal !== '0') {
//                     sql = sql + " and a.working_category =? ";
//                 }
//
//
//                 params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
//                 if (data.catFilterVal !== '0') {
//                     params.push(data.catFilterVal);
//                 }
//
//
//                 break;
//             }
//         case 49:
//             //done
//             sql = "SELECT '49' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from  WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and " +
//                 " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
//                 " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0') " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (8,16) and DeleteFlag = '0') " +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' and " +
//                 " a.is_awaiting_for_user_info in ('N' , 'R') and a.ticket_id IS NOT NULL";
//
//             if (data.clientId == '2') {
//                 sql = sql + " and e.user_id IS NOT NULL";
//             }
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             sql = sql + " ) m ";
//             util.logData('49 count=====' + sql);
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             util.logData('49 count param=====' + JSON.stringify(params));
//             break;
//         case 63:
//             sql = "SELECT '63' id,  count(distinct a.id) value FROM WFCCLIENTRESULT e, ticket a where a.id = e.PKFIELDVAL and a.DeleteFlag = '0' and a.ticketTypeId = ? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID =? and ATTRID = 2  and sequence_no in (0,2,103,104)) " +
//                 " and a.working_category in (SELECT ticketAttrId FROM  SupportGrpWithTicketAttributes where clientId =? and ticket_type = ? " +
//                 " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) and DeleteFlag = '0') and a.clientid = ?  " +
//                 " and e.createdate  BETWEEN NOW() - INTERVAL 30 DAY AND NOW() ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//
//             params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//
//             util.logData('63 count param=====' + JSON.stringify(params));
//             break;
//         case 50:
//             //done
//             sql = "SELECT '50' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId = ? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 " +
//                 " and sequence_no in (1,101) and DeleteFlag = '0') and " +
//                 " ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R') and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//
//             if (data.ticketTypeId == '33') {
//                 sql = sql + " and e.user_id is null";
//             }
//
//
//             sql = sql + " ) m ";
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 51:
//             sql = "SELECT '51' id, m.value from ( SELECT  count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,104))" +
//                 " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) " +
//                 " and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R') and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + " ) m ";
//
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 52:
//             sql = "SELECT '52' id,   count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a  " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? and a.DeleteFlag = '0' group by x.PKFIELDVAL)  " +
//                 " and a.id = e.PKFIELDVAL   and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0,23,104) ) " +
//                 " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) and a.DeleteFlag = '0' and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + "  ";
//
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 53:
//             //done
//             sql = "SELECT '53' id, m.value from (select count(distinct ticketId) value from ticket_sla_response_dtls c, ticket a, WFCCLIENTRESULT e " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId = ? and y.clientid = ?  and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and c.clientid = ? and c.ticketId = a.id and c.deleteflag = '0' and c.resolution_stop_status = 'N' " +
//                 " and c.resolution_datetime < Now() and a.ticketTypeId = ? " +
//                 " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? and DeleteFlag = '0') " +
//                 " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0 , 2, 21, 22, 23, 104, 12) " +
//                 " and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and " +
//                 " a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0' and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + " ) m ";
//             //logData('\n\ngetEscalationCount----' + sql)
//             params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 54:
//             sql = "SELECT '54' id, m.value from ( SELECT  count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ?  and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (7))" +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) and a.DeleteFlag = '0' and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + " ) m ";
//
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 55:
//             // done
//             sql = "SELECT '55' id, m.value from (select count(distinct a.id) value from ticket_sla_response_dtls d, ticket a, " +
//                 " ticket_escalation_notification_mst c, WFCCLIENTRESULT e where e.id in (select max(x.id) from WFCCLIENTRESULT x, " +
//                 " ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId = ? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL and" +
//                 " d.clientid = ? and d.clientid = c.client_id and d.ticketId = a.id and d.deleteflag = '0' and " +
//                 " d.resolution_stop_status = 'N' and a.ticketTypeId = c.ticket_type_id and a.working_category = c.category_id " +
//                 " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in " +
//                 " (0 , 2, 21, 22, 23, 104, 12) and DeleteFlag = '0') and a.busi_priority_id = c.priority_id and " +
//                 " a.ticketCloseDate is null and a.is_reopen = '0' and a.DeleteFlag = '0' and TIMEDIFF(date_format(d.resolution_datetime," +
//                 " '%Y-%m-%d %T'), date_format(Now(), '%Y-%m-%d %T')) > 0 and TIMEDIFF(date_format(d.resolution_datetime, '%Y-%m-%d %T')," +
//                 " date_format(DATE_ADD(Now(), INTERVAL c.sla_given_time MINUTE), '%Y-%m-%d %T')) < 0 and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + " ) m ";
//             logData('\n\n\ngetSlaViolationAlterCount----11111111111111111111111111111------' + sql)
//             params = [data.ticketTypeId, data.clientId, data.clientId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 56:
//             //done
//             sql = "SELECT '56' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId = ? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 " +
//                 " and sequence_no in (15) and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0' and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + " ) m ";
//
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 57:
//             //done
//             sql = "SELECT '57' id, count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId = ? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (13) " +
//                 " and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') " +
//                 " and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N' , 'R') and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + " ";
//             //logData('getUserReplyTicketInMyGroupCount-----------' + sql)
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 58:
//             //done
//             if (data.clientId == '2') {
//                 sql = "SELECT '58' id, count(distinct a.id) value " +
//                     " FROM WFCCLIENTRESULT e, ticket a, LNT_employee_details l " +
//                     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId = ? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                     " and a.id = e.PKFIELDVAL and a.id = l.ticket_id and a.ticketTypeId = ? and " +
//                     " a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0 , 2) and DeleteFlag = '0') and " +
//                     " ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' and " +
//                     " l.sm = 'Y' and a.clientid = ? ";
//                 // a.is_awaiting_for_user_info in ('N' , 'R') and
//                 if (data.catFilterVal !== '0') {
//                     sql = sql + " and a.working_category =? ";
//                 }
//                 if (data.userFilterVal !== '0') {
//                     sql = sql + " and e.user_id =? ";
//                 }
//                 sql = sql + " ";
//
//                 params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//                 if (data.catFilterVal !== '0') {
//                     params.push(data.catFilterVal);
//                 }
//                 if (data.userFilterVal !== '0') {
//                     params.push(data.userFilterVal);
//                 }
//                 break;
//             } else if (data.clientId == '3' || data.clientId == '7') {
//                 sql = "SELECT '58' id, count(distinct a.id) value " +
//                     " FROM WFCCLIENTRESULT e, ticket a " +
//                     " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId = ? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                     " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and " +
//                     " a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0 , 2) and DeleteFlag = '0') and " +
//                     " ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and a.DeleteFlag = '0' and " +
//                     " a.clientid = ? and a.busi_priority_id=5 ";
//                 if (data.catFilterVal !== '0') {
//                     sql = sql + " and a.working_category =? ";
//                 }
//                 if (data.userFilterVal !== '0') {
//                     sql = sql + " and e.user_id =? ";
//                 }
//                 sql = sql + " ";
//
//                 params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//                 if (data.catFilterVal !== '0') {
//                     params.push(data.catFilterVal);
//                 }
//                 if (data.userFilterVal !== '0') {
//                     params.push(data.userFilterVal);
//                 }
//                 break;
//             }
//         case 60:
//             //done
//             sql = "SELECT '60' id, count(distinct a.id) value FROM WFCCLIENTRESULT e, " +
//                 "ticket a where e.id in (select max(x.id)         from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id " +
//                 " and y.ticketTypeId = ? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) and a.id = e.PKFIELDVAL       and a.ticketTypeId = ? and" +
//                 " a.tstatus in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (8 , 16, 101) " +
//                 " and DeleteFlag = '0') and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and " +
//                 "a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0' and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//
//             if (data.ticketTypeId == '33') {
//                 sql = sql + " and e.user_id is not null";
//             }
//
//
//             sql = sql + " ";
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 62:
//             // done
//             sql = "SELECT '62' id, count(distinct b.id) value from WFCCLIENTRESULT a,ticket b where  a.PKFIELDVAL = b.id and b.ticketTypeId = ? and b.DeleteFlag = '0' " +
//                 " and b.tstatus in  (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0 , 2, 103, 104) and DeleteFlag = '0' ) and b.clientid = ? " +
//                 " and a.createdate  BETWEEN NOW() - INTERVAL 30 DAY AND NOW()";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and b.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and a.user_id =? ";
//             }
//             params = [data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 64:
//             //done
//             sql = "SELECT '64' id,count(distinct a.id ) value " +
//                 " FROM WFCCLIENTRESULT e, child_ticket_ids ch, ticket a where ch.ticket_id =a.id " +
//                 " and e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid =?  group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.DeleteFlag = '0' and a.ticketTypeId =? " +
//                 " and a.clientid =? and ch.DeleteFlag = '0' and a.DeleteFlag = '0'";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             sql = sql + " ";
//             // util.logData('64 count=====' + sql);
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             // util.logData('64 count param=====' + JSON.stringify(params));
//             break;
//         case 65:
//             //done
//             sql = "SELECT '65' id,count(distinct a.id ) value " +
//                 " FROM WFCCLIENTRESULT e, child_ticket_ids ch, ticket a where ch.ticket_id =a.id " +
//                 " and e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid =?  group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.DeleteFlag = '0' and a.ticketTypeId =? " +
//                 " and a.clientid =? and ch.DeleteFlag = '0' and a.DeleteFlag = '0'";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + " ";
//             // util.logData('65 count=====' + sql);
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             // util.logData('65 count param=====' + JSON.stringify(params));
//             break;
//         case 67:
//             sql = "SELECT '67' id, count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.clientid =? and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (24))" +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//                 " and e.supportGroupLevelId =? and e.user_id =? and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R')  ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//
//         case 70:
//             sql = "SELECT '70' id, count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.clientid =? and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (25))" +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//                 " and e.supportGroupLevelId =? and e.user_id =? and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R')  ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             break;
//
//         case 68:
//             sql = "SELECT '68' id, count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.clientid =? " +
//                 " and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (24)) " +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//                 " and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R') " +
//                 " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
//                 " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) and DeleteFlag = '0') ";
//
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             logData('sql----68------------------' + sql);
//             params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             logData('sqlparam----68------------------' + params);
//             break;
//
//         case 71:
//             sql = "SELECT '71' id, count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.clientid =? and a.ticketTypeId =? and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (25))" +
//                 " and ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or  a.is_reopen = '1' ) " +
//                 " and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R') " +
//                 " and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) and DeleteFlag = '0') ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.clientId == '3') {
//                 sql = sql + " and e.supportGroupLevelId =? ";
//             }
//             // sql = sql + "  sql ";
//             params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.clientId == '3') {
//                 params.push(data.supportgrp_id);
//             }
//             break;
//         case 69:
//             sql = "SELECT '69' id, count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (24))" +
//                 " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) " +
//                 " and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R') and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + "  ";
//
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//
//         case 72:
//             sql = "SELECT '72' id, count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? and y.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL  and a.ticketTypeId =? " +
//                 " and a.tstatus in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (25))" +
//                 " and ((a.ticketCloseDate is not null and e.END_INDICATOR = '1') or  a.is_reopen = '0' ) " +
//                 " and a.DeleteFlag = '0' and a.is_awaiting_for_user_info in ('N','R') and a.clientid = ? ";
//             if (data.catFilterVal !== '0') {
//                 sql = sql + " and a.working_category =? ";
//             }
//             if (data.userFilterVal !== '0') {
//                 sql = sql + " and e.user_id =? ";
//             }
//             sql = sql + "  ";
//
//             params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
//             if (data.catFilterVal !== '0') {
//                 params.push(data.catFilterVal);
//             }
//             if (data.userFilterVal !== '0') {
//                 params.push(data.userFilterVal);
//             }
//             break;
//         case 73:
//             sql = "SELECT '73' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ?" +
//                 " and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and " +
//                 " a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0,1) and DeleteFlag = '0' ) and " +
//                 " ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and e.supportGroupLevelId = ? and e.user_id is null " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0') m";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
//             break;
//         case 74:
//             sql = "SELECT '74' id, m.value from (SELECT count(distinct a.id) value " +
//                 " FROM WFCCLIENTRESULT e, ticket a " +
//                 " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId = ?" +
//                 " and a.DeleteFlag = '0' group by x.PKFIELDVAL) " +
//                 " and a.id = e.PKFIELDVAL and a.ticketTypeId = ? and " +
//                 " a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no in (0,1) and DeleteFlag = '0' ) and " +
//                 " ((a.ticketCloseDate is null and e.END_INDICATOR = '0') or a.is_reopen = '1') and e.supportGroupLevelId = ? and e.user_id is null " +
//                 " and a.is_awaiting_for_user_info in ('N' , 'R') and a.DeleteFlag = '0') m";
//             params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
//             break;
//         //done
//
//     }
//
//     con.query(sql, params, function (err, result) {
//         if (err) {
//             util.logData(err);
//             cb(err, false);
//         } else {
//             cb(null, true, result);
//         }
//     })
// }

function getFollowupUserLt(data, cb) {
    checkStatus({ "ticketId": data.ticketId, "tStatus": data.tStatus }, function (errU, successU, resultsU) {
        if (errU) {
            logData(errU);
            cb(errU, null);
        } else {
            if (successU && resultsU[0].sequence_no == 15) {
                let sql = "SELECT id,followup_users_name,followup_users_phno,followup_users_email " +
                    " FROM tbl_client_specific_master " +
                    " where (client_id = ? or client_id in (select clientid from ticket where id =?) )" +
                    " and (ticket_type_id = ? or ticket_type_id in (select ticketTypeId from ticket where id =? ) )" +
                    " and category_id =? and priority_id = ? and delete_flag = 0 ";
                con.query(sql, [data.clientId, data.ticketId, data.ticketTypeId, data.ticketId, data.category_id, data.busi_priority_id], function (err, details) {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, details);
                    }
                })
            } else {
                cb(null, true, [])
            }
        }
    })
}

function insertFollowupDtls(data, cb) {
    logData('naaaaaaaaaaaa***************************************')
    let sql = "insert into ticket_wise_followup_dtls (ticket_id,WFCClientResultId,followup_userid,create_by_id) values(?,?,?,?)";
    con.query(sql, [data.id, data.WFCClientResultId, data.followupUserId, data.user_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

            // optimizedreport table starts

            var sql231 = "SELECT (select create_date from ticket_wise_followup_dtls where ticket_id =? limit 1) create_date,ticket_id,"
                + "(SELECT coalesce(replace(group_concat(concat(date_format (ADDTIME(a.create_date, '5:30:0.000000'),'%d-%M-%Y %T'),': ',coalesce(b.followup_users_name,''))),',','\n'),'') followup FROM ticket_wise_followup_dtls a, tbl_client_specific_master b where a.followup_userid = b.id and a.ticket_id =" + data.id + " and a.delete_flag = '0') followup,"
                + "(select id from optimizedreport where ticket_id=?) id,replace(group_concat(concat(date_format (ADDTIME(create_date, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',',' / ') follow_up_raised_dt ,"
                + " date_format (ADDTIME(max(create_date), '5:30:0.000000'),'%d-%M-%Y %T') max_fllwup_dtls FROM ticket_wise_followup_dtls where ticket_id  =? and delete_flag = '0' group by ticket_id ;"
            logData("@#$$$$$$$$$" + sql231);
            con.query(sql231, [data.id, data.id, data.id], function (err, result231) {
                if (err) {
                    cb(err, null);
                } else {
                    console.log("@#W$ER", result231);
                    var sql232 = "update optimizedreport set follow_up_raised_dt =?,follow_up_value =? where id =? ;"
                    logData("@#W$ER" + sql232);
                    con.query(sql232, [result231[0].max_fllwup_dtls, result231[0].followup, result231[0].id], function (err, result232) {
                        console.log("QSWDRF");
                        if (err) {
                            console.log("qwedf", err);
                            cb(err, null);
                        } else {
                            logData("&&&&&&&&&&&&&&------------>" + sql232);
                            console.log("@#$%^&", result232);
                            cb(null, true, result232);
                        }
                    })
                }
            });

            // optimizedreport table ends


            cb(null, true, "ok");
            // let sql1 = "select id,followup_users_name from tbl_client_specific_master where id  = ? ";
            // con.query(sql1, [data.user_id], function (err1, result1) {
            //     if (err1) {
            //         logData(err1);
            //         cb(err1, null);
            //     } else {
            //         cb(null, true, result1[0].followup_users_name);
            //     }
            // });
        }
    });
}

function checkIsLead(data, cb) {
    let sql = "select is_spoc from supportGroupUser where clientId=? and supportGroupLevelId=? and userId=? and DeleteFlag='0' ";
    con.query(sql, [data.clientId, data.supportgrp_id, data.user_id], function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            for (let i = 0; i < result.length; i++) {
                result[i].is_spoc = stringToBool(result[i].is_spoc);
            }
            cb(null, true, result);
        }
    });
}

// ==============================================
function getStatusByTicketTypeLt(data, cb) {
    if (data.ticketTypeSeqNo === '1') {
        var sql = " SELECT a.id id, a.ATTRVAL status, a.sequence_no sequence " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=? " + " " +
            " and a.ATTRID = 2 and a.sequence_no BETWEEN 0 and 100 and a.sequence_no not in(21,22,23)";
    } else if (data.ticketTypeSeqNo === '2') {
        var sql = " SELECT a.id id, a.ATTRVAL status, a.sequence_no sequence " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=?" + " " +
            " and a.ATTRID = 2 and a.sequence_no BETWEEN 101 and 200";
    } else if (data.ticketTypeSeqNo === '5') {
        var sql = " SELECT a.id id, a.ATTRVAL status, a.sequence_no sequence " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=?" + " " +
            " and a.ATTRID = 2 and a.sequence_no BETWEEN 300 and 399";
    } else if (data.ticketTypeSeqNo === '6') {
        var sql = " SELECT a.id id, a.ATTRVAL status, a.sequence_no sequence " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=?" + " " +
            " and a.ATTRID = 2 and a.sequence_no BETWEEN 400 and 499";
    }
    con.query(sql, [data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}


function getSupportGroupByTicketTypeLt(data, cb) {
    // var data = preventSqlInjection(data);
    var sql = " SELECT DISTINCT sg.id id, sg.LEVELSHORTDESC name , sg.group_level " +
        " FROM TICKETATTRIBUTES t, SUPPORTGROUPLEVEL sg, SupportGrpWithTicketAttributes sgt " +
        " WHERE sgt.clientId = " + data.clientId + " and t.id = sgt.ticket_type and sgt.supportGroupLevelId = sg.id and t.DeleteFlag = '0' " +
        " and sg.DeleteFlag = '0' and sgt.DeleteFlag = '0' and t.id =" + data.ticket_type_id;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })

}

function insertMailTemplateLt(data, cb) {
    util.logData(data);
    //for(let i=0;i<data.category_id.length;i++) {
    async.eachSeries(Object.keys(data.category_id), function (i, loopcallback) {
        let sql = "SELECT id FROM ticket_status_nofication_mst where " +
            "ticket_type_id = ? and notification_type = ? and " +
            "notification_type_id = ? and category_id = ? and delete_flag = 0";
        con.query(sql, [data.ticket_type_id, data.notification_type, data.notification_type_id,
        data.category_id[i]], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result.length > 0) {
                    cb(null, false, "Duplicate data");
                } else {

                    let sql = "INSERT INTO ticket_status_nofication_mst " +
                        " (client_id,ticket_type_id,notification_type, notification_type_id," +
                        " subject, msg_body_content, " +
                        "delete_flag, create_by_id, category_id) " +
                        " VALUES (?,?,?,?,?,?,?,?,?) ";

                    let param = [data.clientId, data.ticket_type_id, data.notification_type,
                    data.notification_type_id, data.subject, data.template, 0, data.createdBy, data.category_id[i]];
                    con.query(sql, param, function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (result.insertId > 0) {
                                loopcallback();
                            } else {
                                cb(null, false, "Error!");
                            }
                        }
                    });
                }
            }
        });
    }, function (err) {
        cb(null, true, 'Data insert successfully');
    });
}


function getMailTemplateLt(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, a.subject, a.msg_body_content, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                " IF(notification_type=1, 'status', 'activity') action_type, IF(notification_type=1," +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.notification_type_id)," +
                " (SELECT activity_desc FROM TicketActivityMst WHERE id=a.notification_type_id)) action," +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.category_id) category" +
                " from ticket_status_nofication_mst a where a.id > ? and a.client_id = ?" +
                " and a.delete_flag = 0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id, a.subject, a.msg_body_content, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType, " +
                "  IF(notification_type=1, 'status', 'activity') action_type, IF(notification_type=1, " +
                "  (select ATTRVAL from TICKETATTRIBUTES where id = a.notification_type_id), " +
                "  (SELECT activity_desc FROM TicketActivityMst WHERE id=a.notification_type_id)) action, " +
                "  (select ATTRVAL from TICKETATTRIBUTES where id = a.category_id) category " +
                "  from ticket_status_nofication_mst a where a.id < ? and a.client_id = ? " +
                "  and a.delete_flag = 0 ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC";
        }


        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from ticket_status_nofication_mst a where a.client_id = ? and a.delete_flag = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}



function getMailTemplateLt_old(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                " IF(notification_type=1, 'status', 'activity') action_type, IF(notification_type=1," +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.notification_type_id)," +
                " (SELECT activity_desc FROM TicketActivityMst WHERE id=a.notification_type_id)) action," +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.category_id) category" +
                " from ticket_status_nofication_mst a where a.id > ? and a.client_id = ?" +
                " and a.delete_flag = 0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType, " +
                "  IF(notification_type=1, 'status', 'activity') action_type, IF(notification_type=1, " +
                "  (select ATTRVAL from TICKETATTRIBUTES where id = a.notification_type_id), " +
                "  (SELECT activity_desc FROM TicketActivityMst WHERE id=a.notification_type_id)) action, " +
                "  (select ATTRVAL from TICKETATTRIBUTES where id = a.category_id) category " +
                "  from ticket_status_nofication_mst a where a.id < ? and a.client_id = ? " +
                "  and a.delete_flag = 0 ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC";
        }


        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from ticket_status_nofication_mst a where a.client_id = ? and a.delete_flag = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function deleteMailTemplateLt(data, cb) {
    var sql = "Update ticket_status_nofication_mst set delete_flag = 1,delete_by_id = ?,delete_date=NOW() where id = ?";
    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getDynamicMenuTicketDtls(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";
    var firstflag = 0;
    if (offset == "0") {
        firstflag = 1;
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    // logData('getDynamicMenuTicketDtls----------------------------'+JSON.stringify(data))
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;

                    /* if (paginationType == 'prev') {
                         results['nextOffset'] = previousOffset;
                         results['previousOffset'] = nextOffset;
                     } else {
                         results['nextOffset'] = nextOffset;
                         results['previousOffset'] = previousOffset;
                     }*/
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    //   logData('previousOffset----------------->' + previousOffset + '  nextOffset---------------->' + nextOffset)
                    //  logData('result.previousOffset----------------->' + results.previousOffset + '  result.nextOffset---------------->' + results.nextOffset)
                }
                cb(null, true, results);
            }
        });
    // data.catFilterVal = '0';
    // data.userFilterVal = '0';
    function dataObj(cb) {
        if (data.specialFilterVal == '0') {
            getTotalData();
        } else {
            // const menuId = data.type;
            data.type = 'b';
            getDashboardCategory(data, function (err, success, value) {
                if (err) {
                    cb(err, true);
                } else {
                    let cat = '';
                    for (let i = 0; i < value.length; i++) {
                        if (i === value.length - 1) {
                            cat = cat + value[i].cat_list;
                        } else {
                            cat = cat + value[i].cat_list + ',';
                        }
                    }
                    // data.type = menuId;
                    data.specialFilterVal = cat;
                    getTotalData();
                }
            });

        }

        function getTotalData() {
            let base_sql = "SELECT id,query_str,query_param FROM ticket_menu_query_mst where client_id = ?  " +
                " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";
            //  logData('base_sql-----------------------' + base_sql)
            slaveCon.query(base_sql, [data.clientId, data.ticketTypeId, data.menuId], function (base_err, base_result) {
                if (base_err) {
                    logData(base_err);
                    cb(base_err, null);
                } else {
                    if (base_result.length > 0) {
                        //util.logData("base : "+JSON.stringify(base_result));
                        let sql = base_result[0].query_str;
                        if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                            sql = sql.replace(/\[.*?\]/g, '');
                        } else {
                            if (data.menuId != '62' && data.menuId != '63') {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      e.user_id =? ');
                                }
                            } else {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and n.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      m.user_id =? ');
                                }
                            }

                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                            sql = sql.replace(/\{.*?\}/g, '');
                        } else {
                            sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                        }


                        let cntSql = sql;
                        let cntSqlLen = cntSql.indexOf("FROM USER b,");
                        let totCntSql = cntSql.substring(cntSqlLen, cntSql.length);
                        totCntSql = "SELECT count(distinct a.id) totCnt " + totCntSql.replace('FROM USER b,', 'FROM ').replace(' and a.createbyid = b.id', '').replace('left join USER c  on a.modifybyid = c.id', '').replace('order by e.id desc', '');

                        //logData('getDynamicMenuTicketDtls-----1111111111111111111111111------' + sql)
                        //logData('\n\ngetDynamicMenuTicketDtls-----totcnt------' + totCntSql)
                        let params = [];
                        if (data.menuId == '1') {
                            // const newParams = base_result[0].query_param.split(',');
                            // for(let i=0;i<newParams.length;i++){
                            //     params.push(eval(newParams[i]));
                            // }
                            // console.log(params);
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '2') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '3') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '4') {
                            params = [data.ticketTypeId, data.clientId, data.user_id, data.ticketTypeId, data.clientId, data.clientId];
                        } else if (data.menuId == '5') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '26') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '27') {
                            if (data.clientId != '5') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.user_id, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '28') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '87') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '32') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '33') {
                            if (data.clientId != '2') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                            } else {
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '30') {
                            /*params = [data.ticketTypeId, data.clientId,  data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];*/
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                        } else if (data.menuId == '40') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];

                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }

                        } else if (data.menuId == '41') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '42') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '86') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '43') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '44') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '45') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '46') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '47') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                        } else if (data.menuId == '49') {
                            // params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id]
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '50') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '51') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '52') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '53') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '54') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '55') {
                            params = [data.clientId, data.clientId, data.clientId, data.ticketTypeId];
                            // params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '56') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '57') {
                            //params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '58') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '59') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '60') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '19') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '21') {
                            if (data.clientId == '2') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '61') {
                            // params = [data.ticketTypeId, data.clientId, data.user_id, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            // if (data.catFilterVal !== '0') {
                            //     params.push(data.catFilterVal);
                            // }
                            if (data.clientId == '5') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                            } else if (data.clientId == '14') {
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.supportgrp_id, data.clientId, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id, data.clientId, data.ticketTypeId, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }

                        } else if (data.menuId == '62') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '63') {
                            if (data.clientId == '2') {
                                params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.ticketTypeId, data.clientId];
                            } else if (data.clientId == '14') {
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.clientId, data.clientId, data.ticketTypeId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '64') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '65') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '67') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '70') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '68') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '71') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '69') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '72') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '73') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '74') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '75') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '76') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '77') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '78') {
                            params = [data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '80') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '79') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '81') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '301') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '313') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '303') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '302') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '304') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '305') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '306') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '307') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '308') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '309') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '310') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '311') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '312') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '321') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id, data.user_id, data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '314') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '324') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '316') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '317') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '318') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '319') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '315') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '325') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '326') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '327') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '322') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '328') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '344') {
                            params = [data.ticketTypeId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '345') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '343') {
                            params = [data.ticketTypeId, data.user_id, data.clientId];
                        } else if (data.menuId == '401') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '421') {
                            params = [data.ticketTypeId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '422') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '411') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '423') {
                            params = [data.ticketTypeId, data.user_id, data.clientId];
                        } else if (data.menuId == '406') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '407') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '405') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '408') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '403') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '409') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '404') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '413') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '402') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '412') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '329') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '330') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '331') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '332') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '333') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '334') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '335') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '336') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '337') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '338') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '339') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '340') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '341') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '342') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '414') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '415') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '416') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '417') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '418') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '419') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '82') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '83') {
                            params = [data.ticketTypeId, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '84') {
                            params = [data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '85') {
                            params = [data.ticketTypeId, data.clientId];

                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        }
                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        } else {
                            let splFlt = data.specialFilterVal.split(",");
                            // let arrStr=[];
                            // arrStr.push(splFlt[0]);
                            // arrStr.push(splFlt[1]);

                            params.push(splFlt);
                        }

                        //logData('paginationType-------------------' + paginationType);
                        logData('\n\nsql-------------------' + sql);
                        if (paginationType == 'prev') {
                            // logData('\n\n1')
                            sql = sql.replace('order by e.id desc', ' and a.id>? order by a.id  LIMIT ? ');
                            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  desc ";
                            params.push(Number(offset));
                            params.push(Number(page_size));
                        } else {
                            if (Number(firstflag) == 1) {
                                // logData('\n\n2')
                                // sql = sql.replace('order by e.id desc', ' and a.id>0 order by a.id desc LIMIT ? ');
                                sql = sql + ' LIMIT ? ';
                                params.push(Number(page_size));
                            } else {
                                // logData('\n\n3')
                                sql = sql.replace('order by e.id desc', ' and a.id<? order by a.id desc LIMIT ? ');
                                params.push(Number(offset));
                                params.push(Number(page_size));
                            }
                        }
                        // sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  desc ";
                        logData('\n\ngetDynamicMenuTicketDtls================>>' + sql);
                        // logData(' \n  getDynamicMenuTicketDtls-----------------------------------------params-----------' + params);
                        slaveCon.getConnection(function (err, slaveConn) {
                            if (err) {
                                util.logData(err);
                                cb(err, false);
                            } else {
                                slaveConn.query(sql, params, function (err, result) {
                                    if (err) {
                                        logData(err);
                                        slaveConn.release();
                                        cb(err, null);
                                    } else {
                                        if (result.length > 0) {
                                            // logData('\nresult------------------------' + result.length)
                                            //  logData('result------------------------'+JSON.stringify(result))
                                            var flg = 1;
                                            var le = 0;
                                            for (let j = 0; j < result.length; j++) {
                                                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                                    " left join " +
                                                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                                    " on m.wfcclient_result_id = n.wfcclient_result_id ";
                                                // util.logData("sql12----------->"+sql12)
                                                slaveConn.query(sql12, function (err12, result12) {
                                                    if (err12) {
                                                        logData(err12);
                                                        slaveConn.release();
                                                        cb(err12, null);
                                                    } else {
                                                        if (result12.length > 0) {
                                                            result[j]['assignee'] = result12[0].assignee;
                                                            result[j]['aid'] = result12[0].assigned_user_id;
                                                        }
                                                        let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                            " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                        le++;
                                                        slaveConn.query(sql1, function (err1, result1) {
                                                            if (err1) {
                                                                logData(err1);
                                                                slaveConn.release();
                                                                cb(err1, null);
                                                            } else {
                                                                //if (result1.length > 0) {
                                                                for (let i = 0; i < result1.length; i++) {
                                                                    result[j][result1[i].parent] = result1[i].child;
                                                                }
                                                                if (flg == result.length) {
                                                                    slaveConn.release();
                                                                    cb(null, result);
                                                                }
                                                                flg++;
                                                                /* } else {
                                                                     cb(null, true, []);
                                                                 }*/

                                                            }
                                                        });
                                                        /***********************************************************************************/

                                                        /***********************************************************************************/
                                                    }
                                                });
                                            }
                                        } else {
                                            slaveConn.release();
                                            cb(null, []);
                                        }
                                    }
                                });
                            }
                        })

                    } else {
                        cb(null, "Some configuration error");
                    }
                }
            })
        }
    }

    function totalData(cb) {
        //logData('\n\ngetDynamicMenuTicketDtls------1111111111111111111111111111111111-------------' + JSON.stringify(data))
        // let base_sql = "SELECT count(id) count FROM ticket_menu_query_mst where client_id = ?  " +
        //     " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";

        if (data.specialFilterVal == '0') {
            getTotalCount();
        } else {
            // const menuId = data.type;
            data.type = 'b';
            getDashboardCategory(data, function (err, success, value) {
                if (err) {
                    cb(err, true);
                } else {
                    let cat = '';
                    for (let i = 0; i < value.length; i++) {
                        if (i === value.length - 1) {
                            cat = cat + value[i].cat_list;
                        } else {
                            cat = cat + value[i].cat_list + ',';
                        }
                    }
                    // data.type = menuId;
                    data.specialFilterVal = cat;
                    getTotalCount();
                }
            });

        }

        function getTotalCount() {
            let base_sql = "SELECT id,query_str,query_param FROM ticket_menu_query_mst where client_id = ?  " +
                " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";
            // logData('base_sql-----------------------' + base_sql)
            slaveCon.query(base_sql, [data.clientId, data.ticketTypeId, data.menuId], function (base_err, base_result) {
                if (base_err) {
                    logData(base_err);
                    cb(base_err, null);
                } else {
                    if (base_result.length > 0) {
                        let sql = base_result[0].query_str;
                        if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                            sql = sql.replace(/\[.*?\]/g, '');
                        } else {
                            if (data.menuId != '62' && data.menuId != '63') {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      e.user_id =? ');
                                }
                            } else {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and n.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      m.user_id =? ');
                                }
                            }
                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                            sql = sql.replace(/\{.*?\}/g, '');
                        } else {
                            sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                        }

                        let cntSql = sql;
                        let cntSqlLen = cntSql.indexOf("FROM USER b,");
                        let totCntSql = cntSql.substring(cntSqlLen, cntSql.length);
                        totCntSql = "SELECT count(distinct a.id) count " + totCntSql.replace('FROM USER b,', 'FROM ').replace(' and a.createbyid = b.id', '').replace('left join USER c  on a.modifybyid = c.id', '').replace('order by e.id desc', '');

                        //logData('getDynamicMenuTicketDtls-----1111111111111111111111111------' + sql)
                        // logData('\n\ngetDynamicMenuTicketDtls-----totcnt------' + totCntSql)

                        let params = [];
                        if (data.menuId == '1') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '2') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '3') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '4') {
                            params = [data.ticketTypeId, data.clientId, data.user_id, data.ticketTypeId, data.clientId, data.clientId];
                        } else if (data.menuId == '5') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '26') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '27') {
                            if (data.clientId != '5') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.user_id, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '28') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '87') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '32') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '33') {
                            if (data.clientId != '2') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                            } else {
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '30') {
                            /*params = [data.ticketTypeId, data.clientId,  data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];*/
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                        } else if (data.menuId == '40') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }

                        } else if (data.menuId == '41') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '42') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '86') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '43') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '44') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '45') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '46') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '47') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                        } else if (data.menuId == '49') {
                            // params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id]
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '50') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '51') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '52') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '53') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '54') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '55') {
                            params = [data.clientId, data.clientId, data.clientId, data.ticketTypeId];
                            // params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '56') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '57') {
                            // params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '58') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '59') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '60') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '19') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '21') {
                            if (data.clientId == '2') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '61') {
                            if (data.clientId == '5') {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                            } else if (data.clientId == '14') {
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.supportgrp_id, data.clientId, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id, data.clientId, data.ticketTypeId, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '62') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '63') {
                            if (data.clientId == '2') {
                                params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.ticketTypeId, data.clientId];
                            } else if (data.clientId == '14') {
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.clientId, data.clientId, data.ticketTypeId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.clientId];
                            } else {
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '64') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '65') {
                            params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '67') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '70') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '68') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            // if (data.clientId == '3' || data.clientId == '7') {
                            //     params.push(data.supportgrp_id);
                            // }
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '71') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '69') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '72') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '73') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '74') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '75') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '76') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId,
                            data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '77') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '78') {
                            params = [data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id, data.clientId, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '80') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.clientId != '2') {
                                params.push(data.supportgrp_id);
                            }
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '79') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '81') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '301') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '303') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '313') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '302') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '304') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '305') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '306') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '307') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '308') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '309') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '310') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '311') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '312') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '321') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id, data.user_id, data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '314') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '324') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '316') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '317') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '318') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '319') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '315') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '325') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '326') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '327') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '322') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id, data.clientId];
                        } else if (data.menuId == '328') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '344') {
                            params = [data.ticketTypeId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '345') {
                            params = [data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '343') {
                            params = [data.ticketTypeId, data.user_id, data.clientId];
                        } else if (data.menuId == '401') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '421') {
                            params = [data.ticketTypeId, data.supportgrp_id, data.clientId];
                        } else if (data.menuId == '422') {
                            params = [data.ticketTypeId, data.clientId];
                        } else if (data.menuId == '411') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '423') {
                            params = [data.ticketTypeId, data.user_id, data.clientId];
                        } else if (data.menuId == '406') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '407') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '405') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '408') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '403') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '409') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '404') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '413') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '402') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                        } else if (data.menuId == '412') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id, data.user_id];
                        } else if (data.menuId == '329') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '330') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '331') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '332') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '333') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '334') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '335') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '336') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '337') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '338') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '339') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '340') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '341') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '342') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.supportgrp_id];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '414') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '415') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '416') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '417') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '418') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '419') {
                            params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '82') {
                            params = [data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.ticketTypeId, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                            if (data.userFilterVal !== '0') {
                                params.push(data.userFilterVal);
                            }
                        } else if (data.menuId == '83') {
                            params = [data.ticketTypeId, data.user_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '84') {
                            params = [data.ticketTypeId, data.supportgrp_id, data.clientId];
                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        } else if (data.menuId == '85') {
                            params = [data.ticketTypeId, data.clientId];

                            if (data.catFilterVal !== '0') {
                                params.push(data.catFilterVal);
                            }
                        }
                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        } else {
                            let splFlt = data.specialFilterVal.split(",");
                            params.push(splFlt);
                        }
                        //logData('   params count-----------' + params)
                        slaveCon.query(totCntSql, params, function (err, done) {
                            if (err) {
                                util.logData(err);
                                cb(err, null);
                            } else {
                                //util.logData('result1=' + done.length());
                                cb(null, done);
                            }
                        });
                    } else {
                        cb(null, false, "Some configuration error");
                    }
                }
            })
        }
    }
}


function getDynamicMenuTicketDtls_new(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";
    var firstflag = 0;
    if (offset == "0") {
        firstflag = 1;
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;

                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    //   logData('previousOffset----------------->' + previousOffset + '  nextOffset---------------->' + nextOffset)
                    //  logData('result.previousOffset----------------->' + results.previousOffset + '  result.nextOffset---------------->' + results.nextOffset)
                }
                cb(null, true, results);
            }
        });
    // data.catFilterVal = '0';
    // data.userFilterVal = '0';
    function dataObj(cb) {
        if (data.specialFilterVal == '0') {
            getTotalData();
        } else {
            // const menuId = data.type;
            data.type = 'b';
            getDashboardCategory(data, function (err, success, value) {
                if (err) {
                    cb(err, true);
                } else {
                    let cat = '';
                    for (let i = 0; i < value.length; i++) {
                        if (i === value.length - 1) {
                            cat = cat + value[i].cat_list;
                        } else {
                            cat = cat + value[i].cat_list + ',';
                        }
                    }
                    // data.type = menuId;
                    data.specialFilterVal = cat;
                    getTotalData();
                }
            });

        }

        function getTotalData() {
            let base_sql = "SELECT id,query_str,query_param FROM ticket_menu_query_mst_new where client_id = ?  " +
                " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";
            logData('base_sql-----------------------' + base_sql)
            slaveCon.query(base_sql, [data.clientId, data.seq, data.menuId], function (base_err, base_result) {
                if (base_err) {
                    logData(base_err);
                    cb(base_err, null);
                } else {
                    if (base_result.length > 0) {
                        //util.logData("base : "+JSON.stringify(base_result));
                        let sql = base_result[0].query_str;
                        if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                            sql = sql.replace(/\[.*?\]/g, '');
                        } else {
                            if (data.menuId != '62' && data.menuId != '63') {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      e.user_id =? ');
                                }
                            } else {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and n.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      m.user_id =? ');
                                }
                            }

                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                            sql = sql.replace(/\{.*?\}/g, '');
                        } else {
                            sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                        }


                        // let cntSql = sql;
                        // let cntSqlLen = cntSql.indexOf("FROM USER b,");
                        // let totCntSql = cntSql.substring(cntSqlLen, cntSql.length);

                        // logData('getDynamicMenuTicketDtls-----1111111111111111111111111------' + sql)
                        //logData('\n\ngetDynamicMenuTicketDtls-----totcnt------' + totCntSql)
                        let params = [];
                        const newParams = base_result[0].query_param.split(',');
                        for (let i = 0; i < newParams.length; i++) {
                            params.push(eval(newParams[i]));
                        }
                        if (data.catFilterVal !== '0') {
                            params.push(data.catFilterVal);
                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        } else {
                            let splFlt = data.specialFilterVal.split(",");
                            // let arrStr=[];
                            // arrStr.push(splFlt[0]);
                            // arrStr.push(splFlt[1]);

                            params.push(splFlt);
                        }

                        //logData('paginationType-------------------' + paginationType);
                        // logData('\n\nsql-------------------' + sql);
                        if (paginationType == 'prev') {
                            // logData('\n\n1')
                            sql = sql.replace('order by e.id desc', ' and a.id>? order by a.id  LIMIT ? ');
                            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  desc ";
                            params.push(Number(offset));
                            params.push(Number(page_size));
                        } else {
                            if (Number(firstflag) == 1) {
                                // logData('\n\n2')
                                // sql = sql.replace('order by e.id desc', ' and a.id>0 order by a.id desc LIMIT ? ');
                                sql = sql + ' LIMIT ? ';
                                params.push(Number(page_size));
                            } else {
                                // logData('\n\n3')
                                sql = sql.replace('order by e.id desc', ' and a.id<? order by a.id desc LIMIT ? ');
                                params.push(Number(offset));
                                params.push(Number(page_size));
                            }
                        }
                        // sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  desc ";
                        logData('\n\ngetDynamicMenuTicketDtls========>>' + sql);
                        logData(' \n \n getDynamicMenuTicketDtls--------params-------' + params);
                        slaveCon.query(sql, params, function (err, result) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                if (result.length > 0) {
                                    logData('\nresult------------------------' + result.length)
                                    // logData('result------------------------' + JSON.stringify(result))
                                    var flg = 1;
                                    var le = 0;
                                    for (let j = 0; j < result.length; j++) {
                                        let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                            "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                            "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                            " left join " +
                                            "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                            "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                            " on m.wfcclient_result_id = n.wfcclient_result_id ";
                                        // util.logData("sql12----------->"+sql12)
                                        slaveCon.query(sql12, function (err12, result12) {
                                            if (err12) {
                                                logData(err12);
                                                cb(err12, null);
                                            } else {
                                                if (result12.length > 0) {
                                                    result[j]['assignee'] = result12[0].assignee;
                                                    result[j]['aid'] = result12[0].assigned_user_id;
                                                }

                                                if (data.isLNTSSC && data.isLNTSSC === '1') {
                                                    let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child, (SELECT ic FROM LNT_employee_details where ticket_id = ? limit 1) ic , " +
                                                        " (SELECT unit FROM LNT_employee_details where ticket_id = ? limit 1) unit, (SELECT entity_code FROM LNT_employee_details where ticket_id = ? limit 1) entity_code " +
                                                        " FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = ?";

                                                    le++;
                                                    slaveCon.query(sql1, [result[j].id, result[j].id, result[j].id, result[j].id], function (err1, result1) {
                                                        if (err1) {
                                                            logData(err1);
                                                            cb(err1, null);
                                                        } else {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                                if (i === result1.length - 1) {
                                                                    result[j]['entity_code1'] = result1[i].entity_code;
                                                                    result[j]['ic1'] = result1[i].ic;
                                                                    result[j]['unit1'] = result1[i].unit;
                                                                }
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, result);
                                                            }
                                                            flg++;
                                                        }
                                                    });
                                                } else {
                                                    let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                        " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";

                                                    le++;
                                                    slaveCon.query(sql1, function (err1, result1) {
                                                        if (err1) {
                                                            logData(err1);
                                                            cb(err1, null);
                                                        } else {
                                                            for (let i = 0; i < result1.length; i++) {
                                                                result[j][result1[i].parent] = result1[i].child;
                                                            }
                                                            if (flg == result.length) {
                                                                cb(null, result);
                                                            }
                                                            flg++;
                                                        }
                                                    });
                                                }

                                                /***********************************************************************************/

                                                /***********************************************************************************/
                                            }
                                        });
                                    }
                                } else {
                                    cb(null, []);
                                }
                            }
                        });
                    } else {
                        cb(null, "Some configuration error");
                    }
                }
            })
        }
    }

    function totalData(cb) {
        //logData('\n\ngetDynamicMenuTicketDtls------1111111111111111111111111111111111-------------' + JSON.stringify(data))
        // let base_sql = "SELECT count(id) count FROM ticket_menu_query_mst where client_id = ?  " +
        //     " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";

        if (data.specialFilterVal == '0') {
            getTotalCount();
        } else {
            // const menuId = data.type;
            data.type = 'b';
            getDashboardCategory(data, function (err, success, value) {
                if (err) {
                    cb(err, true);
                } else {
                    let cat = '';
                    for (let i = 0; i < value.length; i++) {
                        if (i === value.length - 1) {
                            cat = cat + value[i].cat_list;
                        } else {
                            cat = cat + value[i].cat_list + ',';
                        }
                    }
                    // data.type = menuId;
                    data.specialFilterVal = cat;
                    getTotalCount();
                }
            });

        }

        function getTotalCount() {
            let base_sql = "SELECT id,query_str,query_param FROM ticket_menu_query_mst_new where client_id = ?  " +
                " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";
            // logData('base_sql-----------------------' + base_sql)
            slaveCon.query(base_sql, [data.clientId, data.seq, data.menuId], function (base_err, base_result) {
                if (base_err) {
                    logData(base_err);
                    cb(base_err, null);
                } else {
                    if (base_result.length > 0) {
                        let sql = base_result[0].query_str;
                        if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                            sql = sql.replace(/\[.*?\]/g, '');
                        } else {
                            if (data.menuId != '62' && data.menuId != '63') {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      e.user_id =? ');
                                }
                            } else {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and n.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      m.user_id =? ');
                                }
                            }
                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                            sql = sql.replace(/\{.*?\}/g, '');
                        } else {
                            sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                        }

                        let cntSql = sql;
                        let cntSqlLen = cntSql.indexOf("FROM USER b,");
                        let totCntSql = cntSql.substring(cntSqlLen, cntSql.length);
                        totCntSql = "SELECT count(distinct a.id) count " + totCntSql.replace('FROM USER b,', 'FROM ').replace(/ and a.createbyid = b.id/ig, '').replace('left join USER c  on a.modifybyid = c.id', '').replace('order by e.id desc', '');

                        //logData('getDynamicMenuTicketDtls-----1111111111111111111111111------' + sql)
                        // logData('\n\ngetDynamicMenuTicketDtls-----totcnt------' + totCntSql)

                        let params = [];
                        const newParams = base_result[0].query_param.split(',');
                        for (let i = 0; i < newParams.length; i++) {
                            params.push(eval(newParams[i]));
                        }
                        if (data.catFilterVal !== '0') {
                            params.push(data.catFilterVal);
                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        } else {
                            let splFlt = data.specialFilterVal.split(",");
                            params.push(splFlt);
                        }
                        //logData('   params count-----------' + params)
                        slaveCon.query(totCntSql, params, function (err, done) {
                            if (err) {
                                util.logData(err);
                                cb(err, null);
                            } else {
                                //util.logData('result1=' + done.length());
                                cb(null, done);
                            }
                        });
                    } else {
                        cb(null, false, "Some configuration error");
                    }
                }
            })
        }
    }
}

function getDynamicMenuTicketDtls_new__OLD(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";
    var firstflag = 0;
    if (offset == "0") {
        firstflag = 1;
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;

                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    //   logData('previousOffset----------------->' + previousOffset + '  nextOffset---------------->' + nextOffset)
                    //  logData('result.previousOffset----------------->' + results.previousOffset + '  result.nextOffset---------------->' + results.nextOffset)
                }
                cb(null, true, results);
            }
        });
    // data.catFilterVal = '0';
    // data.userFilterVal = '0';
    function dataObj(cb) {
        if (data.specialFilterVal == '0') {
            getTotalData();
        } else {
            // const menuId = data.type;
            data.type = 'b';
            getDashboardCategory(data, function (err, success, value) {
                if (err) {
                    cb(err, true);
                } else {
                    let cat = '';
                    for (let i = 0; i < value.length; i++) {
                        if (i === value.length - 1) {
                            cat = cat + value[i].cat_list;
                        } else {
                            cat = cat + value[i].cat_list + ',';
                        }
                    }
                    // data.type = menuId;
                    data.specialFilterVal = cat;
                    getTotalData();
                }
            });

        }

        function getTotalData() {
            let base_sql = "SELECT id,query_str,query_param FROM ticket_menu_query_mst_new where client_id = ?  " +
                " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";
            //  logData('base_sql-----------------------' + base_sql)
            slaveCon.query(base_sql, [data.clientId, data.seq, data.menuId], function (base_err, base_result) {
                if (base_err) {
                    logData(base_err);
                    cb(base_err, null);
                } else {
                    if (base_result.length > 0) {
                        //util.logData("base : "+JSON.stringify(base_result));
                        let sql = base_result[0].query_str;
                        if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                            sql = sql.replace(/\[.*?\]/g, '');
                        } else {
                            if (data.menuId != '62' && data.menuId != '63') {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      e.user_id =? ');
                                }
                            } else {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and n.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      m.user_id =? ');
                                }
                            }

                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                            sql = sql.replace(/\{.*?\}/g, '');
                        } else {
                            sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                        }


                        // let cntSql = sql;
                        // let cntSqlLen = cntSql.indexOf("FROM USER b,");
                        // let totCntSql = cntSql.substring(cntSqlLen, cntSql.length);

                        // logData('getDynamicMenuTicketDtls-----1111111111111111111111111------' + sql)
                        //logData('\n\ngetDynamicMenuTicketDtls-----totcnt------' + totCntSql)
                        let params = [];
                        const newParams = base_result[0].query_param.split(',');
                        for (let i = 0; i < newParams.length; i++) {
                            params.push(eval(newParams[i]));
                        }
                        if (data.catFilterVal !== '0') {
                            params.push(data.catFilterVal);
                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        } else {
                            let splFlt = data.specialFilterVal.split(",");
                            // let arrStr=[];
                            // arrStr.push(splFlt[0]);
                            // arrStr.push(splFlt[1]);

                            params.push(splFlt);
                        }

                        //logData('paginationType-------------------' + paginationType);
                        // logData('\n\nsql-------------------' + sql);
                        if (paginationType == 'prev') {
                            // logData('\n\n1')
                            sql = sql.replace('order by e.id desc', ' and a.id>? order by a.id  LIMIT ? ');
                            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  desc ";
                            params.push(Number(offset));
                            params.push(Number(page_size));
                        } else {
                            if (Number(firstflag) == 1) {
                                // logData('\n\n2')
                                // sql = sql.replace('order by e.id desc', ' and a.id>0 order by a.id desc LIMIT ? ');
                                sql = sql + ' LIMIT ? ';
                                params.push(Number(page_size));
                            } else {
                                // logData('\n\n3')
                                sql = sql.replace('order by e.id desc', ' and a.id<? order by a.id desc LIMIT ? ');
                                params.push(Number(offset));
                                params.push(Number(page_size));
                            }
                        }
                        // sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  desc ";
                        // logData('\n\ngetDynamicMenuTicketDtls========>>' + sql);
                        // logData(' \n \n getDynamicMenuTicketDtls--------params-------' + params);
                        slaveCon.query(sql, params, function (err, result) {
                            if (err) {
                                logData(err);
                                cb(err, null);
                            } else {
                                if (result.length > 0) {
                                    // logData('\nresult------------------------' + result.length)
                                    //  logData('result------------------------'+JSON.stringify(result))
                                    var flg = 1;
                                    var le = 0;
                                    for (let j = 0; j < result.length; j++) {
                                        let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                                            "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                                            "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                                            " left join " +
                                            "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                                            "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                                            " on m.wfcclient_result_id = n.wfcclient_result_id ";
                                        // util.logData("sql12----------->"+sql12)
                                        slaveCon.query(sql12, function (err12, result12) {
                                            if (err12) {
                                                logData(err12);
                                                cb(err12, null);
                                            } else {
                                                if (result12.length > 0) {
                                                    result[j]['assignee'] = result12[0].assignee;
                                                    result[j]['aid'] = result12[0].assigned_user_id;
                                                }
                                                let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                                le++;
                                                slaveCon.query(sql1, function (err1, result1) {
                                                    if (err1) {
                                                        logData(err1);
                                                        cb(err1, null);
                                                    } else {
                                                        //if (result1.length > 0) {
                                                        for (let i = 0; i < result1.length; i++) {
                                                            result[j][result1[i].parent] = result1[i].child;
                                                        }
                                                        if (flg == result.length) {
                                                            cb(null, result);
                                                        }
                                                        flg++;
                                                        /* } else {
                                                             cb(null, true, []);
                                                         }*/

                                                    }
                                                });
                                                /***********************************************************************************/

                                                /***********************************************************************************/
                                            }
                                        });
                                    }
                                } else {
                                    cb(null, []);
                                }
                            }
                        });
                    } else {
                        cb(null, "Some configuration error");
                    }
                }
            })
        }
    }

    function totalData(cb) {
        //logData('\n\ngetDynamicMenuTicketDtls------1111111111111111111111111111111111-------------' + JSON.stringify(data))
        // let base_sql = "SELECT count(id) count FROM ticket_menu_query_mst where client_id = ?  " +
        //     " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";

        if (data.specialFilterVal == '0') {
            getTotalCount();
        } else {
            // const menuId = data.type;
            data.type = 'b';
            getDashboardCategory(data, function (err, success, value) {
                if (err) {
                    cb(err, true);
                } else {
                    let cat = '';
                    for (let i = 0; i < value.length; i++) {
                        if (i === value.length - 1) {
                            cat = cat + value[i].cat_list;
                        } else {
                            cat = cat + value[i].cat_list + ',';
                        }
                    }
                    // data.type = menuId;
                    data.specialFilterVal = cat;
                    getTotalCount();
                }
            });

        }

        function getTotalCount() {
            let base_sql = "SELECT id,query_str,query_param FROM ticket_menu_query_mst_new where client_id = ?  " +
                " and ticket_type_id = ? and menu_id = ? and delete_flag = '0'";
            // logData('base_sql-----------------------' + base_sql)
            slaveCon.query(base_sql, [data.clientId, data.seq, data.menuId], function (base_err, base_result) {
                if (base_err) {
                    logData(base_err);
                    cb(base_err, null);
                } else {
                    if (base_result.length > 0) {
                        let sql = base_result[0].query_str;
                        if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                            sql = sql.replace(/\[.*?\]/g, '');
                        } else {
                            if (data.menuId != '62' && data.menuId != '63') {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      e.user_id =? ');
                                }
                            } else {
                                if (data.catFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and n.working_category =? ');
                                }
                                if (data.userFilterVal !== '0') {
                                    sql = sql.replace(/\[.*?\]/g, ' and      m.user_id =? ');
                                }
                            }
                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                            sql = sql.replace(/\{.*?\}/g, '');
                        } else {
                            sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                        }

                        let cntSql = sql;
                        let cntSqlLen = cntSql.indexOf("FROM USER b,");
                        let totCntSql = cntSql.substring(cntSqlLen, cntSql.length);
                        totCntSql = "SELECT count(distinct a.id) count " + totCntSql.replace('FROM USER b,', 'FROM ').replace(/ and a.createbyid = b.id/ig, '').replace('left join USER c  on a.modifybyid = c.id', '').replace('order by e.id desc', '');

                        //logData('getDynamicMenuTicketDtls-----1111111111111111111111111------' + sql)
                        // logData('\n\ngetDynamicMenuTicketDtls-----totcnt------' + totCntSql)

                        let params = [];
                        const newParams = base_result[0].query_param.split(',');
                        for (let i = 0; i < newParams.length; i++) {
                            params.push(eval(newParams[i]));
                        }
                        if (data.catFilterVal !== '0') {
                            params.push(data.catFilterVal);
                        }

                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        } else {
                            let splFlt = data.specialFilterVal.split(",");
                            params.push(splFlt);
                        }
                        //logData('   params count-----------' + params)
                        slaveCon.query(totCntSql, params, function (err, done) {
                            if (err) {
                                util.logData(err);
                                cb(err, null);
                            } else {
                                //util.logData('result1=' + done.length());
                                cb(null, done);
                            }
                        });
                    } else {
                        cb(null, false, "Some configuration error");
                    }
                }
            })
        }
    }
}

function getAllLevelOneUser(data, cb) {
    let sql = "SELECT DISTINCT a.userId id, (select NAME from USER where USER.id = a.userId ) name FROM " +
        "supportGroupUser a, USER b where a.userId = b.id and b.DeleteFlag= '0' " +
        "and a.supportGroupLevelId in ( select id from SUPPORTGROUPLEVEL where group_level = ? and DeleteFlag = '0' " +
        "and CLIENTID= ?) and a.DeleteFlag= '0' order by name";
    con.query(sql, [1, data.clientId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function getStatusIdClientWise(data, cb) {
    let sql = "SELECT id,ATTRVAL FROM TICKETATTRIBUTES where CLIENTID =? and sequence_no =? ";
    con.query(sql, [data.clientId, data.seq], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            if (resp.length > 0) {
                cb(null, true, resp[0].id);
            } else {
                cb(null, false, 0);
            }

        }
    })
}

function insertEscalation(data, cb) {
    function deleteData(callback) {
        /*if (data.category_id.length > 1) {
            let sql = 'delete from ticket_escalation_notification_mst where client_id=? and ticket_type_id=?';
            con.query(sql, [data.clientId, data.ticket_type_id], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, true);
                }
            });
        } else {
            callback(null, true);
        }*/
        callback(null, true);
    }

    function insertData(cb) {
        let count = 0;
        let flagi;
        let flagj;
        flagi = -1;
        // for (var i = 2; i < data.category_id.length; i++) {
        for (var i = 0; i < data.category_id.length; i++) {
            let sql = 'select b.id,b.LEVELSHORTDESC name ' +
                'from SupportGrpWithTicketAttributes a, SUPPORTGROUPLEVEL b ' +
                'where a.supportGroupLevelId = b.id ' +
                'and a.DeleteFlag = 0 ' +
                'and b.DeleteFlag = 0 and a.clientId=? and a.ticketAttrId=?';
            con.query(sql, [data.clientId, data.category_id[i].id], function (err, result) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    flagi++;
                    count++;
                    if (result.length > 0) {
                        for (var j = 0; j < result.length; j++) {
                            let sql = "INSERT INTO `ticket_escalation_notification_mst` (`client_id`, `ticket_type_id`," +
                                " `category_id`, `notification_type`," +
                                " `notification_subject`, `notification_body`, `is_escalated_to_all_support_grp`," +
                                " `escalated_to_support_grp_id`, `escalation_when_type`, `escalation_time_to_calculate`, `sla_alert_type`," +
                                " `sla_given_time`, `delete_flag`, `create_by_id`, `extra_mail_id`, `escalation_time`, `priority_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
                            let param = [data.clientId, data.ticket_type_id, data.category_id[flagi].id, data.notification_type, data.notification_subject,
                            data.notification_body, data.is_escalated_to_all_support_grp,
                            result[j].id, data.escalation_when_type, data.escalation_time_to_calculate, data.sla_alert_type,
                            data.sla_given_time, '0', data.createdBy, data.additionalEmail, data.escalation_time, data.priority];
                            con.query(sql, param, function (err, result1) {
                                if (err) {
                                    logData(err);
                                    cb(err, null);
                                }
                            });
                        }
                    }
                    // if (data.category_id.length === count + 2)
                    if (data.category_id.length === count) {
                        cb(null, true, 'Record insert successfully');
                    }
                }
            });
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}

function deleteEscalation(data, cb) {
    var sql = "Update ticket_escalation_notification_mst set delete_flag = 1,delete_by_id = ?,delete_date=NOW() where id = ?";
    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getEscalateDetails(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType,(SELECT ATTRVAL name FROM TICKETATTRIBUTES " +
                " where id=a.category_id) categoryName, a.notification_subject, if((a.escalation_when_type = 1) ,'after','before') escalation_when_type," +
                " a.escalation_time_to_calculate, if((a.sla_alert_type = 1) ,'after','before') sla_alert_type, a.sla_given_time, " +
                " (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalated_to_support_grp_id) supportGroup, " +
                " (select busi_priority_name from BUSINESSPRIORITY where id=a.priority_id) priority from " +
                " ticket_escalation_notification_mst a where a.id > ? and a.client_id = ? and a.delete_flag = 0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from (select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType,(SELECT ATTRVAL name FROM TICKETATTRIBUTES " +
                " where id=a.category_id) categoryName, a.notification_subject, if((a.escalation_when_type = 1) ,'after','before') escalation_when_type," +
                " a.escalation_time_to_calculate, if((a.sla_alert_type = 1) ,'after','before') sla_alert_type, a.sla_given_time, " +
                " (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalated_to_support_grp_id) supportGroup," +
                " (select busi_priority_name from BUSINESSPRIORITY where id=a.priority_id) priority from " +
                " ticket_escalation_notification_mst a where a.id < ? and a.client_id = ? and a.delete_flag = 0 ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC";
        }

        util.logData('sql===========', str);
        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from ticket_escalation_notification_mst a where a.delete_flag = 0 and a.client_id = ?";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function addFollowupLt(data, cb) {
    let count = 0;
    let flagi = 0;
    for (let i = 0; i < data.category_id.length; i++) {
        let sql = "INSERT INTO tbl_client_specific_master " +
            " (client_id,ticket_type_id,category_id,priority_id,followup_users_name,ps_no,followup_users_phno," +
            "followup_users_email,delete_flag,create_by_id, tbl_client_specific_mastercol) " +
            " VALUES (?,?,?,?,?,?,?,?,?,?,?) ";
        count++;
        let param = [data.clientId, data.ticket_type_id, data.category_id[count - 1], data.priority_id, data.username, data.psno,
        data.phno, data.email, 0, data.createdBy, 'Follow Up']
        con.query(sql, param, function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (data.category_id.length === flagi + 1) {

                     // optimizedreport table starts
                     var sql21 = "select ticket_id from FROM ticket_wise_followup_dtls a, tbl_client_specific_master b where a.followup_userid = b.id"
                     con.query(sql21, function (err, result21) {
                         if (err) {
                             cb(err, null);
                         } else {
                             console.log("!@#$%^$#@!~@#$%^$#@!#$%^$", result21);
                             var sql220 = "SELECT a.ticket_id,(select id from optimizedreport where ticket_id=?) id,coalesce(replace(group_concat(concat(date_format (ADDTIME(a.create_date, '5:30:0.000000'),'%d-%M-%Y %T'),': ', coalesce(b.followup_users_name,''))),',','\n'),'') followup "
                                 + " FROM ticket_wise_followup_dtls a, tbl_client_specific_master b where a.followup_userid = b.id and a.ticket_id =? and a.delete_flag = '0'"
                             con.query(sql220, [result21[0].ticket_id, result21[0].ticket_id], function (err, result220) {
                                 if (err) {
                                     cb(err, null);
                                 } else {
                                     logData("_________++__+_+_+" + sql220);
                                     console.log("@@@@@@@@!!!!!!!!!!123", result220);
                                     var sql221 = "update optimizedreport set follow_up_value=?  where id =? ;"
                                     con.query(sql221, [result220[0].followup, result220[0].id], function (err, result221) {
                                         if (err) {
                                             cb(err, null);
                                         } else {
                                             logData("&&&&&&&&&&&&&&------------>" + sql220);
                                             console.log("!!!!!!!!@@w", result221);
                                             cb(null, true, result221);
                                         }
                                     })
 
                                 }
                             })
                         }
                     });
 
                     // optimizedreprot table ends

                     
                    cb(null, true, 'Record insert successfully');
                }
                flagi++;
            }
        });
    }
}


function addFollowupLt_old(data, cb) {
    let count = 0;
    let flagi = 0;
    for (let i = 0; i < data.category_id.length; i++) {
        let sql1 = "SELECT * FROM tbl_client_specific_master WHERE ticket_type_id = ? AND category_id = ? AND priority_id = ?";
        con.query(sql1, [data.ticket_type_id, data.category_id[i], data.priority_id], function (err, result1) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result1.length === 0) {
                    let sql = "INSERT INTO tbl_client_specific_master " +
                        " (client_id,ticket_type_id,category_id,priority_id,followup_users_name,ps_no,followup_users_phno," +
                        "followup_users_email,delete_flag,create_by_id, tbl_client_specific_mastercol) " +
                        " VALUES (?,?,?,?,?,?,?,?,?,?,?) ";
                    count++;
                    let param = [data.clientId, data.ticket_type_id, data.category_id[count - 1], data.priority_id, data.username, data.psno,
                    data.phno, data.email, 0, data.createdBy, 'Follow Up']
                    con.query(sql, param, function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (data.category_id.length === flagi + 1) {
                                cb(null, true, 'Record insert successfully');
                            }
                            flagi++;
                        }
                    });
                } else {
                    cb(null, false, "Duplicate Data");
                }
            }
        });
    }
}


function getFollowupLt(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                " (SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName, a.ps_no as psNo,a.followup_users_name as userName," +
                " (SELECT busi_priority_name FROM `BUSINESSPRIORITY` where id = a.priority_id) priority, a.followup_users_phno," +
                " a.followup_users_email from tbl_client_specific_master a where a.id > ? and a.client_id = ? and a.delete_flag = 0 " +
                " ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "SELECT * from (select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                " (SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName, a.ps_no,a.followup_users_name as userName," +
                " (SELECT busi_priority_name FROM `BUSINESSPRIORITY` where id = a.priority_id) priority, a.followup_users_phno," +
                " a.followup_users_email from tbl_client_specific_master a where a.id < ? and a.client_id = ? and a.delete_flag = 0 " +
                " ORDER BY a.id DESC LIMIT ? ) Z ORDER BY Z.id  ASC";
        }
        util.logData('followup sql===' + str);
        util.logData('>>>>>>>>>>>===data' + offset + '+++++++++++++++' + page_size);
        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from tbl_client_specific_master a where a.delete_flag = 0 and a.client_id = ?";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function deleteFollowUpLt(data, cb) {
    var sql = "Update tbl_client_specific_master set delete_flag = 1,delete_by_id = ?,delete_date=NOW() where id = ?";
    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function updateFollowupLt(data, cb) {
    var sql = 'Update tbl_client_specific_master set followup_users_name = ?, ps_no = ?,modify_by_id = ?, modify_date=NOW()  where id = ?';
    // util.logData(sql);
    con.query(sql, [data.userName, data.psNo, data.user_id, data.id], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function insertEscalationSupportGroup(data, cb) {
    let sql = "SELECT id FROM ticket_escalation_scheduler_mst where ticket_type_id=? and category_id=? and escalated_to_support_grp_id in (?) and delete_flag=?";
    con.query(sql, [data.ticket_type_id, data.category_id, data.to_support_grp, 0], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, false, "Duplicate data");
            } else {
                let sql = "INSERT INTO ticket_escalation_scheduler_mst " +
                    " (client_id, ticket_type_id, category_id, escalation_for_support_grp_id, escalated_to_support_grp_id, extra_mail_id, escalation_time_after_creation, delete_flag, create_by_id, " +
                    "notification_body, notification_subject, priority_id, notification_type) " +
                    " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ";
                let param = [data.clientId, data.ticket_type_id, data.category_id, data.for_support_grp, data.to_support_grp, data.additional_email, data.escalation_email_time, 0, data.createdBy, data.emailBody, data.subject, data.priorityId, 'email'];
                con.query(sql, param, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.insertId > 0) {
                            cb(null, true, result.insertId);
                        } else {
                            cb(null, false, "No data found....");
                        }
                    }
                });
            }
        }
    });
}

function getEscalationSupportGroup(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                " (SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName," +
                " (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalation_for_support_grp_id) forSupportGroup," +
                " (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalated_to_support_grp_id) toSupportGroup," +
                " escalation_time_after_creation, extra_mail_id, notification_subject, notification_body, " +
                " (SELECT busi_priority_name FROM BUSINESSPRIORITY where id=a.priority_id) priority from ticket_escalation_scheduler_mst a " +
                " where a.id > ? and  a.delete_flag = 0 ORDER BY a.id ASC LIMIT ?"
        } else if (paginationType == 'prev') {
            str = "SELECT * from (select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                "(SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName," +
                " (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalation_for_support_grp_id) forSupportGroup," +
                " (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalated_to_support_grp_id) toSupportGroup," +
                " escalation_time_after_creation, extra_mail_id, notification_subject, notification_body, " +
                " (SELECT busi_priority_name FROM BUSINESSPRIORITY where id=a.priority_id) priority from ticket_escalation_scheduler_mst a " +
                " where a.id < ? and  a.delete_flag = 0 ORDER BY a.id DESC LIMIT ? ) Z ORDER BY Z.id  ASC";
        }

        con.query(str, [offset, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from ticket_escalation_scheduler_mst a where a.delete_flag = 0";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function updateEscalationSupportGroup(data, cb) {
    var sql = 'Update ticket_escalation_scheduler_mst set escalation_time_after_creation = ?, extra_mail_id = ?,modify_by_id = ?, modify_date=NOW()  where id = ?';
    con.query(sql, [data.escalation_time_after_creation, data.extra_mail_id, data.user_id, data.id], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}


function deleteEscalationSupportGroup(data, cb) {
    var sql = "Update ticket_escalation_scheduler_mst set delete_flag = 1,delete_by_id = ?,delete_date=NOW() where id = ?";
    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getSupportGroupByTicketId(data, cb) {
    let sql = "SELECT d.userId FROM SupportGrpWithTicketAttributes a, ticket c ,supportGroupUser d where c.working_category = a.ticketAttrId and c.ticketTypeId = a.ticket_type " +
        " and c.clientid = a.clientId and a.DeleteFlag = '0' and d.DeleteFlag = '0' and a.supportGroupLevelId=d.supportGroupLevelId and c.id = ? GROUP BY d.userId ";
    con.query(sql, [data.ticketId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null)
        } else {
            cb(null, true, result);
        }
    })
}


function checkOfflineNotificationData(data, cb) {


    function checkComment(callback) {
        // let sql = 'select id from notification where ticketId=? and groupId=? and userId=? and noti_type="cmmnt" and isSeen="N" and DeleteFlag=0';
        // con.query(sql, [data.ticketId, data.groupId, data.user_id], function (err, result) {
        notification.find({
            ticketId: Number(data.ticketId),
            groupId: Number(data.groupId),
            userId: Number(data.user_id),
            noti_type: 'cmmnt'
        }, function (err, result) {
            if (err) {
                util.logData(err);
                callback(err, false)
            } else {
                // util.logData('checkComment:'+result.length);
                if (result.length > 0) {
                    callback(null, true)
                } else {
                    callback(null, false)
                }
            }
        })
    }

    function checkSolution(callback) {
        // let sql = 'select id from notification where ticketId=? and groupId=? and userId=? and noti_type="slprvd" and isSeen="N" and DeleteFlag=0';
        // con.query(sql, [data.ticketId, data.groupId, data.user_id], function (err, result) {
        notification.find({
            ticketId: Number(data.ticketId),
            groupId: Number(data.groupId),
            userId: Number(data.user_id),
            noti_type: 'slprvd'
        }, function (err, result) {
            if (err) {
                util.logData(err);
                callback(err, false)
            } else {
                // util.logData('checkSolution:'+result.length);
                if (result.length > 0) {
                    callback(null, true)
                } else {
                    callback(null, false)
                }
            }
        })
    }

    function checkAttachment(callback) {
        // let sql = 'select id from notification where ticketId=? and groupId=? and userId=? and noti_type="attchmnt" and isSeen="N" and DeleteFlag=0';
        // con.query(sql, [data.ticketId, data.groupId, data.user_id], function (err, result) {
        notification.find({
            ticketId: Number(data.ticketId),
            groupId: Number(data.groupId),
            userId: Number(data.user_id),
            noti_type: 'attchmnt'
        }, function (err, result) {
            if (err) {
                util.logData(err);
                callback(err, false)
            } else {
                // util.logData('checkSolution:'+result.length);
                if (result.length > 0) {
                    callback(null, true)
                } else {
                    callback(null, false)
                }
            }
        })
    }

    async.parallel([checkComment, checkSolution, checkAttachment], function (err, results) {
        if (err) {
            cb(err, false)
        } else {
            cb(null, true, { comment: results[0], solution: results[1], attach: results[2] })
        }
    })
}

function updateOfflineNotificationData(data, cb) {
    logData('updateOfflineNotificationData----------------------' + JSON.stringify(data))
    // let sql, params;
    // if (data.ticketId) {
    //     sql = 'UPDATE notification set isSeen="Y",modifydate=NOW() where ticketId=? and groupId=? and userId=? and noti_type=? and DeleteFlag=0';
    //     params = [data.ticketId, data.groupId, data.user_id, data.type + ''];
    // } else {
    //     sql = 'UPDATE notification set isSeen="Y",modifydate=NOW() where groupId=? and userId=? and noti_type=? and DeleteFlag=0 ';
    //     params = [data.groupId, data.user_id, data.type + ''];
    // }
    // con.query(sql, params, function (err, result) {
    //     if (err) {
    //         util.logData(err);
    //         cb(err, false)
    //     } else {
    //         cb(null, true)
    //     }
    // })
    let query;
    if (data.ticketId) {
        query = {
            ticketId: Number(data.ticketId),
            groupId: Number(data.groupId),
            userId: Number(data.user_id),
            noti_type: data.type
        }
    } else {
        query = {
            clientId: Number(data.clientId),
            groupId: Number(data.groupId),
            userId: Number(data.user_id),
            noti_type: data.type
        };
    }
    // util.logData(JSON.stringify(query));
    notification.remove(query, function (err, result) {
        if (err) {
            util.logData('\n Error in updateOfflineNotificationData ');
            util.logData(err);
            cb(err, false)
        } else {
            util.logData(JSON.stringify(result));
            cb(null, true);
        }
    })

}

function checkOfflineDashNotification(data, cb) {
    const query = {
        clientId: Number(data.clientId),
        groupId: Number(data.groupId),
        userId: Number(data.user_id),
        isDashboard: "Y"
    };
    // util.logData(query)
    notification.find(query, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false)
        } else {
            util.logData('checkOfflineDashNotification:' + result.length);
            if (result.length > 0) {
                cb(null, true, result)
            } else {
                cb(null, false)
            }
        }
    })

}

function getCategoryListSupportGroupWise(data, cb) {
    let sql = "SELECT ticketAttrId id,  b.ATTRVAL name FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b where a.ticketAttrId = b.id and a.DeleteFlag = '0' " +
        " and b.DeleteFlag = '0' and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ? order by b.ATTRVAL";
    con.query(sql, [data.groupId, data.clientId, data.ticketTypeId], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false)
        } else {
            cb(null, true, result)
        }
    })
}

function AdvancesearchForIncidentTicket(data, cb) {
    var page_size = data.page_size;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id,a.ticket_id,a.claimNo,ts.solutions,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) " +
            " updateDate,coalesce(c.NAME,b.NAME) updateBy,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, csat.csat_command, csat.csat_scrore ";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
        }
        sql = sql + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " ,LNT_employee_details l ";
        }
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " ,USER ul ";
        }

        sql = sql + " , ticket a LEFT JOIN USER c  on a.modifybyid = c.id LEFT JOIN " +
            " ticketSolutions ts ON a.id = ts.ticketId and ts.id in (select max(ts.id)from ticketSolutions ts,ticket a " +
            " where a.id = ts.ticketId group by ts.ticketId) LEFT JOIN ticketwise_csat_form csat ON a.id = csat.ticket_id AND csat.id in" +
            " (SELECT MAX(csat.id) FROM ticketwise_csat_form csat,ticket a WHERE a.id = csat.ticket_id GROUP BY csat.ticket_id) " +
            " where e.id in (select max(x.id) " +
            " from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) and a.createbyid = b.id and " +
            " a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' and coalesce(c.DeleteFlag,'0') = '0' " +
            " and a.DeleteFlag = '0' and  b.DeleteFlag = '0' and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " and a.id=l.ticket_id  ";
        }
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " and a.createbyid=ul.id  ";
        }
        sql = sql + " and a.clientid = ? ";

        var params = [data.ticketTypeId, data.clientId, data.clientId];

        // if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
        //     sql = sql + " and e.supportGroupLevelId = ? ";
        //     params.push(data.supportgrp_id);
        // }

        if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
            sql = sql + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
            params.push(data.supportgrp_id);
            params.push(data.supportgrp_id);
        } else {
            sql = sql + "and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
                " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) )";
            params.push(data.clientId);
            params.push(data.ticketTypeId);
            params.push(data.supportgrp_id);
        }

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        }

        if (data.ticketStatusId != '0') {
            sql = sql + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.ticketTypeId != '0') {
            sql = sql + " and a.ticketTypeId = ?  ";
            params.push(data.ticketTypeId);
        }

        if (data.busi_priority_id != '0') {
            sql = sql + " and a.busi_priority_id = ? ";
            params.push(data.busi_priority_id);
        }

        if (data.created_frdate != '' && data.created_todate != '') {
            sql = sql + " and a.createdate between ? and ? ";     //'2019-06-01' and '2019-06-05' ";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#")
            sql = sql + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }
        //1#65,2#66,3#75,4#137,5#142

        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (data.raisedType === 2 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.email_id = ?  ";
            params.push(data.raisedValue);
        }

        if (data.raisedType === 3 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.mobile_no = ?  ";
            params.push(data.raisedValue);
        }

        logData('group level===' + data.grpLevel);
        if (data.grpLevel === 0) {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql = sql + " and a.createbyid = ? ";
                params.push(data.assign_id);
            }
        } else {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql = sql + " and e.user_id = ? ";
                params.push(data.assign_id);
            }
        }

        sql = sql + " LIMIT ? OFFSET ?";
        params.push(Number(page_size));
        params.push(Number(offset));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                util.logData('1st code: --> ' + result.length);
                if (result.length > 0) {
                    var flg = 1;
                    var le = 0;
                    for (let j = 0; j < result.length; j++) {
                        let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                            "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                            "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                            " left join " +
                            "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                            "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                            " on m.wfcclient_result_id = n.wfcclient_result_id ";
                        con.query(sql12, function (err12, result12) {
                            if (err12) {
                                logData(err12);
                                cb(err12, null);
                            } else {
                                if (result12.length > 0) {
                                    result[j]['assignee'] = result12[0].assignee;
                                    result[j]['aid'] = result12[0].assigned_user_id;
                                }
                                /***********************************************************************************/
                                let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                    " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                    " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                    " and a.PKFIELDVAL = " + result[j].id + " " +
                                    " and a.serial_no = 1 " +
                                    " and a.activeFlow = '1' " +
                                    " and a.category_id in (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                                con.query(sql2, function (err2, result2) {
                                    if (err2) {
                                        logData(err2);
                                        cb(err2, null);
                                    } else {
                                        if (result2.length > 0) {
                                            result[j]['last_cat'] = result2[0].child;
                                            result[j]['last_cat_parent'] = result2[0].parent;
                                            result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                            result[j]['last_cat_parent_id'] = result2[0].category_id;
                                        }
                                        /***********************************************************************************/
                                        let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                            " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                        le++;
                                        con.query(sql1, function (err1, result1) {
                                            if (err1) {
                                                logData(err1);
                                                cb(err1, null);
                                            } else {
                                                if (result1.length < 5) {
                                                    logData('id ------>' + result[j].id + '<---length---->' + result1.length)
                                                }

                                                // if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, result);
                                                }
                                                flg++;
                                                /* } else {
                                                     cb(null, true, []);
                                                 }*/

                                            }
                                        });
                                        /***********************************************************************************/

                                    }
                                });
                                /***********************************************************************************/
                            }
                        });
                    }
                } else {
                    cb(null, []);
                }
                // cb(null, true, result);
            }
        });
    }

    function totalData(cb) {
        let sql1;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql1 = "SELECT count(a.id) count";
        // if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
        //     sql1 = sql1 + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
        // }
        sql1 = sql1 + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " ,LNT_employee_details l ";
        }
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql1 = sql1 + " ,USER ul ";
        }

        sql1 = sql1 + " , ticket a LEFT JOIN USER c  on a.modifybyid = c.id LEFT JOIN " +
            " ticketSolutions ts ON a.id = ts.ticketId and ts.id in (select max(ts.id)from ticketSolutions ts,ticket a " +
            " where a.id = ts.ticketId group by ts.ticketId) LEFT JOIN ticketwise_csat_form csat ON a.id = csat.ticket_id AND csat.id in" +
            " (SELECT MAX(csat.id) FROM ticketwise_csat_form csat,ticket a WHERE a.id = csat.ticket_id GROUP BY csat.ticket_id) where e.id in (select max(x.id) " +
            " from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) and a.createbyid = b.id and " +
            " a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' and coalesce(c.DeleteFlag,'0') = '0' " +
            " and a.DeleteFlag = '0' and  b.DeleteFlag = '0' and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " and a.id=l.ticket_id  ";
        }
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql1 = sql1 + " and a.createbyid=ul.id  ";
        }
        sql1 = sql1 + " and a.clientid = ? ";

        var params = [data.ticketTypeId, data.clientId, data.clientId];

        // if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
        //     sql = sql + " and e.supportGroupLevelId = ? ";
        //     params.push(data.supportgrp_id);
        // }

        if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
            sql1 = sql1 + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
            params.push(data.supportgrp_id);
            params.push(data.supportgrp_id);
        } else {
            sql1 = sql1 + "and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
                " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) )";
            params.push(data.clientId);
            params.push(data.ticketTypeId);
            params.push(data.supportgrp_id);
        }

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        }

        if (data.ticketStatusId != '0') {
            sql1 = sql1 + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.ticketTypeId != '0') {
            sql1 = sql1 + " and a.ticketTypeId = ?  ";
            params.push(data.ticketTypeId);
        }

        if (data.busi_priority_id != '0') {
            sql1 = sql1 + " and a.busi_priority_id = ? ";
            params.push(data.busi_priority_id);
        }

        if (data.created_frdate != '' && data.created_todate != '') {
            sql1 = sql1 + " and a.createdate between ? and ? ";     //'2019-06-01' and '2019-06-05' ";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#")
            sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }
        //1#65,2#66,3#75,4#137,5#142

        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql1 = sql1 + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (data.raisedType === 2 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql1 = sql1 + " and l.email_id = ?  ";
            params.push(data.raisedValue);
        }

        if (data.raisedType === 3 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql1 = sql1 + " and l.mobile_no = ?  ";
            params.push(data.raisedValue);
        }

        // if (data.raisedType === 1 && (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1')) {
        //     sql = sql + " and ul.NAME = ?  ";
        //     params.push(data.raisedValue);
        // }
        //
        // if (data.raisedType === 2 && (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1')) {
        //     sql = sql + " and ul.USERMAIL = ?  ";
        //     params.push(data.raisedValue);
        // }
        //
        // if (data.raisedType === 3 && (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1')) {
        //     sql = sql + " and ul.USERMOBILENO = ?  ";
        //     params.push(data.raisedValue);
        // }

        logData('group level===' + data.grpLevel);
        if (data.grpLevel === 0) {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql1 = sql1 + " and a.createbyid = ? ";
                params.push(data.assign_id);
            }
        } else {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql1 = sql1 + " and e.user_id = ? ";
                params.push(data.assign_id);
            }
        }

        //sql1 = sql1 + " order by e.id desc";

        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function getMenuPermissionDtls(data, cb) {
    // data.id = 2;
    logData('------------------------getMenuPermissionDtls-------------' + JSON.stringify(data));
    var urlPath = data.url.split('?')[0];

    function checkNoMenuPermission(callback) {
        let matched = false;
        let sql1 = "SELECT id FROM client_specific_url WHERE url = ? AND client_id = (SELECT CLIENTID FROM USER WHERE id = ? AND DeleteFlag = '0') AND DeleteFlag = '0'";
        con.query(sql1, [urlPath, data.user_id], function (err, result) {
            if (err) {
                logData(err);
                callback(err);
            } else {
                if (result.length > 0) {
                    callback(null, { checking: false, matched: true });
                } else {
                    callback(null, { checking: true, matched: false });
                }
            }
        });
    }

    function checkUserWisePermission(value, callback) {
        if (value.checking) {
            let sql = " SELECT a.parent_menu_id parent ,a.id child,sequence_no,a.menu_desc label, coalesce(b.URL,'') path " +
                " FROM tbl_client_menu_details a left join URLKEY b on a.url_id = b.id " +
                " WHERE a.client_id= (SELECT CLIENTID FROM USER where id =? ) and a.DeleteFlag = '0' and a.id in (SELECT menu_id FROM MODULECLIENTUSERMAP " +
                " where client_id = (SELECT CLIENTID FROM USER where id =? ) and user_id = ? and DeleteFlag = '0') ";
            con.query(sql, [data.user_id, data.user_id, data.user_id], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err);
                } else {
                    // done(null, result);
                    if (result.length > 0) {
                        let matched = false;
                        for (let i = 0; i < result.length; i++) {
                            if (result[i].path === urlPath) {
                                matched = true;
                                break;
                            }
                        }
                        if (matched) {
                            callback(null, { checking: false, matched: true });
                        } else {
                            callback(null, { checking: false, matched: false });
                        }
                    } else {
                        callback(null, { checking: true, matched: false })
                    }
                }
            });
        } else {
            callback(null, value)
        }
    }

    function checkRoleWisePermission(value, callback) {
        if (value.checking) {
            let sql = " SELECT a.parent_menu_id parent ,a.id child,sequence_no,a.menu_desc label, coalesce(b.url,'') path " +
                " FROM tbl_client_menu_details a left join URLKEY b on a.url_id = b.id " +
                " WHERE a.client_id= (SELECT CLIENTID FROM USER where id =? ) and a.DeleteFlag = '0' and a.id in (SELECT menuId FROM MODULECLIENTUSERROLEMAP where clientId = (SELECT CLIENTID FROM USER where id =? ) " +
                " and roleId in (SELECT ROLEID FROM ROLEUSER where CLIENTID = (SELECT CLIENTID FROM USER where id =? ) and USERID =? and DeleteFlag= 0) " +
                "   and DeleteFlag = '0')";
            con.query(sql, [data.user_id, data.user_id, data.user_id, data.user_id], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err);
                } else {
                    // done(null, result);
                    if (result.length > 0) {
                        let matched = false;
                        for (let i = 0; i < result.length; i++) {
                            if (result[i].path === urlPath) {
                                matched = true;
                                break;
                            }
                        }
                        if (matched) {
                            callback(null, { checking: false, matched: true });
                        } else {
                            callback(null, { checking: false, matched: false });
                        }
                    } else {
                        callback(null, { checking: true, matched: false })
                    }
                }
            });
        } else {
            callback(null, value)
        }
    }

    /*function checkClientWisePermission(value, callback) {
        if (value.checking) {
            var sql = " SELECT a.parent_menu_id parent ,a.id child,sequence_no,a.menu_desc label, coalesce(b.url,'') path " +
                " FROM tbl_client_menu_details a " +
                " left join URLKEY b " +
                " on a.url_id = b.id " +
                " WHERE a.client_id=(SELECT CLIENTID FROM USER where id =? )  and a.DeleteFlag = '0' ";
            con.query(sql, [data.user_id], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err);
                } else {
                    // done(null, result);
                    if (result.length > 0) {
                        let matched = false;
                        for (let i = 0; i < result.length; i++) {
                            if (result[i].path === urlPath) {
                                matched = true;
                                break;
                            }
                        }
                        if (matched) {
                            callback(null, {checking: false, matched: true});
                        } else {
                            callback(null, {checking: false, matched: false});
                        }
                    } else {
                        callback(null, {checking: true, matched: false})
                    }
                }
            });
        } else {
            callback(null, value)
        }
    }*/

    async.waterfall([checkNoMenuPermission, checkUserWisePermission, checkRoleWisePermission],
        function (err, result) {
            // util.logData('get menu permition details ', JSON.stringify(result));
            if (err) {
                logData(err);
                cb(err)
            } else {
                cb(null, result.matched);
            }
        });
}

function getChatBotSearchTicket(data, cb) {
    let sql;
    util.logData('data===' + JSON.stringify(data));
    sql = "SELECT a.ticket_id,a.createdate createdSince,f.ATTRVAL status, (SELECT sg.LEVELSHORTDESC FROM " +
        " SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) escalated_to_grp_nm " +
        " FROM USER b, WFCCLIENTRESULT e, " +
        " TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id where e.id in (select max(x.id) " +
        " from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) and a.createbyid = b.id and " +
        " a.id = e.PKFIELDVAL and a.tstatus = f.id and b.DeleteFlag = '0' and coalesce(c.DeleteFlag,'0') = '0' " +
        " and a.DeleteFlag = '0' and  b.DeleteFlag = '0' and g.id = e.supportGroupLevelId and a.clientid = ? and " +
        " a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (0))";
    var params = [data.ticketTypeId, data.clientId, data.clientId];

    if (data.ticketAttr !== '') {
        sql = sql + " and FIND_IN_SET(a.ticket_id , ?) ";
        params.push(data.ticketAttr);
    }

    // if (data.supportgrp_id != '0') {
    //     sql = sql + " and e.supportGroupLevelId = ? ";
    //     params.push(data.supportgrp_id);
    // }

    if (data.ticketTypeId != '0') {
        sql = sql + " and a.ticketTypeId = ?  ";
        params.push(data.ticketTypeId);
    }

    if (data.user_id != undefined && data.user_id != '0') {
        sql = sql + " and a.createbyid = ? ";
        params.push(data.user_id);
    }

    sql = sql + " order by e.id desc ";
    util.logData('sql===' + sql);
    con.query(sql, params, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            util.logData('1st code: --> ' + result.length);
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, 'No data found');
            }

        }
    })
}

function getStatusByTicketTypeIncidentLt(data, cb) {
    var data = preventSqlInjection(data);
    if (data.ticketTypeSeqNo === '1') {
        var sql = " SELECT a.id id, a.ATTRVAL status " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=? " + " " +
            " and a.ATTRID = 2 and a.sequence_no in(0,1,2,7,8,12,13,15,16)";
    } else if (data.ticketTypeSeqNo === '2') {
        var sql = " SELECT a.id id, a.ATTRVAL status " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=?" + " " +
            " and a.ATTRID = 2 and a.sequence_no BETWEEN 101 and 200";
    }
    con.query(sql, [data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })

}

function saveToken(data, cb) {
    let sql = "SELECT id from auth_token where userId=? ";
    con.query(sql, [data.user_id], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false)
        } else {
            if (result.length > 0) {
                let sql1 = 'UPDATE auth_token SET token=?,createdtime=NOW() where userId=?';
                con.query(sql1, [data.token, data.user_id], function (err) {
                    if (err) {
                        util.logData(err);
                        cb(err, false)
                    } else {
                        cb(null, true)
                    }
                })
            } else {
                let sql1 = 'INSERT into auth_token(userId,token) values(?,?)';
                con.query(sql1, [data.user_id, data.token], function (err) {
                    if (err) {
                        util.logData(err);
                        cb(err, false)
                    } else {
                        cb(null, true)
                    }
                })
            }
        }
    })
}

function encryptData(data) {
    return btoa(util.xorEncode(data, SECRET_TOKEN))
}

function decryptData(data) {
    return util.xorEncode(atob(data), SECRET_TOKEN);
}

function getTicketCreateLoadingDtlsForSearch(data, cb) {
    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = ? and ticket_type = ? ORDER BY sequence_no";
        con.query(sql, [data.clientId, data.ticket_type], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                callback(null, result);
            }
        });
    }

    function getCategorySupportGroupWise_old(callback) {
        if (data.islead === 'true') {

            if (data.cat2 === '0') {
                callback(null, []);
            } else {
                let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = ? and PARENT_ID = ? and ATTRID = 1 and DeleteFlag = '0'";
                con.query(sql, [data.clientId, data.cat2], function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        callback(null, result);
                    }
                });
            }



        } else {
            let sql = "SELECT ticketAttrId id,  b.ATTRVAL title FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b where a.ticketAttrId = b.id and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ? ";
            con.query(sql, [data.groupId, data.clientId, data.ticket_type], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null)
                } else {
                    callback(null, result)
                }
            })
        }
    }


    function getCategorySupportGroupWise(callback) {
        if (data.islead === 'true') {

            if (data.cat2 === '0') {
                callback(null, []);
            } else {
                let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = ? and PARENT_ID = ? and ATTRID = 1 and DeleteFlag = '0'";
                con.query(sql, [data.clientId, data.cat2], function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        callback(null, result);
                    }
                });
            }
        } else {
            if (data.cat2 === '0') {
                callback(null, []);
            } else {
                let sql = "SELECT ticketAttrId id,  b.ATTRVAL title FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b where a.ticketAttrId = b.id and a.DeleteFlag = '0' " +
                    " and b.DeleteFlag = '0' and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ? and b.PARENT_ID = ?";
                con.query(sql, [data.groupId, data.clientId, data.ticket_type, data.cat2], function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null)
                    } else {
                        callback(null, result)
                    }
                })
            }
        }
    }





    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID= ? and CLIENTID= ?';
        con.query(sql, [data.ticket_type, data.clientId], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getCategory1(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat1], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });

    }

    if (data.cat2 === '0') {
        function getCategory2(callback) {
            let sql = 'SELECT id, ATTRVAL title FROM TICKETATTRIBUTES where DeleteFlag = 0  and CLIENTID = ? and ATTRID = 1 and attrHeaderMstId in (SELECT id FROM ' +
                ' attributesHeaderMst where sequence_no = 2 and DeleteFlag = 0 and ATTRID = 1 and CLIENTID = ?  and ticket_type = ?)';
            con.query(sql, [data.clientId, data.clientId, data.ticket_type], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, result);
                }
            });
        }
    } else {
        function getCategory2(callback) {
            let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
            con.query(sql, [data.cat2], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, result);
                }
            });
        }
    }



    async.parallel([getAttributesHeaderMst, getCategorySupportGroupWise, getSubTicketType, getCategory1, getCategory2], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[2].error) {
                cb(null, false, results[2].error)
            } else {
                let arr = [];
                for (let i = 0; i < results[0].length; i++) {
                    if (i == 0) {
                        let inner = [];
                        inner = results[3];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 1) {
                        let inner = [];
                        inner = results[4];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 2) {
                        let inner = [];
                        inner = results[1];
                        inner.unshift(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: false })
                    } else {
                        arr.push({ id: i + 1, options: [results[0][i]], isDisabled: false })
                    }
                }
                cb(null, true, [{
                    attribute: arr,
                    // clientId: step1Result[0].CLIENTID,
                    // val: results[2],
                    subtype: results[2]
                }])
                // callback(null, [{
                //     attribute: arr,
                //     // clientId: step1Result[0].CLIENTID,
                //     val: res
                //     ults[2],
                //     subtype: results[3]
                // }])
            }
        }
    })

}




function getTicketCreateLoadingDtlsForSearch_old(data, cb) {
    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = ? and ticket_type = ? ORDER BY sequence_no";
        con.query(sql, [data.clientId, data.ticket_type], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                callback(null, result);
            }
        });
    }

    function getCategorySupportGroupWise(callback) {
        if (data.islead === 'true') {
            let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = ? and PARENT_ID = ? and ATTRID = 1 and DeleteFlag = '0'";
            con.query(sql, [data.clientId, data.cat2], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null);
                } else {
                    callback(null, result);
                }
            });
        } else {
            let sql = "SELECT ticketAttrId id,  b.ATTRVAL title FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b where a.ticketAttrId = b.id and a.DeleteFlag = '0' " +
                " and b.DeleteFlag = '0' and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ? ";
            con.query(sql, [data.groupId, data.clientId, data.ticket_type], function (err, result) {
                if (err) {
                    logData(err);
                    callback(err, null)
                } else {
                    callback(null, result)
                }
            })
        }
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID= ? and CLIENTID= ?';
        con.query(sql, [data.ticket_type, data.clientId], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getCategory1(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat1], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });

    }

    function getCategory2(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat2], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAttributesHeaderMst, getCategorySupportGroupWise, getSubTicketType, getCategory1, getCategory2], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[2].error) {
                cb(null, false, results[2].error)
            } else {
                let arr = [];
                for (let i = 0; i < results[0].length; i++) {
                    if (i == 0) {
                        let inner = [];
                        inner = results[3];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 1) {
                        let inner = [];
                        inner = results[4];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 2) {
                        let inner = [];
                        inner = results[1];
                        inner.unshift(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: false })
                    } else {
                        arr.push({ id: i + 1, options: [results[0][i]], isDisabled: false })
                    }
                }
                cb(null, true, [{
                    attribute: arr,
                    // clientId: step1Result[0].CLIENTID,
                    // val: results[2],
                    subtype: results[2]
                }])
                // callback(null, [{
                //     attribute: arr,
                //     // clientId: step1Result[0].CLIENTID,
                //     val: res
                //     ults[2],
                //     subtype: results[3]
                // }])
            }
        }
    })

}


function searchTicketById_old(data, cb) {
    logData("\n\nAdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    // logData('nextOffset-----------------' + nextOffset);
                    // logData('previousOffset-----------------' + previousOffset);
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
            " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
        }
        sql = sql + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " ,LNT_employee_details l ";
        }
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " ,USER ul ";
        }

        sql = sql + " , ticket a   " +
            " where a.id = e.PKFIELDVAL ";

        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " and a.id=l.ticket_id  ";
        }

        sql = sql + " and a.clientid = ?  and a.ticketTypeId = ?  ";
        var params = [data.clientId, data.ticketTypeId];
        sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id  ";
        sql = sql + " and a.DeleteFlag = '0' ";
        sql = sql + " and e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) " +
            "  and g.id = e.supportGroupLevelId ";
        params.push(data.ticketTypeId);
        params.push(data.clientId);

        if (data.ticketStatusId != '0') {
            sql = sql + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " and a.createbyid=ul.id  ";
        }

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
        }


        if (data.ticket_id != '0') {
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }


        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (paginationType == 'prev') {
            sql = sql + " and a.id<?  ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  ASC";
        } else {
            sql = sql + " and a.id>?  ORDER BY a.id  LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --> ' + result.length);
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        //let sql1;
        util.logData('\n\n totalData-------------------' + JSON.stringify(data))
        let sql1 = "select count(distinct a.id) count from WFCCLIENTRESULT e ";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " ,LNT_employee_details l ";
        }


        sql1 = sql1 + " , ticket a where  a.id = e.PKFIELDVAL " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " and a.id=l.ticket_id  ";
        }

        sql1 = sql1 + " and a.clientid = ?  and a.ticketTypeId = ?  ";

        var params = [data.clientId, data.clientId, data.ticketTypeId];

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        }

        if (data.ticket_id != '0') {
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql1 = sql1 + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (data.ticketStatusId != '0') {
            sql1 = sql1 + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        sql1 = sql1 + "and e.id in (select max(x.id) from WFCCLIENTRESULT x, " +
            " ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) ";
        params.push(data.ticketTypeId, data.clientId);

        logData("tot_query---------------------->" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                //util.logData('result1=' + done.length());
                cb(null, done);
            }
        });
    }
}














function searchTicketById(data, cb) {
    logData("\n\nAdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    // logData('nextOffset-----------------' + nextOffset);
                    // logData('previousOffset-----------------' + previousOffset);
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
            " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
        }
        sql = sql + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " ,LNT_employee_details l ";
        }
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " ,USER ul ";
        }

        sql = sql + " , ticket a   " +
            " where a.id = e.PKFIELDVAL ";

        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " and a.id=l.ticket_id  ";
        }

        sql = sql + " and a.clientid = ?  and a.ticketTypeId = ?  ";
        var params = [data.clientId, data.ticketTypeId];
        sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id  ";
        sql = sql + " and a.DeleteFlag = '0' ";
        sql = sql + " and e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) " +
            "  and g.id = e.supportGroupLevelId ";
        params.push(data.ticketTypeId);
        params.push(data.clientId);

        if (data.ticketStatusId != '0') {
            sql = sql + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " and a.createbyid=ul.id  ";
        }

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
        }


        if (data.ticket_id != '0') {
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }


        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (paginationType == 'prev') {
            sql = sql + " and a.id<?  ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  ASC";
        } else {
            sql = sql + " and a.id>?  ORDER BY a.id  LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --> ' + result.length);
                if (result.length > 0) {
                    const ticketIds = [];
                    for (let i = 0; i < result.length; i++) {
                        ticketIds.push(result[i].id);
                    }
                    let sql2 = "SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) category " +
                        " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where aa.ticketId in (" + ticketIds + ") and aa.parent_categoryId = bb.id and " +
                        " aa.categoryId = cc.id group by aa.ticketId;";
                    util.logData('1st result length: --> ' + sql2);
                    con.query(sql2, function (err2, result2) {
                        if (err2) {
                            util.logData(err2);
                            cb(err2, null);
                        } else {
                            util.logData('2nd result length: --> ' + JSON.stringify(result2));
                            for (let j = 0; j < result2.length; j++) {
                                result[j]['category'] = result2[j].category;
                            }
                            cb(null, result);
                        }
                    });
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        //let sql1;
        util.logData('\n\n totalData-------------------' + JSON.stringify(data))
        let sql1 = "select count(distinct a.id) count from WFCCLIENTRESULT e ";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " ,LNT_employee_details l ";
        }


        sql1 = sql1 + " , ticket a where  a.id = e.PKFIELDVAL " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " and a.id=l.ticket_id  ";
        }

        sql1 = sql1 + " and a.clientid = ?  and a.ticketTypeId = ?  ";

        var params = [data.clientId, data.clientId, data.ticketTypeId];

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        }

        if (data.ticket_id != '0') {
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql1 = sql1 + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (data.ticketStatusId != '0') {
            sql1 = sql1 + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        sql1 = sql1 + "and e.id in (select max(x.id) from WFCCLIENTRESULT x, " +
            " ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) ";
        params.push(data.ticketTypeId, data.clientId);

        logData("tot_query---------------------->" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                //util.logData('result1=' + done.length());
                cb(null, done);
            }
        });
    }
}



//anand

function searchTicketById_old_march(data, cb) {
    logData("\n\nAdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    // logData('nextOffset-----------------' + nextOffset);
                    // logData('previousOffset-----------------' + previousOffset);
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
            " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
        }
        sql = sql + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " ,LNT_employee_details l ";
        }
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " ,USER ul ";
        }

        sql = sql + " , ticket a   " +
            " where a.id = e.PKFIELDVAL ";

        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql = sql + " and a.id=l.ticket_id  ";
        }

        sql = sql + " and a.clientid = ?  and a.ticketTypeId = ?  ";
        var params = [data.clientId, data.ticketTypeId];
        sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id  ";
        sql = sql + " and a.DeleteFlag = '0' ";
        sql = sql + " and e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) " +
            "  and g.id = e.supportGroupLevelId ";
        params.push(data.ticketTypeId);
        params.push(data.clientId);

        if (data.ticketStatusId != '0') {
            sql = sql + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " and a.createbyid=ul.id  ";
        }

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
        }


        if (data.ticket_id != '0') {
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }


        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (paginationType == 'prev') {
            sql = sql + " and a.id<?  ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  ASC";
        } else {
            sql = sql + " and a.id>?  ORDER BY a.id  LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --> ' + result.length);
                if (result.length > 0) {
                    const ticketIds = [];
                    for (let i = 0; i < result.length; i++) {
                        ticketIds.push(result[i].id);
                    }
                    let sql2 = "SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) category " +
                        " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where aa.ticketId in (" + ticketIds + ") and aa.parent_categoryId = bb.id and " +
                        " aa.categoryId = cc.id group by aa.ticketId;";
                    util.logData('1st result length: --> ' + sql2);
                    con.query(sql2, function (err2, result2) {
                        if (err2) {
                            util.logData(err2);
                            cb(err2, null);
                        } else {
                            util.logData('2nd result length: --> ' + JSON.stringify(result2));
                            for (let j = 0; j < result2.length; j++) {
                                result[j]['category'] = result2[j].category;
                            }
                            cb(null, result);
                        }
                    });
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        //let sql1;
        util.logData('\n\n totalData-------------------' + JSON.stringify(data))
        let sql1 = "select count(distinct a.id) count from WFCCLIENTRESULT e ";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " ,LNT_employee_details l ";
        }


        sql1 = sql1 + " , ticket a where  a.id = e.PKFIELDVAL " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";
        if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
            sql1 = sql1 + " and a.id=l.ticket_id  ";
        }

        sql1 = sql1 + " and a.clientid = ?  and a.ticketTypeId = ?  ";

        var params = [data.clientId, data.clientId, data.ticketTypeId];

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        }

        if (data.ticket_id != '0') {
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql1 = sql1 + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }

        if (data.ticketStatusId != '0') {
            sql1 = sql1 + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        sql1 = sql1 + "and e.id in (select max(x.id) from WFCCLIENTRESULT x, " +
            " ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) ";
        params.push(data.ticketTypeId, data.clientId);

        logData("tot_query---------------------->" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                //util.logData('result1=' + done.length());
                cb(null, done);
            }
        });
    }
}


function getUrlList(data, cb) {
    // var data = preventSqlInjection(data);
    var sql = " SELECT id, name from url where DeleteFlag = '0'";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })

}


function addClientSpecificUrl(data, cb) {
    var str = "Select * from client_specific_url where DeleteFlag = '0' " +
        " and url_id = ? and client_id = ? and isAdmin =?";
    con.query(str, [data.urlId, data.clientId, data.isAdmin], function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result.length == 0) {
                let params, sql;
                if (data.isAdmin) {
                    sql = 'Insert into client_specific_url (client_id, url_id , url, createbyid,isAdmin) values (?,?,?,?,?)';
                    params = [data.clientId, data.urlId, data.url, data.createdBy, data.isAdmin];
                } else {
                    sql = 'Insert into client_specific_url (client_id, url_id , url, createbyid) values (?,?,?,?)';
                    params = [data.clientId, data.urlId, data.url, data.createdBy];
                }
                con.query(sql, params, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });
            } else {
                cb(null, false, "Duplicate data");
            }
        }
    });

}


function getClientSpecificUrl(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT id,isAdmin, (select NAME from CLIENT where CLIENT.id = a.client_id) client_name, (select name from url where url.id = a.url_id) url_key ,url FROM `client_specific_url` a where a.id > ? and a.DeleteFlag = 0 " +
                " ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT id,isAdmin, (select NAME from CLIENT where CLIENT.id = a.client_id) client_name, (select name from url where url.id = a.url_id) url_key ,url FROM `client_specific_url` a where a.id < ? and a.DeleteFlag = 0 " +
                " ORDER BY a.id Desc LIMIT ? ) Z ORDER BY Z.id  ASC";
        }
        con.query(str, [offset, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                for (let i = 0; i < done.length; i++) {
                    done[i].isAdmin = stringToBool(done[i].isAdmin);
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from client_specific_url a where a.DeleteFlag = 0";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function deleteClientSpecificUrl(data, cb) {
    var sql = "Update client_specific_url set DeleteFlag = 1,delete_by_id = ?,DeleteDate=NOW() where id = ?";
    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function deleteFunctionalityDetails(data, cb) {
    var sql = "Update TicketFuctionalityDetails set DeleteFlag = 1,delete_by_id = ?,DeleteDate=NOW() where id = ?";

    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getDistinctUrlKey(data, cb) {
    let sql = 'SELECT u.id , u.URLKEY as `urlKey`,u.URL as `url`,u.URLDESCRIPTION as `urlDesc` FROM MODULEURLMAP m,URLKEY u where m.CLIENTID=? and m.MODULEID=? and u.id=m.URLID and m.DeleteFlag=0 and u.DeleteFlag=0;'
    con.query(sql, [data.clientId, data.moduleId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function getSscReport(data, cb) {
    request
        .get('http://10.0.1.101:9080/ifixLNTReportApplication/lntReportInDetailsExcel?fromDt=' + data.fromDt + '&toDt=' + data.toDt + '&clientid=' + data.clientid + '&ticket_type=' + data.ticket_type + '&user_id=' + data.user_id)
        .end((err, resp) => {
            if (err) {
                // logData(err);
                // cb(null, true);
            } else {
                // cb(null, true);
            }
        });
    cb(null, true);
}

function getPSDetails(data, cb) {
    request
        .get('https://sscinternalapps.larsentoubro.com/employeedata/employeecontact.asmx/getPersonalDetails?psno=' + data.psNo)
        .end(function (err, response) {
            if (err) {
                util.logData('---error--------');
                util.logData(err);
                cb(err, false)
            } else {
                util.logData("->>>>>>" + JSON.stringify(response));
                var data = response.text;
                cb(null, true, data);
            }
        });
    // request('https://sscinternalapps.larsentoubro.com/employeedata/employeecontact.asmx/getPersonalDetails?psno=20052575', function (error, response, body) {
    //     util.logData('error:', error); // Print the error if one occurred
    //     util.logData('statusCode:', response && response.statusCode); // Print the response status code if a response was received
    //     util.logData('body:', body); // Print the HTML for the Google homepage.
    //     cb(null, true, body);
    // });
}

function getSscReportList(data, cb) {
    // data.reportType (1=SSC report, 2=Temp SSC report)
    var param = [data.clientId, data.user_id];
    let sql = '';
    logData('report type=' + data.reportType + '===============' + typeof data.reportType);
    if (data.reportType === '1') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('WIP');
    } else if (data.reportType === '2') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('TEMP');
    } else if (data.reportType === '3') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('WIPNEW');
    } else if (data.reportType === '4') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('TEMPNEW');
    } else if (data.reportType === '5') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('hybrid');
    } else if (data.reportType === '6') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('single');
    } else if (data.reportType === '7') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('multi');
    } else if (data.reportType === '8') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('hybrdOpt');
    }
    else if (data.reportType === '9') {
        sql = 'SELECT id, document_nm, document_path, createdate, fromdt, todt FROM `report_logs_dtls` where client_id = ? and createbyid = ? and reportType = ? and ' +
            ' delete_flag=0 order by id desc LIMIT 10 OFFSET 0';
        param.push('autoTktRpt');
    }
    logData('param===' + JSON.stringify(param));
    con.query(sql, param, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function getMappedLeafMenu(data, cb) {

    var str = " SELECT a.client_id,a.parent_menu_id as  parent ,a.id id,a.menu_desc name, a.sequence_no " +
        " FROM tbl_client_menu_details a " +
        " WHERE a.client_id=? " +
        " and a.module_id = ? " +
        " and a.DeleteFlag = '0' and a.leafnode ='true'";
    con.query(str, [data.clientId, data.moduleId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function AdvancesearchTicket(data, cb) {
    logData("\n\n123AdvancesearchTicket--------start----------------------" + new Date());

    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    function getWorkingCategory(done) {
        let ticketAttrIdList = "";

        if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
            done(null, ticketAttrIdList);
        } else {
            let selectSql = "SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
                " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0)";
            con.query(selectSql, [data.clientId, data.ticketTypeId, data.supportgrp_id], function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    if (result1.length > 0) {
                        let i = 0;

                        for (; i < (result1.length - 1); i++) {
                            ticketAttrIdList += result1[i].ticketAttrId + ",";
                        }
                        ticketAttrIdList += result1[i].ticketAttrId;
                        done(null, ticketAttrIdList);
                    } else {
                        done(null, ticketAttrIdList);
                    }
                }
            });
        }

    }


    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));

                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    // logData('\n\n\n********************************************************');
                    // logData('totalPage-----------------'+totalPage);
                    // logData('dataObj-----------------'+dataObj.length);
                    // logData('search result====' + JSON.stringify(results.dataObj[0].id));
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    logData('nextOffset-----------------' + nextOffset);
                    logData('previousOffset-----------------' + previousOffset);
                }
                //results['totalPage'] = 0;
                cb(null, true, results);
            }
        });

    function dataObj(cb) {

        async.waterfall([
            getWorkingCategory,
            function getDataObj(workingCategoryList, done) {
                let sql;
                util.logData('+++++++++++++++' + JSON.stringify(data))
                sql = "SELECT distinct a.id id, a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
                    " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
                    " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
                    " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
                    " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
                  //  " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
		    " (select MAX(ub.NAME) from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql = sql + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
                }
                sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
                    " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql = sql + " ,LNT_employee_details l ";
                }
                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql = sql + " ,USER ul ";
                }

                sql = sql + " , ticket a where  a.clientid = ?  and a.ticketTypeId = ? " +
                    " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and DeleteFlag = '0' and sequence_no in (21,22)) " +
                    " and a.DeleteFlag = '0' ";

                var params = [data.clientId, data.ticketTypeId, data.clientId];

                if (data.created_frdate != '' && data.created_todate != '') {
                    // sql = sql + " and a.createdate between ? and ? ";
                    sql = sql + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
                    params.push(data.created_frdate + " 00:00:00");
                    params.push(data.created_todate + " 23:59:00");
                }

                sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id and a.id = e.PKFIELDVAL ";

                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql = sql + " and a.id=l.ticket_id  ";
                }

                if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
                    sql = sql + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
                    params.push(data.supportgrp_id);
                    params.push(data.supportgrp_id);
                } else {
                    sql = sql + "and a.working_category in (" + workingCategoryList + ")";
                    //params.push(data.clientId);
                    //params.push(data.ticketTypeId);
                    //params.push(data.supportgrp_id);
                }
                sql = sql + " and g.id = e.supportGroupLevelId ";

                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql = sql + " and a.createbyid=ul.id  ";
                }

                if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
                    sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
                }

                if (data.ticketStatusId != '0') {
                    sql = sql + " and a.tstatus = ? ";
                    params.push(data.ticketStatusId);
                }

                if (data.ticket_id != '0') {
                    sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
                    params.push(data.ticket_id);
                }


                if (data.busi_priority_id != '0') {
                    sql = sql + " and a.busi_priority_id = ? ";
                    params.push(data.busi_priority_id);
                }

                if (data.catFilterLt != '' && data.catFilterLt != '0') {
                    var cat = data.catFilterLt.split(",");
                    var catVal = cat[cat.length - 1].split("#")
                    sql = sql + " and a.categoryDtlsLt like '%#?%' ";
                    params.push(Number(catVal[1]));
                }
                //1#65,2#66,3#75,4#137,5#142

                if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
                    sql = sql + " and l.psno = ?  ";
                    params.push(data.raisedValue);
                }

                if (data.grpLevel === 0) {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql = sql + " and a.createbyid = ? ";
                        params.push(data.assign_id);
                    }
                } else {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql = sql + " and e.user_id = ? ";
                        params.push(data.assign_id);
                    }
                }

                if (paginationType == 'prev') {
                    sql = sql + " and a.id<?  ORDER BY a.id desc LIMIT ?";
                    sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  ASC";
                } else {
                    sql = sql + " and a.id>?  ORDER BY a.id  LIMIT ?";
                }

                params.push(Number(offset));
                params.push(Number(page_size));

                util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
                util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
                con.query(sql, params, function (err, result) {
                    if (err) {
                        util.logData(err);
                        cb(err, false);
                    } else {
                        util.logData('1st result length: --> ' + result.length);
                        if (result.length > 0) {
                            const ticketIds = [];
                            for (let i = 0; i < result.length; i++) {
                                ticketIds.push(result[i].id);
                            }
                            let sql2 = "SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) category " +
                                " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where aa.ticketId in (" + ticketIds + ") and aa.parent_categoryId = bb.id and " +
                                " aa.categoryId = cc.id group by aa.ticketId;";
                            util.logData('1st result length: --> ' + sql2);
                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    util.logData(err2);
                                    cb(err2, null);
                                } else {
                                    util.logData('2nd result length: --> ' + JSON.stringify(result2));
                                    for (let j = 0; j < result2.length; j++) {
                                        result[j]['category'] = result2[j].category;
                                    }
                                    cb(null, result);
                                }
                            });
                        } else {
                            cb(null, []);
                        }
                    }
                });
            }
        ],
            function (err) {
                if (err) {
                    throw new Error(err);
                } else {
                    util.logData(err);
                }
            });

    }

    function totalData(cb) {
        async.waterfall([
            getWorkingCategory,
            function countTotalData(workingCategoryList, done) {
                //let sql1;
                util.logData('\n\n totalData-------------------' + JSON.stringify(data))
                let sql1 = "select count(distinct a.id) count ";

                sql1 = sql1 + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
                    " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql1 = sql1 + " ,LNT_employee_details l ";
                }
                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql1 = sql1 + " ,USER ul ";
                }

                sql1 = sql1 + " , ticket a where  a.clientid = ?  and a.ticketTypeId = ? " +
                    " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and DeleteFlag = '0' and sequence_no in (21,22)) " +
                    " and a.DeleteFlag = '0' ";

                var params = [data.clientId, data.ticketTypeId, data.clientId];

                if (data.created_frdate != '' && data.created_todate != '') {
                    sql1 = sql1 + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
                    params.push(data.created_frdate + " 00:00:00");
                    params.push(data.created_todate + " 23:59:00");
                }

                sql1 = sql1 + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id and a.id = e.PKFIELDVAL ";

                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql1 = sql1 + " and a.id=l.ticket_id  ";
                }

                if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
                    sql1 = sql1 + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
                    params.push(data.supportgrp_id);
                    params.push(data.supportgrp_id);
                } else {
                    sql1 = sql1 + "and a.working_category in (" + workingCategoryList + ")";
                }
                sql1 = sql1 + " and g.id = e.supportGroupLevelId ";

                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql1 = sql1 + " and a.createbyid=ul.id  ";
                }

                if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
                    sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
                }

                if (data.ticketStatusId != '0') {
                    sql1 = sql1 + " and a.tstatus = ? ";
                    params.push(data.ticketStatusId);
                }

                if (data.ticket_id != '0') {
                    sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
                    params.push(data.ticket_id);
                }


                if (data.busi_priority_id != '0') {
                    sql1 = sql1 + " and a.busi_priority_id = ? ";
                    params.push(data.busi_priority_id);
                }

                if (data.catFilterLt != '' && data.catFilterLt != '0') {
                    var cat = data.catFilterLt.split(",");
                    var catVal = cat[cat.length - 1].split("#")
                    sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
                    params.push(Number(catVal[1]));
                }

                if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
                    sql1 = sql1 + " and l.psno = ?  ";
                    params.push(data.raisedValue);
                }

                if (data.grpLevel === 0) {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql1 = sql1 + " and a.createbyid = ? ";
                        params.push(data.assign_id);
                    }
                } else {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql1 = sql1 + " and e.user_id = ? ";
                        params.push(data.assign_id);
                    }
                }


                logData("tot_query---------------------- 4--->" + sql1);
                logData("\n\ntot_query-params--------------------->" + params);
                con.query(sql1, params, function (err, done) {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        //util.logData('result1=' + done.length());
                        cb(null, done);
                    }
                });
            }
        ],
            function (err) {
                if (err) {
                    throw new Error(err);
                } else {
                    util.logData(err);
                }
            });
    }
}

function AdvancesearchTicket_old(data, cb) {
    logData("\n\n123AdvancesearchTicket--------start----------------------" + new Date());

    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    function getWorkingCategory(done) {
        let ticketAttrIdList = "";

        if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
            done(null, ticketAttrIdList);
        } else {
            let selectSql = "SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
                " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0)";
            con.query(selectSql, [data.clientId, data.ticketTypeId, data.supportgrp_id], function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    if (result1.length > 0) {
                        let i = 0;

                        for (; i < (result1.length - 1); i++) {
                            ticketAttrIdList += result1[i].ticketAttrId + ",";
                        }
                        ticketAttrIdList += result1[i].ticketAttrId;
                        done(null, ticketAttrIdList);
                    } else {
                        done(null, ticketAttrIdList);
                    }
                }
            });
        }

    }


    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));

                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    // logData('\n\n\n********************************************************');
                    // logData('totalPage-----------------'+totalPage);
                    // logData('dataObj-----------------'+dataObj.length);
                    // logData('search result====' + JSON.stringify(results.dataObj[0].id));
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    logData('nextOffset-----------------' + nextOffset);
                    logData('previousOffset-----------------' + previousOffset);
                }
                //results['totalPage'] = 0;
                cb(null, true, results);
            }
        });

    function dataObj(cb) {

        async.waterfall([
            getWorkingCategory,
            function getDataObj(workingCategoryList, done) {
                let sql;
                util.logData('+++++++++++++++' + JSON.stringify(data))
                sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
                    " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
                    " aa.categoryId = cc.id) category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
                    " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
                    " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
                    " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
                    " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
                    " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql = sql + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
                }
                sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
                    " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql = sql + " ,LNT_employee_details l ";
                }
                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql = sql + " ,USER ul ";
                }

                sql = sql + " , ticket a where  a.clientid = ?  and a.ticketTypeId = ? " +
                    " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and DeleteFlag = '0' and sequence_no in (21,22)) " +
                    " and a.DeleteFlag = '0' ";

                var params = [data.clientId, data.ticketTypeId, data.clientId];

                if (data.created_frdate != '' && data.created_todate != '') {
                    // sql = sql + " and a.createdate between ? and ? ";
                    sql = sql + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
                    params.push(data.created_frdate + " 00:00:00");
                    params.push(data.created_todate + " 23:59:00");
                }

                sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id and a.id = e.PKFIELDVAL ";

                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql = sql + " and a.id=l.ticket_id  ";
                }

                if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
                    sql = sql + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
                    params.push(data.supportgrp_id);
                    params.push(data.supportgrp_id);
                } else {
                    sql = sql + "and a.working_category in (" + workingCategoryList + ")";
                    //params.push(data.clientId);
                    //params.push(data.ticketTypeId);
                    //params.push(data.supportgrp_id);
                }
                sql = sql + " and g.id = e.supportGroupLevelId ";

                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql = sql + " and a.createbyid=ul.id  ";
                }

                if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
                    sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
                }

                if (data.ticketStatusId != '0') {
                    sql = sql + " and a.tstatus = ? ";
                    params.push(data.ticketStatusId);
                }

                if (data.ticket_id != '0') {
                    sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
                    params.push(data.ticket_id);
                }


                if (data.busi_priority_id != '0') {
                    sql = sql + " and a.busi_priority_id = ? ";
                    params.push(data.busi_priority_id);
                }

                if (data.catFilterLt != '' && data.catFilterLt != '0') {
                    var cat = data.catFilterLt.split(",");
                    var catVal = cat[cat.length - 1].split("#")
                    sql = sql + " and a.categoryDtlsLt like '%#?%' ";
                    params.push(Number(catVal[1]));
                }
                //1#65,2#66,3#75,4#137,5#142

                if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
                    sql = sql + " and l.psno = ?  ";
                    params.push(data.raisedValue);
                }

                if (data.grpLevel === 0) {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql = sql + " and a.createbyid = ? ";
                        params.push(data.assign_id);
                    }
                } else {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql = sql + " and e.user_id = ? ";
                        params.push(data.assign_id);
                    }
                }

                if (paginationType == 'prev') {
                    sql = sql + " and a.id<?  ORDER BY a.id desc LIMIT ?";
                    sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id  ASC";
                } else {
                    sql = sql + " and a.id>?  ORDER BY a.id  LIMIT ?";
                }

                params.push(Number(offset));
                params.push(Number(page_size));

                util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
                util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
                con.query(sql, params, function (err, result) {
                    if (err) {
                        util.logData(err);
                        cb(err, false);
                    } else {
                        // util.logData('1st result length: --> ' + result.length);
                        if (result.length > 0) {
                            cb(null, result);
                        } else {
                            cb(null, []);
                        }
                    }
                });
            }
        ],
            function (err) {
                if (err) {
                    throw new Error(err);
                } else {
                    util.logData(err);
                }
            });

    }

    function totalData(cb) {
        async.waterfall([
            getWorkingCategory,
            function countTotalData(workingCategoryList, done) {
                //let sql1;
                util.logData('\n\n totalData-------------------' + JSON.stringify(data))
                let sql1 = "select count(distinct a.id) count ";

                sql1 = sql1 + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
                    " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql1 = sql1 + " ,LNT_employee_details l ";
                }
                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql1 = sql1 + " ,USER ul ";
                }

                sql1 = sql1 + " , ticket a where  a.clientid = ?  and a.ticketTypeId = ? " +
                    " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and DeleteFlag = '0' and sequence_no in (21,22)) " +
                    " and a.DeleteFlag = '0' ";

                var params = [data.clientId, data.ticketTypeId, data.clientId];

                if (data.created_frdate != '' && data.created_todate != '') {
                    sql1 = sql1 + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
                    params.push(data.created_frdate + " 00:00:00");
                    params.push(data.created_todate + " 23:59:00");
                }

                sql1 = sql1 + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id and a.id = e.PKFIELDVAL ";

                if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                    sql1 = sql1 + " and a.id=l.ticket_id  ";
                }

                if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
                    sql1 = sql1 + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
                    params.push(data.supportgrp_id);
                    params.push(data.supportgrp_id);
                } else {
                    sql1 = sql1 + "and a.working_category in (" + workingCategoryList + ")";
                }
                sql1 = sql1 + " and g.id = e.supportGroupLevelId ";

                if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                    sql1 = sql1 + " and a.createbyid=ul.id  ";
                }

                if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
                    sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
                }

                if (data.ticketStatusId != '0') {
                    sql1 = sql1 + " and a.tstatus = ? ";
                    params.push(data.ticketStatusId);
                }

                if (data.ticket_id != '0') {
                    sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
                    params.push(data.ticket_id);
                }


                if (data.busi_priority_id != '0') {
                    sql1 = sql1 + " and a.busi_priority_id = ? ";
                    params.push(data.busi_priority_id);
                }

                if (data.catFilterLt != '' && data.catFilterLt != '0') {
                    var cat = data.catFilterLt.split(",");
                    var catVal = cat[cat.length - 1].split("#")
                    sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
                    params.push(Number(catVal[1]));
                }

                if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
                    sql1 = sql1 + " and l.psno = ?  ";
                    params.push(data.raisedValue);
                }

                if (data.grpLevel === 0) {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql1 = sql1 + " and a.createbyid = ? ";
                        params.push(data.assign_id);
                    }
                } else {
                    if (data.assign_id != undefined && data.assign_id != '0') {
                        sql1 = sql1 + " and e.user_id = ? ";
                        params.push(data.assign_id);
                    }
                }


                logData("tot_query---------------------- 4--->" + sql1);
                logData("\n\ntot_query-params--------------------->" + params);
                con.query(sql1, params, function (err, done) {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        //util.logData('result1=' + done.length());
                        cb(null, done);
                    }
                });
            }
        ],
            function (err) {
                if (err) {
                    throw new Error(err);
                } else {
                    util.logData(err);
                }
            });
    }
}


function getStatusByTicketTypeForIncident(data, cb) {
    // var data = preventSqlInjection(data);
    if (data.ticketTypeSeqNo === '1') {
        var sql = " SELECT a.id id, a.ATTRVAL status " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=? " + " " +
            " and a.ATTRID = 2 and a.sequence_no in(0,1,2,7,8,12,13,15,16)";
    } else if (data.ticketTypeSeqNo === '2') {
        var sql = " SELECT a.id id, a.ATTRVAL status " +
            " FROM TICKETATTRIBUTES a " +
            " WHERE  a.DeleteFlag = '0' " +
            " and a.CLIENTID=?" + " " +
            " and a.ATTRID = 2 and a.sequence_no BETWEEN 101 and 200";
    }
    con.query(sql, [data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function mapClientWiseFunctionality(data, cb) {
    let count = 0;
    for (let i = 0; i < data.value.length; i++) {
        let sql = 'INSERT into TicketFuctionalityDetails(client_id,functionalityId,func_desc_id,funcDescription,sequence_no,createbyid) values(?,?,?,?,?,?)';
        con.query(sql, [data.clientId, data.funcId, data.value[i].id, data.value[i].name, data.value[i].seq, data.createdBy], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                count++;
                if (count === data.value.length) {
                    cb(null, true);
                }
            }
        })
    }

}

function getFunctionalityByClient(data, cb) {
    let sql = "select func_desc_id id,funcDescription name,coalesce(sequence_no, '') seq from TicketFuctionalityDetails where functionalityId = ? and client_id = ? and DeleteFlag = '0' " +
        " and func_desc_id not in (select func_desc_id from TicketFuctionalityDetails where functionalityId = ? and client_id = ? and DeleteFlag = '0')";
    con.query(sql, [data.funcId, data.clientId, data.funcId, data.refer_clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function getFunctionalityDetails(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id,b.NAME as client,c.funcionalityName type,a.funcDescription name FROM TicketFuctionalityDetails a, CLIENT b, FuctionalityMst c where a.id > ? and a.client_id=b.id and a.functionalityId = c.id and a.DeleteFlag=0 and b.DeleteFlag =0 and c.DeleteFlag=0 " +
                " ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT a.id,b.NAME as client,c.funcionalityName type,a.funcDescription name FROM TicketFuctionalityDetails a, CLIENT b, FuctionalityMst c where a.id < ?  and a.client_id=b.id and a.functionalityId = c.id and a.DeleteFlag=0 and b.DeleteFlag =0 and c.DeleteFlag=0 " +
                " ORDER BY a.id Desc LIMIT ? ) Z ORDER BY Z.id  ASC";
        }
        // util.logData('followup sql===' + str);
        // util.logData('>>>>>>>>>>>===data' + offset + '+++++++++++++++' + page_size);
        con.query(str, [offset, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from TicketFuctionalityDetails a where a.DeleteFlag = 0";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getTempSscReport(data, cb) {
    request
        .get('http://10.0.1.101:9080/ifixLNTReportApplication/lntReportTempExcel?fromDt=' + data.fromDt + '&toDt=' + data.toDt + '&clientid=' + data.clientid + '&ticket_type=' + data.ticket_type + '&user_id=' + data.user_id)
        .end((err, resp) => {
            if (err) {
                // logData(err);
                // cb(null, true);
            } else {
                // cb(null, true);
            }
        });
    cb(null, true);
}

function testQuery(data, cb) {
    var sql = data.sql;
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function updateFollowUpReceivedDtls(data, cb) {
    logData('\n\n*******************updateFollowUpReceivedDtls*********************' + JSON.stringify(data))
    let strFR = "select * from ticket_sla_startstop_logs_all_action where ticket_id = ? and action_id = ? and sla_stop_end_datetime is null ";
    con.query(strFR, [data.ticketId, data.actionId], function (errFR, resultFR) {
        if (errFR) {
            logData(errFR);
            cb(errFR, null);
        } else {
            if (resultFR.length > 0) {
                insertSlaStopEndTime(data, function (errSS, successSS, detailsSS) {
                    if (errSS || !successSS) {
                        logData(errSS + successSS);
                        cb(errSS, null);
                    } else {
                        logData('\n\n*******************updateFollowUpReceivedDtls*********************')
                        cb(null, true, "ok");
                    }
                })
            } else {
                cb(null, true, "ok");
            }
        }
    });
}

function insertSlaStopStartTime(data, cb) {
    logData("\n\n**********************insertSlaStopStartTime******************")
    var sql = "insert into ticket_sla_startstop_logs_all_action(ticket_id,action_id,sla_stop_start_WFCClientResultId,sla_stop_start_by) values(?,?,?,?) ";
    con.query(sql, [data.ticketId, data.actionId, data.wfcClientResultId, data.userId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

             // optimizedreport table starts
             var sql220 = "SELECT ticket_id,(select id from optimizedreport where ticket_id =?) id,count(*) followup_count,count(*) reopen_count,replace(coalesce(group_concat(concat(date_format (ADDTIME(a.sla_stop_end_datetime, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),''),',',' / ') reopen_dates,"
             + " date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') maxEscalationDtls,date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_responded_dt, "
             + " date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_time_taken FROM ticket_sla_startstop_logs_all_action a where ticket_id =? and action_id =? group by a.ticket_id,a.id limit 1;"
         con.query(sql220, [data.ticketId, data.ticketId, data.actionId], function (err, result220) {
             if (err) {
                 cb(err, null);
             } else {
                 logData("_________++__+_+_+444444444444444" + sql220);
                 console.log("@@@@@@@@!!!!!!!!!!123", result220);
                 var sql221 = "update optimizedreport set reopen_count =?,follow_up_count =?,reopen_dates=?,follow_up_responded_dt =?,"
                     + "follow_up_time_taken=? where id = ? ;"
                 con.query(sql221, [result220[0].reopen_count, result220[0].followup_count, result220[0].reopen_dates, result220[0].follow_up_responded_dt, result220[0].follow_up_time_taken, result220[0].id], function (err, result221) {
                     if (err) {
                         cb(err, null);
                     } else {
                         logData("&&&&&&&&&&&&&&------------>" + sql221);
                         console.log("!!!!!!!!@@w", result221);
                         cb(null, true, result221);
                     }
                 })

             }
         });

         // optimizedreport table ends


            cb(null, true, result);
        }
    });
}

function insertSlaStopEndTime(data, cb) {
    logData('insertSlaStopEndTime------------------------------------' + JSON.stringify(data))
    var sql1 = "select max(id) mid,ticket_id from ticket_sla_startstop_logs_all_action where ticket_id = ? and action_id = ? group by ticket_id ";
    logData('sql1------------------------------------' + sql1)
    con.query(sql1, [data.ticketId, data.actionId], function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length > 0) {
                let status_Aud = "Update ticket_sla_startstop_logs_all_action set sla_stop_end_datetime =Now(), sla_stop_end_WFCClientResultId = ?, sla_stop_end_by = ? " +
                    " where ticket_id = ? and id =? ";
                logData('status_Aud------------------' + status_Aud)
                con.query(status_Aud, [data.wfcClientResultId, data.userId, data.ticketId, result1[0].mid], function (errAud, detailsAud) {
                    if (errAud) {
                        logData(errAud);
                        cb(errAud, null);
                    } else {

                         // optimizedreport table starts
            var sql220 = "SELECT ticket_id,(select id from optimizedreport where ticket_id =?) id,count(*) followup_count,count(*) reopen_count,replace(coalesce(group_concat(concat(date_format (ADDTIME(a.sla_stop_end_datetime, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),''),',',' / ') reopen_dates,"
            + " date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') maxEscalationDtls,date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_responded_dt, "
            + " date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_time_taken FROM ticket_sla_startstop_logs_all_action a where ticket_id =? and action_id =? group by a.ticket_id,a.id limit 1;"
        con.query(sql220, [data.ticketId, data.ticketId, data.actionId], function (err, result220) {
            if (err) {
                cb(err, null);
            } else {
                logData("_________++__+_+_+444444444444444" + sql220);
                console.log("@@@@@@@@!!!!!!!!!!123", result220);
                var sql221 = "update optimizedreport set reopen_count =?,follow_up_count =?,reopen_dates=?,follow_up_responded_dt =?,"
                    + "follow_up_time_taken=? where id = ? ;"
                con.query(sql221, [result220[0].reopen_count, result220[0].followup_count, result220[0].reopen_dates, result220[0].follow_up_responded_dt, result220[0].follow_up_time_taken, result220[0].id], function (err, result221) {
                    if (err) {
                        cb(err, null);
                    } else {
                        logData("&&&&&&&&&&&&&&------------>" + sql221);
                        console.log("!!!!!!!!@@w", result221);
                        cb(null, true, result221);
                    }
                })

            }
        });

        // optimizedreport table ends


                        /**************************************************************************************************************/
                        let sqlS = "select id,date_format (sla_stop_start_datetime,'%d/%m/%Y %T') startDt,date_format (sla_stop_end_datetime,'%d/%m/%Y %T') endDate " +
                            " from  ticket_sla_startstop_logs_all_action  where ticket_id = ?  and id =? ";
                        con.query(sqlS, [data.ticketId, result1[0].mid], function (errS, resultS) {
                            if (errS) {
                                logData(errS);
                                cb(errS, null);
                            } else {
                                if (resultS.length > 0) {
                                    let stDate = resultS[0].startDt;
                                    let toDate = resultS[0].endDate;
                                    logData('stDate-------------------' + stDate);
                                    logData('toDate-------------------' + toDate);
                                    request
                                        .get(SLA_URL + '/getSalPeriodDateWise')
                                        .query({
                                            ticketId: data.ticketId,
                                            frDate: stDate,
                                            toDate: toDate
                                        }) // query string
                                        .end((err, resp) => {
                                            if (err) {
                                                logData(err);
                                            } else {
                                                let x = JSON.parse(resp.text).resVal.slaResponsePeriod;
                                                var str = "update ticket_sla_startstop_logs_all_action set waitng_for_in_minutes = " + x + "" +
                                                    " where id = " + resultS[0].id + " ";
                                                con.query(str, function (err, result) {
                                                    if (err) {
                                                        logData(err);
                                                        cb(err, null);
                                                    } else {

                                                          // optimizedreport table starts
            var sql220 = "SELECT ticket_id,(select id from optimizedreport where ticket_id =?) id,count(*) followup_count,count(*) reopen_count,replace(coalesce(group_concat(concat(date_format (ADDTIME(a.sla_stop_end_datetime, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),''),',',' / ') reopen_dates,"
            + " date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') maxEscalationDtls,date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_responded_dt, "
            + " date_format (ADDTIME(max(a.sla_stop_end_datetime), '5:30:0.000000'),'%d-%M-%Y %T') follow_up_time_taken FROM ticket_sla_startstop_logs_all_action a where ticket_id =? and action_id =? group by a.ticket_id,a.id limit 1;"
        con.query(sql220, [data.ticketId, data.ticketId, data.actionId], function (err, result220) {
            if (err) {
                cb(err, null);
            } else {
                logData("_________++__+_+_+444444444444444" + sql220);
                console.log("@@@@@@@@!!!!!!!!!!123", result220);
                var sql221 = "update optimizedreport set reopen_count =?,follow_up_count =?,reopen_dates=?,follow_up_responded_dt =?,"
                    + "follow_up_time_taken=? where id = ? ;"
                con.query(sql221, [result220[0].reopen_count, result220[0].followup_count, result220[0].reopen_dates, result220[0].follow_up_responded_dt, result220[0].follow_up_time_taken, result220[0].id], function (err, result221) {
                    if (err) {
                        cb(err, null);
                    } else {
                        logData("&&&&&&&&&&&&&&------------>" + sql221);
                        console.log("!!!!!!!!@@w", result221);
                        cb(null, true, result221);
                    }
                })

            }
        });

        // optimizedreport table ends


                                                        cb(null, true, "OK");
                                                    }
                                                });

                                            }
                                            // Do something
                                        });

                                }

                            }
                        });
                        /**************************************************************************************************************/
                        logData('\n\n*******************333333333333333333333333333333333*********************')

                    }
                })
            } else {
                logData('\n\n*******************kjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjn*********************')
                cb(null, true, "OK");
            }
        }
    });


}

function getSSO() {
    // util.logData('inside getSSO');
    request
        .get('http://localhost:9050/login')
        .end((err, resp) => {
            if (err) {
                logData(err);
            } else {
                util.logData(resp.text)
            }
        });
}


function getCsatQuestion(data, cb) {
    var sql = "SELECT * FROM `csat-question` WHERE `clientId` = ? AND `DeleteFlag` = 0";
    con.query(sql, [data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function getCsatRatingList(data, cb) {
    var str1 = "SELECT id, csatRating FROM `csat-rating` WHERE `clientId` = ? AND `DeleteFlag` = 0";
    con.query(str1, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            // util.logData('result1=' + done);
            cb(null, true, done);
        }
    });
}

function setUserIdNGrp(data, cb) {
    if (data.ticket_type_seq === 5 || data.ticket_type_seq === '5') {
        data.supportGroupLevelId = data.createor_support_grp_id;
        if (data.detailsET == 'user') {
            data.user_id = data.createbyid;
            cb(null, true, data);

        } else {
            data.user_id = null;
            cb(null, true, data);
        }
    } else {
        data.user_id = data.createbyid;
        cb(null, true, data);
    }

}

function getChildTicketById(data, cb) {
    let sql = 'SELECT a.ticket_id,a.id FROM child_ticket_ids b,ticket a where b.ticket_id=a.id and b.parent_id =? and  b.DeleteFlag=0 and a.DeleteFlag=0;'
    con.query(sql, [data.tId], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            // util.logData('result1=' + done);
            cb(null, true, details);
        }
    })
}

function getUserOrGroupSelectionForTicketStatus(data, cb) {
    var str = "SELECT id,resolverGroup FROM ticket_status_wise_groupOrUser_selection where CLIENTID = ? and ticketTypeId=? and DeleteFlag = '0' " +
        " and status_sequence = ? and categoryId = (select working_category from ticket where id = ?)  ";
    logData('getUserOrGroupSelectionForTicketStatus-------------------------------' + str)
    logData('getUserOrGroupSelectionForTicketStatus----------data---------------------' + JSON.stringify(data))
    con.query(str, [data.clientId, data.ticketTypeId, data.ticketStatusSeq, data.ticketId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            logData('getUserOrGroupSelectionForTicketStatus-result------------------' + result.length)
            if (result.length > 0) {
                logData('getUserOrGroupSelectionForTicketStatus-result[0].resolverGroup------------------' + result[0].resolverGroup)
                if (result[0].resolverGroup == 'true') {
                    cb(null, true, "group");
                } else {
                    util.logData('else 1111111111111111111111');
                    cb(null, true, "user");
                }
            } else {
                util.logData('else 222222222222222222222222222222');
                cb(null, true, "user");
            }
        }
    });
}

function searchTicketByIdForCit(data, cb) {
    logData("\n\nAdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where " +
            " sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, a.busi_urgency_id, " +
            " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        sql = sql + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " ,USER ul ";
        }

        sql = sql + " , ticket a   " +
            " where a.id = e.PKFIELDVAL ";

        sql = sql + " and (a.clientId=? or a.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?))  and (a.ticketTypeId = ? or a.ticketTypeId in (SELECT subclient_ticket_type_id FROM client_subclient_mapping_for_tickettype where master_ticket_type_id=?))";
        var params = [data.clientId, data.clientId, data.ticketTypeId, data.ticketTypeId];
        sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id  ";
        sql = sql + " and a.DeleteFlag = '0' ";
        sql = sql + " and e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and (y.ticketTypeId = ? or y.ticketTypeId in (SELECT subclient_ticket_type_id FROM client_subclient_mapping_for_tickettype where master_ticket_type_id=?)) and (y.clientId=? or y.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) group by x.PKFIELDVAL) " +
            "  and g.id = e.supportGroupLevelId ";
        params.push(data.ticketTypeId);
        params.push(data.ticketTypeId);
        params.push(data.clientId);
        params.push(data.clientId);
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " and a.createbyid=ul.id  ";
        }

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
        }


        if (data.ticket_id != '0') {
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }


        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }


        sql = sql + "  LIMIT ? OFFSET ? ";
        params.push(Number(page_size));
        params.push(Number(offset));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params);
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        //let sql1;
        util.logData('\n\n totalData-------------------' + JSON.stringify(data))
        let sql1 = "select count(distinct a.id) count from WFCCLIENTRESULT e ";

        sql1 = sql1 + " , ticket a where  a.id = e.PKFIELDVAL " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and (CLIENTID=? or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and ATTRID = 2  and sequence_no in (21,22))";

        sql1 = sql1 + " and (a.clientId=? or a.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?))  and (a.ticketTypeId = ? or a.ticketTypeId in (SELECT subclient_ticket_type_id FROM client_subclient_mapping_for_tickettype where master_ticket_type_id=?)) ";

        var params = [data.clientId, data.clientId, data.clientId, data.clientId, data.ticketTypeId, data.ticketTypeId];

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        }

        if (data.ticket_id != '0') {
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }


        sql1 = sql1 + "and e.id in (select max(x.id) from WFCCLIENTRESULT x, " +
            " ticket y where x.PKFIELDVAL = y.id and (y.ticketTypeId = ? or y.ticketTypeId in (SELECT subclient_ticket_type_id FROM client_subclient_mapping_for_tickettype where master_ticket_type_id=?)) and (y.clientId=? or y.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) group by x.PKFIELDVAL) ";
        params.push(data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId);

        logData("tot_query---------------------->" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                //util.logData('result1=' + done.length());
                cb(null, done);
            }
        });
    }
}


function AdvancesearchTicketForCit(data, cb) {
    if (data.grpLevel == 0) {
        AdvancesearchTicketForEndUser(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    } else if (data.grpLevel > 0) {
        AdvancesearchTicketForAnalyst(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    }
}





function AdvancesearchTicketForAnalyst(data, cb) {
    logData("\n\nAnalyst AdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";
    // if(data.ticket_id !== null){

    // }

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    // logData('\n\n\n********************************************************');
                    // logData('totalPage-----------------'+totalPage);
                    // logData('dataObj-----------------'+dataObj.length);
                    // logData('search result====' + JSON.stringify(results.dataObj[0].id));
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    logData('nextOffset-----------------' + nextOffset);
                    logData('previousOffset-----------------' + previousOffset);
                }
                //results['totalPage'] = 0;
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category, a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, a.busi_urgency_id, " +
            " e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR, g.LEVELSHORTDESC ,g.id gid ,g.group_level, " +
            " a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, (select ub.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where " +
            " ws.user_id = ub.id and ws.PKFIELDVAL = a.id LIMIT 1) assignee ";
        sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

        sql = sql + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
        var params = [data.clientId, data.ticketTypeId];

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and n.createdate between ? and ? ";
            sql = sql + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.assign_id.length > 0) {
            sql = sql + " and m.user_id in (?)) ";
            params.push(data.assign_id);
        } else {
            sql = sql + ") ";
        }

        sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.raisedValue !== '') {
            sql = sql + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
            params.push(data.raisedValue);
            params.push(data.clientId);
        }

        sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";


        if (data.issearchbyspg) {
            sql = sql + " and e.supportGroupLevelId in (?) ";
            params.push(data.supportgrp_id);
        }


        if (data.ticketStatusId.length > 0) {
            sql = sql + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.busi_priority_id.length > 0) {
            sql = sql + " and a.busi_priority_id in (?) ";
            params.push(data.busi_priority_id);
        }
        if (data.bulkassginement) {
            sql = sql + " and a.id NOT in (select ticket_id from bulk_assignment_ticket) ";
        }
        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql = sql + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        if (paginationType == 'prev') {
            sql = sql + " and a.id<? ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id ASC";
        } else {
            sql = sql + " and a.id>? ORDER BY a.id LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --------------> ' + JSON.stringify(result));
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        util.logData('\n\n totalData-------------------' + JSON.stringify(data));
        let sql1 = "select count(distinct a.id) count from USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

        sql1 = sql1 + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
        var params = [data.clientId, data.ticketTypeId];

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and n.createdate between ? and ? ";
            sql1 = sql1 + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.assign_id.length > 0) {
            sql1 = sql1 + " and m.user_id in (?)) ";
            params.push(data.assign_id);
        } else {
            sql1 = sql1 + ") ";
        }

        sql1 = sql1 + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.raisedValue !== '') {
            sql1 = sql1 + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
            params.push(data.raisedValue);
            params.push(data.clientId);
        }

        sql1 = sql1 + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.issearchbyspg) {
            sql1 = sql1 + " and e.supportGroupLevelId in (?) ";
            params.push(data.supportgrp_id);
        }

        if (data.bulkassginement) {
            sql1 = sql1 + " and a.id NOT in (select ticket_id from bulk_assignment_ticket) ";
        }
        
        if (data.ticketStatusId.length > 0) {
            sql1 = sql1 + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.busi_priority_id.length > 0) {
            sql1 = sql1 + " and a.busi_priority_id in (?) ";
            params.push(data.busi_priority_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }
        logData("tot_query////////////////////// >" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}




function AdvancesearchTicketForAnalyst_old_march_anand(data, cb) {
    logData("\n\nAnalyst AdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";
    // if(data.ticket_id !== null){

    // }

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    // logData('\n\n\n********************************************************');
                    // logData('totalPage-----------------'+totalPage);
                    // logData('dataObj-----------------'+dataObj.length);
                    // logData('search result====' + JSON.stringify(results.dataObj[0].id));
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    logData('nextOffset-----------------' + nextOffset);
                    logData('previousOffset-----------------' + previousOffset);
                }
                //results['totalPage'] = 0;
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category, a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, a.busi_urgency_id, " +
            " e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR, g.LEVELSHORTDESC ,g.id gid ,g.group_level, " +
            " a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where " +
            " ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

        sql = sql + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
        var params = [data.clientId, data.ticketTypeId];

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and n.createdate between ? and ? ";
            sql = sql + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.assign_id.length > 0) {
            sql = sql + " and m.user_id in (?)) ";
            params.push(data.assign_id);
        } else {
            sql = sql + ") ";
        }

        sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.raisedValue !== '') {
            sql = sql + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
            params.push(data.raisedValue);
            params.push(data.clientId);
        }

        sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql = sql + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.busi_priority_id.length > 0) {
            sql = sql + " and a.busi_priority_id in (?) ";
            params.push(data.busi_priority_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql = sql + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        if (paginationType == 'prev') {
            sql = sql + " and a.id<? ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id ASC";
        } else {
            sql = sql + " and a.id>? ORDER BY a.id LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --------------> ' + JSON.stringify(result));
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        util.logData('\n\n totalData-------------------' + JSON.stringify(data));
        let sql1 = "select count(distinct a.id) count from USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

        sql1 = sql1 + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
        var params = [data.clientId, data.ticketTypeId];

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and n.createdate between ? and ? ";
            sql1 = sql1 + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.assign_id.length > 0) {
            sql1 = sql1 + " and m.user_id in (?)) ";
            params.push(data.assign_id);
        } else {
            sql1 = sql1 + ") ";
        }

        sql1 = sql1 + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.raisedValue !== '') {
            sql1 = sql1 + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
            params.push(data.raisedValue);
            params.push(data.clientId);
        }

        sql1 = sql1 + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql1 = sql1 + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.busi_priority_id.length > 0) {
            sql1 = sql1 + " and a.busi_priority_id in (?) ";
            params.push(data.busi_priority_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }
        logData("tot_query////////////////////// >" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function AdvancesearchTicketForEndUser(data, cb) {
    logData("\n\nEnduser AdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    // logData('\n\n\n********************************************************');
                    // logData('totalPage-----------------'+totalPage);
                    // logData('dataObj-----------------'+dataObj.length);
                    // logData('search result====' + JSON.stringify(results.dataObj[0].id));
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    logData('nextOffset-----------------' + nextOffset);
                    logData('previousOffset-----------------' + previousOffset);
                }
                //results['totalPage'] = 0;
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category, a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, a.busi_urgency_id, " +
            " e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  where ";

        sql = sql + " a.id = e.PKFIELDVAL  and a.clientId=? and a.ticketTypeId = ? and " +
            " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where ticketTypeId = ? and clientId=? and " +
            " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = ?),0) ) ";
        var params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.isManagement + ""];

        sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and a.createdate between ? and ? ";
            sql = sql + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql = sql + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            data.ticket_id = data.ticket_id.trim();
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql = sql + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        sql = sql + " and a.createbyid = ? ";
        params.push(data.user_id);

        if (paginationType == 'prev') {
            sql = sql + " and a.id<? ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id ASC";
        } else {
            sql = sql + " and a.id>? ORDER BY a.id LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {

                // util.logData('1st result length: --------------> ' + result.length);
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        let sql1 = "select count(distinct a.id) count from USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  where";

        sql1 = sql1 + " a.id = e.PKFIELDVAL  and a.clientId=? and a.ticketTypeId = ? and " +
            " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where ticketTypeId = ? and clientId=? and " +
            " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = ?),0) ) ";
        var params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.isManagement + ""];

        sql1 = sql1 + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and a.createdate between ? and ? ";
            sql1 = sql1 + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        sql1 = sql1 + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql1 = sql1 + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            data.ticket_id = data.ticket_id.trim();
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        sql1 = sql1 + " and a.createbyid = ? ";
        params.push(data.user_id);

        logData("tot_query////////////////////// >" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function deleteChildTicket(data, cb) {
    let sql1 = "SELECT count(ticket_id) count FROM child_ticket_ids where parent_id=? and deleteflag=0 ;";
    con.query(sql1, [data.parent_id], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            util.logData(result);
            util.logData(data.parent_id);
            util.logData(result[0].count);
            if (result[0].count > 1) {
                let sql2 = "UPDATE child_ticket_ids SET `DeleteFlag`=1,delete_by_id = ?,DeleteDate=NOW() WHERE `parent_id`=? and `ticket_id`=?";
                con.query(sql2, [data.delete_by_id, data.parent_id, data.ticket_id], function () {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, "deleted successfully");
                    }
                })
            } else {
                cb(null, false, "ticket cannot be deleted");
            }
        }
    });
}

function checkIsSlaCalculationDone(data, cb) {
    if (ENVIRONMENT === 'development') {
        cb(null, true, "ok");
    } else {
             let sql = "  SELECT * FROM ticket_sla_response_dtls where deleteflag = '0' and ticketId =  ? ";

        //   let sql = "  SELECT * FROM ticket_sla_response_dtls where deleteflag = '0' and ticketId =  "+ticketId+"  ";

        con.query(sql, [data.id], function (err, result) {
         
          
          
            if (err) {
                logData(err);
                cb(err, null);
            } else {
             
                if (result.length > 0) {
          
                    cb(null, true, "ok");
                } else {
                    cb(null, false, "Ticket sla calculation is still pending.. Please try after few seconds.");
                }
            }
        });
    }
}

function getParentTicketById_old(data, cb) {
    let sql = 'SELECT a.ticket_id FROM child_ticket_ids b ,ticket a where b.ticket_id=? and b.parent_id = a.id and b.DeleteFlag=0 and a.DeleteFlag=0;'
    con.query(sql, [data.ticketId], function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getParentTicketById(data, cb) {
    let sql = 'SELECT a.ticket_id, a.id, (SELECT NAME FROM USER WHERE id = (SELECT createbyid from ticket where id = ?)) as createdByName, a.ticketTypeId  FROM child_ticket_ids b , ticket a where ' +
        ' b.ticket_id=? and b.parent_id = a.id and b.DeleteFlag=0 and a.DeleteFlag=0;'
    con.query(sql, [data.ticketId, data.ticketId], function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getAssetIdByTicket(data, cb) {
    let sql = "SELECT a.description des FROM ticket_asset b , asset_description a where b.assetId = a.id and b.ticketId =? and b.DeleteFlag=0 and a.DeleteFlag=0 ;";
    con.query(sql, [data.tId], function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    })
}

function getAllLevelOneAndLevelTwoUser(data, cb) {
    let sql = "SELECT DISTINCT a.userId id, (select NAME from USER where USER.id = a.userId ) name FROM " +
        "supportGroupUser a, USER b where a.userId = b.id and b.DeleteFlag= '0' " +
        "and a.supportGroupLevelId in ( select id from SUPPORTGROUPLEVEL where group_level in (1,2) and DeleteFlag = '0' " +
        "and CLIENTID= ?) and a.DeleteFlag= '0' order by name";
    con.query(sql, [data.clientId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function updateAdditionalFieldValue(data, cb) {
    var sql = "update ticketExtandMstTbl set predifinedValue='" + data.predifinedValue + "',modifybyid = " + data.user_id + ", modifydate = Now() where id = " + data.id + " ";
    con.query(sql, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                cb(null, true, details);
            } else {
                cb(null, true, []);
            }
        }
    })
}


function insertDashboardDB(data, cb) {
    let count = 0;
    // let time=new Date().getTime();
    con.getConnection(function (err, conn) {
        if (err) {
            logData(err);
            console.log("\n\n connections : " + con._allConnections.length)
            cb(err, null);
        } else {
            let sql2 = "DELETE from dashboard_status where client_id=? and user_id=? and seq=?";
            conn.query(sql2, [data.clientId, data.user_id, data.seq], function (err) {
                if (err) {
                    util.logData(err)
                    conn.release();
                    cb(err, null);
                } else {
                    let sql = "Insert into dashboard_status (client_id, user_id,seq) values(?,?,?)";
                    conn.query(sql, [data.clientId, data.user_id, data.seq], function (err, details) {
                        if (err) {
                            util.logData(err)
                            conn.release();
                            cb(err, null);
                        } else {
                            for (let i = 0; i < data.catList.length; i++) {
                                let sql3 = 'INSERT INTO `dashboard_category` (client_id, user_id, cat_list, createbyid,seq) VALUES (?,?,?,?,?);';
                                conn.query(sql3, [data.clientId, data.user_id, data.catList[i], data.user_id, data.seq], function (err, resp) {
                                    if (err) {
                                        util.logData(err);
                                        conn.release();
                                        cb(err, null);
                                    } else {
                                        count++;
                                        // console.log("\n count------>" + count);
                                        if (count === data.catList.length) {
                                            let sql = "update  dashboard_status set status=1 where client_id=? and user_id=? and seq=?";
                                            conn.query(sql, [data.clientId, data.user_id, data.seq], function (err, details) {
                                                if (err) {
                                                    util.logData(err)
                                                    conn.release();
                                                    cb(err, null);
                                                } else {
                                                    conn.release();
                                                }
                                            });

                                        }
                                    }
                                })
                            }
                            cb(null, true, 'Selected Categories submitted successfully.');
                        }
                    })
                }
            });

        }
    })

}

function getTicketCreateLoadingDtls(data, cb) {
    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                callback(null, result);
            }
        });
    }

    function getAttributesMstParentWise(callback) {
        // let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = " + data.clientId + " and PARENT_ID =0 and ATTRID = 1 " ;
        // "  and id in (SELECT categoryId FROM WFCCLIENT where  CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + " and DeleteFlag = '0' and flowIndicator = 'F') ";
        let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = " + data.clientId + " and attrHeaderMstId IN (select id from attributesHeaderMst where ATTRID='1' and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + " and sequence_no=1 and DeleteFlag = '0') and DeleteFlag = '0'";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAttributesHeaderMst, getAttributesMstParentWise], function (err, results) {
        if (err) {
            cb(err, null)
        } else {

            let arr = [];
            for (let i = 0; i < results[0].length; i++) {
                if (i === 0) {
                    let inner = [];
                    inner = results[1];
                    // if (results[1].length > 1) {
                    inner.unshift(results[0][i]);
                    // }
                    arr.push({ id: i + 1, options: inner })
                } else {
                    arr.push({ id: i + 1, options: [results[0][i]] })
                }
            }
            cb(null, true, [{
                attribute: arr
            }])

        }
    })

}

function getDashboardCategory(data, cb) {
    let sql = 'select cat_list from dashboard_category where client_id =? and user_id =? and seq=? and DeleteFlag=0';
    con.query(sql, [data.clientId, data.user_id, 9], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (data.type === 'f') {
                cb(null, true, details.length);
            } else {
                cb(null, true, details);
            }
        }
    })
}

function getCreateTicketDataWithGroup(data, cb) {
    function getAttributesHeaderMst(callback) {
        let sql1 = "SELECT category_level FROM ticket_workflow_generated_on_category where client_id = ? and ticket_type_id = ? and delete_flag = '0' ";
        con.query(sql1, [data.clientId, data.ticket_type], function (err, det) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (det.length > 0) {
                    let seq = Number(det[0].category_level);
                    data.seq = seq;
                    let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
                        " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
                    con.query(sql, function (err, result) {
                        if (err) {
                            logData(err);
                            callback(err, null);
                        } else {
                            for (let i = 0; i < result.length; i++) {
                                result[i].type = 'header';
                            }
                            const count = 1;
                            let arr = [];
                            generateCategory(count);

                            function generateCategory(count) {
                                data.count = count;
                                getAttributesMstParentWiseWithGroup(data, function (err, details) {
                                    if (err) {
                                        callback(err, null);
                                    } else {
                                        if (details.length > 1) {
                                            for (let i = 0; i < result.length; i++) {
                                                if (i === 0) {
                                                    let inner = [];
                                                    inner = details;
                                                    inner.unshift(result[i]);
                                                    arr.push({ id: arr.length + 1, options: inner })
                                                } else {
                                                    arr.push({ id: arr.length + 1, options: [result[i]] })
                                                }
                                            }
                                            callback(null, { arr: arr, count: count - 1 });
                                        } else if (details.length === 1) {
                                            // for (let i = 0; i < result.length; i++) {
                                            //     if (i === 0) {
                                            let inner = [];
                                            inner = details;
                                            inner.push(result[0]);
                                            arr.push({ id: arr.length + 1, options: inner, isDisabled: true });
                                            result.splice(0, 1);
                                            // break;
                                            //     }
                                            // }
                                            count++;
                                            data.parentId = details[0].id;
                                            generateCategory(count);
                                        } else {
                                            callback(null, { arr: arr, count: count - 1 });
                                        }
                                    }
                                })
                            }
                        }
                    });
                } else {
                    callback(null, { error: 'Category Level is not mapped properly.Please contact with your ADMIN' });
                }
            }
        })
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where deleteflag=0 and ticket_type=' + data.ticket_type + ' and client_id=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.ticket_type
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type + ' and CLIENTID=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAttributesHeaderMst, checkPriorityType, getSubTicketType], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[0].error) {
                cb(null, false, results[0].error)
            } else {

                cb(null, true, [{
                    attribute: results[0].arr,
                    val: results[1],
                    subtype: results[2],
                    disabled: results[0].count
                }])
            }
        }
    })
}

function getTicketCreateLoadingDtlsWithGroup(data, cb) {
    let sql1 = "SELECT category_level FROM ticket_workflow_generated_on_category where client_id = ? and ticket_type_id = ? and delete_flag = '0' ";
    con.query(sql1, [data.clientId, data.ticket_type], function (err, det) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (det.length > 0) {
                let seq = Number(det[0].category_level);
                data.seq = seq;
                let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
                    " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        for (let i = 0; i < result.length; i++) {
                            result[i].type = 'header';
                        }
                        const count = 1;
                        let arr = [];
                        generateCategory(count);

                        function generateCategory(count) {
                            data.count = count;
                            getAttributesMstParentWiseWithGroup(data, function (err, details) {
                                if (err) {
                                    cb(err, null);
                                } else {
                                    if (details.length > 1) {
                                        for (let i = 0; i < result.length; i++) {
                                            if (i === 0) {
                                                let inner = [];
                                                inner = details;
                                                inner.unshift(result[i]);
                                                arr.push({ id: arr.length + 1, options: inner })
                                            } else {
                                                arr.push({ id: arr.length + 1, options: [result[i]] })
                                            }
                                        }
                                        cb(null, true, { arr: arr, count: count - 1 });
                                    } else if (details.length === 1) {
                                        for (let i = 0; i < result.length; i++) {
                                            if (i === 0) {
                                                let inner = [];
                                                inner = details;
                                                inner.push(result[i]);
                                                arr.push({ id: arr.length + 1, options: inner, isDisabled: true });
                                                result.splice(i, 1);
                                                break;
                                            }
                                        }
                                        count++;
                                        data.parentId = details[0].id;
                                        generateCategory(count);
                                    } else {
                                        cb(null, true, { arr: arr, count: count - 1 });
                                    }
                                }
                            })
                        }
                    }
                });
            } else {
                cb(null, false, 'Category Level is not mapped properly.Please contact with your ADMIN');
            }
        }
    })

}


function getAttributesMstParentWiseWithGroup(data, cb) {
    if (data.count < data.seq) {
        let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = ? and attrHeaderMstId IN (select id from attributesHeaderMst where ATTRID='1' and CLIENTID = ? and ticket_type = ? and sequence_no=? and DeleteFlag = '0') and DeleteFlag = '0'";
        con.query(sql, [data.clientId, data.clientId, data.ticket_type, data.count], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                cb(null, result);
            }
        });
    } else if (data.count > data.seq) {
        let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where PARENT_ID=? and DeleteFlag=0";
        con.query(sql, [data.parentId], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                cb(null, result);
            }
        });
    } else {
        let sql = "SELECT ticketAttrId id,  b.ATTRVAL title FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b where a.ticketAttrId = b.id and a.DeleteFlag = '0' " +
            " and b.DeleteFlag = '0' and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ? ";
        con.query(sql, [data.groupId, data.clientId, data.ticket_type], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                cb(null, result);
            }
        });
    }
}


function getSelectedDashboardCategory(data, cb) {
    let sql = 'select cat_list from dashboard_category where client_id =? and user_id =? and DeleteFlag=0';
    con.query(sql, [data.clientId, data.user_id], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (details.length > 0) {
                let lists = details[0].cat_list.split(',');
                let count = 0;
                let arr = [];
                const selectedId1 = lists[0].split('#')[1];
                const selectedId2 = Number(lists[1].split('#')[1]);
                for (let i = 0; i < lists.length; i++) {
                    let id = lists[i].split('#');
                    let sql1 = "select a.id,a.ATTRVAL title,b.header_name name,b.id pId,b.sequence_no seq from TICKETATTRIBUTES a,attributesHeaderMst b where a.id=? and a.attrHeaderMstId=b.id and a.DeleteFlag = '0' and b.DeleteFlag=0";
                    con.query(sql1, [id[1]], function (err, details) {
                        if (err) {
                            util.logData(err);
                            cb(err, null);
                        } else {
                            count++;
                            const a = [];
                            a.push({ id: details[0].id, title: details[0].title });
                            a.push({ id: details[0].pId, title: details[0].name, type: 'header' });
                            if (count === 1) {
                                arr.push({ id: details[0].seq, options: a, isDisabled: true });
                            } else {
                                arr.push({ id: details[0].seq, options: a });
                            }
                            if (count === lists.length) {
                                let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where PARENT_ID=? and DeleteFlag=0";
                                con.query(sql, [selectedId1], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        cb(err, null);
                                    } else {
                                        for (let i = 0; i < details1.length; i++) {
                                            if (details1[i].id !== selectedId2) {
                                                arr[1].options.push(details1[i])
                                            }
                                        }
                                        // util.logData(JSON.stringify(arr));
                                        arr.sort(function (a, b) {
                                            return a.id > b.id;
                                        });
                                        cb(null, true, arr);
                                    }
                                });
                            }
                        }
                    })
                }
            } else {
                cb(null, true, details)
            }

        }
    })
}


function insertTicketAutoClosureTime(data, cb) {
    let sql = "SELECT * FROM `ticket_closure_mst_conf` where `client_id` =? and `delete_flag` = 0 and `ticket_type_id` = ?";
    con.query(sql, [data.clientId, data.ticket_type], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            // util.logData('SSSSSSSSSSSSSSSSs' + JSON.stringify(result));
            if (result.length > 0) {
                cb(null, false, "Cannot add more than one ticket closure time for a ticket type");
            } else {
                let sql = 'INSERT INTO `ticket_closure_mst_conf` (`client_id`, `ticket_closure_time`, `createbyid`, `ticket_type_id`) VALUES (?,?,?,?);';
                con.query(sql, [data.clientId, data.ticket_closure_time, data.createdBy, data.ticket_type], function (err, result) {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        if (result.insertId > 0) {
                            cb(null, true, result.insertId);
                        } else {
                            cb(null, false, "No data found....");
                        }
                    }
                });
            }
        }
    });
}

function getTicketAutoClosureTime(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType, a.ticket_closure_time FROM `ticket_closure_mst_conf` a where a.id > ? and a.client_id = ? " +
                " and a.delete_flag = 0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType, a.ticket_closure_time FROM `ticket_closure_mst_conf` a where a.id < ? and a.client_id = ? " +
                " and a.delete_flag = 0 ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC";
        }

        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(id) count FROM `ticket_closure_mst_conf` WHERE `client_id` = ? AND `delete_flag` = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function updateTicketAutoClosureTime(data, cb) {
    let sql = "UPDATE `ticket_closure_mst_conf` SET `ticket_closure_time`=?, `modifiybyid`=?, `modifiydate`=NOW() WHERE `id`=?;";
    con.query(sql, [data.ticket_closure_time, data.user_id, data.id], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTicketFunc(data, cb) {
    // util.logData('data===' + JSON.stringify(data));
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        var str = "";
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id, " +
                "a.funcDescription ,a.sequence_no,a.color_code,a.image,a.functionalityId,a.isManagerialview,a.client_id,FuctionalityMst.funcionalityName ,CLIENT.NAME  as client_name " +
                "from TicketFuctionalityDetails as a join FuctionalityMst " +
                "on a.functionalityId=FuctionalityMst.id " +
                "join CLIENT on a.client_id=CLIENT.id " +
                "where a.id > ? and a.DeleteFlag=0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from (select a.id, " +
                "a.funcDescription ,a.sequence_no,a.color_code,a.image,a.functionalityId,a.isManagerialview,a.client_id,FuctionalityMst.funcionalityName ,CLIENT.NAME as client_name " +
                "from TicketFuctionalityDetails as a join FuctionalityMst " +
                "on a.functionalityId=FuctionalityMst.id " +
                "join CLIENT on a.client_id=CLIENT.id " +
                "where a.id < ? and a.DeleteFlag=0 ORDER BY a.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
        }
        con.query(str, [offset, Number(page_size)], function (err, done) {
            if (err) {
                util.logData('---Error from getTicketFunc inside DataAccess.js----');
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result===' + JSON.stringify(done));
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(a.id) count FROM TicketFuctionalityDetails as a where a.DeleteFlag='0';";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function deleteTicketFunc(data, cb) {
    let sql = 'UPDATE `TicketFuctionalityDetails` SET `DeleteFlag`=?, `delete_by_id`=?, `DeleteDate`=NOW() where id=?';
    con.query(sql, [1, data.user_id, data.id], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, "deleted");
        }
    });
}

function updateTicketFunc(data, cb) {
    let sql1 = 'select id from TicketFuctionalityDetails where client_id=? and functionalityId=? and DeleteFlag=? and func_desc_id=?';
    con.query(sql1, [data.client_id, data.func_id, 0, data.func_desc_id], function (err, resp1) {
        if (err) {
            cb(err, null);
        } else {
            if (resp1.length >= 1) {
                cb(null, true, "duplicate value");
            } else {
                let sql4 = 'SELECT * FROM TicketFuctionalityDetails where client_id = ? and sequence_no >= ? and DeleteFlag = ?';
                con.query(sql4, [data.client_id, data.sequence, 0], function (err1, result1) {
                    if (err1) {
                        cb(err1, null);
                    } else {
                        seq(result1, function (error, success) {
                            if (error) {
                                util.logData(error);
                            } else {
                                util.logData(success);
                            }
                        });
                        let sql3 = 'INSERT INTO `TicketFuctionalityDetails` (`client_id`, `functionalityId`, `func_desc_id`, `funcDescription`, `createbyid`, `sequence_no`, `color_code`, `isManagerialview`, `image`) VALUES (?,?,?,?,?,?,?,?,?)';
                        con.query(sql3, [data.client_id, data.func_id, data.func_desc_id, data.func_desc, data.user_id, data.sequence, data.color, data.managementValue, data.image], function (err, resp3) {
                            if (err) {
                                cb(err, null);
                            } else {
                                cb(null, true, resp3.insertId);
                            }
                        });
                    }
                });

            }
        }
    });
}

function insertTicketFunc(data, cb) {
    let sql1 = 'select max(func_desc_id) as max_func_id from TicketFuctionalityDetails where client_id=? and functionalityId=? and DeleteFlag=?';
    con.query(sql1, [1, data.func_id, 0], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            var max_func_id = resp[0].max_func_id + 1;
            let sql3 = 'select id from TicketFuctionalityDetails where client_id=? and functionalityId=? and DeleteFlag=? and funcDescription=?';
            con.query(sql3, [data.client_id, data.func_id, 0, data.func_desc], function (err, resp1) {
                if (err) {
                    cb(err, null);
                } else {
                    if (resp1.length >= 1) {
                        cb(null, true, "duplicate value");
                    } else {
                        let sql5 = 'SELECT * FROM TicketFuctionalityDetails where client_id = ? and sequence_no >= ? and DeleteFlag = ?';
                        con.query(sql5, [data.client_id, data.sequence, 0], function (err1, result1) {
                            if (err1) {
                                cb(err1, null);
                            } else {
                                seq(result1, function (error, success) {
                                    if (error) {
                                        util.logData(error);
                                    } else {
                                        util.logData(success);
                                    }
                                });
                                let sql2 = 'INSERT INTO `TicketFuctionalityDetails` (`client_id`, `functionalityId`, `func_desc_id`, `funcDescription`, `createbyid`, `color_code`, `sequence_no`, `isManagerialview`, `image`) VALUES (?,?,?,?,?,?,?,?,?);';
                                con.query(sql2, [data.client_id, data.func_id, max_func_id, data.func_desc, data.user_id, data.color, data.sequence, data.managementValue, data.image], function (err, resp2) {
                                    if (err) {
                                        cb(err, null);
                                    } else {
                                        let sql4 = 'INSERT INTO `TicketFuctionalityDetails` (`client_id`, `functionalityId`, `func_desc_id`, `funcDescription`, `createbyid`, `color_code`, `sequence_no`, `isManagerialview`, `image`) VALUES (?,?,?,?,?,?,?,?,?)';
                                        con.query(sql4, [1, data.func_id, max_func_id, data.func_desc, data.user_id, data.color, data.sequence, data.managementValue, data.image], function (err, resp) {
                                            if (err) {
                                                cb(err, null);
                                            } else {
                                                cb(null, true, resp2.insertId);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                }
            });
        }
    })
}

function seq(data, cb) {
    var flagi = 0;
    let sql = "Update TicketFuctionalityDetails set sequence_no = ? where id = ?";
    for (var i = 0; i < data.length; i++) {
        //var new_seq = data[i].sequence_no + 1;
        con.query(sql, [data[i].sequence_no + 1, data[i].id], function (err, res1) {
            if (err) {
                cb(err, null);
            } else {
                flagi++;
                if (flagi == data.length) {
                    cb(null, "sequence updated");
                }
            }
        });
    }
}

function getDynamicTotCountMenuTicketDtls(data, cb) {
    let params;
    if (data.specialFilterVal == '0') {
        getDynamicMenuCount();
    } else {
        const menuId = data.type;
        data.type = 'b';
        getDashboardCategory(data, function (err, success, value) {
            if (err) {
                cb(err, true);
            } else {
                // util.logData('category value====' + JSON.stringify(value))
                let cat = '';
                for (let i = 0; i < value.length; i++) {
                    if (i === value.length - 1) {
                        cat = cat + value[i].cat_list;
                    } else {
                        cat = cat + value[i].cat_list + ',';
                    }
                }
                data.type = menuId;
                data.specialFilterVal = cat;
                getDynamicMenuCount();
            }
        });

    }

    function getDynamicMenuCount() {

        let base_sql = "SELECT id,query_str FROM ticket_menu_count_mst where client_id = ?  " +
            " and ticket_type_id = ? and menu_id = ? and delete_flag = '0' ";
        slaveCon.query(base_sql, [data.clientId, data.ticketTypeId, data.type], function (base_err, base_result) {
            if (base_err) {
                logData(base_err);
                cb(base_err, null);
            } else {
                logData('getDynamicMenuCount result-----------------------' + JSON.stringify(base_result));
                if (base_result.length > 0) {
                    let sql = base_result[0].query_str;
                    if (data.userFilterVal === '0') {
                        sql = sql.replace(/\@.*?\@/g, '');
                    }
                    if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                        sql = sql.replace(/\[.*?\]/g, '');

                    } else {
                        if (data.type != '62') {

                            if (data.catFilterVal !== '0') {
                                sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                            }
                            // if (data.userFilterVal !== '0') {
                            //     sql = sql.replace(/\[.*?\]/g, ' and  e.user_id =? ');
                            //     sql = sql.replace(/\@.*?\@/g, ' and  e.user_id =? ');
                            // }
                            if (data.userFilterVal !== '0') {
                                if (sql.match(/\@.*?\@/g) !== null) {

                                    sql = sql.replace(/\[.*?\]/g, '');
                                    sql = sql.replace(/\@.*?\@/g, ' and  e.user_id =? ');
                                } else {
                                    sql = sql.replace(/\[.*?\]/g, ' and  e.user_id =? ');
                                }

                            }
                        } else {
                            if (data.catFilterVal !== '0') {
                                sql = sql.replace(/\[.*?\]/g, ' and b.working_category =? ');
                            }
                            if (data.userFilterVal !== '0') {
                                sql = sql.replace(/\[.*?\]/g, ' and  a.user_id =? ');
                            }
                        }
                    }

                    if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        sql = sql.replace(/\{.*?\}/g, '');
                    } else {
                        sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                    }

                    // if (data.suppFilter === '0' || data.suppFilter === 0) {
                    //     sql = sql.replace(/\{.*?\}/g, '');
                    // } else {
                    //     sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                    // }

                    if (data.type == 63) {
                        let sql1 = "SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where (clientId=? or clientId in (SELECT subclientId FROM client_subclient_mapping where masterId= ? ) ) " +
                            " and (ticket_type = ? or ticket_type in (SELECT subclient_ticket_type_id FROM client_subclient_mapping_for_tickettype where master_ticket_type_id = ?)) and supportGroupLevelId = coalesce((SELECT id " +
                            " FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0'";
                        con.query(sql1, [data.clientId, data.clientId, data.ticketTypeId, data.ticketTypeId, data.supportgrp_id], function (err, res) {
                            if (err) {
                                cb(err, null);
                            } else {
                                if (res.length > 0) {
                                    let workingCat = [];
                                    for (let i = 0; i < res.length; i++) {
                                        workingCat.push(res[i].ticketAttrId);
                                    }
                                    if (data.clientId == '14') {
                                        params = [data.clientId, data.clientId, data.ticketTypeId, data.ticketTypeId, workingCat, data.clientId, data.clientId];
                                    } else {
                                        params = [data.clientId, data.ticketTypeId, workingCat, data.clientId];
                                    }
                                    if (data.catFilterVal !== '0') {
                                        params.push(data.catFilterVal);
                                    }
                                    if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                                    } else {
                                        let splFlt = data.specialFilterVal.split(",");
                                        // util.logData("---->params:" + JSON.stringify(params));
                                        params.push(splFlt);
                                    }
                                    // util.logData('RESPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP' + JSON.stringify(workingCat));
                                    slaveCon.query(sql, params, function (err, result) {
                                        if (err) {
                                            util.logData(err);
                                            cb(err, false);
                                        } else {
                                            cb(null, true, result);
                                        }
                                    })
                                }
                            }
                        });
                    } else {
                        switch (Number(data.type)) {
                            case 1:
                                params = [data.ticketTypeId, data.clientId, data.user_id];
                                break;
                            case 2:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.user_id, data.user_id, data.supportgrp_id];
                                break;
                            case 3:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                break;
                            case 4:
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.user_id, data.ticketTypeId];
                                break;
                            case 5:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                break;
                            case 19:
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.user_id, data.user_id, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 21:
                                if (data.clientId != '2') {
                                    params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                } else {
                                    params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                }
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }

                            case 26:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 27:
                                if (data.clientId != '5') {
                                    params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                } else {
                                    params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                                }
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 28:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 87:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 30:
                                params = [data.ticketTypeId, data.clientId, data.clientId, data.user_id, data.user_id, data.supportgrp_id, data.clientId];
                                // params = [data.clientId, data.clientId, data.user_id, data.user_id, data.supportgrp_id, data.clientId]
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2' || data.clientId != '5') {
                                    params.push(data.supportgrp_id);
                                }

                                break;
                            case 32:
                                params = [data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.ticketTypeId, data.supportgrp_id];
                                break;

                            case 33:
                                if (data.clientId != '2') {
                                    params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.supportgrp_id];
                                } else {
                                    params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id];
                                }
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 40:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                //logData('*****************************************data.clientId------'+(data.clientId == '5'))
                                // logData('*****************************************data.clientId------'+data.clientId)
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 41:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 42:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 86:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 43:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 44:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 45:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 46:
                                if (data.clientId != '2') {
                                    params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id]
                                } else {
                                    params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                }
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 47:
                                if (data.clientId != '2' && data.clientId != '5') {
                                    params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                                } else if (data.clientId == '5') {
                                    params = [data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                } else {
                                    params = [data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.supportgrp_id];
                                }
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 49:
                                // params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 50:
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 51:
                                // params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;

                            case 52:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 53:
                                params = [data.clientId, data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 54:
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 55:
                                // params = [data.clientId, data.clientId, data.clientId];
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 56:
                                // params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.clientId];
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 57:
                                //params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 58:
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 60:
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 61:
                                if (data.clientId == '5') {
                                    // params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                                    // if (data.catFilterVal !== '0') {
                                    //     params.push(data.catFilterVal);
                                    // }
                                    params = [data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId, data.user_id];
                                    if (data.catFilterVal !== '0') {
                                        params.push(data.catFilterVal);
                                    }
                                } else {
                                    params = [data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id, data.clientId];
                                    if (data.catFilterVal !== '0') {
                                        params.push(data.catFilterVal);
                                    }
                                }
                                break;
                            case 62:
                                params = [data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            // case 63:
                            //     let sql = "SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? and supportGroupLevelId = coalesce((SELECT id " +
                            //     " FROM SUPPORTGROUPLEVEL where id = ? and management = 'true'), 0) and DeleteFlag = '0'";
                            //     con.query(sql, [data.clientId, data.ticketTypeId, data.supportgrp_id], function (err, res) {
                            //         if (err) {
                            //             cb(err, null);
                            //         } else {
                            //             if (res.length == 0) {
                            //                 data.workingCat = '0';
                            //             } else {
                            //                 let workingCat = [];
                            //                 for (let i=0; i< res.length; i++) {
                            //                     workingCat.push(res[i].ticketAttrId);
                            //                 }
                            //                 data.workingCat = JSON.stringify(workingCat);
                            //                 util.logData('RESPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP' + JSON.stringify(data.workingCat));
                            //             }
                            //         }
                            //     });
                            //     break;
                            case 64:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 65:
                                params = [data.clientId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 66:
                                params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 67:
                                params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 68:
                                params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 69:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 70:
                                params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }

                                break;
                            case 71:
                                params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 72:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 73:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                break;
                            case 74:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                break;
                            case 75:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 76:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId,
                                data.supportgrp_id, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 77:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 78:
                                params = [data.ticketTypeId, data.clientId, data.user_id, data.supportgrp_id, data.clientId, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 79:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 80:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 81:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 300:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 301:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 302:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 303:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 304:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 306:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 307:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 308:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 310:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 311:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 312:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 313:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 305:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 309:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 321:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.clientId, data.ticketTypeId, data.supportgrp_id, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 314:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 324:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 316:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 317:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 318:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 315:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 325:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 326:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 327:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 322:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 319:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 328:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 343:
                                params = [data.clientId, data.ticketTypeId, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 344:
                                params = [data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 345:
                                params = [data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 411:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 407:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 408:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 409:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 413:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 412:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 401:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 421:
                                params = [data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 422:
                                params = [data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 406:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 405:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 403:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                            case 404:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 402:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 423:
                                params = [data.clientId, data.ticketTypeId, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 329:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 330:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 331:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 332:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 333:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 334:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 335:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 336:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 337:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 338:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 339:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 340:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 341:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 342:
                                params = [data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 414:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 415:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 416:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 417:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 418:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 419:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 419:
                                params = [data.ticketTypeId, data.clientId, data.ticketTypeId, data.clientId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 82:
                                params = [data.ticketTypeId, data.user_id, data.ticketTypeId, data.clientId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.userFilterVal !== '0') {
                                    params.push(data.userFilterVal);
                                }
                                break;
                            case 83:
                                params = [data.clientId, data.ticketTypeId, data.user_id];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                break;
                            case 84:
                                params = [data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }
                                if (data.clientId != '2') {
                                    params.push(data.supportgrp_id);
                                }
                                break;
                            case 85:
                                params = [data.clientId, data.ticketTypeId];
                                if (data.catFilterVal !== '0') {
                                    params.push(data.catFilterVal);
                                }

                                break;
                        } // end switch case
                        if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        } else {
                            let splFlt = data.specialFilterVal.split(",");
                            util.logData("---->params:" + JSON.stringify(params));
                            params.push(splFlt);
                        }

                        //  util.logData('\n\n data.type =====' + data.type);
                        if (data.type == 301) {
                            util.logData('\n\n getDynamicTotCountMenuTicketDtls sql value =====' + sql);
                            util.logData('\n\n getDynamicTotCountMenuTicketDtls**************************************paramas value =====' + JSON.stringify(params));
                        }
                        // if(data.type==='30'){
                        //     cb(null, true, [{"id":"30","value":0}]);
                        // }else {
                        slaveCon.query(sql, params, function (err, result) {
                            if (err) {
                                util.logData(err);
                                cb(err, false);
                            } else {
                                cb(null, true, result);
                            }
                        })
                        // }
                    }
                } else {
                    logData('getDynamicMenuCount err-----------------------' + data.clientId, data.ticketTypeId, data.type);
                    cb(null, false, "Some configuration error");
                }
            }
        })
    }
}

function getDynamicTotCountMenuTicketDtls_new(data, cb) {

    if (data.specialFilterVal == '0') {
        getDynamicMenuCount();
    } else {
        const menuId = data.type;
        data.type = 'b';
        getDashboardCategory(data, function (err, success, value) {
            if (err) {
                cb(err, true);
            } else {
                // util.logData('category value====' + JSON.stringify(value))
                let cat = '';
                for (let i = 0; i < value.length; i++) {
                    if (i === value.length - 1) {
                        cat = cat + value[i].cat_list;
                    } else {
                        cat = cat + value[i].cat_list + ',';
                    }
                }
                data.type = menuId;
                data.specialFilterVal = cat;
                getDynamicMenuCount();
            }
        });

    }

    function getDynamicMenuCount() {

        let base_sql = "SELECT id,query_str,query_param FROM ticket_menu_count_mst_new where client_id = ?  " +
            " and ticket_type_id = ? and menu_id = ? and delete_flag = '0' ";
        slaveCon.query(base_sql, [data.clientId, data.seq, data.type], function (base_err, base_result) {
            if (base_err) {
                logData(base_err);
                cb(base_err, null);
            } else {
                logData('getDynamicMenuCount result-----------------------' + JSON.stringify(base_result));
                if (base_result.length > 0) {
                    let sql = base_result[0].query_str;
                    if (data.userFilterVal === '0') {
                        sql = sql.replace(/\@.*?\@/g, '');
                    }
                    if (data.catFilterVal === '0' && data.userFilterVal === '0') {
                        sql = sql.replace(/\[.*?\]/g, '');

                    } else {
                        if (data.type != '62') {

                            if (data.catFilterVal !== '0') {
                                sql = sql.replace(/\[.*?\]/g, ' and a.working_category =? ');
                            }
                            // if (data.userFilterVal !== '0') {
                            //     sql = sql.replace(/\[.*?\]/g, ' and  e.user_id =? ');
                            //     sql = sql.replace(/\@.*?\@/g, ' and  e.user_id =? ');
                            // }
                            if (data.userFilterVal !== '0') {
                                if (sql.match(/\@.*?\@/g) !== null) {

                                    sql = sql.replace(/\[.*?\]/g, '');
                                    sql = sql.replace(/\@.*?\@/g, ' and  e.user_id =? ');
                                } else {
                                    sql = sql.replace(/\[.*?\]/g, ' and  e.user_id =? ');
                                }

                            }
                        } else {
                            if (data.catFilterVal !== '0') {
                                sql = sql.replace(/\[.*?\]/g, ' and b.working_category =? ');
                            }
                            if (data.userFilterVal !== '0') {
                                sql = sql.replace(/\[.*?\]/g, ' and  a.user_id =? ');
                            }
                        }
                    }

                    if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                        sql = sql.replace(/\{.*?\}/g, '');
                    } else {
                        sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                    }

                    // if (data.suppFilter === '0' || data.suppFilter === 0) {
                    //     sql = sql.replace(/\{.*?\}/g, '');
                    // } else {
                    //     sql = sql.replace(/\{.*?\}/g, ' and SPLIT_STR(categoryDtlsLt,\'#\',10) in (?) ');
                    // }


                    let params = [];
                    const newParams = base_result[0].query_param.split(',');
                    for (let i = 0; i < newParams.length; i++) {
                        params.push(eval(newParams[i]));
                    }
                    if (data.catFilterVal !== '0') {
                        params.push(data.catFilterVal);
                    }
                    if (data.userFilterVal !== '0') {
                        params.push(data.userFilterVal);
                    }
                    if (data.specialFilterVal === '0' || data.specialFilterVal === 0) {
                    } else {
                        let splFlt = data.specialFilterVal.split(",");
                        // util.logData("---->params:" + JSON.stringify(params));
                        params.push(splFlt);
                    }
                    // util.logData('\n\n getDynamicTotCountMenuTicketDtls sql value =====' + sql);
                    // util.logData("---->params:" + JSON.stringify(params));
                    slaveCon.query(sql, params, function (err, result) {
                        if (err) {
                            util.logData(err);
                            cb(err, false);
                        } else {
                            cb(null, true, result);
                        }
                    })
                    // }

                } else {
                    logData('getDynamicMenuCount err-----------------------' + data.clientId, data.ticketTypeId, data.type);
                    cb(null, false, "Some configuration error");
                }
            }
        })
    }
}

function getMultipleAttributesParentWiseForLnTCHR(data, cb) {
    function getCategories(callback) {
        let sql, params;
        if (data.lastId && Number(data.lastId) > 0) {
            if (data.type === 'n') {
                sql = "SELECT distinct a.id, a.ATTRVAL category, b.header_name header, a.parentPath FROM TICKETATTRIBUTES a, attributesHeaderMst b, dashboard_category c WHERE a.id > ? and a.CLIENTID = ? AND a.ATTRID = 1 AND a.attrHeaderMstId = b.id AND a.DeleteFlag = '0' and c.client_id =a.CLIENTID AND c.user_id = ? AND c.cat_list = a.PARENT_ID And c.seq = ? AND c.DeleteFlag = 0  AND b.DeleteFlag = 0 ORDER BY a.id ASC LIMIT ?;"
            } else {
                sql = "SELECT * from (SELECT distinct a.id, a.ATTRVAL category, b.header_name header, a.parentPath FROM TICKETATTRIBUTES a, attributesHeaderMst b, dashboard_category c WHERE a.id < ? and a.CLIENTID = ? AND a.ATTRID = 1 AND a.attrHeaderMstId = b.id AND a.DeleteFlag = '0' and c.client_id =a.CLIENTID AND c.user_id = ? AND c.cat_list = a.PARENT_ID  And c.seq = ? AND c.DeleteFlag = 0 AND b.DeleteFlag = 0 ORDER BY a.id DESC LIMIT ? ) z order by z.id ASC;"
            }
            params = [data.lastId, data.clientId, data.user_id, Number(data.seq) - 1, Number(data.limit)];
        } else {
            sql = "SELECT distinct a.id, a.ATTRVAL category, b.header_name header, a.parentPath FROM TICKETATTRIBUTES a, attributesHeaderMst b, dashboard_category c WHERE a.id > 0 and a.CLIENTID = ? AND a.ATTRID = 1 AND a.attrHeaderMstId = b.id AND a.DeleteFlag = '0' and c.client_id = a.CLIENTID  AND c.user_id = ? AND c.cat_list = a.PARENT_ID  And c.seq = ? AND c.DeleteFlag = 0 AND b.DeleteFlag = 0 ORDER BY a.id ASC LIMIT ?;"
            params = [data.clientId, data.user_id, Number(data.seq) - 1, Number(data.limit)];
        }
        // util.logData(sql)
        // util.logData(params);
        con.query(sql, params, function (err, result1) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result1.length > 0) {
                    function getSelectedValue(callback) {
                        let cat_arr = [];
                        for (let i = 0; i < result1.length; i++) {
                            cat_arr.push(result1[i].id);
                        }
                        let sql = 'select cat_list from dashboard_category where client_id=? and user_id=? and seq=? and cat_list in (?) and DeleteFlag=0';
                        con.query(sql, [data.clientId, data.user_id, data.seq, cat_arr], function (err, result) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                let arr = [];
                                for (let i = 0; i < result.length; i++) {
                                    arr.push(result[i].cat_list);
                                }
                                callback(null, {
                                    firstId: result1[0].id,
                                    lastId: result1[result1.length - 1].id,
                                    selected: arr
                                });
                            }
                        });
                    }

                    function getParentPath(callback) {
                        let count = 0;
                        let tot = [];
                        con.getConnection(function (err, conn) {
                            if (err) {
                                logData(err);
                                console.log("\n\n connections : " + con._allConnections.length)
                                callback(err, null);
                            } else {
                                for (let j = 0; j < result1.length; j++) {
                                    let sql2 = 'select ATTRVAL ,' + result1[j].id + ' id ,' + j + ' pos  from TICKETATTRIBUTES where id IN(' + result1[j].parentPath + ')';
                                    conn.query(sql2, function (err, result) {
                                        if (err) {
                                            logData(err);
                                            conn.release();
                                            callback(err, null);
                                        } else {
                                            let arr = "";
                                            for (let i = 0; i < result.length; i++) {
                                                arr = arr + result[i].ATTRVAL + "/";
                                            }
                                            tot.push({ title: arr, pos: result[0].pos });
                                            count++;
                                            if (count === result1.length) {
                                                for (let i = 0; i < tot.length; i++) {
                                                    result1[tot[i].pos].title = tot[i].title;
                                                }
                                                conn.release();
                                                callback(null, result1);
                                            }
                                        }
                                    })

                                }
                            }
                        })
                    }

                    async.parallel([getSelectedValue, getParentPath], function (err, results) {
                        if (err) {
                            callback(err)
                        } else {
                            callback(null, {
                                cat: results[1],
                                selected: results[0].selected,
                                firstId: results[0].firstId,
                                lastId: results[0].lastId
                            });
                        }
                    })
                } else {
                    callback(null, { cat: result1 });
                }
            }
        });
    }

    function totalData(callback) {
        const sql = "select count(id) count  from TICKETATTRIBUTES a where  a.CLIENTID = ? and a.PARENT_ID IN (select cat_list from dashboard_category where client_id=? and user_id=? and seq=? and DeleteFlag=0) and a.ATTRID=1 and a.DeleteFlag = '0';";
        const params = [data.clientId, data.clientId, data.user_id, Number(data.seq) - 1];
        con.query(sql, params, function (err, result1) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result1);
            }
        });
    }

    let func;
    if (data.lastId && Number(data.lastId) > 0) {
        func = [getCategories];
    } else {
        func = [getCategories, totalData];
    }
    let sql = "select status from dashboard_status where client_id=? and user_id=? and seq=?";
    const params = [data.clientId, data.user_id, Number(data.seq) - 1];
    con.query(sql, params, function (err, details) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (details.length > 0 && Number(details[0].status) === 0) {
                cb(null, false, "Selected Categories still going on.Please try after some time")
            } else {
                async.parallel(func, function (err, results) {
                    if (err) {
                        cb(err, false);
                    } else {
                        // util.logData(JSON.stringify(results))
                        const cat = results[0].cat;
                        if (data.lastId && Number(data.lastId) > 0) {
                            if (cat.length > 0) {
                                cb(null, true, {
                                    cat: cat,
                                    lastId: results[0].lastId,
                                    firstId: results[0].firstId,
                                    selected: results[0].selected
                                });
                            } else {
                                cb(null, true, { cat: cat });
                            }
                        } else {
                            if (cat.length > 0) {
                                cb(null, true, {
                                    cat: cat,
                                    total: results[1][0].count,
                                    lastId: results[0].lastId,
                                    firstId: results[0].firstId,
                                    selected: results[0].selected
                                });
                            } else {
                                cb(null, true, { cat: cat, total: results[1][0].count });
                            }
                        }
                    }
                })
            }
        }
    });


}


function level(jsonArr, selected) {
    const Farray = [];

    for (let i = 0; i < jsonArr.length; i++) {
        const json = jsonArr[i];

        const parent = json.parent;

        const CArray = [];
        CArray.push({ id: json.id, title: json.title });

        for (let j = 0; j < jsonArr.length; j++) {
            if (j !== i) {
                const PTEMP = jsonArr[j].parent;

                if (PTEMP === parent) {
                    CArray.push({ id: jsonArr[j].id, title: jsonArr[j].title });
                }
            }
        }

        const jsonNEW = { Parent: parent, Children: CArray };

        if (Farray.length > 0) {
            let flag = true;

            for (let j = 0; j < Farray.length; j++) {

                if (Farray[j].Parent === jsonNEW.Parent) {
                    flag = false;
                    break;
                }
            }

            if (flag) {
                Farray.push(jsonNEW);
            }

        } else {
            Farray.push(jsonNEW);
            var Json = { 'Farray': Farray, 'selected': selected }
        }

    }
    return (Json);
}

function getCategoryByGroupForLnTCHR(data, cb) {
    function getCategories(callback) {
        let sql = "SELECT ticketAttrId id,  b.ATTRVAL title,b.ATTRVAL category,b.parentPath,c.header_name header FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b,attributesHeaderMst c where a.ticketAttrId = b.id and c.id=b.attrHeaderMstId  " +
            "  and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ? and a.DeleteFlag = '0' and b.DeleteFlag = '0' and  c.DeleteFlag = '0'";
        con.query(sql, [data.groupId, data.clientId, data.ticket_type], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getSelectedCategories(callback) {
        let sql = 'select cat_list from dashboard_category where client_id=? and user_id=? and seq=? and DeleteFlag=0';
        con.query(sql, [data.clientId, data.user_id, 1], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                let arr = [];
                for (let i = 0; i < result.length; i++) {
                    arr.push(result[i].cat_list);
                }
                callback(null, arr);
            }
        });
    }

    async.parallel([getCategories, getSelectedCategories], function (err, results) {
        if (err) {
            cb(err, false);
        } else {
            const cat = results[0];
            const selected = results[1];
            cb(null, true, { cat: cat, selected: selected });
        }
    })
}

function updateTicketNotificationMst(data, cb) {
    util.logData(data);
    let sql = "UPDATE `ticket_escalation_notification_mst` " +
        "SET `escalation_time_to_calculate`=?, `sla_given_time`=?," +
        " `modify_by_id`=?, `modify_date`= NOW() WHERE `id`=?; ";
    con.query(sql, [data.escalation_time_to_calculate, data.sla_given_time, data.user_id, data.id], function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, 'Updated successfully');
        }
    })
}

function getTicketCategoryDetailsWithGroup(data, cb) {
    function getCategory(callback) {
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' and CLIENTID = " + data.clientId + " and ticket_type=" + data.typeId + " ORDER BY sequence_no";
        // logData('\n\ngetCategory--------------' + sql)
        con.query(sql, function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                let count = 0;
                let arr = [];
                let arr1 = [];
                for (let i = 0; i < result1.length; i++) {
                    let sql1 = 'SELECT a.parent_categoryId parentId,a.categoryId catId,c.ATTRVAL catVal, b.header_name header ' +
                        ' FROM ticketCategory a,attributesHeaderMst b,TICKETATTRIBUTES c ' +
                        ' where a.DeleteFlag=0 and a.parent_categoryId=b.id and  a.categoryId=c.id and a.ticketId=' + data.ticketId + ' ' +
                        ' and  a.parent_categoryId=' + result1[i].id + '; ';
                    // util.logData('\n\nsql1:' + sql1)
                    con.query(sql1, function (err, result) {
                        if (err) {
                            logData('Error2:---' + err);
                            callback(err, null);
                        } else {
                            count++;
                            arr1.push(result[0]);
                            if (count === result1.length) {
                                for (let i = 0; i < result1.length; i++) {
                                    for (let j = 0; j < arr1.length; j++) {
                                        if (result1[i].id === arr1[j].parentId) {
                                            let val;
                                            val = {
                                                id: i + 1,
                                                options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                    id: arr1[j].parentId,
                                                    title: arr1[j].header,
                                                    type: 'header',
                                                    // followup_users_name: arr1[j].followup_users_name
                                                }]
                                            }
                                            arr.push(val);
                                            break;
                                        }
                                    }
                                }
                                // util.logData(JSON.stringify(arr))
                                callback(null, arr)
                            }
                        }
                    })
                }
            }
        });
    }

    function getStatusClient(callback) {
        //var str = 'select id, ATTRVAL name ,Attr_desc description,sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ' + data.clientId + ' and ATTRID=2 and sequence_no NOT IN(0,2)';
        getStatusClientSSC(data, function (err, success, result) {
            if (err) {
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getResolutionNResponseTime(callback) {
        getIsClientWiseSlaCalculationReq({
            "clientId": data.clientId,
            "ticketTypeId": data.typeId,
            "working_category": data.cat_id
        }, function (errCU1, successCU1, detailsUC1) {
            util.logData('getResolutionNResponseTime11111111111111111====' + detailsUC1);
            if (detailsUC1 == 0) {
                var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                    " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                    " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId is null ";
                con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                    if (err) {
                        logData('Error3:---' + err);
                        callback(err, null);
                    } else {
                        // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                        callback(null, result);
                    }
                });
            } else {
                var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                    " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                    " and ACTIVESLA = 'true' and deleteflag = '0'  and supportGroupLevelId =? ";
                con.query(str, [data.clientId, data.typeId, data.ticketId, data.suppGrpId], function (err, result) {
                    if (err) {
                        logData('Error3:---' + err);
                        callback(err, null);
                    } else {
                        // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                        callback(null, result);
                    }
                });
            }
        })

    }

    function getBaseCategory(callback) {
        let sql1 = "SELECT category_level FROM ticket_workflow_generated_on_category where client_id = ? and ticket_type_id = ? and delete_flag = '0' ";
        con.query(sql1, [data.clientId, data.typeId], function (err, det) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (det.length > 0) {
                    let level = Number(det[0].category_level);
                    let count = 1;
                    getCategoryValue();

                    function getCategoryValue(result = []) {
                        if (level === count) {
                            let sql = "SELECT ticketAttrId id,  b.ATTRVAL title FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b where a.ticketAttrId = b.id and a.DeleteFlag = '0' " +
                                " and b.DeleteFlag = '0' and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ? ";
                            con.query(sql, [data.groupId, data.clientId, data.typeId], function (err, result) {
                                if (err) {
                                    logData(err);
                                    callback(err, null);
                                } else {
                                    if (result.length > 1) {
                                        callback(null, { val: result, count: count - 1 });
                                    } else {
                                        count++;
                                        getCategoryValue(result)
                                    }
                                }
                            });
                        } else {
                            let sql1 = 'select id, ATTRVAL title from TICKETATTRIBUTES where PARENT_ID in (SELECT a.categoryId FROM ticketCategory a,attributesHeaderMst b where b.id=a.parent_categoryId and b.clientId=? and b.ticket_type=? and b.sequence_no=? and a.ticketId=? and b.DeleteFlag=0 and a.DeleteFlag=0) and id not in (SELECT a.categoryId FROM ticketCategory a,attributesHeaderMst b where b.id=a.parent_categoryId and b.clientId=? and b.ticket_type=? and b.sequence_no=? and a.ticketId=? and b.DeleteFlag=0 and a.DeleteFlag=0);';
                            con.query(sql1, [data.clientId, data.typeId, count - 1, data.ticketId, data.clientId, data.typeId, count, data.ticketId], function (err, result) {
                                if (err) {
                                    logData(err);
                                    callback(err, null);
                                } else {
                                    if (result.length > 0) {
                                        callback(null, { val: result, count: count - 1 });
                                    } else {
                                        count++;
                                        getCategoryValue(result)
                                    }
                                }
                            });
                        }
                    }

                } else {
                }
            }
        });
    }

    function getAdditionalField(callback) {
        getAddionalFieldWithValue({ ticketId: data.ticketId }, function (err, success, details) {
            if (err) {
                logData('Error6:---' + err);
                callback(err, null);
            } else {
                callback(null, details);
            }
        })
    }

    function getFollowUp(callback) {
        //let sql = 'SELECT followup_users_name FROM tbl_client_specific_master where id = (SELECT coalesce(followup_userid,0) FROM ticket_wise_followup_dtls where ticket_id = ?)';
        let sql = "SELECT coalesce(group_concat(followup_users_name) ,'') followup_users_name  FROM tbl_client_specific_master where id in (SELECT  coalesce(followup_userid,0) " +
            " FROM ticket_wise_followup_dtls where ticket_id = ? and delete_flag= '0' order by id desc )";
        logData('getFollowUp---------' + sql)
        con.query(sql, [data.ticketId], function (err, result) {
            if (err) {
                logData('Error7:---' + err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].followup_users_name != '')
                        callback(null, result)
                    else
                        callback(null, [])
                } else {
                    callback(null, [])
                }

            }
        })
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where  ticket_type=' + data.typeId + ' and client_id=' + data.clientId + " and deleteflag=0";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.typeId
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.typeId
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    async.parallel([getCategory, getStatusClient, getBaseCategory, getAdditionalField, getResolutionNResponseTime, getFollowUp, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            if (results[6].error) {
                cb(null, false, results[6].error)
            } else {
                // let selectedVal=res
                let cat = results[2].val;
                let count = results[2].count;
                for (let i = 0; i < results[0].length; i++) {
                    if (i < count) {
                        results[0][i].isDisabled = true;
                    }
                }
                for (let i = 0; i < cat.length; i++) {
                    if (cat[i].id !== results[0][2].options[0].id) {
                        results[0][count].options.push(cat[i]);
                    }
                }
                cb(null, true, {
                    cat: results[0],
                    status: results[1],
                    fields: results[3],
                    expectedTime: results[4],
                    followUpName: results[5],
                    val: results[6],
                    disabled: count
                });
            }
        }
    })
}

function updateTicketStatusForParallelWork(data, cb) {
    if (data.actionId === 24 || data.actionId === 25) {
        /************************************************************/
        insertSlaStopEndTime({
            "ticketId": data.ticketId,
            "userId": data.userId,
            "wfcClientResultId": data.wfcClientResultId,
            "actionId": data.actionId
        }, function (errSS, successSS, detailsSS) {
            if (errSS || !successSS) {
                logData(errSS + successSS);
                cb(errSS, null);
            } else {
                logData('\n\n*******************666666666666666666666666666*********************')
                request
                    .get(SLA_URL + '/slaCalculation_ticketwise_awaiting')
                    .query({
                        ticketId: data.ticketId,
                        client_id: data.clientId,
                        actionId: data.actionId
                    }) // query string
                    .end((err, resp) => {
                        if (err) {
                            logData(err);
                        } else {
                            // logData('****************************************************done---resp--' + details[0].sequence_no)
                            // logData('****************************************************done---resp--' + detailsP[0].sequence_no)
                            cb(null, true, "OK");
                        }
                        // Do something
                    });

            }
        })
        /************************************************************/

    } else {
        cb(null, true, "OK");
    }
}


// =================================================================================
function getTicketActivityNoficationMst(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                " (select activity_desc from TicketActivityMst where id = a.ticket_activity_id) activity_desc," +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.category_id) category," +
                " subject from ticket_activity_nofication_mst a where a.id > ? and a.client_id = ? and a.delete_flag = 0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "SELECT * from ('select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType," +
                " (select activity_desc from TicketActivityMst where id = a.ticket_activity_id) activity_desc, " +
                "(select ATTRVAL from TICKETATTRIBUTES where id = a.category_id) category, subject" +
                " from ticket_activity_nofication_mst a where a.id < ? and a.client_id = ? " +
                "and a.delete_flag = 0 ORDER BY a.id DESC LIMIT 20) Z ORDER BY Z.id  DSC";
        }


        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);


            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from ticket_activity_nofication_mst a where a.delete_flag = 0";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }

    // let sql = 'SELECT id,notification_type,to_support_group,subject,msg_body_content\n' +
    //     ' FROM ticket_activity_nofication_mst where client_id=? and delete_flag = ? ;';
    // con.query(sql,[data.client_id,0],function(err,result){
    //     if(err){
    //         cb(err,null);
    //     }
    //     else{
    //         cb(null,true,result);
    //     }
    // })
}

function insertTicketActivityNoficationMst(data, cb) {
    let sql = 'INSERT INTO `ticket_activity_nofication_mst` ' +
        '( `client_id`, `ticket_type_id`, `category_id`, `ticket_activity_id`, `notification_type`, ' +
        '`to_support_group`, `subject`, `msg_body_content`,`create_by_id`) ' +
        'VALUES (?,?,?,?,?,?,?,?,?);';
    const insertData = [data.clientId, data.ticket_type_id, data.category_id,
    data.ticket_activity_id, data.notification_type,
    data.to_support_group, data.subject, data.template, data.createdBy];
    con.query(sql, insertData, function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, result.insertId);
        }
    })
}

function deleteTicketActivityNoficationMst(data, cb) {
    let sql = 'UPDATE `ticket_activity_nofication_mst` SET `delete_flag`=? , delete_by_id' +
        '= ? , delete_date = NOW() WHERE `id`=? ;';
    con.query(sql, [1, data.userId, data.id], function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, 'Deleted successfully');
        }
    })
}

function getTicketActivityMst(data, cb) {
    let sql = 'SELECT id , activity_desc FROM TicketActivityMst where DeleteFlag=? ;';
    con.query(sql, [0], function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getFileUploadLogs(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id, a.FileName, a.Status , a.Message, a.UploadDate from FileUploadLogs a where a.id > ? and" +
                " a.ClientID = ? ORDER BY a.id ASC LIMIT ?;";
        } else if (paginationType == 'prev') {
            str = "SELECT * from (select a.id, a.FileName, a.Status , a.Message, a.UploadDate from FileUploadLogs a where a.id < ? and " +
                " a.ClientID = ? ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  DESC";
        }
        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);


            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from FileUploadLogs a where a.ClientID = ?;";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function passwordEncryption(data, cb) {
    bcrypt.hash(data.password, saltRounds, function (err, hash) {
        if (err) {
            util.logData(err);
        } else {
            cb(null, true, hash)
        }
    })
    // cb(null, true, data.password);
}

function updateTicketMenuConfig(data, cb) {
    if (data.func_id === 1) {
        let sql3 = 'select id from TicketFuctionalityDetails where client_id=? and DeleteFlag=? and funcDescription=? and createbyid=? and color_code=? and image=? and sequence_no=? and isManagerialview=?';
        con.query(sql3, [data.client_id, 0, data.func_desc, data.createdBy, data.color, data.image, data.sequence, data.managementValue], function (err, resp1) {
            if (err) {
                cb(err, null);
            } else {
                if (resp1.length >= 1) {
                    cb(null, true, "duplicate value");
                } else {
                    let sql5 = 'SELECT * FROM TicketFuctionalityDetails where client_id = ? and sequence_no >= ? and DeleteFlag = ?';
                    con.query(sql5, [data.client_id, data.sequence, 0], function (err1, result1) {
                        if (err1) {
                            cb(err1, null);
                        } else {
                            util.logData(result1);
                            seq(result1, function (error, success) {
                                if (error) {
                                    util.logData(error);
                                } else {
                                    util.logData(success);
                                    let sql = 'UPDATE `TicketFuctionalityDetails` SET `funcDescription`=?, `createbyid`=?, `color_code`=?, `image`=?, `sequence_no`=?, `isManagerialview`=?, `modifybyid`=?, `modifydate`=NOW() where id=?';
                                    con.query(sql, [data.func_desc, data.createdBy, data.color, data.image, data.sequence, data.managementValue, data.user_id, data.id], function (err, resp) {
                                        if (err) {
                                            cb(err, null);
                                        } else {
                                            cb(null, true, "updated");
                                        }
                                    });
                                }
                            });

                        }
                    });
                }
            }
        });
    } else {
        let sql = 'UPDATE `TicketFuctionalityDetails` SET `funcDescription`=?, `modifybyid`=?, `modifydate`=NOW() where id=?';
        con.query(sql, [data.func_desc, data.user_id, data.id], function (err, resp) {
            if (err) {
                cb(err, null);
            } else {
                cb(null, true, "updated");
            }
        });
    }
}

function PasswordChange(data, cb) {
    var sql = ' select password from USER where id = ? and CLIENTID=? and DeleteFlag = ? ';
    con.query(sql, [data.user_id, data.clientId, 0], function (err, res) {
        if (err) {
            cb(err, null);
        } else {
            bcrypt.compare(data.password, res[0].password).then(function (res) {
                if (res) {
                    bcrypt.hash(data.newPassword, saltRounds, function (err, hash) {
                        if (err) {
                            logData(err);
                        } else {
                            var sql2 = "UPDATE `USER` SET `PASSWORD`=? WHERE `id`=? AND `CLIENTID` = ?;";
                            con.query(sql2, [hash, data.user_id, data.clientId], function (err, result) {
                                logData("---------009------>" + sql2);
                                if (err) {
                                    logData(err);
                                    cb(err, null);
                                } else {
                                    cb(null, true, result.insertId);
                                }
                            });
                        }
                    })
                } else {
                    cb(null, false, "Sorry...Invalid Credentials");
                }
            });

        }
    })

}


function updateTicketMenu(data, cb) {
    let sql = 'UPDATE `TicketFuctionalityDetails` SET `funcDescription`=?, `modifybyid`=?, `modifydate`=NOW() where' +
        ' func_desc_id=? and client_id=?';
    con.query(sql, [data.value, data.user_id, data.func_desc_id, data.clientId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, "updated");
        }
    });
}


function insertEscalationWorkflow(data, cb) {
    var sql = "Select * from escalation_workflow  where CLIENTID = ? and ticket_type = ?" +
        " and categoryId = ? and status_name = ? and DeleteFlag = '0' ";
    con.query(sql, [data.clientId, data.ticketTypeId, data.categoryId, data.statusName], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length == 0) {
                var sql1 = "INSERT INTO `escalation_workflow` (`CLIENTID`, `categoryId`, `isSolutionProvider`, `supportGroupLevelId`,`ticket_type`, `createbyid`, `status_name`, `Status_sequence_action_id`) " +
                    " VALUES (?,?,?,?,?,?,?,?);";
                con.query(sql1, [data.clientId, data.categoryId, data.isSolutionProvider, data.supportGroupLevelId, data.ticketTypeId, data.createdBy, data.statusName, data.status_sequence_action_id], function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        cb(null, true, result1.insertId);
                    }
                });
            } else {
                cb(null, false, 'Duplicate data');
            }
        }
    });
}

function deleteEscalationWorkflow(data, cb) {
    let sql = 'UPDATE `escalation_workflow` SET `DeleteFlag`=? , delete_by_id= ? , DeleteDate = NOW() WHERE `id`=? ;';
    con.query(sql, [1, data.userId, data.id], function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, 'Deleted successfully');
        }
    })
}


function getEscalationWorkflow(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "select a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type) ticketType," +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.categoryId) category," +
                " (SELECT LEVELSHORTDESC FROM `SUPPORTGROUPLEVEL` where id = a.supportGroupLevelId and DeleteFlag=0) supportGroup, " +
                " a.isSolutionProvider, a.status_name from escalation_workflow a where a.id > ? and a.CLIENTID = ?" +
                " and a.DeleteFlag = 0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from (select a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type) ticketType," +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.categoryId) category," +
                " (SELECT LEVELSHORTDESC FROM `SUPPORTGROUPLEVEL` where id = a.supportGroupLevelId and DeleteFlag=0) supportGroup," +
                " a.isSolutionProvider, a.status_name from escalation_workflow a where a.id < ? and a.CLIENTID = ?" +
                " and a.DeleteFlag = 0 ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC";
        }
        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from escalation_workflow a where a.CLIENTID = ? and a.DeleteFlag = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getPriorityClientWise(data, cb) {
    var sql = 'select id,busi_priority_name as priority from BUSINESSPRIORITY where CLIENTID=? and ticket_type =? and DeleteFlag=0';
    con.query(sql, [data.clientId, data.ticketTypeId], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function searchUserDetails(data, cb) {
    if (data.psOrName !== '' && data.psOrName !== null) {
        var sql = "SELECT id, NAME as name ,USERMAIL as email,USERMOBILENO mobile, login_name FROM `USER` where id in (SELECT userId FROM `supportGroupUser` WHERE " +
            " `supportGroupLevelId` in (SELECT id FROM `SUPPORTGROUPLEVEL` WHERE `CLIENTID`=? AND `group_level` = 0 AND DeleteFlag=0) and DeleteFlag = 0) and" +
            " (login_name like Concat('%',?,'%') or NAME like Concat('%',?,'%')) and CLIENTID=? and DeleteFlag=0 limit 20;";
        con.query(sql, [data.clientId, data.psOrName, data.psOrName, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function generateTempSscReport(data, cb) {
    util.logData("============= generateTempSscReport ==========");
    util.logData(JSON.stringify(data));
    request
        .post(REPORT_URL + '/lntReportTempExcel')
        .send(data)
        .end((err, resp) => {
            if (err) {
                // logData(err);
                // cb(null, true);
            } else {
                // cb(null, true);
            }
        });

    cb(null, true);
}

function generateSscReport(data, cb) {
    util.logData("============= generateTempSscReport ==========");
    util.logData(JSON.stringify(data));
    request
        .post(REPORT_URL + '/lntReportInDetailsExcel')
        .send(data)
        .end((err, resp) => {
            if (err) {
                // logData(err);
                // cb(null, true);
            } else {
                // cb(null, true);
            }
        });

    cb(null, true);
}

function getLatestWFCRId(data, cb) {
    var sql = "select id from WFCCLIENTRESULT where id=(select max(x.id) from WFCCLIENTRESULT x where x.PKFIELDVAL = ?  group by x.PKFIELDVAL) and PKFIELDVAL=? ";
    logData('sql------------' + sql)
    con.query(sql, [data.ticketId, data.ticketId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}

function getAdditionalFieldTypeList(data, cb) {
    var sql = 'SELECT id,field_name as name,seq FROM additional_field;';
    con.query(sql, function (err, resp) {
        if (err) {
            cb(err, nul);
        } else {
            cb(null, true, resp);
        }
    })
}

function getTicketByPlannedDateTime(data, cb) {
    var str = "SELECT b.ticket_id, a.planned_activity_start_dt, a.planned_activity_end_dt, a.schedule_start_date, a.schedule_duration," +
        " c.ATTRVAL status FROM `schedule_ticket_dtl` a, `ticket` b, `TICKETATTRIBUTES` c WHERE a.ticket_id = b.id and" +
        " b.tstatus = c.id and a.clientId = " + data.clientId +
        " and  ( a.`planned_activity_start_dt` BETWEEN '" + data.planned_start_dt + "' AND '" + data.planned_end_dt + "' " +
        " or a.`planned_activity_end_dt` BETWEEN '" + data.planned_start_dt + "' AND '" + data.planned_end_dt + "' or " +
        " (a.`planned_activity_start_dt` < '" + data.planned_start_dt + "' AND a.`planned_activity_end_dt` > '" + data.planned_end_dt + "')) order by a.`planned_activity_start_dt`;";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, []);
            }
        }
    });
}

function getTicketByIdMinimal(data, cb) {
    let sql = "select a.id,a.ticket_id,b.ATTRVAL type,a.tName name, a.longDesc brief from ticket a ,TICKETATTRIBUTES b where a.ticketTypeId=b.id and a.clientid=? and a.ticket_id like '%" + data.ticketId + "%' and a.DeleteFlag=0 and b.DeleteFlag=0";
    con.query(sql, [data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getPlannedDateTimeByTicketId(data, cb) {
    let sql = "SELECT * FROM `schedule_ticket_dtl` where ticket_id = ? and clientId = ?";
    con.query(sql, [data.ticketId, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getSupportGroupLevelWise(data, cb) {
    let sql = 'select a.id ,a.LEVELSHORTDESC as name from SUPPORTGROUPLEVEL a ,SupportGrpWithTicketAttributes b where a.id=b.supportGroupLevelId and a.CLIENTID=? and a.group_level < ? and b.ticketAttrId in (select ticketAttrId from SupportGrpWithTicketAttributes where supportGroupLevelId=? and DeleteFlag=0) and a.DeleteFlag=0 and b.DeleteFlag=0; ';
    con.query(sql, [data.clientId, data.grpLevel, data.userGroupId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function getUserByGroupCHR(data, cb) {
    var Fcategory = Number(data.FinalCategory);
    let sql = " SELECT d.id,d.NAME as name " +
        " from supportGroupUser a, CLIENT c, USER d " +
        " where a.userId IN (SELECT DISTINCT user_id FROM dashboard_category WHERE cat_list = ? AND client_id = ? and DeleteFlag=0) and a.CLIENTID = c.id  " +
        " and a.USERID = d.id " +
        " and a.DeleteFlag = 0" +
        " and c.DeleteFlag='0' " +
        " and d.DeleteFlag = '0' " +
        " and a.CLIENTID = " + data.clientId + " and a.supportGroupLevelId=" + data.groupId;
    con.query(sql, [Fcategory, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getUserByGroup1CHR(data, cb) {
    var Fcategory = Number(data.FinalCategory);
    let sql = " SELECT d.id,d.NAME as name " +
        " from supportGroupUser a, CLIENT c, USER d " +
        " where a.userId IN (SELECT DISTINCT user_id FROM dashboard_category WHERE cat_list = ? AND client_id = ? and DeleteFlag=0) and a.CLIENTID = c.id  " +
        " and a.USERID = d.id " +
        " and a.DeleteFlag = 0" +
        " and c.DeleteFlag='0' " +
        " and d.DeleteFlag = '0' " +
        " and a.CLIENTID = " + data.clientId + " and a.supportGroupLevelId=" + data.groupId + " and a.USERID !=" + data.user_id;
    con.query(sql, [Fcategory, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function mapPsnoWithGroup(data, cb) {
    // util.logData("ccccccccccccccccccccccccccccc " + JSON.stringify(data));
    let str = "select ticketAttrId  from SupportGrpWithTicketAttributes where supportGroupLevelId in " +
        "(select supportGroupLevelId from supportGroupUser  where userId = (select id from USER where CLIENTID=? and login_name=? and DeleteFlag=0) and DeleteFlag = 0);";
    con.query(str, [data.clientId, data.refer_user_id], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            if (resp.length === 0) {
                // util.logData('kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk');
                let sql = 'select id from USER where CLIENTID=? and login_name=? and DeleteFlag=0';
                con.query(sql, [data.clientId, data.refer_user_id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            const userId = result[0].id;
                            let sql1 = 'select id from supportGroupUser where clientId=? and supportGroupLevelId=? and userId=? and DeleteFlag=0';
                            con.query(sql1, [data.clientId, data.groupId, userId], function (errU, results) {
                                if (errU) {
                                    logData(errU);
                                    cb(errU, null);
                                } else {
                                    if (results.length === 0) {
                                        var sqlU = "INSERT into supportGroupUser(clientId,supportGroupLevelId,userId,createbyid)" +
                                            " values ( ?,?,?,?) ";
                                        // util.logData(sqlU);
                                        con.query(sqlU, [data.clientId, data.groupId, userId, data.createdBy], function (errU, resultU) {
                                            if (errU) {
                                                logData(errU);
                                                cb(errU, null);
                                            } else {
                                                if (resultU.insertId > 0) {
                                                    cb(null, true, resultU.insertId);
                                                } else {
                                                    cb(null, false, "Data is not inserted");
                                                }
                                            }
                                        });
                                    } else {
                                        cb(null, false, "User is already mapped with this group");
                                    }
                                }
                            });

                        } else {
                            cb(null, false, "Can't found user with this PS No.");
                        }
                        // cb(null, true, result);
                    }
                });
            } else {
                // util.logData(" 00000000000000  "+JSON.stringify(resp[resp.length-1].ticketAttrId));
                // str2 = "select ticketAttrId  from SupportGrpWithTicketAttributes where supportGroupLevelId = ? and DeleteFlag = 0;";
                // con.query(str2, [data.groupId], function (err, resp2) {
                //     if (err) {
                //         cb(err, null);
                //     } else {
                //         // util.logData(JSON.stringify(resp2[resp2.length-1].ticketAttrId));
                //         // util.logData(JSON.stringify(resp[resp.length-1].ticketAttrId));
                //         if (resp[resp.length - 1].ticketAttrId === resp2[resp2.length - 1].ticketAttrId) {
                let sql = 'select id from USER where CLIENTID=? and login_name=? and DeleteFlag=0';
                con.query(sql, [data.clientId, data.refer_user_id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length > 0) {
                            const userId = result[0].id;
                            let sql1 = 'select id from supportGroupUser where clientId=? and supportGroupLevelId=? and userId=? and DeleteFlag=0';
                            con.query(sql1, [data.clientId, data.groupId, userId], function (errU, results) {
                                if (errU) {
                                    logData(errU);
                                    cb(errU, null);
                                } else {
                                    if (results.length === 0) {
                                        var sqlU = "INSERT into supportGroupUser(clientId,supportGroupLevelId,userId,createbyid)" +
                                            " values ( ?,?,?,?) ";
                                        // util.logData(sqlU);
                                        con.query(sqlU, [data.clientId, data.groupId, userId, data.createdBy], function (errU, resultU) {
                                            if (errU) {
                                                logData(errU);
                                                cb(errU, null);
                                            } else {
                                                if (resultU.insertId > 0) {
                                                    cb(null, true, resultU.insertId);
                                                } else {
                                                    cb(null, false, "Data is not inserted");
                                                }
                                            }
                                        });
                                    } else {
                                        cb(null, false, "User is already mapped with this group");
                                    }
                                }
                            });

                        } else {
                            cb(null, false, "Can't found user with this PS No.");
                        }
                        // cb(null, true, result);
                    }
                });
                //         } else {
                //             cb(null, false, 'This user does not belong to this category!!');
                //         }
                //     }
                // })

            }
        }
    })
    //    cb(null,true,"Testing.............!!");/
}

function getSupportGroupUserMappingCategoryWise_old(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (data.grpLevel === '4') {
            if (paginationType == 'next' || paginationType == '') {
                str = "SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id > " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level <= " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0' order by a.id asc LIMIT " + page_size;
            } else if (paginationType == 'prev') {
                str = "select * from ( SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id < " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level < " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0'  ORDER BY a.id DESC LIMIT " + page_size + " )" +
                    " z ORDER BY z.id  ASC;"
            }
        } else {
            if (paginationType == 'next' || paginationType == '') {
                str = "SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id > " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level < " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0' order by a.id asc LIMIT " + page_size;
            } else if (paginationType == 'prev') {
                str = "select * from ( SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id < " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level < " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0'  ORDER BY a.id DESC LIMIT " + page_size + " )" +
                    " z ORDER BY z.id  ASC;"
            }
        }
        logData('aaaaaaaaa---------------' + str);
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                for (let i = 0; i < done.length; i++) {
                    done[i].is_spoc = stringToBool(done[i].is_spoc);
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        if (data.grpLevel === '4') {

            var str1 = "SELECT count(a.id) count from supportGroupUser a,  USER d , SUPPORTGROUPLEVEL b," +
                "SupportGrpWithTicketAttributes c where  a.CLIENTID = ? and " +
                " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level <= ? and a.supportGroupLevelId =c.supportGroupLevelId " +
                " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                " SupportGrpWithTicketAttributes where supportGroupLevelId=? and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                " and d.DeleteFlag = '0' ;";
        } else {

            var str1 = "SELECT count(a.id) count from supportGroupUser a,  USER d , SUPPORTGROUPLEVEL b," +
                "SupportGrpWithTicketAttributes c where  a.CLIENTID = ? and " +
                " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level < ? and a.supportGroupLevelId =c.supportGroupLevelId " +
                " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                " SupportGrpWithTicketAttributes where supportGroupLevelId=? and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                " and d.DeleteFlag = '0'";
        }
        con.query(str1, [data.clientId, data.grpLevel, data.userGroupId], function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getSupportGroupUserMappingCategoryWise(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        if (data.grpLevel === '4') {
            if (paginationType == 'next' || paginationType == '') {
                str = "SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id > " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level != '0' and b.group_level <= " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0' order by a.id asc LIMIT " + page_size;
            } else if (paginationType == 'prev') {
                str = "select * from ( SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id < " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level != '0' and b.group_level < " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0'  ORDER BY a.id DESC LIMIT " + page_size + " )" +
                    " z ORDER BY z.id  ASC;"
            }
        } else {
            if (paginationType == 'next' || paginationType == '') {
                str = "SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id > " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level != '0' and b.group_level < " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0' order by a.id asc LIMIT " + page_size;
            } else if (paginationType == 'prev') {
                str = "select * from ( SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
                    " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.id < " + offset + " and a.CLIENTID = " + data.clientId + " and " +
                    " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level != '0' and b.group_level < " + data.grpLevel + " and a.supportGroupLevelId =c.supportGroupLevelId " +
                    " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                    " SupportGrpWithTicketAttributes where supportGroupLevelId=" + data.userGroupId + " and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                    " and d.DeleteFlag = '0'  ORDER BY a.id DESC LIMIT " + page_size + " )" +
                    " z ORDER BY z.id  ASC;"
            }
        }
        logData('aaaaaaaaa---------------' + str);
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                for (let i = 0; i < done.length; i++) {
                    done[i].is_spoc = stringToBool(done[i].is_spoc);
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        if (data.grpLevel === '4') {
            var str1 = "SELECT count(a.id) count from supportGroupUser a,  USER d , SUPPORTGROUPLEVEL b," +
                "SupportGrpWithTicketAttributes c where  a.CLIENTID = ? and " +
                " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level != '0' and b.group_level <= ? and a.supportGroupLevelId =c.supportGroupLevelId " +
                " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                " SupportGrpWithTicketAttributes where supportGroupLevelId=? and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                " and d.DeleteFlag = '0' ;";
        } else {
            var str1 = "SELECT count(a.id) count from supportGroupUser a,  USER d , SUPPORTGROUPLEVEL b," +
                "SupportGrpWithTicketAttributes c where  a.CLIENTID = ? and " +
                " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level != '0' and b.group_level < ? and a.supportGroupLevelId =c.supportGroupLevelId " +


                " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
                " SupportGrpWithTicketAttributes where supportGroupLevelId=? and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
                " and d.DeleteFlag = '0'";
        }
        con.query(str1, [data.clientId, data.grpLevel, data.userGroupId], function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}


function getTicketStatusForCHRselfAssign(data, cb) {
    let sql = "select ATTRVAL,sequence_no from TICKETATTRIBUTES where id = " +
        "(select tStatus from WFCCLIENTRESULT where id  = (select max(id) from WFCCLIENTRESULT where PKFIELDVAL = ?) and DeleteFlag = 0);"
    con.query(sql, [data.tId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function getTicketCreateLoadingDtls_lntchr(data, cb) {
    function getAttributesMstParentWise(callback) {
        let sql1 = "select Categories from LNT_CHR_ENDUSER_CATEGORIES where clientId=? and LoginName=? and DeleteFlag=0";
        con.query(sql1, [data.clientId, data.ref_user_id], function (err, result1) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result1.length > 0) {
                    const totalCategories = result1[0].Categories.split(',');
                    const lastCat = totalCategories[totalCategories.length - 1].split('#')[1];

                    // const lastHeader = totalCategories[totalCategories.length - 1].split('#')[0];

                    function lastCategoryDetails(callback1) {
                        let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = ? and PARENT_ID =? and ATTRID = 1 and DeleteFlag = '0'";
                        con.query(sql, [data.clientId, lastCat], function (err, result) {
                            if (err) {
                                logData(err);
                                callback1(err, null);
                            } else {
                                callback1(null, result);
                            }
                        });
                    }

                    function lastHeaderDetails(callback1) {
                        let sql2 = "select id,header_name title,sequence_no from attributesHeaderMst where CLIENTID=? and ticket_type=? and sequence_no=? and DeleteFlag = '0'";
                        con.query(sql2, [data.clientId, data.ticket_type, totalCategories.length + 1], function (err, result) {
                            if (err) {
                                logData(err);
                                callback1(err, null);
                            } else {
                                if (result.length > 0) {
                                    result[0].type = 'header';
                                    callback1(null, result);
                                }
                            }
                        });
                    }

                    async.parallel([lastHeaderDetails, lastCategoryDetails], function (err, details) {
                        if (err) {
                            callback(err, null);
                        } else {
                            let arr = [];
                            arr.push(details[0][0]);
                            for (let i = 0; i < details[1].length; i++) {
                                arr.push(details[1][i]);
                            }
                            callback(null, arr);
                        }
                    })
                } else {
                    callback(null, []);
                }
            }
        })

    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where deleteflag=0 and ticket_type=' + data.ticket_type + ' and client_id=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.ticket_type
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type + ' and CLIENTID=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getCategory(callback) {
        let sql1 = "select Categories from LNT_CHR_ENDUSER_CATEGORIES where clientId=? and LoginName=? and DeleteFlag=0";
        con.query(sql1, [data.clientId, data.ref_user_id], function (err, result1) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                util.logData(result1);
                if (result1.length > 0) {
                    const totalCategories = result1[0].Categories.split(',');
                    let arr = [];
                    let count = 0;
                    for (let i = 0; i < totalCategories.length; i++) {
                        util.logData(totalCategories[i].split('#')[1]);
                        let sql = 'select a.id,a.ATTRVAL title,b.sequence_no seq,b.id headerId,b.header_name name from TICKETATTRIBUTES a,attributesHeaderMst b where a.attrHeaderMstId=b.id and a.id=? and a.DeleteFlag=0 and b.DeleteFlag=0';
                        con.query(sql, [totalCategories[i].split('#')[1]], function (err, result) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                util.logData(JSON.stringify(result))
                                arr.push(result[0]);
                                count++;
                                if (count === totalCategories.length) {
                                    arr.sort(function (a, b) {
                                        return a.id - b.id
                                    });
                                    const a = [];
                                    // util.logData(JSON.stringify(arr))
                                    for (let j = 0; j < arr.length; j++) {
                                        a.push([{ id: arr[j].id, title: arr[j].title }, {
                                            id: arr[j].headerId,
                                            title: arr[j].name,
                                            type: 'header'
                                        }]);
                                    }
                                    callback(null, a);
                                }
                            }
                        });
                    }
                } else {
                    callback(null, []);
                }
            }
        })
    }

    async.parallel([getAttributesMstParentWise, getSubTicketType, getCategory, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[3].error) {
                cb(null, false, results[3].error)
            } else {
                // cb(null, true, results[3]);
                let arr = [];
                let count = 0;
                for (let i = 0; i < results[2].length; i++) {
                    count++;
                    arr.push({ id: count, options: results[2][i], isDisabled: true });

                }
                arr.push({ id: count + 1, options: results[0], isDisabled: false });
                // cb(null, true, arr);
                cb(null, true, [{
                    attribute: arr,
                    // clientId: step1Result[0].CLIENTID,
                    val: results[3],
                    subtype: results[1],
                    disabled: results[2].length
                }])

            }
        }
    })

}

function getTicketCategoryDetails_lntchr(data, cb) {
    function getCategory(callback) {
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' and CLIENTID = " + data.clientId + " and ticket_type=" + data.typeId + " ORDER BY sequence_no";
        // logData('\n\ngetCategory--------------' + sql)
        con.query(sql, function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                let count = 0;
                let arr = [];
                let arr1 = [];
                for (let i = 0; i < result1.length; i++) {
                    let sql1 = 'SELECT a.parent_categoryId parentId,a.categoryId catId,c.ATTRVAL catVal, b.header_name header ' +
                        ' FROM ticketCategory a,attributesHeaderMst b,TICKETATTRIBUTES c ' +
                        ' where a.DeleteFlag=0 and a.parent_categoryId=b.id and  a.categoryId=c.id and a.ticketId=' + data.ticketId + ' ' +
                        ' and  a.parent_categoryId=' + result1[i].id + '; ';
                    // util.logData('\n\nsql1:' + sql1)
                    con.query(sql1, function (err, result) {
                        if (err) {
                            logData('Error2:---' + err);
                            callback(err, null);
                        } else {
                            count++;
                            arr1.push(result[0]);
                            if (count === result1.length) {
                                for (let i = 0; i < result1.length; i++) {
                                    for (let j = 0; j < arr1.length; j++) {
                                        if (result1[i].id === arr1[j].parentId) {
                                            let val;
                                            if (i < Number(data.disableField)) {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header',
                                                        // followup_users_name: arr1[j].followup_users_name
                                                    }],
                                                    isDisabled: true
                                                }
                                            } else {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header'
                                                    }],
                                                }
                                            }
                                            arr.push(val);
                                            break;
                                        }
                                    }
                                }
                                // util.logData(JSON.stringify(arr));
                                callback(null, arr);
                            }
                        }
                    })
                }
            }
        });
    }

    function getStatusClient(callback) {
        //var str = 'select id, ATTRVAL name ,Attr_desc description,sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ' + data.clientId + ' and ATTRID=2 and sequence_no NOT IN(0,2)';
        getStatusClientSSC(data, function (err, success, result) {
            if (err) {
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getResolutionNResponseTime(callback) {
        getIsClientWiseSlaCalculationReq({
            "clientId": data.clientId,
            "ticketTypeId": data.typeId,
            "working_category": data.cat_id
        }, function (errCU1, successCU1, detailsUC1) {
            if (detailsUC1 == 0) {
                var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                    " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                    " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId is null ";
                con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                    if (err) {
                        logData('Error3:---' + err);
                        callback(err, null);
                    } else {
                        // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                        callback(null, result);
                    }
                });
            } else {
                var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                    " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                    " and ACTIVESLA = 'true' and deleteflag = '0'  and supportGroupLevelId =? ";
                con.query(str, [data.clientId, data.typeId, data.ticketId, data.suppGrpId], function (err, result) {
                    if (err) {
                        logData('Error3:---' + err);
                        callback(err, null);
                    } else {
                        // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                        callback(null, result);
                    }
                });
            }
        })

    }

    function getBaseCategory(callback) {
        let sql1 = "select Categories from LNT_CHR_ENDUSER_CATEGORIES where clientId=? and LoginName=? and DeleteFlag=0";
        con.query(sql1, [data.clientId, data.createbyid], function (err, result1) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result1.length > 0) {
                    const totalCategories = result1[0].Categories.split(',');
                    const lastCat = totalCategories[totalCategories.length - 1].split('#')[1];
                    let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = ? and PARENT_ID =? and ATTRID = 1 and DeleteFlag = '0'";
                    con.query(sql, [data.clientId, lastCat], function (err, result) {
                        if (err) {
                            logData(err);
                            callback(err, null);
                        } else {
                            callback(null, result);
                        }
                    });

                } else {
                    callback(null, []);
                }
            }
        })

        // const seq = Number(data.disableField) + 1;
        // let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and sequence_no=? and CLIENTID = " + data.clientId + " and ticket_type=" + data.typeId;
        // con.query(sql, [seq], function (err, result1) {
        //     if (err) {
        //         logData('Error4:---' + err);
        //         callback(err, null);
        //     } else {
        //         let sql1 = 'select id, ATTRVAL title from TICKETATTRIBUTES where DeleteFlag=0 and attrHeaderMstId=' + result1[0].id + ';'
        //         con.query(sql1, function (err, result) {
        //             if (err) {
        //                 logData('Error5:---' + err);
        //                 callback(err, null);
        //             } else {
        //                 callback(null, result)
        //             }
        //         });
        //     }
        // })
    }

    function getAdditionalField(callback) {
        getAddionalFieldWithValue({ ticketId: data.ticketId }, function (err, success, details) {
            if (err) {
                logData('Error6:---' + err);
                callback(err, null);
            } else {
                callback(null, details);
            }
        })
    }

    function getFollowUp(callback) {
        //let sql = 'SELECT followup_users_name FROM tbl_client_specific_master where id = (SELECT coalesce(followup_userid,0) FROM ticket_wise_followup_dtls where ticket_id = ?)';
        let sql = "SELECT coalesce(group_concat(followup_users_name) ,'') followup_users_name  FROM tbl_client_specific_master where id in (SELECT  coalesce(followup_userid,0) " +
            " FROM ticket_wise_followup_dtls where ticket_id = ? and delete_flag= '0' order by id desc )";
        logData('getFollowUp---------' + sql)
        con.query(sql, [data.ticketId], function (err, result) {
            if (err) {
                logData('Error7:---' + err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].followup_users_name != '')
                        callback(null, result)
                    else
                        callback(null, [])
                } else {
                    callback(null, [])
                }

            }
        })
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where  ticket_type=' + data.typeId + ' and client_id=' + data.clientId + " and deleteflag=0";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.typeId
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.typeId
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    async.parallel([getCategory, getStatusClient, getBaseCategory, getAdditionalField, getResolutionNResponseTime, getFollowUp, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            if (results[6].error) {
                cb(null, false, results[2].error)
            } else {
                for (let i = 0; i < results[2].length; i++) {
                    // util.logData(results[2][i].id,results[0][2].options[0].id);
                    if (results[2][i].id !== results[0][Number(data.disableField)].options[0].id) {
                        results[0][Number(data.disableField)].options.push(results[2][i]);
                    }
                }
                cb(null, true, {
                    cat: results[0],
                    status: results[1],
                    fields: results[3],
                    expectedTime: results[4],
                    followUpName: results[5],
                    val: results[6]
                });
            }
        }
    })
}

function getUserGroupRoleDetails(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (offset == "0") {
                var totalCount = results.totalData[0].count;
                var divRes = totalCount / page_size;
                var remainder = totalCount % page_size;
                var totalPage = 0;
                if (remainder == 0) {
                    totalPage = parseInt(divRes);
                } else {
                    totalPage = parseInt(divRes) + 1;
                }
                results['totalPage'] = totalPage;
            }
            if (results.dataObj.length > 0) {
                var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                var previousOffset = results.dataObj[0].id;
                results['nextOffset'] = nextOffset;
                results['previousOffset'] = previousOffset;
            }
            cb(null, true, results);
        });

    function dataObj(cb) {
        var param = [];
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT c.id, c.is_spoc, a.NAME AS user, d.LEVELSHORTDESC AS groupname," +
                " a.USERMAIL AS email, a.USERMOBILENO AS mobile, a.login_name, a.address" +
                " FROM USER a, supportGroupUser c, SUPPORTGROUPLEVEL d " +
                " WHERE c.userId = a.id " +
                " AND c.supportGroupLevelId = d.id " +
                " AND c.DeleteFlag = '0' AND a.DeleteFlag = '0'";
            if (data.supportGroupId > 0) {
                str = str + " and c.supportGroupLevelId = ? and d.id = ?";
                param = [data.supportGroupId, data.supportGroupId];
            }
            str = str + " and a.CLIENTID = ? and c.id > ? ORDER BY c.id LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from ( SELECT c.id, c.is_spoc, a.NAME AS user, d.LEVELSHORTDESC AS groupname," +
                " a.USERMAIL AS email, a.USERMOBILENO AS mobile, a.login_name, a.address" +
                " FROM USER a, supportGroupUser c, SUPPORTGROUPLEVEL d " +
                " WHERE c.userId = a.id " +
                " AND c.supportGroupLevelId = d.id " +
                " AND c.DeleteFlag = '0' AND a.DeleteFlag = '0'";
            if (data.supportGroupId > 0) {
                str = str + " and c.supportGroupLevelId = ? and d.id = ?";
                param = [data.supportGroupId, data.supportGroupId];
            }
            str = str + " and a.CLIENTID = ? and c.id < ? ORDER BY c.id DESC LIMIT ? ) z ORDER BY z.id  ASC;"
        }
        param.push(data.clientId);
        param.push(offset);
        param.push(Number(page_size));
        con.query(str, param, function (err, done) {
            if (err) {
                util.logData('---Error from getUserGroupRoleDetails inside DataAccess.js----');
                util.logData(err);
                cb(err, null);
            } else {
                for (let i = 0; i < done.length; i++) {
                    done[i].is_spoc = stringToBool(done[i].is_spoc);
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var param1 = [];
        var str1 = " SELECT count(c.id) count " +
            " FROM USER a, supportGroupUser c, SUPPORTGROUPLEVEL d " +
            " WHERE c.userId = a.id " +
            "  And c.supportGroupLevelId = d.id " +
            "  AND c.DeleteFlag = '0' AND a.DeleteFlag = '0'";
        if (data.supportGroupId > 0) {
            str1 = str1 + " and c.supportGroupLevelId = ? and d.id = ?";
            param1 = [data.supportGroupId, data.supportGroupId];
        }
        str1 = str1 + " and a.CLIENTID = ?";
        param1.push(data.clientId)
        con.query(str1, param1, function (err, done) {
            if (err) {
                util.logData('---Error from getUserGroupRoleDetails inside DataAccess.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function searchAllUser(data, cb) {
    if (data.psOrName !== '' && data.psOrName !== null) {
        if (data.roleId !== '0') {
            var sql = "SELECT  ROLEUSER.USERID as id,USER.NAME as name, USER.login_name, USER.address FROM ROLEUSER,USER where ROLEUSER.DeleteFlag= 0 and" +
                " ROLEUSER.USERID = USER.id and ROLEUSER.ROLEID=" + data.roleId + " and " +
                " (USER.login_name like '%" + data.psOrName + "%' or USER.NAME like '%" + data.psOrName + "%') and ROLEUSER.CLIENTID=" +
                data.clientId + " limit 100;";
        } else {
            var sql = "SELECT id, NAME as name ,USERMAIL as email,USERMOBILENO mobile, login_name, USER.address FROM `USER` where " +
                " (login_name like '%" + data.psOrName + "%' or NAME like '%" + data.psOrName + "%') and " +
                " CLIENTID=" + data.clientId + " and DeleteFlag=0 limit 100;";
        }

        con.query(sql, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function getCategoryGroupMapping(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        var param = [];
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT d.id , a.LEVELSHORTDESC groupname ,b.attrval attrVal, (SELECT ATTRVAL FROM TICKETATTRIBUTES where id = d.ticket_type) ticketType  " +
                " FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b " +
                " WHERE d.supportGroupLevelId = a.id " +
                " and d.CLIENTID  = c.id " +
                " and d.ticketAttrId  = b.id " +
                " and a.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and d.DeleteFlag = '0'  " +
                " and b.DeleteFlag = '0'";
            if (data.supportGroupId > 0) {
                str = str + " and d.supportGroupLevelId = ? and a.id = ?";
                param = [data.supportGroupId, data.supportGroupId];
            }
            str = str + " and a.CLIENTID=? and d.id > ?  ORDER BY d.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = " select * from (SELECT d.id , a.LEVELSHORTDESC groupname ,b.attrval attrVal " +
                " FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b " +
                " WHERE d.supportGroupLevelId = a.id " +
                " and d.CLIENTID  = c.id " +
                " and d.ticketAttrId  = b.id " +
                " and a.DeleteFlag = '0' " +
                " and c.DeleteFlag = '0' " +
                " and d.DeleteFlag = '0'  " +
                " and b.DeleteFlag = '0' ";
            if (data.supportGroupId > 0) {
                str = str + " and d.supportGroupLevelId = ? and a.id = ?";
                param = [data.supportGroupId, data.supportGroupId];
            }
            str = str + " and a.CLIENTID=? and d.id < ? ORDER BY d.id DESC LIMIT ?)z ORDER BY z.id  ASC;";
        }
        param.push(data.clientId);
        param.push(offset);
        param.push(Number(page_size));
        con.query(str, param, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var param1 = [];
        var str1 = " SELECT count(d.id) count " +
            " FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b " +
            " WHERE d.supportGroupLevelId = a.id " +
            " and d.CLIENTID  = c.id " +
            " and d.ticketAttrId  = b.id " +
            " and a.DeleteFlag = '0' " +
            " and c.DeleteFlag = '0' " +
            " and d.DeleteFlag = '0'  " +
            " and b.DeleteFlag = '0'";
        if (data.supportGroupId > 0) {
            str1 = str1 + " and d.supportGroupLevelId = ? and a.id = ?";
            var param1 = [data.supportGroupId, data.supportGroupId];
        }
        str1 = str1 + " and a.CLIENTID=" + data.clientId;
        param1.push(data.clientId)
        con.query(str1, param1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getCatfromUrl(data, cb) {
    let sql = "SELECT id FROM TICKETATTRIBUTES where ATTRVAL = ? and attrHeaderMstId in " +
        "(SELECT id FROM attributesHeaderMst where CLIENTID = ? and DeleteFlag = 0 and ticket_type =  " +
        "(SELECT id FROM TICKETATTRIBUTES where ATTRVAL = ? and ATTRID = 3 and CLIENTID = ? and DeleteFlag = 0) and sequence_no = 1);";
    con.query(sql, [data.cat1, data.clientId, data.ticket_type2, data.clientId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            var cat1 = resp[0].id;
            let sql2 = "SELECT id FROM TICKETATTRIBUTES where ATTRVAL = ?  and CLIENTID = ? and DeleteFlag = 0 and PARENT_ID = ?;";
            con.query(sql2, [data.cat2, data.clientId, cat1], function (err, resp2) {
                if (err) {
                    cb(err, null);
                } else {
                    var cat2 = resp2[0].id;
                    let sql3 = "SELECT id FROM TICKETATTRIBUTES where ATTRVAL = ?  and CLIENTID = ? and DeleteFlag = 0 and PARENT_ID = ?;";
                    con.query(sql3, [data.cat3, data.clientId, cat2], function (err, resp3) {
                        if (err) {
                            cb(err, null);
                        } else {
                            var cat3 = resp3[0].id;
                            util.logData(cat2);
                            let result = {
                                cat1: cat1,
                                cat2: cat2,
                                cat3: cat3
                            };
                            cb(null, true, result);
                        }
                    })
                }
            })
        }
    })
}

function getTicketCreateLoadingDtls_citapps(data, cb) {
    function getAttributesHeaderMst(callback) {
        let sql = "select id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID = " + data.clientId + " and ticket_type = " + data.ticket_type + "  ORDER BY sequence_no";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                for (let i = 0; i < result.length; i++) {
                    result[i].type = 'header';
                }
                callback(null, result);
            }
        });
    }

    function getAttributesMstParentWise(callback) {
        let sql = "select id,ATTRVAL title from TICKETATTRIBUTES where CLIENTID = " + data.clientId + " and PARENT_ID =" + data.cat3 + " and ATTRID = 1 and DeleteFlag = '0'";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function checkPriorityType(callback) {
        let sql = 'select ticket_priority_type from ticket_priority_configuration where deleteflag=0 and ticket_type=' + data.ticket_type + ' and client_id=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].ticket_priority_type === 1) {
                        getBusinessUrgencyTicketTypeWise({
                            clientId: data.clientId,
                            ticket_type: data.ticket_type
                        }, function (err, success, urgency) {
                            if (err) {
                                logData(err);
                                callback(err, null);
                            } else {
                                getBusinessImpactTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.ticket_type
                                }, function (err, success, impact) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        callback(null, {
                                            type: result[0].ticket_priority_type,
                                            impact: impact,
                                            urgency: urgency
                                        })
                                    }
                                })
                            }
                        })
                    }
                    if (result[0].ticket_priority_type === 2) {
                        callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                    }
                } else {
                    callback(null, { error: 'Please add Priority type' })
                }
            }
        });
    }

    function getSubTicketType(callback) {
        let sql = 'select id, ATTRVAL type,sequence_no seq from TICKETATTRIBUTES where DeleteFlag =0 and PARENT_ID=' + data.ticket_type + ' and CLIENTID=' + data.clientId;
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getCategory1(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat1], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });

    }

    function getCategory2(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat2], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    function getCategory3(callback) {
        let sql = 'select id,ATTRVAL title from TICKETATTRIBUTES where id=?';
        con.query(sql, [data.cat3], function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        });
    }

    async.parallel([getAttributesHeaderMst, getAttributesMstParentWise, getSubTicketType, getCategory1, getCategory2, checkPriorityType, getCategory3], function (err, results) {
        if (err) {
            cb(err, null)
        } else {
            if (results[2].error) {
                cb(null, false, results[2].error)
            } else {
                let arr = [];
                for (let i = 0; i < results[0].length; i++) {
                    if (i === 0) {
                        let inner = [];
                        inner = results[3];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 1) {
                        let inner = [];
                        inner = results[4];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 2) {
                        let inner = [];
                        inner = results[6];
                        inner.push(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: true })
                    } else if (i === 3) {
                        let inner = [];
                        inner = results[1];
                        inner.unshift(results[0][i]);
                        arr.push({ id: i + 1, options: inner, isDisabled: false })
                    } else {
                        arr.push({ id: i + 1, options: [results[0][i]], isDisabled: false })
                    }
                }
                cb(null, true, [{
                    attribute: arr,
                    // clientId: step1Result[0].CLIENTID,
                    val: results[5],
                    subtype: results[2],
                    disabled: 3
                }])
                // callback(null, [{
                //     attribute: arr,
                //     // clientId: step1Result[0].CLIENTID,
                //     val: res
                //     ults[2],
                //     subtype: results[3]
                // }])
            }
        }
    })

}

function addStatusSeq(data, cb) {
    let str = "SELECT ticket_nxt_status_id FROM ticket_status_seq_mst where client_id = ? and ticket_type_id = ? and ticket_pres_status_id = ? and delete_flag = 0";
    con.query(str, [data.clientId, data.ticket_id, data.previd], function (err, res) {
        if (err) {
            cb(err, null)
        } else {
            if (res.length > 0) {
                cb(null, false, 'Sequences are already present for this Status Sequence');
            } else {
                let sql = "INSERT INTO `ticket_status_seq_mst` (`client_id`, `ticket_type_id`, `ticket_pres_status_id`, `ticket_nxt_status_id`) VALUES (?, ?, ?, ?);";
                con.query(sql, [data.clientId, data.ticket_id, data.previd, data.nextStatus], function (err, resp) {
                    if (err) {
                        cb(err, null);
                    } else {
                        cb(null, true, 'Status Insrted');
                    }
                })
            }
        }
    })
}

function deleteStatusSeq(data, cb) {
    let sql = "UPDATE `ticket_status_seq_mst` SET `delete_flag`='1' WHERE `id`=?;";
    con.query(sql, [data.id], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function getstatusSeqData(data, cb) {
    const val = preventSqlInjection(data);
    // data = new CsatEntity(val);
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = " SELECT distinct a.* , b.ATTRVAL , c.ATTRVAL as previd , m.nextid as nextid  FROM ticket_status_seq_mst a , TICKETATTRIBUTES b ,TICKETATTRIBUTES c , " +
                "(SELECT i.id ,  GROUP_CONCAT(c.ATTRVAL) as nextid FROM ticket_status_seq_mst i, TICKETATTRIBUTES c  " +
                "WHERE FIND_IN_SET(c.id , i.ticket_nxt_status_id) GROUP BY i.id) m where a.client_id = ? and a.ticket_type_id = b.id  and a.delete_flag =0 and a.ticket_pres_status_id=c.id and a.id = m.id and a.id > ? ORDER BY a.id ASC LIMIT ? ; ";

        } else if (paginationType == 'prev') {
            str = "select * from ( " +
                " SELECT distinct a.* , b.ATTRVAL , c.ATTRVAL as previd , m.nextid as nextid  FROM ticket_status_seq_mst a , TICKETATTRIBUTES b ,TICKETATTRIBUTES c ," +
                "(SELECT i.id ,  GROUP_CONCAT(c.ATTRVAL) as nextid FROM ticket_status_seq_mst i, TICKETATTRIBUTES c  " +
                "WHERE FIND_IN_SET(c.id , i.ticket_nxt_status_id) GROUP BY i.id) m where a.client_id = ? and a.ticket_type_id = b.id  and a.delete_flag =0 and a.ticket_pres_status_id=c.id and a.id = m.id and a.id < ? ORDER BY a.id DESC LIMIT ? " +
                ") Z ORDER BY Z.id  ASC";
        }

        con.query(str, [data.clientId, offset, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(id) count FROM `ticket_status_seq_mst` WHERE `client_id` = ? AND `delete_flag` = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function getSupportGroupNotMapInCatagory(data, cb) {
    let sql = "SELECT id , LEVELSHORTDESC as name FROM SUPPORTGROUPLEVEL where CLIENTID=? and id not in (select supportGroupLevelId from SupportGrpWithTicketAttributes where clientId=? and DeleteFlag=0) and DeleteFlag=0;";
    con.query(sql, [data.clientId, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            //logData()
            cb(null, true, result);
        }
    });
}


function getLntChrEndUser(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                for (let k = 0; k < results.dataObj.length; k++) {
                    results.dataObj[k].Categories = results.dataObj[k].Categories.split(",");
                }
                for (let j = 0; j < results.dataObj.length; j++) {
                    for (let l = 0; l < results.dataObj[j].Categories.length; l++) {
                        results.dataObj[j].Categories[l] = results.dataObj[j].Categories[l].slice(3, 10);
                    }
                }
                getcategories(results.dataObj, function (err, resp5) {
                    if (err) {
                        cb(err, null)
                    } else {
                        util.logData('=====================>  ' + JSON.stringify(resp5));
                        results.dataObj = resp5;
                        cb(null, true, results);
                    }
                });
            }
        });

    function dataObj(cb) {
        util.logData(paginationType);
        if (paginationType == 'next' || paginationType == '') {
            // util.logData('llllllllllllllll');
            str = 'SELECT a.id,a.psNo,a.UserName,b.ROLENAME Role,c.LEVELSHORTDESC SupportGrp, ' +
                'a.Categories,a.User_Location FROM LNT_CHR_ENDUSER_CATEGORIES a , USERROLE b ,' +
                'SUPPORTGROUPLEVEL c where a.id > ? and a.ClientId = ? and  a.Categories like "%-1%" and ' +
                ' a.Role = b.id and a.SupportGrp = c.id and a.DeleteFlag = 0 ORDER BY a.id ASC LIMIT ?; ';

        } else if (paginationType == 'prev') {
            str = 'select * from (' +
                'SELECT a.id,a.psNo,a.UserName,b.ROLENAME Role,c.LEVELSHORTDESC SupportGrp, ' +
                'a.Categories,a.User_Location FROM LNT_CHR_ENDUSER_CATEGORIES a , USERROLE b ,' +
                'SUPPORTGROUPLEVEL c where a.id < ? and a.ClientId = ? and  a.Categories like "%-1%" and ' +
                'a.Role = b.id and a.SupportGrp = c.id and a.DeleteFlag = 0 ORDER BY a.id DESC LIMIT ? ' +
                ') Z ORDER BY Z.id  ASC';
        }
        util.logData(str)
        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData(str);
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(id) count FROM `LNT_CHR_ENDUSER_CATEGORIES` WHERE `ClientId` = ? and  Categories like  '%-1%' AND `DeleteFlag` = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getcategories(data, cb) {
    con.getConnection(function (err, conn) {
        if (err) {
            logData(err);
            console.log("\n\n connections : " + con._allConnections.length)
            cb(err, null);
        } else {
            let str = "select ATTRVAL from TICKETATTRIBUTES where id = ?  and DeleteFlag = 0;";
            for (let k = 0; k < data.length; k++) {
                for (let l = 0; l < data[k].Categories.length; l++) {
                    conn.query(str, [data[k].Categories[l]], function (err, resp) {
                        if (err) {
                            util.logData(err);
                            conn.release();
                            cb(err, null);
                        } else {
                            if (resp[0] !== undefined) {
                                data[k].Categories[l] = resp[0].ATTRVAL;
                            } else {
                                data[k].Categories[l] = "Invalid!";
                                if (k === data.length - 1 && l === data[k].Categories.length - 1) {
                                    for (let x = 0; x < data.length; x++) {
                                        for (let y = 0; y < data[x].Categories.length; y++) {
                                            if (y === 0) {
                                                data[x]['cat1'] = data[x].Categories[y];
                                            }
                                            if (y === 1) {
                                                data[x]['cat2'] = data[x].Categories[y];
                                            }
                                            if (y === 2) {
                                                data[x]['cat3'] = data[x].Categories[y];
                                            }
                                            if (y === 3) {
                                                data[x]['cat4'] = data[x].Categories[y];
                                            }
                                            if (y === 4) {
                                                data[x]['cat5'] = data[x].Categories[y];
                                            }
                                            if (y === 5) {
                                                data[x]['cat6'] = data[x].Categories[y];
                                            }
                                            if (y === 6) {
                                                data[x]['cat7'] = data[x].Categories[y];
                                            }
                                            if (y === 7) {
                                                data[x]['cat8'] = data[x].Categories[y];
                                            }
                                        }
                                    }
                                    conn.release();
                                    cb(null, data);
                                }
                            }
                        }
                    })
                }
            }
        }
    })
}

function getAttrHeader(data, cb) {
    let sql = "SELECT id,header_name,header_desc FROM attributesHeaderMst where CLIENTID = ?  and DeleteFlag = 0 order by sequence_no;";
    con.query(sql, [data.clientId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}


function insertMappingCategoryWithSupportGrp(data, cb) {
    var data = preventSqlInjection(data);

    function deleteData(callback) {
        // let sql = 'delete from SupportGrpWithTicketAttributes where clientId=' + data.clientId + ' and ticketAttrId in (' + data.ticketAttrId + ')';
        // con.query(sql, function (err, result) {
        // if (err) {
        //   logData(err);
        // callback(err, null);
        // } else {
        callback(null, true);
        //  }
        // });
    }

    function insertData(callback) {
        let flagi = 0, flagj = 0;
        //flagi = 0;
        for (let i = 0; i < data.ticketAttrId.length; i++) {
            flagj = 0;
            // util.logData('ticketAttrId===' + data.ticketAttrId[i]);
            for (let j = 0; j < data.supportGroupLevelId.length; j++) {
                // util.logData('flagi===' + flagi + 'flagj===' + flagj);
                var sql = "Select * from SupportGrpWithTicketAttributes " +
                    " where clientId =" + data.clientId + " " +
                    " and ticketAttrId =" + data.ticketAttrId[i] + " " +
                    " and supportGroupLevelId = " + data.supportGroupLevelId[j] + " " +
                    " and ticket_type = " + data.ticket_type + " " +
                    " and DeleteFlag = '0' ";
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        if (result.length === 0) {
                            let sql1 = "INSERT into SupportGrpWithTicketAttributes(clientId, ticketAttrId, supportGroupLevelId, createbyid,ticket_type)" +
                                " values ( " + data.clientId + " ," + data.ticketAttrId[i] + "," + data.supportGroupLevelId[j] + "," + data.createdBy + "," + data.ticket_type + " ) ";
                            con.query(sql1, function (err1, result1) {
                                if (err1) {
                                    logData(err1);
                                    cb(err1, null);
                                }
                            });
                        }
                        flagj++;
                    }
                });
            }
            if (data.ticketAttrId.length === i + 1) {
                cb(null, true, "Insert successfully");
            }
            flagi++;
        }
    }

    async.series([deleteData, insertData], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true)
        }
    })
}

function getSubClient(data, cb) {
    let sql = "SELECT sub_client FROM CLIENT where DeleteFlag = 0 and id = ?;";
    con.query(sql, [data.clientId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function insertSupportGroupWiseWorkingHour(data, cb) {
    let sql = "SELECT sub_client FROM CLIENT where DeleteFlag = 0 and id = ?;";
    con.query(sql, [data.clientId], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function calculateSupportGroupWorkingHour(data, cb) {
    var sql = "SELECT * FROM supportGroupEnableDayTime where supportGroupLevelId = ?";
    con.query(sql, [data.supportGroupLevelId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            var totHr = hrCalculation(result[0].sunHourStart, result[0].sunHourEnd) + hrCalculation(result[0].monHourStart, result[0].monHourEnd) + hrCalculation(result[0].tueHourStart, result[0].tueHourEnd)
                + hrCalculation(result[0].wedHourStart, result[0].wedHourEnd) + hrCalculation(result[0].thurHourStart, result[0].thurHourEnd) + hrCalculation(result[0].friHourStart, result[0].friHourEnd) + hrCalculation(result[0].satHourStart, result[0].satHourEnd);
            var sql1 = "UPDATE supportGroupEnableDayTime SET weeklyworkinghour = ? WHERE supportGroupLevelId = ?";
            con.query(sql1, [totHr, data.supportGroupLevelId], function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    cb(null, true, result1);
                }
            });
        }
    });
}

function checkSupportGroupManagerialView(data, cb) {
    let sql = "select management from SUPPORTGROUPLEVEL where id=?";
    con.query(sql, [data.supportgrp_id], function (err1, result) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            for (let i = 0; i < result.length; i++) {
                result[i].management = stringToBool(result[i].management);
            }
            cb(null, true, result);
        }
    });
}

function insertSlaCalculation(data, cb) {
    let flagi = 0;
    let c = 0;

    for (let i = 0; i < data.category_id.length; i++) {
        var sql = "Select * from sla_calculaion_done_by where client_id = ? and ticket_type_id = ? and category_id = ? and sla_done_by = ? and delete_flag = '0' and create_by_id = ? ";
        var data1 = [data.clientId, data.ticketTypeId, data.category_id[i], data.sla_done_by, data.user_id];
        con.query(sql, data1, function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                if (result.length === 0) {
                    var sql1 = "INSERT INTO `sla_calculaion_done_by` (`client_id`, `ticket_type_id`, `category_id`, `sla_done_by`,`create_by_id`) VALUES (?,?,?,?,?)";
                    c++;
                    var data2 = [data.clientId, data.ticketTypeId, data.category_id[i], data.sla_done_by, data.user_id];
                    con.query(sql1, data2, function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {
                            util.logData(JSON.stringify(result1));
                            if (data.category_id.length === flagi + 1) {
                                cb(null, true, "Inserted successfully");
                            }
                            flagi++;
                        }
                    });
                } else {
                    cb(null, false, 'Duplicate data');
                }
            }
        });
    }
}

function deleteSlaCalculation(data, cb) {
    let sql = 'UPDATE `sla_calculaion_done_by` SET `delete_flag`= 1 , delete_by_id= ? , delete_date = NOW() WHERE `id`=? ;';
    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, 'Deleted successfully');
        }
    });
}

function getSlaCalculation(data, cb) {
    var sql = "select * from sla_calculation_based_on";
    con.query(sql, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            util.logData(result);
            cb(null, true, result);
        }
    });
}

function getSlaCalculationDoneByList(data, cb) {
    const val = preventSqlInjection(data);
    // data = new CsatEntity(val);
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.ticket_type_id) ticketType, (SELECT ATTRVAL FROM TICKETATTRIBUTES " +
                " WHERE id = a.category_id) category, (SELECT sla_calculation_based_on_type FROM sla_calculation_based_on WHERE id = a.sla_done_by) " +
                " sla_calculation_based_on_type FROM sla_calculaion_done_by a where a.id > ? and a.client_id = ? and a.delete_flag = 0 ORDER BY a.id ASC LIMIT ?";

        } else if (paginationType == 'prev') {
            str = "select * from ( SELECT a.id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.ticket_type_id) ticketType, (SELECT ATTRVAL FROM TICKETATTRIBUTES " +
                " WHERE id = a.category_id) category, (SELECT sla_calculation_based_on_type FROM sla_calculation_based_on WHERE id = a.sla_done_by) " +
                " sla_calculation_based_on_type FROM sla_calculaion_done_by a where a.id < ? and a.client_id = ? and a.delete_flag = 0 ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC";
        }
        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(id) count FROM `sla_calculaion_done_by` WHERE `client_id` = ? AND `delete_flag` = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getClietSpecificUrl(data, cb) {
    var sql = "SELECT a.id, a.url, b.name FROM client_specific_url a, url b WHERE a.url_id = b.id AND a.client_id = ? AND " +
        " a.isAdmin='false' and a.DeleteFlag = 0 AND b.DeleteFlag = 0";
    con.query(sql, [data.clientId], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function insertLatestWFCClientResult(data, cb) {
    var sql = "select PKFIELDVAL,max(id) mid from WFCCLIENTRESULT where PKFIELDVAL = ?  group by PKFIELDVAL ";
    con.query(sql, [data.ticketId], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var sql1 = "delete from WFCCLIENTRESULT_LAST_STATUS where PKFIELDVAL = ?";
                con.query(sql1, [data.ticketId], function (err1, result1) {
                    if (err1) {
                        util.logData(err1);
                        cb(err1, null);
                    } else {
                        var sql2 = "insert into WFCCLIENTRESULT_LAST_STATUS select * from WFCCLIENTRESULT where PKFIELDVAL = ? and id = ?";
                        con.query(sql2, [data.ticketId, result[0].mid], function (err2, result2) {
                            if (err2) {
                                util.logData(err2);
                                cb(err2, null);
                            } else {
                                cb(null, true, 'ok');
                            }
                        });
                    }
                });
            } else {
                cb(null, true, 'ok');
            }
        }
    });
}

function addSupportGroupSpecificUrl(data, cb) {
    let Duplicate = 0;
    for (let i = 0; i <= data.SuppArray.length - 1; i++) {
        var str = "Select * from support_group_specific_url where DeleteFlag = '0' " +
            " and clientUrlid = ? and clientId = ? and supportGroupLevelId = ? and ticketTypeId=?";
        con.query(str, [data.clientUrlid, data.clientId, data.SuppArray[i], data.ticketTypeId], function (err1, result) {
            if (err1) {
                logData(err1);
                cb(err1, null);
            } else {
                if (result.length == 0) {
                    let params, sql;
                    sql = 'Insert into support_group_specific_url (clientUrlid, supportGroupLevelId, ticketTypeId, createbyid, clientId) values (?,?,?,?,?);';
                    params = [data.clientUrlid, data.SuppArray[i], data.ticketTypeId, data.createdBy, data.clientId];
                    con.query(sql, params, function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (i === data.SuppArray.length - 1) {
                                cb(null, true, 'Inserted Successfully');
                            }
                        }
                    });
                } else {
                    Duplicate++;
                    if (Duplicate === data.SuppArray.length) {
                        cb(null, false, 'Duplicate Data');
                    } else if (i === data.SuppArray.length - 1) {
                        cb(null, true, 'Inserted Successfully');
                    }
                }
            }
        });
    }
}


function getActiveCategoryDetails(data, cb) {
    let sql2 = "select FIELDVAL last_cat_id,category_id last_cat_parent_id,b.header_name parent,c.ATTRVAL child " +
        " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
        " where a.FIELDVAL = c.id and a.category_id = b.id " +
        " and a.PKFIELDVAL = ? " +
        " and a.serial_no = 1 " +
        " and a.activeFlow = '1' " +
        " and a.category_id in (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT" +
        " where PKFIELDVAL = ? and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst " +
        "where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = ? and serial_no = 1) ))) ";
    // util.logData("sql2: "+sql2)
    con.query(sql2, [data.ticketId, data.ticketId, data.ticketId], function (err2, result2) {
        if (err2) {
            logData(err2);
            cb(err2, null);
        } else {
            if (result2.length > 0) {
                // result[j]['last_cat'] = result2[0].child;
                // result[j]['last_cat_parent'] = result2[0].parent;
                // result[j]['last_cat_id'] = result2[0].FIELDVAL;
                // result[j]['last_cat_parent_id'] = result2[0].category_id;
                cb(null, true, result2)
            } else {
                cb(null, false, "Message:Something Went wrong.ErrorCode:1010");
            }
            /***********************************************************************************/

            /***********************************************************************************/

        }
    });
}

function getSupportGroupSpecificUrl(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, b.isAdmin,  " +
                " (SELECT name FROM url WHERE url.id = b.url_id) url_key, b.url, (SELECT LEVELSHORTDESC FROM SUPPORTGROUPLEVEL WHERE " +
                " SUPPORTGROUPLEVEL.id = a.supportGroupLevelId) supportGroup, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.ticketTypeId) ticket_type " +
                " FROM `support_group_specific_url` a, `client_specific_url` b WHERE a.clientUrlid = b.id AND a.supportGroupLevelId IS NOT NULL AND a.id > ? AND " +
                "  a.clientId=? and a.DeleteFlag = 0 and b.DeleteFlag=0 ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT a.id, b.isAdmin, (SELECT name FROM url " +
                " WHERE url.id = b.url_id) url_key, b.url, (SELECT LEVELSHORTDESC FROM SUPPORTGROUPLEVEL WHERE SUPPORTGROUPLEVEL.id = a.supportGroupLevelId) " +
                " supportGroup, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.ticketTypeId) ticket_type FROM `support_group_specific_url` a, " +
                " `client_specific_url` b WHERE a.clientUrlid = b.id AND a.supportGroupLevelId IS NOT NULL AND a.id < ?  and a.clientId=? " +
                " and a.DeleteFlag = 0 and b.DeleteFlag=0 ORDER BY a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC";
        }
        con.query(str, [offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                for (let i = 0; i < done.length; i++) {
                    done[i].isAdmin = stringToBool(done[i].isAdmin);
                }
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from support_group_specific_url a where a.DeleteFlag = 0 and a.clientId=? and a.supportGroupLevelId is not NULL";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function getUrlBySupportGroup(data, cb) {
    var sql = "SELECT a.id, b.url_id, (SELECT name FROM url where url.id = b.url_id) name FROM support_group_specific_url a, " +
        " client_specific_url b where a.clientUrlid = b.id and a.clientId = ? and a.supportGroupLevelId = ? and a.ticketTypeId = ? AND a.DeleteFlag = 0";
    con.query(sql, [data.clientId, data.supportGroupLevelId, data.ticketTypeId], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTicketDetailsById_old(data, cb) {
    let sql = "SELECT   g.group_level,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg " +
        " where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) escalated_to_grp_nm, a.busi_priority_id,  " +
        " f.id statusId,f.ATTRVAL status,f.sequence_no seq, " +
        " a.busi_impact_id,a.busi_urgency_id,a.is_approved_problem_ticket,d.busi_priority_name priority,  " +
        " a.dueDate dDate,e.id  ids,a.source_type, " +
        " a.longDesc,a.requestedDate requestedDate, coalesce(a.ticketCloseDate,'') ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ," +
        " g.id gid ,coalesce(sub_ticket_type,0) sub_ticket_type " +
        " FROM WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id  group by x.PKFIELDVAL) " +
        " and  a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
        " and a.tstatus = f.id and a.id=? and (a.clientId=? or a.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and g.id = e.supportGroupLevelId " +
        " and a.DeleteFlag = '0' ";

    logData('getTicketDetailsById------------------------------------' + sql);
    con.query(sql, [data.ticketId, data.clientId, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + data.ticketId + " and a.id = " + result[0].ids + ") m " +
                    " left join " +
                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + data.ticketId + " and a.id = " + result[0].ids + ") and b.wfcclient_id = a.id ) n " +
                    " on m.wfcclient_result_id = n.wfcclient_result_id ";
                con.query(sql12, function (err12, result12) {
                    if (err12) {
                        logData(err12);
                        cb(err12, null);
                    } else {
                        if (result12.length > 0) {
                            result[0]['assignee'] = result12[0].assignee;
                            result[0]['aid'] = result12[0].assigned_user_id;
                        }
                        cb(null, true, result);
                    }
                })

            } else {
                cb(null, false, "Message:Something Went wrong.ErrorCode:1011");
            }
        }
    });
}

function getTicketDetailsById(data, cb) {

//anand12-05-2023
       // let sql = "SELECT a.createor_support_grp_id,  g.group_level,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg " +
       // " where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) escalated_to_grp_nm, a.busi_priority_id,  " +
       // " f.id statusId,f.ATTRVAL status,f.sequence_no seq, " +
       // " a.busi_impact_id,a.busi_urgency_id,a.is_approved_problem_ticket, a.is_approved_problem_ticket_by, d.busi_priority_name priority,  " +
       // " a.dueDate dDate,e.id  ids,a.source_type, " +
       // " a.longDesc,a.requestedDate requestedDate, coalesce(a.ticketCloseDate,'') ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ," +
       // " g.id gid ,coalesce(sub_ticket_type,0) sub_ticket_type " +
       // " FROM WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  " +
       // " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id  group by x.PKFIELDVAL) " +
       // " and  a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
       // " and a.tstatus = f.id and a.id=? and (a.clientId=? or a.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) " +
       // " and g.id = e.supportGroupLevelId " +
       // " and a.DeleteFlag = '0' ";


    let sql = "SELECT a.createor_support_grp_id, g.group_level,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg " + 
       " where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) escalated_to_grp_nm, a.busi_priority_id, " +
       " f.id statusId,f.ATTRVAL status,f.sequence_no seq,  " +
       " a.busi_impact_id,a.busi_urgency_id,a.is_approved_problem_ticket, a.is_approved_problem_ticket_by, d.busi_priority_name priority,  " +
       " a.dueDate dDate,e.id  ids, a.source_type, " +
       " a.ticket_id, a.longDesc, a.tName, a.requestedDate requestedDate, coalesce(a.ticketCloseDate,'') ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC , " +
       " g.id gid ,coalesce(sub_ticket_type,0) sub_ticket_type " +
       " FROM WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  " +
       " where e.id in (select x.id from WFCCLIENTRESULT_LAST_STATUS x, ticket a where x.PKFIELDVAL = a.id) " +
       " and  a.id = e.PKFIELDVAL and a.busi_priority_id = d.id  " +
       " and a.tstatus = f.id and a.id=? and (a.clientId=? or a.clientId in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) " +
       " and g.id = e.supportGroupLevelId " + 
       " and a.DeleteFlag = '0' ";


    logData('getTicketDetailsById------------------------------------' + sql);
    con.query(sql, [data.ticketId, data.clientId, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {

            // optimizedreport table starts
            var sql400 = "select id from optimizedreport where ticket_id =? ;"
            con.query(sql400, [data.ticketId], function (err, result400) {
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    logData("****************___________>>>>" + sql400);
                    console.log("@@@@@@@@@++", result400);
                    // console.log("@@@@@@@@@++",result400[0].id);
                    var sql53 = "update optimizedreport set priority_name =?,ticket_status=?,ticket_last_modified_dt= Now(),last_modified_dt=Now()  where id =? "
                    con.query(sql53, [result[0].priority, result[0].status, result400[0].id], function (err, result53) {
                        logData("&&&&&&&&&&&&&&------------>" + sql53);
                        if (err) {
                            console.log(err);
                            cb(err, null)
                        } else {
                            logData("&&&&&&&&&&&&&&------------>" + sql53);
                            console.log(result53);
                            cb(null, true, result53);
                        }
                    })
                }
            });

            // optimizedreport table ends

            if (result.length > 0) {
                let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                    "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                    "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + data.ticketId + " and a.id = " + result[0].ids + ") m " +
                    " left join " +
                    "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                    "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + data.ticketId + " and a.id = " + result[0].ids + ") and b.wfcclient_id = a.id ) n " +
                    " on m.wfcclient_result_id = n.wfcclient_result_id ";
                con.query(sql12, function (err12, result12) {
                    if (err12) {
                        logData(err12);
                        cb(err12, null);
                    } else {


                        if (result12.length > 0) {
                            result[0]['assignee'] = result12[0].assignee;
                            result[0]['aid'] = result12[0].assigned_user_id;
                        }
                        cb(null, true, result);
                    }
                })

            } else {
                cb(null, false, "Message:Something Went wrong.ErrorCode:1011");
            }
        }
    });
}


function getAnyTicketById(data, cb) {
    let sql = "SELECT distinct a.id id,g.group_level,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg " +
        " where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) escalated_to_grp_nm, a.busi_priority_id, a.tName, " +
        " b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status,f.sequence_no seq, " +
        " a.busi_impact_id,a.busi_urgency_id,a.is_approved_problem_ticket,d.busi_priority_name priority, a.requesterInfo reqInfo, " +
        " a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate, coalesce(c.NAME,b.NAME) updateBy,e.id  ids,a.createbyid, " +
        " a.longDesc,a.requestedDate requestedDate, coalesce(a.ticketCloseDate,'') ticketCloseDate,e.END_INDICATOR ,g.LEVELSHORTDESC ," +
        " g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, a.ticketTypeId, " +
        " (select id from TICKETATTRIBUTES where clientid=? and sequence_no=1 and ATTRID=3 and view_sequence=1 and DeleteFlag=0 ) inci_id, " +
        " (select a.sequence_no from TICKETATTRIBUTES a,ticket b where a.id=b.ticketTypeId and b.ticket_id=? and b.clientid=? and b.DeleteFlag=0 and a.DeleteFlag=0) ticket_seq " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id  group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
        " and a.tstatus = f.id and a.ticket_id=? and a.clientId=? and g.id = e.supportGroupLevelId " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and b.DeleteFlag = '0'  ";

    logData('getAnyTicketById------------------------------------' + sql)
    con.query(sql, [data.clientId, data.ticketId, data.clientId, data.ticketId, data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";

                            le++;
                            con.query(sql1, function (err1, result1) {
                                if (err1) {
                                    logData(err1);
                                    cb(err1, null);
                                } else {

                                    if (result1.length > 0) {
                                        for (let i = 0; i < result1.length; i++) {
                                            result[j][result1[i].parent] = result1[i].child;
                                        }
                                        if (flg == result.length) {
                                            cb(null, true, result);
                                        }
                                        flg++;
                                    } else {
                                        cb(null, true, []);
                                    }

                                }
                            });
                        }
                    });
                }
            } else {
                cb(null, false, "Message:Something Went wrong.ErrorCode:1011");
            }
        }
    });
}

function addNotification(data, cb) {
    let flagi = 0;
    let c1 = 0;
    let c = data.group_id.length;
    for (let j = 0; j < data.group_id.length; j++) {
        var sql = "Select * from notification_initial_classification  where client_id = ? and ticket_type = ? and ticket_status_seq=? and menu_id = ? and cat_id=? and group_id = ? and DeleteFlag = 0 ;";
        con.query(sql, [data.clientId, data.tickettyp_id, data.status_seq, data.menu_id, data.cat_id, data.group_id[j]], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                console.log(JSON.stringify(result))
                if (result.length === 0) {
                    c1++;
                    var sql1 = "insert into notification_initial_classification (client_id,ticket_type,ticket_status_seq,menu_id,group_id,cat_id) values (?,?,?,?,?,?);";
                    con.query(sql1, [data.clientId, data.tickettyp_id, data.status_seq, data.menu_id, data.group_id[j], data.cat_id], function (err1, result1) {
                        if (err1) {
                            logData(err1);
                            cb(err1, null);
                        } else {

                            flagi++;
                            if (c === flagi) {
                                cb(null, true, "Insert successfully");
                            }
                        }
                    });
                } else {
                    flagi++;
                    if (c === flagi) {
                        if (c1 === 0) {
                            cb(null, false, 'Duplicate data');
                        } else {
                            cb(null, true, "Insert successfully");
                        }
                    }
                }
            }
        });
    }
}


function deleteNotification(data, cb) {
    let sql = "UPDATE `notification_initial_classification` SET `DeleteFlag`='1' WHERE `id`=?;";
    con.query(sql, [data.id], function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, "Record deleted");
        }
    })
}

function getNotifiationMaster(data, cb) {
    // const val = preventSqlInjection(data);
    // data = new CsatEntity(val);
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.ticket_type and DeleteFlag=0) ticketType,(SELECT LEVELSHORTDESC FROM SUPPORTGROUPLEVEL WHERE id = a.group_id and DeleteFlag=0) group_id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE " +
                " id = a.cat_id AND CLIENTID = ? AND ATTRID = 1 and DeleteFlag=0) cat_id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE " +
                " sequence_no = a.ticket_status_seq AND CLIENTID = ? AND ATTRID = 2 and DeleteFlag=0) status, (SELECT funcDescription FROM TicketFuctionalityDetails WHERE " +
                " func_desc_id = a.menu_id and client_id = ? and functionalityId =1 and DeleteFlag=0) menu_id FROM notification_initial_classification a " +
                " WHERE a.DeleteFlag = 0 AND a.id > ? AND a.client_id = ? ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.ticket_type and DeleteFlag=0) ticketType,(SELECT LEVELSHORTDESC FROM SUPPORTGROUPLEVEL WHERE id = a.group_id and DeleteFlag=0) group_id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE " +
                " id = a.cat_id AND CLIENTID = ? AND ATTRID = 1 and DeleteFlag=0) cat_id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE " +
                " sequence_no = a.ticket_status_seq AND CLIENTID = ? AND ATTRID = 2 and DeleteFlag=0) status, (SELECT funcDescription FROM TicketFuctionalityDetails WHERE " +
                " func_desc_id = a.menu_id and client_id = ? and functionalityId =1 and DeleteFlag=0) menu_id FROM notification_initial_classification a " +
                " WHERE a.DeleteFlag = 0 AND a.id < ? AND a.client_id = ? ORDER BY a.id desc LIMIT ?) Z ORDER BY Z.id  ASC";
        }

        con.query(str, [data.clientId, data.clientId, data.clientId, offset, data.clientId, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(id) count FROM `notification_initial_classification` WHERE `client_id` = ? AND `DeleteFlag` = 0";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function getCategoryReportUserWise(data, cb) {
    function getDashboardCategorys(callback) {
        let sql = "SELECT c.id, c.name, c.login_name, b.ATTRVAL category, a.cat_list categoryId FROM dashboard_category a, TICKETATTRIBUTES b, USER c " +
            " where b.id = a.cat_list and c.id = a.user_id and a.client_id=? and a.DeleteFlag=0 and a.seq=9 and a.user_id = ?";
        con.query(sql, [data.clientId, data.selectedUserId], function (err, result) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getParentPath(callback) {
        let flagi = 0;
        let sql = "SELECT parentPath FROM TICKETATTRIBUTES WHERE id IN (SELECT cat_list FROM dashboard_category WHERE client_id=? and DeleteFlag = 0 " +
            " AND seq = 9 AND user_id = ?)";
        con.query(sql, [data.clientId, data.selectedUserId], function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                var data = [];
                // util.logData('result=====' + JSON.stringify(result1))
                if (result1.length > 0) {
                    for (let i = 0; i < result1.length; i++) {
                        // util.logData('parentPath=====' + JSON.stringify(result1[i].parentPath))
                        let sql = "SELECT a.id, a.ATTRVAL name FROM TICKETATTRIBUTES a where a.id in ( " + result1[i].parentPath + ")";
                        con.query(sql, function (err, result2) {
                            if (err) {
                                logData('Error1:---' + err);
                                callback(err, null);
                            } else {
                                // callback(null, result);
                                data.push(result2);
                                if (result1.length === flagi + 1) {
                                    callback(null, data);
                                }
                                flagi++;
                                // util.logData('result2=====' + JSON.stringify(data))
                            }
                        })
                    }
                } else {
                    callback(null, data);
                }
            }
        })
    }

    async.parallel([getDashboardCategorys, getParentPath], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            let str = "select ticketAttrId  from SupportGrpWithTicketAttributes where supportGroupLevelId in " +
                "(select supportGroupLevelId from supportGroupUser  where userId = (select id from USER where CLIENTID=? and id=? and DeleteFlag=0) and DeleteFlag = 0);";
            con.query(str, [data.clientId, data.selectedUserId], function (err, resp) {
                if (err) {
                    cb(err, null);
                } else {
                    if (resp.length > 0) {
                        str2 = "SELECT cat_list FROM dashboard_category WHERE client_id=? and DeleteFlag = 0 AND seq = 1 AND user_id = ? limit 1;";
                        con.query(str2, [data.clientId, data.user_id], function (err, resp2) {
                            if (err) {
                                cb(err, null);
                            } else {
                                // util.logData(JSON.stringify(resp2[0].cat_list));
                                // util.logData(JSON.stringify(resp[resp.length-1].ticketAttrId));
                                if (resp[resp.length - 1].ticketAttrId === resp2[0].cat_list) {
                                    let sql = "SELECT coalesce(group_concat(LEVELSHORTDESC) , '') support_group_name FROM SUPPORTGROUPLEVEL where id " +
                                        "in (SELECT supportGroupLevelId FROM supportGroupUser where clientId=? and userId=?)";
                                    con.query(sql, [data.clientId, data.selectedUserId], function (err, result) {
                                        if (err) {
                                            logData(err);
                                            cb(err, null);
                                        } else {
                                            var data = {};
                                            var report = [];
                                            // util.logData('final result=====' + JSON.stringify(results))
                                            for (let i = 0; i < results[0].length; i++) {
                                                // util.logData('final result=====' + JSON.stringify(results[1][i][0].name))
                                                data = {
                                                    id: i,
                                                    user_name: results[0][i].name,
                                                    loginId: results[0][i].login_name,
                                                    support_group: result[0].support_group_name,
                                                    ic: results[1][i][0].name,
                                                    legal_entity: results[1][i][1].name,
                                                    strategic_business_group: results[1][i][2].name,
                                                    business_unit: results[1][i][3].name,
                                                    segment: results[1][i][4].name,
                                                    cluster: results[1][i][5].name,
                                                    department: results[1][i][6].name,
                                                    location: results[1][i][7].name,
                                                    category: results[1][i][8].name
                                                };
                                                report.push(data);
                                            }
                                            cb(null, true, report);
                                        }
                                    });
                                } else {
                                    cb(null, false, 'This user does not belong to this category!!');
                                }
                            }
                        });
                    }
                }
            });
        }
    });
}



function getCategoryReportSupportGroupWise(data, cb) {
    function getDashboardCategorys(callback) {
        let sql = "SELECT c.id, c.name, c.login_name, b.ATTRVAL category, a.cat_list categoryId FROM dashboard_category a, TICKETATTRIBUTES b, USER c " +
            " where b.id = a.cat_list and c.id = a.user_id and a.client_id=? and a.DeleteFlag=0 and a.seq=9 and a.user_id in" +
            " (SELECT distinct userId FROM supportGroupUser where supportGroupLevelId in (" + data.supportGroupIds + ") and clientId=? and DeleteFlag=0)";
        con.query(sql, [data.clientId, data.clientId], function (err, result) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getParentPath(callback) {
        let flagi = 0;
        let sql = "SELECT parentPath FROM TICKETATTRIBUTES a WHERE a.id IN (SELECT cat_list FROM dashboard_category WHERE client_id=? and DeleteFlag = 0 " +
            " AND seq = 9 AND user_id in (SELECT distinct userId FROM supportGroupUser where supportGroupLevelId in (" + data.supportGroupIds + ") and clientId=? and DeleteFlag=0)) " +
            " and a.DeleteFlag=0";
        con.query(sql, [data.clientId, data.clientId], function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                var data = [];
                if (result1.length > 0) {
                    con.getConnection(function (err, conn) {
                        if (err) {
                            util.logData(err);
                            cb(err, false);
                        } else {
                            for (let i = 0; i < result1.length; i++) {
                                // util.logData('parentPath=====' + JSON.stringify(result1[i].parentPath))
                                let sql = "SELECT a.id, a.ATTRVAL name FROM TICKETATTRIBUTES a where a.id in ( " + result1[i].parentPath + ")";
                                conn.query(sql, function (err, result2) {
                                    if (err) {
                                        logData('Error1:---' + err);
                                        conn.release();
                                        callback(err, null);
                                    } else {
                                        // callback(null, result);
                                        data.push(result2);
                                        if (result1.length === flagi + 1) {
                                            conn.release();
                                            callback(null, data);
                                        }
                                        flagi++;
                                        // util.logData('result2=====' + JSON.stringify(data))
                                    }
                                })
                            }
                        }
                    });
                } else {
                    callback(null, data);
                }
            }
        })
    }

    async.parallel([getDashboardCategorys, getParentPath], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            var data1 = {};
            var report = [];
            let count = 0;
            // util.logData('final result=====' + JSON.stringify(results))

            con.getConnection(function (err, conn1) {
                if (err) {
                    util.logData(err);
                    cb(err, false);
                } else {
                    for (let i = 0; i < results[0].length; i++) {
                        let sql = "SELECT coalesce(group_concat(LEVELSHORTDESC) , '') support_group_name FROM SUPPORTGROUPLEVEL where id " +
                            "in (SELECT supportGroupLevelId FROM supportGroupUser where clientId=? and userId=? and DeleteFlag=0) and group_level != 0";
                        conn1.query(sql, [data.clientId, results[0][i].id], function (err, result) {
                            if (err) {
                                logData(err);
                                conn1.release();
                                cb(err, null);
                            } else {
                                // util.logData('group result ====' + JSON.stringify(result));
                                for (let j = 0; j < results[1].length; j++) {
                                    if (results[0][i].categoryId === results[1][j][8].id) {
                                        data1 = {
                                            user_name: results[0][i].name,
                                            loginId: results[0][i].login_name,
                                            support_group: result[0].support_group_name,
                                            ic: results[1][j][0].name,
                                            legal_entity: results[1][j][1].name,
                                            strategic_business_group: results[1][j][2].name,
                                            business_unit: results[1][j][3].name,
                                            segment: results[1][j][4].name,
                                            cluster: results[1][j][5].name,
                                            department: results[1][j][6].name,
                                            location: results[1][j][7].name,
                                            category: results[1][j][8].name
                                        };
                                        report.push(data1);
                                        // util.logData('group result ====' + JSON.stringify(report));
                                    }
                                }
                                count++;
                            }
                            // util.logData('result ====' + JSON.stringify(report));
                            if (count + 1 === results[0].length) {
                                conn1.release();
                                cb(null, true, report);
                            }
                        });
                    }
                }
            });
        }
    })
}



function getCategoryReportSupportGroupWise_old_2(data, cb) {
    function getDashboardCategorys(callback) {
        let sql = "SELECT c.id, c.name, c.login_name, b.ATTRVAL category, a.cat_list categoryId FROM dashboard_category a, TICKETATTRIBUTES b, USER c " +
            " where b.id = a.cat_list and c.id = a.user_id and a.client_id=? and a.DeleteFlag=0 and a.seq=9 and a.user_id in" +
            " (SELECT distinct userId FROM supportGroupUser where supportGroupLevelId in (" + data.supportGroupIds + ") and clientId=? and DeleteFlag=0)";
        con.query(sql, [data.clientId, data.clientId], function (err, result) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getParentPath(callback) {
        let flagi = 0;
        let sql = "SELECT parentPath FROM TICKETATTRIBUTES a WHERE a.id IN (SELECT cat_list FROM dashboard_category WHERE client_id=? and DeleteFlag = 0 " +
            " AND seq = 9 AND user_id in (SELECT distinct userId FROM supportGroupUser where supportGroupLevelId in (" + data.supportGroupIds + ") and clientId=? and DeleteFlag=0)) " +
            " and a.DeleteFlag=0";
        con.query(sql, [data.clientId, data.clientId], function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                var data = [];
                if (result1.length > 0) {
                    con.getConnection(function (err, conn) {
                        for (let i = 0; i < result1.length; i++) {
                            // util.logData('parentPath=====' + JSON.stringify(result1[i].parentPath))
                            let sql = "SELECT a.id, a.ATTRVAL name FROM TICKETATTRIBUTES a where a.id in ( " + result1[i].parentPath + ")";
                            if (err) {
                                logData(err);
                                console.log("\n\n connections : " + con._allConnections.length)
                                callback(err, null);
                            } else {
                                conn.query(sql, function (err, result2) {
                                    if (err) {
                                        logData('Error1:---' + err);
                                        conn.release();
                                        callback(err, null);
                                    } else {
                                        // callback(null, result);
                                        data.push(result2);
                                        if (result1.length === flagi + 1) {
                                            conn.release();
                                            callback(null, data);
                                        }
                                        flagi++;
                                        // util.logData('result2=====' + JSON.stringify(data))
                                    }
                                })
                            }
                        }
                    });
                } else {
                    callback(null, data);
                }
            }
        })
    }

    async.parallel([getDashboardCategorys, getParentPath], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            var data1 = {};
            var report = [];
            let count = 0;
            // util.logData('final result=====' + JSON.stringify(results))
            for (let i = 0; i < results[0].length; i++) {
                let sql = "SELECT coalesce(group_concat(LEVELSHORTDESC) , '') support_group_name FROM SUPPORTGROUPLEVEL where id " +
                    "in (SELECT supportGroupLevelId FROM supportGroupUser where clientId=? and userId=?) and group_level != 0";
                con.query(sql, [data.clientId, results[0][i].id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        // util.logData('group result ====' + JSON.stringify(result));
                        for (let j = 0; j < results[1].length; j++) {
                            if (results[0][i].categoryId === results[1][j][8].id) {
                                data1 = {
                                    user_name: results[0][i].name,
                                    loginId: results[0][i].login_name,
                                    support_group: result[0].support_group_name,
                                    ic: results[1][j][0].name,
                                    legal_entity: results[1][j][1].name,
                                    strategic_business_group: results[1][j][2].name,
                                    business_unit: results[1][j][3].name,
                                    segment: results[1][j][4].name,
                                    cluster: results[1][j][5].name,
                                    department: results[1][j][6].name,
                                    location: results[1][j][7].name,
                                    category: results[1][j][8].name
                                };
                                report.push(data1);
                                // util.logData('group result ====' + JSON.stringify(report));
                            }
                        }
                        count++;
                    }
                    // util.logData('result ====' + JSON.stringify(report));
                    if (count + 1 === results[0].length) {
                        cb(null, true, report);
                    }
                });
            }
        }
    })
}


function getCategoryReportSupportGroupWise_old(data, cb) {
    function getDashboardCategorys(callback) {
        let sql = "SELECT c.id, c.name, c.login_name, b.ATTRVAL category, a.cat_list categoryId FROM dashboard_category a, TICKETATTRIBUTES b, USER c " +
            " where b.id = a.cat_list and c.id = a.user_id and a.client_id=? and a.DeleteFlag=0 and a.seq=9 and a.user_id in" +
            " (SELECT distinct userId FROM supportGroupUser where supportGroupLevelId in (" + data.supportGroupIds + ") and clientId=? and DeleteFlag=0)";
        con.query(sql, [data.clientId, data.clientId], function (err, result) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getParentPath(callback) {
        let flagi = 0;
        let sql = "SELECT parentPath FROM TICKETATTRIBUTES a WHERE a.id IN (SELECT cat_list FROM dashboard_category WHERE client_id=? and DeleteFlag = 0 " +
            " AND seq = 9 AND user_id in (SELECT distinct userId FROM supportGroupUser where supportGroupLevelId in (" + data.supportGroupIds + ") and clientId=? and DeleteFlag=0)) " +
            " and a.DeleteFlag=0";
        con.query(sql, [data.clientId, data.clientId], function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                var data = [];
                if (result1.length > 0) {
                    for (let i = 0; i < result1.length; i++) {
                        // util.logData('parentPath=====' + JSON.stringify(result1[i].parentPath))
                        let sql = "SELECT a.id, a.ATTRVAL name FROM TICKETATTRIBUTES a where a.id in ( " + result1[i].parentPath + ")";
                        con.query(sql, function (err, result2) {
                            if (err) {
                                logData('Error1:---' + err);
                                callback(err, null);
                            } else {
                                // callback(null, result);
                                data.push(result2);
                                if (result1.length === flagi + 1) {
                                    callback(null, data);
                                }
                                flagi++;
                                // util.logData('result2=====' + JSON.stringify(data))
                            }
                        })
                    }
                } else {
                    callback(null, data);
                }
            }
        })
    }

    async.parallel([getDashboardCategorys, getParentPath], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            var data1 = {};
            var report = [];
            let count = 0;
            // util.logData('final result=====' + JSON.stringify(results))
            for (let i = 0; i < results[0].length; i++) {
                let sql = "SELECT coalesce(group_concat(LEVELSHORTDESC) , '') support_group_name FROM SUPPORTGROUPLEVEL where id " +
                    "in (SELECT supportGroupLevelId FROM supportGroupUser where clientId=? and userId=?) and group_level != 0";
                con.query(sql, [data.clientId, results[0][i].id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        // util.logData('group result ====' + JSON.stringify(result));
                        for (let j = 0; j < results[1].length; j++) {
                            if (results[0][i].categoryId === results[1][j][8].id) {
                                data1 = {
                                    user_name: results[0][i].name,
                                    loginId: results[0][i].login_name,
                                    support_group: result[0].support_group_name,
                                    ic: results[1][j][0].name,
                                    legal_entity: results[1][j][1].name,
                                    strategic_business_group: results[1][j][2].name,
                                    business_unit: results[1][j][3].name,
                                    segment: results[1][j][4].name,
                                    cluster: results[1][j][5].name,
                                    department: results[1][j][6].name,
                                    location: results[1][j][7].name,
                                    category: results[1][j][8].name
                                };
                                report.push(data1);
                                // util.logData('group result ====' + JSON.stringify(report));
                            }
                        }
                        count++;
                    }
                    // util.logData('result ====' + JSON.stringify(report));
                    if (count + 1 === results[0].length) {
                        cb(null, true, report);
                    }
                });
            }
        }
    })
}


function searchTicketByIdForChr(data, cb) {
    logData("\n\nAdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and aa.categoryId = cc.id) " +
            " category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, a.busi_urgency_id, " +
            " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        sql = sql + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " ,USER ul ";
        }

        sql = sql + " , ticket a   " +
            " where a.id = e.PKFIELDVAL ";

        sql = sql + " and a.clientid = ?  and a.ticketTypeId = ? and a.working_category = ? ";
        var params = [data.clientId, data.ticketTypeId, data.workingCategory];
        sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id  ";
        sql = sql + " and a.DeleteFlag = '0' ";
        sql = sql + " and e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) " +
            "  and g.id = e.supportGroupLevelId ";
        params.push(data.ticketTypeId);
        params.push(data.clientId);
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " and a.createbyid=ul.id  ";
        }

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
        }


        if (data.ticket_id != '0') {
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }


        if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
            sql = sql + " and l.psno = ?  ";
            params.push(data.raisedValue);
        }


        sql = sql + "  LIMIT ? OFFSET ? ";
        params.push(Number(page_size));
        params.push(Number(offset));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --> ' + result.length);
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        //let sql1;
        util.logData('\n\n totalData-------------------' + JSON.stringify(data))
        let sql1 = "select count(distinct a.id) count from WFCCLIENTRESULT e ";

        sql1 = sql1 + " , ticket a where  a.id = e.PKFIELDVAL " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";

        sql1 = sql1 + " and a.clientid = ?  and a.ticketTypeId = ?  and a.working_category = ?";

        var params = [data.clientId, data.clientId, data.ticketTypeId, data.workingCategory];

        if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
            sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        }

        if (data.ticket_id != '0') {
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }


        sql1 = sql1 + "and e.id in (select max(x.id) from WFCCLIENTRESULT x, " +
            " ticket y where x.PKFIELDVAL = y.id and y.ticketTypeId =? and y.clientid = ? group by x.PKFIELDVAL) ";
        params.push(data.ticketTypeId, data.clientId);

        logData("tot_query---------------------->" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                //util.logData('result1=' + done.length());
                cb(null, done);
            }
        });
    }
}


function searchUserDetailsByPsNo(data, cb) {
    if (data.psOrName !== '' && data.psOrName !== null) {
        var sql = "SELECT id, NAME as name ,USERMAIL as email,USERMOBILENO mobile, login_name FROM `USER` where id in (SELECT userId FROM `supportGroupUser` WHERE " +
            " `supportGroupLevelId` = (SELECT id FROM `SUPPORTGROUPLEVEL` WHERE `CLIENTID`=? AND `group_level` = 0 AND DeleteFlag=0) and DeleteFlag = 0) and" +
            " (login_name like Concat('%',?,'%')) and CLIENTID=? and DeleteFlag=0;";
        con.query(sql, [data.clientId, data.psNo, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

// ===============================
function searchAllEscalateMaster(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.ticketTypeId) ticketType, (select ATTRVAL from TICKETATTRIBUTES where id = a.categoryId) category, (SELECT ATTRVAL FROM `TICKETATTRIBUTES` where sequence_no=a.status_sequence and CLIENTID=? and ATTRID = 2) status, resolverGroup, resolverUser from ticket_status_wise_groupOrUser_selection a, TICKETATTRIBUTES b where b.id = a.categoryId and b.ATTRVAL LIKE Concat('%',?,'%') and a.CLIENTID = ? and a.DeleteFlag = 0;";
        util.logData(sql);
        con.query(sql, [data.clientId, data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllClient(data, cb) {
    if (data.name !== '' && data.name !== null) {
        util.logData(data);
        var sql = "SELECT c.id,d.zone_name as zone, c.NAME, c.keyPerson, c.keyEmail, c.keyMobile, concat(c.startDate,'') startDate, concat(c.endDate,'') endDate, c.cliAddr, c.prefix, c.BASE_FLAG, c.createbyid, c.createdate, c.modifybyid, c.modifydate, c.DeleteFlag, c.DeleteDate, c.spocName, c.spocEmail, c.spocNumber, c.sunChck, c.sunHourStart, c.sunHourEnd, c.monChck, c.monHourStart, c.monHourEnd, c.tueChck, c.tueHourStart, c.tueHourEnd, c.wedChck, c.wedHourStart, c.wedHourEnd, c.thurChck, c.thurHourStart, c.thurHourEnd, c.friChck, c.friHourStart, c.friHourEnd, c.satChck, c.satHourStart, c.satHourEnd, c.delete_by_id, c.weeklyworkinghour, c.clientCode, c.upload_path, c.sub_client from CLIENT c, zone d where c.NAME LIKE Concat('%',?,'%') and c.zone=d.zone_id and c.BASE_FLAG = 'false' AND c.DeleteFlag=0 ;";
        util.logData(sql);
        //var sql = "SELECT c.id,d.zone_name as zone, c.NAME, c.keyPerson, c.keyEmail, c.keyMobile, concat(c.startDate,"") startDate, concat(c.endDate,"") endDate, c.cliAddr, c.prefix, c.BASE_FLAG, c.createbyid, c.createdate, c.modifybyid, c.modifydate, c.DeleteFlag, c.DeleteDate, c.spocName, c.spocEmail, c.spocNumber, c.sunChck, c.sunHourStart, c.sunHourEnd, c.monChck, c.monHourStart, c.monHourEnd, c.tueChck, c.tueHourStart, c.tueHourEnd, c.wedChck, c.wedHourStart, c.wedHourEnd, c.thurChck, c.thurHourStart, c.thurHourEnd, c.friChck, c.friHourStart, c.friHourEnd, c.satChck, c.satHourStart, c.satHourEnd, c.delete_by_id, c.weeklyworkinghour, c.clientCode, c.upload_path, c.sub_client from CLIENT c, zone d";
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}


function searchAllRoleActionMap(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var params = [data.name, data.name];
        if (Number(data.clientId) === 1) {
            var sql = "SELECT roleAction.id,USERROLE.ROLENAME as role, CLIENT.NAME as client, action.name as action FROM CLIENT, roleAction,USERROLE,action where (USERROLE.ROLENAME LIKE Concat('%',?,'%') or CLIENT.NAME LIKE Concat('%',?,'%')) and CLIENT.DeleteFlag = 0 and roleAction.clientId=CLIENT.id and roleAction.roleId=USERROLE.id and roleAction.actionId=action.id;";
        } else {
            var sql = "SELECT roleAction.id,USERROLE.ROLENAME as role, CLIENT.NAME as client, action.name as action FROM CLIENT, roleAction,USERROLE,action where (USERROLE.ROLENAME LIKE Concat('%',?,'%') or CLIENT.NAME LIKE Concat('%',?,'%')) and CLIENT.DeleteFlag = 0 and roleAction.clientId=CLIENT.id and roleAction.roleId=USERROLE.id and roleAction.actionId=action.id and roleAction.clientId=?;";
            params.push(data.clientId);
        }
        util.logData(sql);
        con.query(sql, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllModuleRoleMap(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var params = [data.name, data.name];
        if (Number(data.clientId) === 1) {
            var sql = "SELECT MODULECLIENTUSERROLEMAP.id, tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name, USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP,MODULE, tbl_client_menu_details,USERROLE,CLIENT where MODULECLIENTUSERROLEMAP.deleteFlag = 0 and MODULECLIENTUSERROLEMAP.clientId=CLIENT.id and MODULECLIENTUSERROLEMAP.menuId=tbl_client_menu_details.id and MODULECLIENTUSERROLEMAP.roleId=USERROLE.id and MODULECLIENTUSERROLEMAP.moduleId=MODULE.id and (MODULE.MODULENAME LIKE Concat('%',?,'%') or USERROLE.ROLENAME LIKE Concat('%',?,'%')) and MODULE.DeleteFlag = 0;";
        } else {
            var sql = "SELECT MODULECLIENTUSERROLEMAP.id, tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name, USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP,MODULE, tbl_client_menu_details,USERROLE,CLIENT where MODULECLIENTUSERROLEMAP.deleteFlag = 0 and MODULECLIENTUSERROLEMAP.clientId=CLIENT.id and MODULECLIENTUSERROLEMAP.menuId=tbl_client_menu_details.id and MODULECLIENTUSERROLEMAP.roleId=USERROLE.id and MODULECLIENTUSERROLEMAP.moduleId=MODULE.id and (MODULE.MODULENAME LIKE Concat('%',?,'%') or USERROLE.ROLENAME LIKE Concat('%',?,'%')) and MODULECLIENTUSERROLEMAP.clientId=? and MODULE.DeleteFlag = 0;";
            params.push(data.clientId);
        }
        util.logData(sql);
        con.query(sql, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllMapRoleWithUser(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var params = [data.name];
        if (Number(data.clientId) === 1) {
            var sql = "select a.id,c.name user_name, b.name client_name, d.ROLENAME role_name from ROLEUSER a, CLIENT b,USER c ,USERROLE d where c.name LIKE Concat('%',?,'%') and a.CLIENTID = b.id and a.ROLEID = d.id and a.userid = c.id and a.DeleteFlag = 0 and b.DeleteFlag = 0 and c.DeleteFlag = 0 and d.DeleteFlag = 0 LIMIT 10;";
        } else {
            var sql = "select a.id,c.name user_name, b.name client_name, d.ROLENAME role_name from ROLEUSER a, CLIENT b,USER c ,USERROLE d where c.name LIKE Concat('%',?,'%') and a.CLIENTID = b.id and a.ROLEID = d.id and a.userid = c.id and a.DeleteFlag = 0 and b.DeleteFlag = 0 and c.DeleteFlag = 0 and d.DeleteFlag = 0 and a.CLIENTID=? LIMIT 10;";
            params.push(data.clientId);
        }
        util.logData(sql);
        con.query(sql, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllRoleMapping(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT CLIENTUSERROLE.id,NAME as client,ROLENAME as role from USERROLE,CLIENT,CLIENTUSERROLE where ROLENAME LIKE Concat('%',?,'%') and CLIENTUSERROLE.CLIENTID =CLIENT.id and CLIENTUSERROLE.ROLEID =USERROLE.id  AND CLIENTUSERROLE.DeleteFlag=0 ;";
        util.logData(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllClientAdminRoleMapping(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select b.name client, a.id, c.login_name,c.name name,c.USERMAIL email,c.USERMOBILENO mobile,c.address address from ROLEUSER a, CLIENT b,USER c ,USERROLE d where c.name LIKE Concat('%',?,'%') and a.CLIENTID = b.id and a.ROLEID = d.id and a.userid = c.id and a.DeleteFlag = 0 and b.DeleteFlag = 0 and c.DeleteFlag = 0 and d.DeleteFlag = 0 LIMIT 10;";
        util.logData(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllMenuConfiguration(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id, a.funcDescription ,FuctionalityMst.funcionalityName ,CLIENT.NAME  as client_name from TicketFuctionalityDetails as a join FuctionalityMst on a.functionalityId=FuctionalityMst.id join CLIENT on a.client_id=CLIENT.id where a.funcDescription LIKE Concat('%',?,'%') and a.DeleteFlag=0 LIMIT 10;";
        console.log(sql);
        con.query(sql, [data.name], function (err, done) {


            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllModuleRoleMapping(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT a.id,tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name,b.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP a,MODULE,tbl_client_menu_details,USERROLE b,CLIENT where MODULE.MODULENAME LIKE Concat('%',?,'%') and a.clientId=CLIENT.id and a.moduleId=MODULE.id and a.menuId=tbl_client_menu_details.id and a.roleId=b.id and a.deleteFlag=0 ;";
        util.logData(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllModuleUserRoleMapping(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT MODULECLIENTUSERMAP.id,tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name, USERROLE.ROLENAME as role_name " +
            " ,MODULE.MODULENAME as module_name,USER.NAME as user_name from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER " +
            " where MODULECLIENTUSERMAP.deleteFlag=0 and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id and MODULECLIENTUSERMAP.client_id=CLIENT.id and " +
            " MODULECLIENTUSERMAP.role_id=USERROLE.id and MODULECLIENTUSERMAP.module_id=MODULE.id and MODULECLIENTUSERMAP.user_id=USER.id and " +
            " USER.login_name LIKE Concat('%',?,'%') LIMIT 10;";
        console.log(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllRoleActionMapping(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var param = [data.name];
        if (Number(data.clientId) === 1) {
            var sql = "SELECT roleAction.id,USERROLE.ROLENAME as role, CLIENT.NAME as client, action.name as action FROM CLIENT, roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and roleAction.roleId=USERROLE.id and roleAction.actionId=action.id and USERROLE.ROLENAME LIKE Concat('%',?,'%');";
        } else {
            var sql = "SELECT roleAction.id,USERROLE.ROLENAME as role, CLIENT.NAME as client, action.name as action FROM CLIENT, roleAction,USERROLE,action where roleAction.DeleteFlag=0 and roleAction.clientId=CLIENT.id and roleAction.roleId=USERROLE.id and roleAction.actionId=action.id and USERROLE.ROLENAME LIKE Concat('%',?,'%') and CLIENT.id = ?;";
            param.push(data.clientId);
        }
        util.logData(sql);
        con.query(sql, param, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllRoleUserActionMapping(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT RoleUserAction.id,USER.NAME as user, USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action FROM USER,CLIENT,RoleUserAction,USERROLE,action where RoleUserAction.DeleteFlag=0 and RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id and USER.NAME LIKE Concat('%',?,'%');";
        util.logData(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllCreateMenu(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select m.*,coalesce(n.menu_desc,'') parent_name from (SELECT c.name client_name, d.MODULENAME module_name,a.parent_menu_id,a.id id,a.menu_desc name, coalesce(b.url,'') url, a.sequence_no seq,a.leafnode FROM CLIENT c, MODULE d , tbl_client_menu_details a left join URLKEY b on a.url_id = b.id WHERE a.client_id  = c.id and a.module_id = d.id and a.menu_desc LIKE Concat('%',?,'%') and a.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0') m left join tbl_client_menu_details n on m.parent_menu_id  = n.id;";
        util.logData(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllModulePageUrlMappingStupa(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT MODULEURLMAP.id,URLKEY as `urlKey`,URL as `url`,URLDESCRIPTION as `urlDesc`, MODULENAME as module,NAME as client FROM MODULEURLMAP,URLKEY,MODULE,CLIENT WHERE URLKEY LIKE Concat('%',?,'%') AND MODULEURLMAP.CLIENTID=CLIENT.id AND MODULEURLMAP.MODULEID=MODULE.id and  MODULEURLMAP.URLID = URLKEY.id AND MODULEURLMAP.DeleteFlag=0 ;";
        util.logData(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllModule(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT id,MODULENAME,MODDESCRIPTION FROM  MODULE  where MODULE.MODULENAME LIKE Concat('%',?,'%') AND  MODULE.DeleteFlag=0;";
        util.logData(sql);
        con.query(sql, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllModulePageUrlMapping(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select MODULEURLMAP.id,MODULE.MODULENAME as moduleName,URLKEY.URL as url,URLKEY.URLDESCRIPTION as urlDesc, URLKEY.URLKEY as urlKey from MODULEURLMAP INNER JOIN MODULE INNER JOIN URLKEY ON MODULEURLMAP.MODULEID=MODULE.id AND MODULEURLMAP.URLID=URLKEY.id AND MODULEURLMAP.DeleteFlag='0' AND URLKEY.URLKEY LIKE Concat('%',?,'%') AND MODULEURLMAP.CLIENTID=?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllTicketStatusFlow(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT distinct a.id , b.ATTRVAL , c.ATTRVAL as previd , m.nextid as nextid  FROM ticket_status_seq_mst a , TICKETATTRIBUTES b ,TICKETATTRIBUTES c ,TICKETATTRIBUTES d , (SELECT i.id ,  GROUP_CONCAT(c.ATTRVAL) as nextid FROM ticket_status_seq_mst i, TICKETATTRIBUTES c WHERE FIND_IN_SET(c.id , i.ticket_nxt_status_id) GROUP BY i.id) m where a.ticket_type_id = b.id  and a.delete_flag =0 and a.ticket_pres_status_id=c.id and a.id = m.id and c.ATTRVAL LIKE Concat('%',?,'%') and a.client_id = ?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllTicketCheckList(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id, (select ATTRVAL from TICKETATTRIBUTES where id=a.tickettype_id) ticketType, (select ATTRVAL from TICKETATTRIBUTES where id = a.status_id) ticketStatus, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.category_id))) category, a.description, fieldType, predifinedValue from checklist a where a.description LIKE Concat('%',?,'%') and a.client_id =? and a.DeleteFlag = 0;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllFileUploadLogs(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id, a.FileName, a.Status , a.Message, a.UploadDate from FileUploadLogs a where a.FileName LIKE Concat('%',?,'%') and a.ClientID = ?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllFollowUp(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType, (SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName, a.ps_no as psNo,a.followup_users_name as userName, (SELECT busi_priority_name FROM `BUSINESSPRIORITY` where id = a.priority_id) priority, a.followup_users_phno, a.followup_users_email from tbl_client_specific_master a, TICKETATTRIBUTES b where b.id=a.category_id and b.ATTRVAL LIKE Concat('%',?,'%') and a.client_id = ? and a.delete_flag = 0 ;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllEscalation(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType,(SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName, a.notification_subject, if((a.escalation_when_type = 1) ,'after','before') escalation_when_type, a.escalation_time_to_calculate, if((a.sla_alert_type = 1) ,'after','before') sla_alert_type, a.sla_given_time, (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalated_to_support_grp_id) supportGroup, (select busi_priority_name from BUSINESSPRIORITY where id=a.priority_id) priority from ticket_escalation_notification_mst a, TICKETATTRIBUTES b where b.id=a.category_id and b.ATTRVAL LIKE Concat('%',?,'%') and a.client_id = ? and a.delete_flag = 0;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllBusinessMatrix(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select * from (SELECT a.id id,c.busi_impact_name impact, e.busi_urgency_name urgency, '' category, d.busi_priority_name priority, (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type from BUSINESSMATRIX a, BUSINESSIMPACT c, BUSINESSPRIORITY d, BUSINESSURGENCY e where a.CLIENTID =?  and a.busi_impact_id = c.id  and a.busi_priority_id = d.id and a.busi_urgency_id = e.id  and a.category_id is null and a.DeleteFlag = 0 and c.DeleteFlag = 0 and d.DeleteFlag = 0 and e.DeleteFlag = 0 union SELECT a.id id, '' impact, '' urgency, f.ATTRVAL category , d.busi_priority_name priority , (SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type from BUSINESSMATRIX a, BUSINESSPRIORITY d, TICKETATTRIBUTES f where a.CLIENTID =?  and a.busi_priority_id = d.id  and a.category_id = f.id and a.DeleteFlag = 0  and f.DeleteFlag = 0 and a.category_id is not null and a.category_id in (SELECT id FROM TICKETATTRIBUTES where ATTRVAL LIKE Concat('%',?,'%'))) z ;";
        util.logData(sql);
        con.query(sql, [data.clientId, data.clientId, data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllStatus(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select id, ATTRVAL name ,Attr_desc description,sequence_no seq,is_stopSlaMeter stopSlaMeter," +
            " is_command_required commandRequired from TICKETATTRIBUTES where ATTRVAL LIKE Concat('%',?,'%') and DeleteFlag=0 and CLIENTID= ? and ATTRID=2;";
        // util.logData('+++++++++++++' + JSON.stringify(sql));
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result==' + JSON.stringify(done));
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllSlaClient(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id, a.ACTIVESLA, a.ENABLE_ESCALATION, a.NAME name, a.DESCRIPTIONS des, e.busi_priority_name priority, d.ATTRVAL ticket, a.RESPONSETIME responseTime, a.RESOLUTIONTIME resolutionTime from SLA_client_specific a, CLIENT b, TICKETATTRIBUTES d, BUSINESSPRIORITY e where a.CLIENTID = b.id and a.TICKETTYPEID = d.id and a.busi_priority_id = e.id and a.NAME LIKE Concat('%',?,'%') and a.CLIENTID =? and a.supportGroupLevelId is null and a.deleteflag = 0 and b.DeleteFlag = 0 and e.DeleteFlag = 0 ;";
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllPriority(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT b.name clientNm ,a.id id,a.busi_priority_name name ,a.busi_priority_desc des ,a.color_desc, c.ATTRVAL  ticket_type from BUSINESSPRIORITY a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id and a.DeleteFlag=0 and a.busi_priority_name LIKE Concat('%',?,'%') and a.CLIENTID =?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllBusinessUrgency(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT b.name clientNm ,a.id id,a.busi_urgency_name name, a.busi_urgency_desc des,c.ATTRVAL ticket_type from BUSINESSURGENCY a, CLIENT b, TICKETATTRIBUTES c  where a.CLIENTID = b.id and a.ticket_type = c.id and a.DeleteFlag=0 and a.busi_urgency_name LIKE Concat('%',?,'%') and a.CLIENTID =?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllBusinessImpact(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT b.name clientNm ,a.id id,a.busi_impact_name name, a.busi_impact_desc des, a.sequence_no seq, c.ATTRVAL ticket_type from BUSINESSIMPACT a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id and a.DeleteFlag=0 and a.busi_impact_name LIKE Concat('%',?,'%') and a.CLIENTID =?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllViewTicketMenuConfiguration(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT a.id,b.ATTRVAL type,c.LEVELSHORTDESC groupname,coalesce(e.NAME,'') user,(select funcionalityName from FuctionalityMst where id =d.functionalityId) actionType, d.funcDescription value, d.func_desc_id,b.sequence_no seq FROM TICKETATTRIBUTES b, SUPPORTGROUPLEVEL c, TicketFuctionalityDetails d, AdditionalFuncMappingWithUser a LEFT JOIN USER e on a.userId = e.id where a.ticketType = b.id and a.supportGroupLevelId = c.id and a.functionDtlsId = d.func_desc_id and  a.functionalityId = d.functionalityId and a.clientId = d.client_id and coalesce(e.DeleteFlag,'0') = 0 and a.DeleteFlag = 0 and c.DeleteFlag = 0 and b.ATTRID = 3 and b.DeleteFlag = 0 and c.LEVELSHORTDESC LIKE Concat('%',?,'%') and a.clientId =?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllReportFields(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.category_id))) category_id, c.ATTRVAL ttype, a.fieldName name,a.predifinedValue, a.fieldType, a.defaultValue,a.isQuestion from ticketExtandMstTbl a, TICKETATTRIBUTES b , TICKETATTRIBUTES c where a.category_id = b.id and a.ticketType = c.id and a.DeleteFlag = 0 and b.DeleteFlag = 0 and c.DeleteFlag = 0 and a.fieldName LIKE Concat('%',?,'%') and b.clientId = ?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllMapCategoryWithGroup(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT d.id , a.LEVELSHORTDESC groupname ,b.attrval attrVal,(select attrval from TICKETATTRIBUTES where id = d.ticket_type )ticket_type FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b WHERE d.supportGroupLevelId = a.id and d.CLIENTID  = c.id and d.ticketAttrId  = b.id and a.DeleteFlag = 0 and c.DeleteFlag = 0 and a.LEVELSHORTDESC LIKE Concat('%',?,'%') and a.CLIENTID=? and d.DeleteFlag = 0 and b.DeleteFlag = 0;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllMapClientWithCategoryLevel(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT a.id,a.category_header_id,(SELECT header_name FROM attributesHeaderMst where id = a.category_header_id) header_name,a.category_level, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type_id ) ticket_type FROM ticket_workflow_generated_on_category a, attributesHeaderMst b where b.header_name LIKE Concat('%',?,'%') and a.category_header_id = b.id and a.client_id=? and a.delete_flag=0 and b.DeleteFlag = 0;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllCategory(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area FROM CLIENT c , TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0  and a.ATTRVAL LIKE Concat('%',?,'%') and a.CLIENTID= ? and COALESCE(d.DeleteFlag,'0') = 0) m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id order by id desc;";
        util.logData(sql);
        /*	var sql = "select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent " +
                    " from  (SELECT c.name clientNm ,a.id id,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area " +
                    " FROM CLIENT c , TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  " +
                    " and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0  and a.parentPath in (SELECT id FROM TICKETATTRIBUTES where ATTRVAL " +
                    " LIKE Concat('%',?,'%')) and a.PARENT_ID > 0 and a.CLIENTID= ? and COALESCE(d.DeleteFlag,'0') = 0) m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id;";*/
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllLevelOfCategories(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT c.name clientNm,a.id id,a.header_desc description,a.header_name name ,a.sequence_no seq, b.ATTRDESC attr, alphanum(a.header_name) field, d.ATTRVAL ticket_type FROM CLIENT c, attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d WHERE a.header_name LIKE Concat('%',?,'%') and a.ATTRID = b.id and a.CLIENTID  = c.id and a.ticket_type  = d.id and a.DeleteFlag = 0 and c.DeleteFlag = 0 and b.DeleteFlag = 0 and a.CLIENTID=?;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllCategorySlaMap(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT a.id, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.ticket_type_id) ticketType, (SELECT ATTRVAL FROM TICKETATTRIBUTES WHERE id = a.category_id) category, (SELECT sla_calculation_based_on_type FROM sla_calculation_based_on WHERE id = a.sla_done_by) sla_calculation_based_on_type FROM sla_calculaion_done_by a, TICKETATTRIBUTES b where b.id = a.category_id and b.ATTRVAL LIKE Concat('%',?,'%') and a.client_id =? and a.delete_flag = 0;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllSupportGroupSlaClient(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select a.id, a.ACTIVESLA, a.ENABLE_ESCALATION, a.NAME name, a.DESCRIPTIONS des, e.busi_priority_name priority, d.ATTRVAL ticket, a.RESPONSETIME responseTime, a.RESOLUTIONTIME resolutionTime , x.supportGrp from SLA_client_specific a, CLIENT b, TICKETATTRIBUTES d, BUSINESSPRIORITY e ,(SELECT i.id ,  GROUP_CONCAT(c.LEVELLONGDESC) supportGrp FROM SLA_client_specific i, SUPPORTGROUPLEVEL c WHERE FIND_IN_SET(c.id , i.supportGroupLevelId) GROUP BY i.id) x where a.NAME LIKE Concat('%',?,'%') and a.CLIENTID = b.id and a.TICKETTYPEID = d.id and a.busi_priority_id = e.id and a.CLIENTID = ? and a.deleteflag = 0 and b.DeleteFlag = 0 and e.DeleteFlag = 0 and a.id = x.id ;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllSupportGroupHolidays(data, cb) {
    if (data.date !== '' && data.date !== null) {
        var sql = "select a.id ,  (select LEVELLONGDESC from SUPPORTGROUPLEVEL where SUPPORTGROUPLEVEL.id = a.supportGroupLevelId) supportGrp , a.holidaystarttime, CASE WHEN holidaytype IN ('F') THEN true ELSE false END AS holidaytype , a.holiday_desc , concat(a.holyday,'') holyday from holiDaysListMst a  where a.holyday = concat(?,'') and a.clientid = ? and a.deleteflag = 0 ;";
        con.query(sql, [data.date, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllRoleUserActionMap(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT RoleUserAction.id,USER.NAME as user, USERROLE.ROLENAME as role,CLIENT.NAME as client, action.name as action FROM USER,CLIENT,RoleUserAction,USERROLE,action where USER.NAME LIKE Concat('%',?,'%') and RoleUserAction.DeleteFlag=0 and RoleUserAction.clientId=CLIENT.id and RoleUserAction.roleId=USERROLE.id and RoleUserAction.actionId=action.id and RoleUserAction.userId=USER.id and RoleUserAction.clientId=? ;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllMapUserWithSupportGroup(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT a.id,a.is_spoc,c.NAME clientName,d.NAME as user,b.LEVELSHORTDESC as groupname from supportGroupUser a, CLIENT c, USER d , SUPPORTGROUPLEVEL b where d.NAME LIKE Concat('%',?,'%') and a.CLIENTID = c.id and a.USERID = d.id and a.supportGroupLevelId = b.id and a.DeleteFlag= 0 and c.DeleteFlag= 0 and d.DeleteFlag = 0 and b.DeleteFlag = 0 and a.CLIENTID = ? ;";
        util.logData(sql);
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllModuleRoleUserMap(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var param = [data.name];
        if (Number(data.clientId) === 1) {
            var sql = "SELECT a.id,d.menu_desc menu_name,e.NAME as client_name, c.ROLENAME as role_name ,b.MODULENAME as module_name,f.NAME as user_name from MODULECLIENTUSERMAP a,MODULE b,USERROLE c,tbl_client_menu_details d,CLIENT e,USER f where f.login_name LIKE Concat('%',?,'%') and a.deleteFlag=0 and a.menu_id=d.id and a.client_id=e.id and a.role_id=c.id and a.module_id=b.id and a.user_id=f.id LIMIT 10;";
        } else {
            var sql = "SELECT a.id,d.menu_desc menu_name,e.NAME as client_name, c.ROLENAME as role_name ,b.MODULENAME as module_name,f.NAME as user_name from MODULECLIENTUSERMAP a,MODULE b,USERROLE c,tbl_client_menu_details d,CLIENT e,USER f where f.login_name LIKE Concat('%',?,'%') and a.deleteFlag=0 and a.client_id=? and a.menu_id=d.id and a.client_id=e.id and a.role_id=c.id and a.module_id=b.id and a.user_id=f.id LIMIT 10;";
            param.push(data.clientId);
        }
        util.logData(sql);
        con.query(sql, param, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}


function searchAllSupportGroup(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT a.id,d.zone_name as zone,a.LEVELSHORTDESC as name,a.LEVELLONGDESC" +
            " as description,a.group_email,a.group_level as level,a.management mngmntView, " +
            " b.sunChck, b.sunHourStart, b.sunHourEnd, b.monChck, b.monHourStart, " +
            " b.monHourEnd, b.tueChck, b.tueHourStart, b.tueHourEnd, b.wedChck, b.wedHourStart, " +
            " b.wedHourEnd, b.thurChck, b.thurHourStart, b.thurHourEnd, b.friChck, b.friHourStart, b.friHourEnd, " +
            " b.satChck, b.satHourStart, b.satHourEnd " +
            " from SUPPORTGROUPLEVEL a,supportGroupEnableDayTime b ,zone d" +
            " where a.id = b.supportGroupLevelId and a.ZONEID = d.zone_id " +
            " and a.DeleteFlag='0' and b.DeleteFlag = '0' and a.CLIENTID = ? and (a.LEVELSHORTDESC LIKE Concat('%',?,'%') or a.LEVELLONGDESC LIKE Concat('%',?,'%'))";
        con.query(sql, [data.clientId, data.name, data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function getNotificationMenuIdTicketStatusWise(data, cb) {
    console.log("------->:" + JSON.stringify(data))
    let sql1 = 'select a.sequence_no seq,b.working_category cat_id from TICKETATTRIBUTES a ,ticket b where b.tstatus=a.id and b.id=? and b.DeleteFlag=0 and a.DeleteFlag=0';
    con.query(sql1, [data.ticketId], function (err, result1) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (result1.length > 0) {
                // console.log(result1[0].seq)
                var sql = "SELECT distinct menu_id FROM notification_initial_classification where client_id =? and ticket_type = ? and ticket_status_seq = ? and cat_id=? and DeleteFlag = '0' ";
                con.query(sql, [data.clientId, data.ticketTypeId, result1[0].seq, result1[0].cat_id], function (err, result) {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        for (let i = 0; i < result.length; i++) {
                            // logData('checking socket ---------------------' + (socket && socket.connected));
                            if (socket && socket.connected) {
                                logData('getNotificationMenuIdTicketStatusWise---------------------' + result[i].menu_id);
                                socket.emit('dashboard', {
                                    menuId: result[i].menu_id,
                                    ticketId: data.ticketId,
                                    clientId: data.clientId,
                                    ticketTypeId: data.ticketTypeId,
                                    status_seq: result1[0].seq
                                });
                            }
                        }
                        cb(null, true)
                    }
                });
            } else {
                util.logData('\n\n status not found for sending socket data ');
            }
        }
    });

}


function searchAnalystByPsNo(data, cb) {
    if (data.psOrName !== '' && data.psOrName !== null) {
        var sql = "SELECT id, NAME as name ,USERMAIL as email,USERMOBILENO mobile, login_name FROM `USER` where id in (SELECT userId FROM `supportGroupUser` WHERE " +
            " `supportGroupLevelId` in (SELECT id FROM `SUPPORTGROUPLEVEL` WHERE `CLIENTID`=? AND `group_level` != 0 AND DeleteFlag=0) and DeleteFlag = 0) and" +
            " (login_name like Concat('%',?,'%')) and CLIENTID=? and DeleteFlag=0;";
        con.query(sql, [data.clientId, data.psNo, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function searchAllTicketStatusFlow(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "SELECT distinct a.id , b.ATTRVAL , c.ATTRVAL as previd , m.nextid as nextid  FROM ticket_status_seq_mst a , TICKETATTRIBUTES b ,TICKETATTRIBUTES c ,TICKETATTRIBUTES d , (SELECT i.id ,  GROUP_CONCAT(c.ATTRVAL) as nextid FROM ticket_status_seq_mst i, TICKETATTRIBUTES c WHERE FIND_IN_SET(c.id , i.ticket_nxt_status_id) GROUP BY i.id) m where a.ticket_type_id = b.id  and a.delete_flag =0 and a.ticket_pres_status_id=c.id and a.id = m.id and c.ATTRVAL LIKE Concat('%',?,'%') and a.client_id = ?;";
        con.query(sql, [data.name, data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function updateClient(data, cb) {
    var sql = "";
    var sdt = new Date(data.startDate).toISOString().slice(0, 19).replace('T', ' ');
    var totHr = hrCalculation(data.sunHourStart, data.sunHourEnd) + hrCalculation(data.monHourStart, data.monHourEnd) + hrCalculation(data.tueHourStart, data.tueHourEnd)
        + hrCalculation(data.wedHourStart, data.wedHourEnd) + hrCalculation(data.thurHourStart, data.thurHourEnd) + hrCalculation(data.friHourStart, data.friHourEnd) + hrCalculation(data.satHourStart, data.satHourEnd);
    if (!data.endDate) {
        sql = "UPDATE CLIENT SET NAME = ?, keyPerson = ?, keyEmail = ?, keyMobile = ?, cliAddr = ?, upload_path = ?, spocName = ?, spocEmail = ?, spocNumber = ?, startDate = (select ADDTIME(?,'5:30:0.000000')), sunChck = ?, sunHourStart = ?, sunHourEnd = ?, monChck = ?, monHourStart = ?, monHourEnd = ?, tueChck = ?, tueHourStart = ?, tueHourEnd = ?, wedChck = ?, wedHourStart = ?, wedHourEnd = ?, thurChck = ?, thurHourStart = ?, thurHourEnd = ?, friChck = ?, friHourStart = ?, friHourEnd = ?, satChck = ?, satHourStart = ?, satHourEnd = ?, weeklyworkinghour = ?, sub_client = ?, logo = ? WHERE id = ?;"
    } else {
        var edt = new Date(data.endDate).toISOString().slice(0, 19).replace('T', ' ');
        sql = "UPDATE CLIENT SET NAME = ?, keyPerson = ?, keyEmail = ?, keyMobile = ?, cliAddr = ?, upload_path = ?, spocName = ?, spocEmail = ?, spocNumber = ?, startDate = (select ADDTIME(?,'5:30:0.000000')), endDate = (select ADDTIME('" + edt + "','5:30:0.000000')), sunChck = ?, sunHourStart = ?, sunHourEnd = ?, monChck = ?, monHourStart = ?, monHourEnd = ?, tueChck = ?, tueHourStart = ?, tueHourEnd = ?, wedChck = ?, wedHourStart = ?, wedHourEnd = ?, thurChck = ?, thurHourStart = ?, thurHourEnd = ?, friChck = ?, friHourStart = ?, friHourEnd = ?, satChck = ?, satHourStart = ?, satHourEnd = ?,weeklyworkinghour = ?, sub_client = ?, logo = ? WHERE id = ?;";
    }
    var params = [data.name, data.keyPerson, data.keyEmail, data.keyMobile, data.cliAddr, data.uploadpath, data.spocName, data.spocEmail, data.spocNumber, sdt, String(data.sunChck), data.sunHourStart, data.sunHourEnd, String(data.monChck), data.monHourStart, data.monHourEnd, String(data.tueChck), data.tueHourStart, data.tueHourEnd, String(data.wedChck), data.wedHourStart, data.wedHourEnd, String(data.thurChck), data.thurHourStart, data.thurHourEnd, String(data.friChck), data.friHourStart, data.friHourEnd, String(data.satChck), data.satHourStart, data.satHourEnd, totHr, data.sub_client, data.logo, data.id];

    con.query(sql, params, function (err, done) {
        util.logData(sql);
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });

}

function searchAllRoles(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var sql = "select id,ROLENAME as name,ROLEDESC as roleDesc,SUPERADMINFLAG as adminRole FROM USERROLE where " +
            " (ROLENAME LIKE Concat('%',?,'%') or ROLEDESC LIKE Concat('%',?,'%')) and createbyid = ? ;";
        con.query(sql, [data.name, data.name, data.user_id], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}


// ==========================================export to excel========================
function getAllSupportGroupData(data, cb) {
    var sql = "SELECT c.NAME clientName,d.zone_name as zone,a.LEVELSHORTDESC as name,a.LEVELLONGDESC as description,a.group_email,a.group_level as level,a.management mngmntView, b.sunChck, b.sunHourStart, b.sunHourEnd, b.monChck, b.monHourStart, b.monHourEnd, b.tueChck, b.tueHourStart, b.tueHourEnd, b.wedChck, b.wedHourStart, b.wedHourEnd, b.thurChck, b.thurHourStart, b.thurHourEnd, b.friChck, b.friHourStart, b.friHourEnd, b.satChck, b.satHourStart, b.satHourEnd from SUPPORTGROUPLEVEL a,supportGroupEnableDayTime b, CLIENT c ,zone d where a.CLIENTID = c.id and a.id = b.supportGroupLevelId and a.ZONEID = d.zone_id and a.DeleteFlag='0' and b.DeleteFlag = '0' and a.CLIENTID = ?;";
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}


function getAllRoleData(data, cb) {
    var sql = "select ROLENAME as name, ROLEDESC as roleDesc , SUPERADMINFLAG as adminRole from USERROLE where DeleteFlag = 0 and createbyid = ?";
    con.query(sql, [data.user_id], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllBusinessImpact(data, cb) {
    var sql = "SELECT b.name clientNm ,a.busi_impact_name name, a.busi_impact_desc des, a.sequence_no seq, c.ATTRVAL ticket_type from BUSINESSIMPACT a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id and a.DeleteFlag=0 and a.CLIENTID =?;";
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllBusinessUrgency(data, cb) {
    var sql = "SELECT b.name clientNm ,a.busi_urgency_name name, a.busi_urgency_desc des,c.ATTRVAL ticket_type from BUSINESSURGENCY a, CLIENT b, TICKETATTRIBUTES c  where a.CLIENTID = b.id and a.ticket_type = c.id and a.DeleteFlag=0 and a.CLIENTID =?;";
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllPriority(data, cb) {
    var sql = "SELECT b.name clientNm ,a.busi_priority_name name ,a.busi_priority_desc des ,a.color_desc, c.ATTRVAL  ticket_type from BUSINESSPRIORITY a, CLIENT b, TICKETATTRIBUTES c where a.CLIENTID = b.id and a.ticket_type = c.id and a.DeleteFlag=0 and a.CLIENTID =?;";
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}


function getAllMapCategoryWithGroup(data, cb) {
    var sql = "SELECT a.LEVELSHORTDESC groupname ,b.attrval attrVal,(select attrval from TICKETATTRIBUTES where id = d.ticket_type )ticket_type FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b WHERE d.supportGroupLevelId = a.id and d.CLIENTID  = c.id and d.ticketAttrId  = b.id and a.DeleteFlag = 0 and c.DeleteFlag = 0 and a.CLIENTID=? and d.DeleteFlag = 0 and b.DeleteFlag = 0;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllReportFields(data, cb) {
    var sql = "select (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.category_id))) category_id, c.ATTRVAL ttype, a.fieldName name,a.predifinedValue, a.fieldType, a.defaultValue,a.isQuestion from ticketExtandMstTbl a, TICKETATTRIBUTES b , TICKETATTRIBUTES c where a.category_id = b.id and a.ticketType = c.id and a.DeleteFlag = 0 and b.DeleteFlag = 0 and c.DeleteFlag = 0 and b.clientId = ?;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllViewTicketMenuConfiguration(data, cb) {
    var sql = "SELECT b.ATTRVAL type,c.LEVELSHORTDESC groupname,coalesce(e.NAME,'') user,(select funcionalityName from FuctionalityMst where id =d.functionalityId) actionType, d.funcDescription value, d.func_desc_id,b.sequence_no seq FROM TICKETATTRIBUTES b, SUPPORTGROUPLEVEL c, TicketFuctionalityDetails d, AdditionalFuncMappingWithUser a LEFT JOIN USER e on a.userId = e.id where a.ticketType = b.id and a.supportGroupLevelId = c.id and a.functionDtlsId = d.func_desc_id and  a.functionalityId = d.functionalityId and a.clientId = d.client_id and coalesce(e.DeleteFlag,'0') = 0 and a.DeleteFlag = 0 and c.DeleteFlag = 0 and b.ATTRID = 3 and b.DeleteFlag = 0 and a.clientId =?;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllLevelOfCategories(data, cb) {
    var sql = "SELECT c.name clientNm,a.header_desc description,a.header_name name ,a.sequence_no seq, b.ATTRDESC attr, alphanum(a.header_name) field, d.ATTRVAL ticket_type FROM CLIENT c, attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d WHERE a.ATTRID = b.id and a.CLIENTID  = c.id and a.ticket_type  = d.id and a.DeleteFlag = 0 and c.DeleteFlag = 0 and b.DeleteFlag = 0 and a.CLIENTID=?;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllCategory(data, cb) {
    var sql = "select m.*,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(n.parentPath))) parent from  (SELECT c.name clientNm ,a.PARENT_ID , a.ATTRVAL name, a.Attr_desc description,a.attachedField,a.sequence_no,d.header_name area FROM CLIENT c , TICKETATTRIBUTES a Left join attributesHeaderMst d on a.attrHeaderMstId  = d.id  WHERE a.ATTRID=1 and a.CLIENTID  = c.id  and COALESCE(a.DeleteFlag,'0') = 0 and COALESCE(c.DeleteFlag,'0') = 0  and a.CLIENTID= ? and COALESCE(d.DeleteFlag,'0') = 0) m  Left join TICKETATTRIBUTES n  on m.PARENT_ID = n.id;";
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllMapClientWithCategoryLevel(data, cb) {
    var sql = "SELECT a.category_header_id,(SELECT header_name FROM attributesHeaderMst where id = a.category_header_id) header_name,a.category_level, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type_id ) ticket_type FROM ticket_workflow_generated_on_category a, attributesHeaderMst b where a.category_header_id = b.id and a.client_id=? and a.delete_flag=0 and b.DeleteFlag = 0;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}


function updateFlowStatus(data, cb) {
    var sql = 'Update ticket_status_seq_mst set ticket_type_id = ?, ticket_pres_status_id = ?, ticket_nxt_status_id = ?, modifybyid = ?, modifydate=NOW()  where id = ?';
    con.query(sql, [data.ticket_id, data.previd, data.nextStatus, data.user_id, data.id], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (result.affectedRows > 0) {
                cb(null, true, result.affectedRows);
            } else {
                cb(null, false, result.affectedRows);
            }

        }
    });
}

function getAllModuleRoleUserMap(data, cb) {
    var params = [];
    if (Number(data.clientId) === 1) {
        var sql = "SELECT tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name, USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name,USER.NAME as user_name from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where MODULECLIENTUSERMAP.deleteFlag=0 and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id and MODULECLIENTUSERMAP.client_id=CLIENT.id and MODULECLIENTUSERMAP.role_id=USERROLE.id and MODULECLIENTUSERMAP.module_id=MODULE.id and MODULECLIENTUSERMAP.user_id=USER.id;";
    } else {
        var sql = "SELECT tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name, USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name,USER.NAME as user_name from MODULECLIENTUSERMAP,MODULE,USERROLE,tbl_client_menu_details,CLIENT,USER where MODULECLIENTUSERMAP.deleteFlag=0 and MODULECLIENTUSERMAP.client_id=? and MODULECLIENTUSERMAP.menu_id=tbl_client_menu_details.id and MODULECLIENTUSERMAP.client_id=CLIENT.id and MODULECLIENTUSERMAP.role_id=USERROLE.id and MODULECLIENTUSERMAP.module_id=MODULE.id and MODULECLIENTUSERMAP.user_id=USER.id;";
        params.push(data.clientId);
    }
    util.logData(sql);
    con.query(sql, params, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllSlaClient(data, cb) {
    var sql = "select a.ACTIVESLA, a.ENABLE_ESCALATION, a.NAME name, a.DESCRIPTIONS des, e.busi_priority_name priority, d.ATTRVAL ticket, a.RESPONSETIME responseTime, a.RESOLUTIONTIME resolutionTime from SLA_client_specific a, CLIENT b, TICKETATTRIBUTES d, BUSINESSPRIORITY e where a.CLIENTID = b.id and a.TICKETTYPEID = d.id and a.busi_priority_id = e.id and a.CLIENTID =? and a.supportGroupLevelId is null and a.deleteflag = 0 and b.DeleteFlag = 0 and e.DeleteFlag = 0 ;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllBusinessMatrix(data, cb) {
    var sql = "select * from (select * from (SELECT a.id id,c.busi_impact_name impact, e.busi_urgency_name urgency, '' category, d.busi_priority_name priority,(SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type from BUSINESSMATRIX a,BUSINESSIMPACT c, BUSINESSPRIORITY d, BUSINESSURGENCY e where a.CLIENTID =?  and a.busi_impact_id = c.id  and a.busi_priority_id = d.id and a.busi_urgency_id = e.id  and a.category_id is null and a.DeleteFlag = '0' and c.DeleteFlag = '0'  and d.DeleteFlag = '0' and e.DeleteFlag = '0' union SELECT a.id id, '' impact, '' urgency, f.ATTRVAL category , d.busi_priority_name priority ,(SELECT ATTRVAL FROM TICKETATTRIBUTES where id =a.ticket_type) ticket_type from BUSINESSMATRIX a, BUSINESSPRIORITY d, TICKETATTRIBUTES f where a.CLIENTID =?  and a.busi_priority_id = d.id  and a.category_id = f.id and a.DeleteFlag = '0'  and f.DeleteFlag = '0' and a.category_id is not null)y ORDER BY y.id DESC)z ORDER BY z.id  ASC;";
    con.query(sql, [data.clientId, data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllStatus(data, cb) {
    var sql = "select ATTRVAL name ,Attr_desc description,sequence_no seq,is_stopSlaMeter stopSlaMeter, is_command_required commandRequired from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ? and ATTRID=2;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllFollowUp(data, cb) {
    var sql = "select (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType, (SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName, a.ps_no as psNo,a.followup_users_name as userName, (SELECT busi_priority_name FROM `BUSINESSPRIORITY` where id = a.priority_id) priority, a.followup_users_phno, a.followup_users_email from tbl_client_specific_master a, TICKETATTRIBUTES b where b.id=a.category_id and a.client_id = ? and a.delete_flag = 0 ;";
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllFileUploadLogs(data, cb) {
    var sql = "select a.FileName, a.Status , a.Message, a.UploadDate from FileUploadLogs a where a.ClientID = ?;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllTicketCheckList(data, cb) {
    var sql = "select (select ATTRVAL from TICKETATTRIBUTES where id=a.tickettype_id) ticketType, (select ATTRVAL from TICKETATTRIBUTES where id = a.status_id) ticketStatus, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.category_id))) category, a.description, fieldType, predifinedValue from checklist a where a.client_id =? and a.DeleteFlag = 0;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllEscalateMaster(data, cb) {
    var sql = "select (select ATTRVAL from TICKETATTRIBUTES where id=a.ticketTypeId) ticketType, (select ATTRVAL from TICKETATTRIBUTES where id = a.categoryId) category, (SELECT ATTRVAL FROM `TICKETATTRIBUTES` where sequence_no=a.status_sequence and CLIENTID=? and ATTRID = 2) status, resolverGroup, resolverUser from ticket_status_wise_groupOrUser_selection a, TICKETATTRIBUTES b where b.id = a.categoryId and a.CLIENTID = ? and a.DeleteFlag = 0;";
    util.logData(sql);
    con.query(sql, [data.clientId, data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllAutoTicketConfig(data, cb) {
    var sql = "select (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type) ticketType, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(a.category))) category, a.ticket_description, a.ticket_title, a.activity_value, a.activity_type from autoTicket a where a.client_id = ? and a.created_by_id = ? and a.DeleteFlag = 0;";
    util.logData(sql);
    con.query(sql, [data.clientId, data.user_id], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllTicketStatusFlow(data, cb) {
    var sql = "SELECT b.ATTRVAL , c.ATTRVAL as previd , m.nextid as nextid  FROM ticket_status_seq_mst a , TICKETATTRIBUTES b ,TICKETATTRIBUTES c ,TICKETATTRIBUTES d , (SELECT i.id ,  GROUP_CONCAT(c.ATTRVAL) as nextid FROM ticket_status_seq_mst i, TICKETATTRIBUTES c WHERE FIND_IN_SET(c.id , i.ticket_nxt_status_id) GROUP BY i.id) m where a.ticket_type_id = b.id  and a.delete_flag =0 and a.ticket_pres_status_id=c.id and a.id = m.id and a.client_id = ?;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllEscalation(data, cb) {
    var sql = "select (select ATTRVAL from TICKETATTRIBUTES where id=a.ticket_type_id) ticketType,(SELECT ATTRVAL name FROM TICKETATTRIBUTES where id=a.category_id) categoryName, a.notification_subject, if((a.escalation_when_type = 1) ,'after','before') escalation_when_type, a.escalation_time_to_calculate, if((a.sla_alert_type = 1) ,'after','before') sla_alert_type, a.sla_given_time, (select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.escalated_to_support_grp_id) supportGroup, (select busi_priority_name from BUSINESSPRIORITY where id=a.priority_id) priority from ticket_escalation_notification_mst a, TICKETATTRIBUTES b where b.id=a.category_id and a.client_id = ? and a.delete_flag = 0;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllModuleRoleMap(data, cb) {
    var params = [];
    if (Number(data.clientId) === 1) {
        var sql = "SELECT tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name, USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP,MODULE, tbl_client_menu_details,USERROLE,CLIENT where MODULECLIENTUSERROLEMAP.deleteFlag = 0 and MODULECLIENTUSERROLEMAP.clientId=CLIENT.id and MODULECLIENTUSERROLEMAP.menuId=tbl_client_menu_details.id and MODULECLIENTUSERROLEMAP.roleId=USERROLE.id and MODULECLIENTUSERROLEMAP.moduleId=MODULE.id and MODULE.DeleteFlag = 0;";
    } else {
        var sql = "SELECT tbl_client_menu_details.menu_desc menu_name,CLIENT.NAME as client_name, USERROLE.ROLENAME as role_name ,MODULE.MODULENAME as module_name from MODULECLIENTUSERROLEMAP,MODULE, tbl_client_menu_details,USERROLE,CLIENT where MODULECLIENTUSERROLEMAP.deleteFlag = 0 and MODULECLIENTUSERROLEMAP.clientId=CLIENT.id and MODULECLIENTUSERROLEMAP.menuId=tbl_client_menu_details.id and MODULECLIENTUSERROLEMAP.roleId=USERROLE.id and MODULECLIENTUSERROLEMAP.moduleId=MODULE.id and MODULECLIENTUSERROLEMAP.clientId=? and MODULE.DeleteFlag = 0;";
        params.push(data.clientId);
    }
    con.query(sql, params, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllSupportGroupHolidays(data, cb) {
    var sql = "select (select LEVELLONGDESC from SUPPORTGROUPLEVEL where SUPPORTGROUPLEVEL.id = a.supportGroupLevelId) supportGrp , a.holidaystarttime, CASE WHEN holidaytype IN ('F') THEN true ELSE false END AS holidaytype , a.holiday_desc , concat(a.holyday,'') holyday from holiDaysListMst a  where a.clientid = ? and a.deleteflag = 0 ;";
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllSupportGroup(data, cb) {
    var sql = "select * from (SELECT a.id,c.NAME clientName,d.zone_name as zone,a.LEVELSHORTDESC as name,a.LEVELLONGDESC as description,a.group_email,a.group_level as level,a.management mngmntView, b.sunChck, b.sunHourStart, b.sunHourEnd, b.monChck, b.monHourStart, b.monHourEnd, b.tueChck, b.tueHourStart, b.tueHourEnd, b.wedChck, b.wedHourStart, b.wedHourEnd, b.thurChck, b.thurHourStart, b.thurHourEnd, b.friChck, b.friHourStart, b.friHourEnd, b.satChck, b.satHourStart, b.satHourEnd from SUPPORTGROUPLEVEL a,supportGroupEnableDayTime b, CLIENT c ,zone d where  a.CLIENTID = c.id and a.id = b.supportGroupLevelId and a.ZONEID = d.zone_id and a.DeleteFlag='0' and b.DeleteFlag = '0' and a.CLIENTID = ? ORDER BY a.id DESC)z ORDER BY z.id  ASC;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllMapUserWithSupportGroup(data, cb) {
    var sql = "SELECT a.is_spoc,c.NAME clientName,d.NAME as user,b.LEVELSHORTDESC as groupname from supportGroupUser a, CLIENT c, USER d , SUPPORTGROUPLEVEL b where a.CLIENTID = c.id and a.USERID = d.id and a.supportGroupLevelId = b.id and a.DeleteFlag= 0 and c.DeleteFlag= 0 and d.DeleteFlag = 0 and b.DeleteFlag = 0 and a.CLIENTID = ? ;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllUserandSupportGroup(data, cb) {
    var param = [];
    var str = "SELECT a.NAME AS user, d.LEVELSHORTDESC AS groupname, a.USERMAIL AS email, a.USERMOBILENO AS mobile, a.login_name, a.address FROM USER a, supportGroupUser c, SUPPORTGROUPLEVEL d WHERE c.userId = a.id AND c.supportGroupLevelId = d.id AND c.DeleteFlag = '0' AND a.DeleteFlag = '0' and a.CLIENTID = ? ORDER BY c.id;";
    param.push(data.clientId);
    con.query(str, param, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllCategoryandSupportGroup(data, cb) {
    var param = [];
    str = " SELECT a.LEVELSHORTDESC groupname ,b.attrval attrVal, (SELECT ATTRVAL FROM TICKETATTRIBUTES where id = d.ticket_type) ticketType FROM CLIENT c, SupportGrpWithTicketAttributes d, SUPPORTGROUPLEVEL a , TICKETATTRIBUTES b WHERE d.supportGroupLevelId = a.id and d.CLIENTID  = c.id and d.ticketAttrId  = b.id and a.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0' and b.DeleteFlag = '0' and a.CLIENTID=? ORDER BY d.id;";
    param.push(data.clientId);
    con.query(str, param, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllModulePageUrl(data, cb) {
    var str = "select MODULE.MODULENAME as moduleName,URLKEY.URL as url,URLKEY.URLDESCRIPTION as urlDesc, URLKEY.URLKEY as urlKey from MODULEURLMAP INNER JOIN MODULE INNER JOIN URLKEY ON MODULEURLMAP.MODULEID=MODULE.id AND MODULEURLMAP.URLID=URLKEY.id AND MODULEURLMAP.DeleteFlag='0' AND MODULEURLMAP.CLIENTID=? ORDER BY MODULEURLMAP.id;";
    con.query(str, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllMenus(data, cb) {
    var str = "select m.client_name,m.module_name,m.name,m.seq,coalesce(n.menu_desc,'') parent_name from (SELECT c.name client_name, d.MODULENAME module_name,a.parent_menu_id,a.id id,a.menu_desc name, a.sequence_no seq,a.leafnode FROM CLIENT c, MODULE d , tbl_client_menu_details a left join URLKEY b on a.url_id = b.id WHERE a.client_id  = c.id and a.module_id = d.id and a.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0') m left join tbl_client_menu_details n on m.parent_menu_id  = n.id ORDER BY m.id ;";
    util.logData(str);
    con.query(str, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllUrlWithMenus(data, cb) {
    var str = "select m.client_name,m.module_name,m.name,m.url from (SELECT c.name client_name, d.MODULENAME module_name,a.parent_menu_id,a.id id,a.menu_desc name, coalesce(b.url,'') url, a.sequence_no seq,a.leafnode FROM CLIENT c, MODULE d , tbl_client_menu_details a left join URLKEY b on a.url_id = b.id WHERE a.client_id  = c.id and a.module_id = d.id and a.DeleteFlag = '0' and c.DeleteFlag = '0' and d.DeleteFlag = '0') m left join tbl_client_menu_details n on m.parent_menu_id  = n.id ORDER BY m.id ;";
    util.logData(str);
    con.query(str, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function searchAllPlatformUserAuth(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var str = "SELECT adminAuth.moduleId id,adminModule.label as module,USER.NAME as name,addFlag,editFlag,adminAuth.deleteFlag,viewFlag from USER,adminAuth,adminModule where adminModule.id=adminAuth.moduleId and USER.id=adminAuth.userId and adminAuth.deletedFlag='0' and adminModule.label LIKE Concat('%',?,'%');";
        con.query(str, [data.name], function (err, result) {
            if (err) {
                logData(err);
                cb(err, null);
            } else {
                for (var i = 0; i < result.length; i++) {
                    result[i].addFlag = stringToBool(result[i].addFlag);
                    result[i].editFlag = stringToBool(result[i].editFlag);
                    result[i].deleteFlag = stringToBool(result[i].deleteFlag);
                    result[i].viewFlag = stringToBool(result[i].viewFlag);
                }
                cb(null, true, result);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function getAllClientStatus(data, cb) {
    var str = "select * from (SELECT CLIENT.NAME client, ATTRVAL name  FROM TICKETATTRIBUTES,CLIENT  where TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=2 and TICKETATTRIBUTES.clientId=CLIENT.id ORDER BY TICKETATTRIBUTES.id DESC)z;";
    util.logData(str);
    con.query(str, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function searchAllClientStatus(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var str = "select * from (SELECT CLIENT.NAME client, ATTRVAL name , TICKETATTRIBUTES.id id, attr_desc description  FROM TICKETATTRIBUTES,CLIENT  where TICKETATTRIBUTES.DeleteFlag=0 and ATTRID=2 and TICKETATTRIBUTES.clientId=CLIENT.id and ATTRVAL LIKE Concat('%',?,'%') ORDER BY TICKETATTRIBUTES.id DESC)z ;";
        util.logData(str);
        con.query(str, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}

function getAllClientSpecificUrl(data, cb) {
    var str = "SELECT * from (SELECT isAdmin, (select NAME from CLIENT where CLIENT.id = a.client_id) client_name, (select name from url where url.id = a.url_id) url_key ,url FROM `client_specific_url` a where a.DeleteFlag = 0 ORDER BY a.id Desc ) Z;";
    util.logData(str);
    con.query(str, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function searchAllClientSpecificUrl(data, cb) {
    if (data.name !== '' && data.name !== null) {
        var str = "SELECT a.id, isAdmin, (select NAME from CLIENT where CLIENT.id = a.client_id) client_name, (select name from url where url.id = a.url_id ) url_key ,url FROM `client_specific_url` a, url where url.id = a.url_id and url.name LIKE Concat('%',?,'%') and a.DeleteFlag = 0 ORDER BY a.id Desc;";
        util.logData('++++++++++++++++++++++' + str);
        con.query(str, [data.name], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, true, done);
            }
        });
    } else {
        cb(null, true, []);
    }
}


function getAllForwardWorkflow(data, cb) {
    var sql = "select * from (select m.*,coalesce(n.WORKFLOWLEVEL,'') parent from (SELECT b.NAME client, c.ATTRVAL category,coalesce(d.NAME,'') user,f.NAME workflow, concat(g.TABLENAME,'  : ',g.PKFIELDNAME) comp,a.work_flow_component_id component, a.WORKFLOWLEVEL level, a.STARTENDFLOWINDICATOR indicator,a.parent_wfcclient_id , coalesce((select LEVELSHORTDESC from SUPPORTGROUPLEVEL where id=a.supportGroupLevelId and DeleteFlag = '0'),'Creator') groupName , (SELECT ATTRVAL FROM TICKETATTRIBUTES where id = a.ticket_type) ticket_type FROM CLIENT b, TICKETATTRIBUTES c , WORKFLOW f, WORKFLOWCOMPONENT g, WFCCLIENT a left join USER d on a.userId = d.id where a.CLIENTID= ? and a.flowIndicator= ? and a.CLIENTID = b.id and a.categoryId = c.id and a.workflowId = f.id and a.work_flow_component_id = g.id and a.DeleteFlag = '0'  and b.DeleteFlag = '0'  and c.DeleteFlag = '0' and coalesce(d.DeleteFlag,'0') = '0'  and f.DeleteFlag = '0'  and g.DeleteFlag = '0' ORDER BY a.id desc) m left join WFCCLIENT n on m.parent_wfcclient_id = n.id)z;";
    util.logData(sql);
    con.query(sql, [data.clientId, data.indicator], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllBackwardWorkflow(data, cb) {
    var sql = "select * from (SELECT b.ATTRVAL,c.name  workflowName,d.title flowTypeTitle, (select ATTRVAL from TICKETATTRIBUTES where id = ticket_type) ticketType FROM WFCCLIENT_back_notify a,TICKETATTRIBUTES b, WORKFLOW c, WorkflowType d where a.categoryId = b.id and b.ATTRID = 1 and a.workflowId = c.id and a.flowTypeId = d.id and a.DeleteFlag = '0'  and a.clientId = ? ORDER BY a.id DESC)z;";
    util.logData(sql);
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getAllModulePageUrlMapping(data, cb) {
    var sql = "SELECT URLKEY as `urlKey`,URL as `url`,URLDESCRIPTION as `urlDesc`, MODULENAME as module,NAME as client FROM MODULEURLMAP,URLKEY,MODULE,CLIENT WHERE MODULEURLMAP.CLIENTID=CLIENT.id AND MODULEURLMAP.MODULEID=MODULE.id and  MODULEURLMAP.URLID = URLKEY.id AND MODULEURLMAP.DeleteFlag=0 ;";
    console.log(sql);
    con.query(sql, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function searchSupportGroupUserMappingCategoryWise(data, cb) {
    var str = '';
    if (data.grpLevel === '4') {
        str = "SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
            " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.CLIENTID = ? and " +
            " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level <= ? and a.supportGroupLevelId =c.supportGroupLevelId " +
            " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
            " SupportGrpWithTicketAttributes where supportGroupLevelId=? and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
            " and d.DeleteFlag = '0' and d.login_name LIKE Concat('%',?,'%') order by a.id asc";
    } else {
        str = "SELECT a.id,a.is_spoc,d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, " +
            " USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.CLIENTID = ? and " +
            " a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level < ? and a.supportGroupLevelId =c.supportGroupLevelId " +
            " and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from " +
            " SupportGrpWithTicketAttributes where supportGroupLevelId=? and DeleteFlag=0 ) and c.DeleteFlag = '0' " +
            " and d.DeleteFlag = '0' and d.login_name LIKE Concat('%',?,'%') order by a.id asc";
    }
    con.query(str, [data.clientId, data.grpLevel, data.userGroupId, data.loginName], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getCountQuery(data, cb) {
    var sql = "SELECT * FROM ticket_menu_count_mst where client_id=? and menu_id=?";
    con.query(sql, [data.clientId, data.menuId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getSubClientType(data, cb) {
    let sql = 'select a.subclientId id, b.NAME from client_subclient_mapping a,CLIENT b where b.id=a.subclientId and a.masterId=? and b.DeleteFlag=0';
    con.query(sql, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
};

function deleteSupportGroupSpecificUrl(data, cb) {
    var sql = "Update support_group_specific_url set DeleteFlag = 1,delete_by_id = ?,DeleteDate=NOW() where id = ?";
    con.query(sql, [data.user_id, data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTileCountConfig(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        var str = "";
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, a.query_str query, a.menu_id, d.funcDescription menu_name, a.client_id, c.NAME client_name, a.ticket_type_id," +
                " b.ATTRVAL  ticket_type_name, a.is_managerial_view FROM ticket_menu_count_mst a, TICKETATTRIBUTES b, CLIENT c, TicketFuctionalityDetails d" +
                " WHERE a.id > ? and  a.menu_id = d.func_desc_id AND a.client_id = c.id AND a.ticket_type_id = b.id AND d.functionalityId = ? AND d.client_id=? AND " +
                " a.delete_flag = '0' order by a.id Asc LIMIT ?;"
        } else if (paginationType == 'prev') {
            str = "select * from (SELECT a.id, a.query_str query, a.menu_id, d.funcDescription menu_name, a.client_id, c.NAME client_name, a.ticket_type_id, " +
                " b.ATTRVAL  ticket_type_name, a.is_managerial_view FROM ticket_menu_count_mst a, TICKETATTRIBUTES b, CLIENT c, TicketFuctionalityDetails d " +
                " WHERE a.id < ? and  a.menu_id = d.func_desc_id AND a.client_id = c.id AND a.ticket_type_id = b.id AND d.functionalityId = ? AND d.client_id=? AND " +
                " a.delete_flag = '0' order by a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC;";
        }

        con.query(str, [offset, 1, 1, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "SELECT count(a.id) count FROM ticket_menu_count_mst a where a.delete_flag='0';";
        con.query(str1, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getSupportGroupByClientIdOrMasterClientId(data, cb) {
    let sql = "select id ,LEVELSHORTDESC as name from SUPPORTGROUPLEVEL where DeleteFlag=0 and" +
        " CLIENTID in (" + data.clientId + ", (SELECT masterId FROM client_subclient_mapping where subclientId = " + data.clientId + ") )";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTicketCategoryDetailsDynamic(data, cb) {
    function getCategory(callback) {
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' and (CLIENTID = " + data.clientId + " " +
            " or CLIENTID = (select clientid from ticket where id =" + data.ticketId + ") " +
            " or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=" + data.clientId + "))  " +
            " and (ticket_type = " + data.typeId + " or ticket_type = (select ticketTypeId from ticket where id =" + data.ticketId + " ))  ORDER BY sequence_no";
        logData('\n\ngetCategory--------------' + sql)
        con.query(sql, function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                let count = 0;
                let arr = [];
                let arr1 = [];
                for (let i = 0; i < result1.length; i++) {
                    let sql1 = 'SELECT a.parent_categoryId parentId,a.categoryId catId,c.ATTRVAL catVal, b.header_name header ' +
                        ' FROM ticketCategory a,attributesHeaderMst b,TICKETATTRIBUTES c ' +
                        ' where a.DeleteFlag=0 and a.parent_categoryId=b.id and  a.categoryId=c.id and a.ticketId=' + data.ticketId + ' ' +
                        ' and  a.parent_categoryId=' + result1[i].id + '; ';
                    // console.log('\n\nsql1:' + sql1)
                    con.query(sql1, function (err, result) {
                        if (err) {
                            logData('Error2:---' + err);
                            callback(err, null);
                        } else {
                            count++;
                            if (result.length > 0) {
                                arr1.push(result[0]);
                            }

                            if (count === result1.length) {
                                for (let i = 0; i < result1.length; i++) {
                                    for (let j = 0; j < arr1.length; j++) {
                                        // logData(j+'---arr1:---' + arr1[j]);
                                        if (result1[i].id === arr1[j].parentId) {
                                            let val;
                                            // if (i < Number(data.disableField)) {
                                            //     val = {
                                            //         id: i + 1,
                                            //         options: [{id: arr1[j].catId, title: arr1[j].catVal}, {
                                            //             id: arr1[j].parentId,
                                            //             title: arr1[j].header,
                                            //             type: 'header',
                                            //             // followup_users_name: arr1[j].followup_users_name
                                            //         }],
                                            //         isDisabled: true
                                            //     }
                                            // } else {
                                            val = {
                                                id: i + 1,
                                                options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                    id: arr1[j].parentId,
                                                    title: arr1[j].header,
                                                    type: 'header'
                                                }],
                                            }
                                            // }
                                            arr.push(val);
                                            break;
                                        }
                                    }
                                }
                                callback(null, arr)
                            }
                        }
                    })
                }
            }
        });
    }

    function getStatusClient(callback) {
        //var str = 'select id, ATTRVAL name ,Attr_desc description,sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ' + data.clientId + ' and ATTRID=2 and sequence_no NOT IN(0,2)';
        getStatusClientSSC(data, function (err, success, result) {
            if (err) {
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getResolutionNResponseTime(callback) {
        getClientIdFromTicketTbl({
            ticketId: data.ticketId
        }, function (errCC, successCC, resCC) {
            if (errCC) {
                logData(errCC);
                callback(errCC, null);
            } else {
                data.clientId = resCC[0].clientid;
                data.typeId = resCC[0].ticketTypeId;
                getIsClientWiseSlaCalculationReq({
                    "clientId": data.clientId,
                    "ticketTypeId": data.typeId,
                    "working_category": data.cat_id
                }, function (errCU1, successCU1, detailsUC1) {
                    // util.logData('detailsUC1==========================================' + detailsUC1);
                    if (detailsUC1 == 0) {
                        var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                            " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                            " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId is null ";
                        con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                            if (err) {
                                logData('Error3:---' + err);
                                callback(err, null);
                            } else {
                                // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                                callback(null, result);
                            }
                        });
                    } else {
                        var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                            " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                            " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId like '%," + data.suppGrpId + ",%' ";
                        ;
                        con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                            if (err) {
                                logData('Error3:---' + err);
                                callback(err, null);
                            } else {
                                // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                                callback(null, result);
                            }
                        });
                    }
                })
            }
        })


    }

    function getBaseCategory(callback) {
        let sql = "select CLIENTID,ticket_type, id,header_name title,sequence_no from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' " +
            " and CLIENTID in (select clientid from ticket where id =" + data.ticketId + ")  and (ticket_type = " + data.typeId + " or ticket_type = (select ticketTypeId from ticket where id =" + data.ticketId + " ))  ORDER BY sequence_no";
        con.query(sql, function (err, result) {
            if (err) {
                logData(err);
                callback(err, null);
            } else {

                const count = 1;
                data.clientId = result[0].CLIENTID;
                data.ticket_type = result[0].ticket_type;
                generateCategory(count);

                function generateCategory(count) {
                    data.count = count;
                    getAttributesMstParentWise(data, function (err, details) {
                        if (err) {
                            callback(err, null);
                        } else {
                            if (details.length > 1) {
                                callback(null, { value: details, count: count - 1 });
                            } else if (details.length === 1) {
                                count++;
                                generateCategory(count);
                            } else {
                                callback(null, { error: 'Category Header not mapped properly.' });
                            }
                        }
                    })
                }

            }
        });
    }

    function getAdditionalField(callback) {
        getAddionalFieldWithValue({ ticketId: data.ticketId }, function (err, success, details) {
            if (err) {
                logData('Error6:---' + err);
                callback(err, null);
            } else {
                callback(null, details);
            }
        })
    }

    function getFollowUp(callback) {
        //let sql = 'SELECT followup_users_name FROM tbl_client_specific_master where id = (SELECT coalesce(followup_userid,0) FROM ticket_wise_followup_dtls where ticket_id = ?)';
        let sql = "SELECT coalesce(group_concat(followup_users_name) ,'') followup_users_name  FROM tbl_client_specific_master where id in (SELECT  coalesce(followup_userid,0) " +
            " FROM ticket_wise_followup_dtls where ticket_id = ? and delete_flag= '0' order by id desc )";
        logData('getFollowUp---------' + sql)
        con.query(sql, [data.ticketId], function (err, result) {
            if (err) {
                logData('Error7:---' + err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].followup_users_name != '')
                        callback(null, result)
                    else
                        callback(null, [])
                } else {
                    callback(null, [])
                }

            }
        })
    }

    function checkPriorityType(callback) {
        getClientIdFromTicketTbl({
            ticketId: data.ticketId
        }, function (errCC, successCC, resCC) {
            if (errCC) {
                logData(errCC);
                callback(errCC, null);
            } else {
                // logData("\n\n resCC----------------" + JSON.stringify(resCC))
                data.clientId = resCC[0].clientid;
                data.typeId = resCC[0].ticketTypeId;
                let sql = "select ticket_priority_type from ticket_priority_configuration " +
                    " where  (ticket_type=" + data.typeId + " or ticket_type = ( select ticketTypeId from ticket where id =" + data.ticketId + " ) ) "
                " and (client_id=" + data.clientId + " " +
                    " or client_id = (select clientid from ticket where id =" + data.ticketId + ") )" +
                    " and deleteflag=0";
                // logData('checkPriorityType-------' + sql)
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        if (result.length > 0) {

                            if (result[0].ticket_priority_type === 1) {
                                getBusinessUrgencyTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.typeId
                                }, function (err, success, urgency) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        getBusinessImpactTicketTypeWise({
                                            clientId: data.clientId,
                                            ticket_type: data.typeId
                                        }, function (err, success, impact) {
                                            if (err) {
                                                logData(err);
                                                callback(err, null);
                                            } else {
                                                callback(null, {
                                                    type: result[0].ticket_priority_type,
                                                    impact: impact,
                                                    urgency: urgency
                                                })
                                            }
                                        })
                                    }
                                })
                            }
                            if (result[0].ticket_priority_type === 2) {
                                callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                            }
                        } else {
                            callback(null, { error: 'Please add Priority type' })
                        }
                    }
                });
            }
        })

    }

    async.parallel([getCategory, getStatusClient, getBaseCategory, getAdditionalField, getResolutionNResponseTime, getFollowUp, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            // console.log("\n\n"+JSON.stringify(results[0]));
            // console.log("\n\n"+JSON.stringify(results[2]));
            if (results[6].error) {
                cb(null, false, results[6].error)
            } else if (results[2].error) {
                cb(null, false, results[2].error)
            } else {
                const baseCategory = results[2].value;
                const disableField = results[2].count;
                for (let i = 0; i < baseCategory.length; i++) {
                    if (baseCategory[i].id !== results[0][Number(disableField)].options[0].id) {
                        results[0][Number(disableField)].options.push(baseCategory[i]);
                    }
                }
                for (let i = 0; i < disableField; i++) {
                    results[0][i].isDisabled = true;
                    console.log(i);
                }
                cb(null, true, {
                    cat: results[0],
                    status: results[1],
                    fields: results[3],
                    expectedTime: results[4],
                    followUpName: results[5],
                    val: results[6],
                    disableField: disableField
                });
            }
        }
    })
}

function AdvancesearchIncidentTicket(data, cb) {
    var page_size = data.page_size;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id,a.ticket_id,a.claimNo,ts.solutions,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) " +
            " updateDate,coalesce(c.NAME,b.NAME) updateBy,e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, csat.csat_command, csat.csat_scrore ";

        sql = sql + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";

        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " ,USER ul ";
        }

        sql = sql + " , ticket a LEFT JOIN USER c  on a.modifybyid = c.id LEFT JOIN " +
            " ticketSolutions ts ON a.id = ts.ticketId and ts.id in (select max(ts.id)from ticketSolutions ts,ticket a " +
            " where a.id = ts.ticketId group by ts.ticketId) LEFT JOIN ticketwise_csat_form csat ON a.id = csat.ticket_id AND csat.id in" +
            " (SELECT MAX(csat.id) FROM ticketwise_csat_form csat,ticket a WHERE a.id = csat.ticket_id GROUP BY csat.ticket_id) " +
            " where e.id in (select max(x.id) " +
            " from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) and a.createbyid = b.id and " +
            " a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' and coalesce(c.DeleteFlag,'0') = '0' " +
            " and a.DeleteFlag = '0' and  b.DeleteFlag = '0' and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";

        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql = sql + " and a.createbyid=ul.id  ";
        }
        sql = sql + " and a.clientid = ? ";

        var params = [data.ticketTypeId, data.clientId, data.clientId];

        // if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
        //     sql = sql + " and e.supportGroupLevelId = ? ";
        //     params.push(data.supportgrp_id);
        // }

        if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
            sql = sql + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
            params.push(data.supportgrp_id);
            params.push(data.supportgrp_id);
        } else {
            sql = sql + "and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
                " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) )";
            params.push(data.clientId);
            params.push(data.ticketTypeId);
            params.push(data.supportgrp_id);
        }

        // if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
        //     sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        // }

        if (data.ticketStatusId != '0') {
            sql = sql + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.ticketTypeId != '0') {
            sql = sql + " and a.ticketTypeId = ?  ";
            params.push(data.ticketTypeId);
        }

        if (data.busi_priority_id != '0') {
            sql = sql + " and a.busi_priority_id = ? ";
            params.push(data.busi_priority_id);
        }

        if (data.created_frdate != '' && data.created_todate != '') {
            sql = sql + " and a.createdate between ? and ? ";     //'2019-06-01' and '2019-06-05' ";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#")
            sql = sql + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }


        logData('group level===' + data.grpLevel);
        if (data.grpLevel === 0) {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql = sql + " and a.createbyid = ? ";
                params.push(data.assign_id);
            }
        } else {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql = sql + " and e.user_id = ? ";
                params.push(data.assign_id);
            }
        }

        sql = sql + " LIMIT ? OFFSET ?";
        params.push(Number(page_size));
        params.push(Number(offset));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                util.logData('1st code: --> ' + result.length);
                if (result.length > 0) {
                    var flg = 1;
                    var le = 0;
                    for (let j = 0; j < result.length; j++) {
                        let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                            "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                            "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                            " left join " +
                            "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                            "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                            " on m.wfcclient_result_id = n.wfcclient_result_id ";
                        con.query(sql12, function (err12, result12) {
                            if (err12) {
                                logData(err12);
                                cb(err12, null);
                            } else {
                                if (result12.length > 0) {
                                    result[j]['assignee'] = result12[0].assignee;
                                    result[j]['aid'] = result12[0].assigned_user_id;
                                }
                                /***********************************************************************************/
                                let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                    " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                    " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                    " and a.PKFIELDVAL = " + result[j].id + " " +
                                    " and a.serial_no = 1 " +
                                    " and a.activeFlow = '1' " +
                                    " and a.category_id in (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";

                                con.query(sql2, function (err2, result2) {
                                    if (err2) {
                                        logData(err2);
                                        cb(err2, null);
                                    } else {
                                        if (result2.length > 0) {
                                            result[j]['last_cat'] = result2[0].child;
                                            result[j]['last_cat_parent'] = result2[0].parent;
                                            result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                            result[j]['last_cat_parent_id'] = result2[0].category_id;
                                        }
                                        /***********************************************************************************/
                                        let sql1 = "SELECT   alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                            " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                        le++;
                                        con.query(sql1, function (err1, result1) {
                                            if (err1) {
                                                logData(err1);
                                                cb(err1, null);
                                            } else {
                                                if (result1.length < 5) {
                                                    logData('id ------>' + result[j].id + '<---length---->' + result1.length)
                                                }

                                                // if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, result);
                                                }
                                                flg++;
                                                /* } else {
                                                     cb(null, true, []);
                                                 }*/

                                            }
                                        });
                                        /***********************************************************************************/

                                    }
                                });
                                /***********************************************************************************/
                            }
                        });
                    }
                } else {
                    cb(null, []);
                }
                // cb(null, true, result);
            }
        });
    }

    function totalData(cb) {
        let sql1;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql1 = "SELECT count(a.id) count";
        sql1 = sql1 + " FROM USER b, WFCCLIENTRESULT e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql1 = sql1 + " ,USER ul ";
        }

        sql1 = sql1 + " , ticket a LEFT JOIN USER c  on a.modifybyid = c.id LEFT JOIN " +
            " ticketSolutions ts ON a.id = ts.ticketId and ts.id in (select max(ts.id)from ticketSolutions ts,ticket a " +
            " where a.id = ts.ticketId group by ts.ticketId) LEFT JOIN ticketwise_csat_form csat ON a.id = csat.ticket_id AND csat.id in" +
            " (SELECT MAX(csat.id) FROM ticketwise_csat_form csat,ticket a WHERE a.id = csat.ticket_id GROUP BY csat.ticket_id) where e.id in (select max(x.id) " +
            " from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id and a.ticketTypeId =? group by x.PKFIELDVAL) and a.createbyid = b.id and " +
            " a.id = e.PKFIELDVAL and a.busi_priority_id = d.id and a.tstatus = f.id and b.DeleteFlag = '0' and coalesce(c.DeleteFlag,'0') = '0' " +
            " and a.DeleteFlag = '0' and  b.DeleteFlag = '0' and g.id = e.supportGroupLevelId " +
            " and a.tstatus not in (select id from TICKETATTRIBUTES where DeleteFlag = '0' and CLIENTID = ? and ATTRID = 2  and sequence_no in (21,22))";
        if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
            sql1 = sql1 + " and a.createbyid=ul.id  ";
        }
        sql1 = sql1 + " and a.clientid = ? ";

        var params = [data.ticketTypeId, data.clientId, data.clientId];

        // if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
        //     sql = sql + " and e.supportGroupLevelId = ? ";
        //     params.push(data.supportgrp_id);
        // }

        if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
            sql1 = sql1 + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
            params.push(data.supportgrp_id);
            params.push(data.supportgrp_id);
        } else {
            sql1 = sql1 + "and a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
                " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0) )";
            params.push(data.clientId);
            params.push(data.ticketTypeId);
            params.push(data.supportgrp_id);
        }

        // if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
        //     sql1 = sql1 + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag='0')";
        // }

        if (data.ticketStatusId != '0') {
            sql1 = sql1 + " and a.tstatus = ? ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.ticketTypeId != '0') {
            sql1 = sql1 + " and a.ticketTypeId = ?  ";
            params.push(data.ticketTypeId);
        }

        if (data.busi_priority_id != '0') {
            sql1 = sql1 + " and a.busi_priority_id = ? ";
            params.push(data.busi_priority_id);
        }

        if (data.created_frdate != '' && data.created_todate != '') {
            sql1 = sql1 + " and a.createdate between ? and ? ";     //'2019-06-01' and '2019-06-05' ";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#")
            sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        logData('group level===' + data.grpLevel);
        if (data.grpLevel === 0) {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql1 = sql1 + " and a.createbyid = ? ";
                params.push(data.assign_id);
            }
        } else {
            if (data.assign_id != undefined && data.assign_id != '0') {
                sql1 = sql1 + " and e.user_id = ? ";
                params.push(data.assign_id);
            }
        }

        //sql1 = sql1 + " order by e.id desc";

        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getIncidentTicketTypeId(data, cb) {
    var sql = "SELECT id FROM TICKETATTRIBUTES where CLIENTID=? and ATTRID=3 and sequence_no=1 and view_sequence=1";
    con.query(sql, [data.clientId], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    })
}


function getAllSupportGroupUserMap(data, cb) {
    var sql = "SELECT d.NAME as user,b.LEVELSHORTDESC as groupname ,d.login_name  from supportGroupUser a, USER d , SUPPORTGROUPLEVEL b,SupportGrpWithTicketAttributes c where a.CLIENTID = ? and a.USERID = d.id  and a.supportGroupLevelId = b.id and b.group_level != '0' and b.group_level < ? and a.supportGroupLevelId =c.supportGroupLevelId and a.DeleteFlag='0' and b.DeleteFlag = '0' and c.ticketAttrId in (select ticketAttrId from SupportGrpWithTicketAttributes where supportGroupLevelId= ? and DeleteFlag=0 ) and c.DeleteFlag = '0' and d.DeleteFlag = '0' ORDER BY a.id DESC";
    // util.logData(sql);
    con.query(sql, [data.clientId, data.grpLevel, data.userGroupId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
}

function getUserSupportGroup(data, cb) {
    let sql = 'select b.id,b.LEVELSHORTDESC name from SupportGrpWithTicketAttributes a, SUPPORTGROUPLEVEL b ' +
        'where a.supportGroupLevelId = b.id and a.DeleteFlag = 0 and b.group_level > 0 ' +
        'and b.DeleteFlag = 0 and a.clientId=? and a.ticketAttrId in (SELECT cat_list FROM dashboard_category where user_id = ? and DeleteFlag=0 and seq=1)';
    con.query(sql, [data.clientId, data.user_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

// ======================================================
function getAllTicketDetails(data, cb) {
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            // data.toDate = data.fromDate + ' 23:59:59';
            // data.fromDate = data.fromDate + ' 00:00:00';
            let w_cat = data.w_cat.split(',');
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';
            let sql = "select a.id , (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, a.ticket_id " +
                ", (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d/%m/%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d/%m/%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c where a.id = c.PKFIELDVAL" +
                " and a.clientid=? and a.ticketTypeId=? and a.working_category in (?) AND date_format (ADDTIME(coalesce(c.modifydate,c.createdate), '5:30:0.000000'),'%Y-%m-%d') BETWEEN  ? and ? ;";
            // console.log(sql)
            conn.query(sql, [data.clientId, data.ticketTypeId, w_cat, data.fromDate, data.fromDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    // xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    // cb(err, false, xmlString);
                    cb(err, false);
                } else {
                    if (details.length > 0) {
                        let resp = [];
                        let count = 0;
                        for (let i = 0; i < details.length; i++) {
                            let sql1 = "select '" + details[i].ticket_id + "' TicketID,' " + details[i].busi_priority_id + "' Priority,'" + details[i].requestorPSNo + "' RequestorPSNo , " + con.escape(details[i].requestorName) + " RequestorName, '" + details[i].tstatus + "' Status,'" + details[i].source_type + "' SourceType,'" + details[i].createdate + "' CreateDate,'" + details[i].modifydate + "' ModifyDate," + con.escape(details[i].tName) + " Title," + con.escape(details[i].longDesc) + " longDesc, resolution_Count,solution,  cmmd, funcnality from " +
                                " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                " LEFT OUTER JOIN (SELECT ticketId,count(*) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution FROM ticketSolutions where ticketId =" + details[i].id + ") a on a.ticketId = aa.id " +
                                " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";

                            // logData('\n\nsql1------------------------'+sql1)
                            conn.query(sql1, function (err, details1) {
                                if (err) {
                                    util.logData(err);
                                    // xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                                    conn.release();
                                    // cb(err, false, xmlString);
                                    cb(err, false);
                                } else {
                                    // console.log(details1.length);
                                    resp.push(details1[0]);
                                    count++;
                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            let categories = resp[i].funcnality.split(',');
                                            for (let j = 0; j < categories.length; j++) {
                                                let val = j + 1;
                                                resp[i]["Category" + val] = categories[j];
                                            }
                                            delete resp[i].funcnality;
                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;
                                        }
                                        conn.release();
                                        cb(null, true, resp);
                                        // cb(null, true, xmlString);
                                    }
                                }
                            })

                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })
        }
    })

}

function insertSedularConfig(data, cb) {
    let sql = "SELECT id FROM slaviolation_email_scheduler_config where CLIENTID = ? and DeleteFlag = 0;";
    con.query(sql, [data.client_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                cb(null, false, 'Already Exist');
            } else {
                let sql1 = "insert into slaviolation_email_scheduler_config (CLIENTID,schedule_type,schedule_time,createById) values(?,?,?,?);";
                con.query(sql1, [data.client_id, data.schedule_type, data.schedule_time, data.user_id], function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {
                        if (result1.affectedRows > 0) {
                            cb(null, true, result1.affectedRows);
                        } else {
                            cb(null, false, result1.affectedRows);
                        }

                    }
                })
            }
        }
    });
}

function insertEmailConfig(data, cb) {
    // let sql = "SELECT id FROM slaviolation_escalation_email_config where CLIENTID = ? and time_after_violation_minutes = ? and receipent_supportgroup_level = ?;";
    // con.query(sql,[data.client_id,data.violation_min,data.supportgrplevel], function (err, result) {
    //     if (err) {
    //         logData(err);
    //         cb(err, null);
    //     } else {
    //         if (result.length > 0) {
    //             cb(null, false, 'Already Exist');
    //         } else {
    let sql1 = "insert into slaviolation_escalation_email_config (CLIENTID,time_after_violation_minutes,receipent_supportgroup_level,createById,email_subject,calculate_holiday) values(?,?,?,?,?,?);";
    con.query(sql1, [data.client_id, data.violation_min, data.supportgrplevel, data.user_id, data.email_sub, 'N'], function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.affectedRows > 0) {
                cb(null, true, result1.affectedRows);
            } else {
                cb(null, false, result1.affectedRows);
            }

        }
    })
    //}
    //}
    //});

}

function deleteSedularConfig(data, cb) {
    var sql = "Update slaviolation_escalation_email_config set DeleteFlag = 1 where id = ?;";
    con.query(sql, [data.id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getSlaViolationMaster(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == 0) {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == 0) {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT id,time_after_violation_minutes,receipent_supportgroup_level,email_subject," +
                "(select schedule_type from slaviolation_email_scheduler_config where CLIENTID = " +
                "slaviolation_escalation_email_config.CLIENTID and DeleteFlag = 0) schedule_type,(select schedule_time from " +
                "slaviolation_email_scheduler_config where CLIENTID = slaviolation_escalation_email_config.CLIENTID and DeleteFlag =0) " +
                "schedule_time FROM slaviolation_escalation_email_config where DeleteFlag = 0 and CLIENTID = " + data.clientId + " and id > " + offset + " LIMIT " + page_size;
        } else if (paginationType == 'prev') {
            str = "select * from (" +
                "SELECT id,time_after_violation_minutes,receipent_supportgroup_level,email_subject," +
                "(select schedule_type from slaviolation_email_scheduler_config where CLIENTID = " +
                "slaviolation_escalation_email_config.CLIENTID and DeleteFlag =0) schedule_type,(select schedule_time from " +
                "slaviolation_email_scheduler_config where CLIENTID = slaviolation_escalation_email_config.CLIENTID and DeleteFlag =0 ) " +
                "schedule_time FROM slaviolation_escalation_email_config where DeleteFlag = 0 and CLIENTID = " + data.clientId + " and id < " + offset + " LIMIT " + page_size +
                ")z ORDER BY z.id  ASC;"
        }
        con.query(str, function (err, done) {
            if (err) {
                util.logData('---Error from allAssetDescription inside AssetDescription.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = " select count(*) count from slaviolation_escalation_email_config where DeleteFlag = 0 and CLIENTID = " + data.clientId;
        con.query(str1, function (err, done) {
            if (err) {
                util.logData('---Error from getAssetColumnByMaster inside TicketTypeDB.js----');
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);
            }
        });
    }
}

function updateSlaViolationMaster(data, cb) {
    var sql1 = "UPDATE slaviolation_escalation_email_config SET time_after_violation_minutes = ?, receipent_supportgroup_level = ?, email_subject = ? WHERE id = ?;";
    con.query(sql1, [data.time_after_violation_minutes, data.receipent_supportgroup_level, data.email_subject, data.id], function (err1, done1) {
        if (err1) {
            util.logData(err1);
            cb(err1, null);
        } else {
            var sql2 = "SELECT id FROM slaviolation_email_scheduler_config where CLIENTID = ? and DeleteFlag = 0;";
            con.query(sql2, [data.client_id], function (err2, done2) {
                if (err2) {
                    util.logData(err2);
                    cb(err2, null);
                } else {
                    //done2 = JSON.stringify(done2);
                    // util.logData(done2.length);
                    //util.logData(done2[0].id);
                    if (done2.length == 0) {
                        cb(null, false, "Schedule Type & Schedule Time not found");
                    } else {
                        var sql3 = "UPDATE slaviolation_email_scheduler_config SET schedule_type = ?, schedule_time = ? WHERE id = ?;";
                        con.query(sql3, [data.schedule_type, data.schedule_time, done2[0].id], function (err3, done3) {
                            if (err3) {
                                util.logData(err3);
                                cb(err3, null);
                            } else {
                                cb(null, true, "Updated Successfully");
                            }
                        });
                    }
                }
            });
        }
    });
}

function getSupportGroupCount(data, cb) {
    var str1 = "select count(*) count from (SELECT distinct(group_level) grp FROM SUPPORTGROUPLEVEL where DeleteFlag = 0 and CLIENTID = ?) a ;";
    con.query(str1, [data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            util.logData(done);
            cb(null, true, done[0].count);
        }
    });
}

function getBRAIOurl(data, cb) {
    var sql = "Select url from braio_mapping where client_id=? and ticket_type=? and category_id=? and DeleteFlag=0";
    con.query(sql, [data.clientId, data.ticket_type, data.catId], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    });
}

function deleteBraioMapping(data, cb) {
    var str = "update braio_mapping set DeleteFlag = 1, delete_by_id = ?, deleted_date = NOW() where id = ?;";
    con.query(str, [data.user_id, data.id], function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            cb(null, true, "Deleted successfully");
        }
    });
}

function insertBraioMapping(data, cb) {
    let sql = "select id from braio_mapping where client_id = ? and ticket_type = ? and category_id = ? and url = ? and DeleteFlag = 0;";
    con.query(sql, [data.clientId, data.ticketTypeId, data.category_id, data.url], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            if (result.length === 0) {

                var sql = "insert into braio_mapping(client_id,ticket_type,category_id,url,create_id) values(?,?,?,?,?);";
                util.logData(sql);
                con.query(sql, [data.clientId, data.ticketTypeId, data.category_id, data.url, data.user_id], function (err, result) {
                    if (err) {
                        util.logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result.insertId);
                    }
                });

            } else {
                cb(null, false, "duplicate data");
            }
        }
    });
}


function updateBraioMapping(data, cb) {
    var str = "select id from braio_mapping where client_id = ? and ticket_type = ? and category_id = ? and url = ? and DeleteFlag = 0;";
    con.query(str, [data.clientId, data.ticketTypeId, data.category_id, data.url], function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length === 0) {
                let sql = "update braio_mapping set url = ? where id = ?;";
                con.query(sql, [data.url, data.id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result);
                    }
                });

            } else {
                cb(null, false, "Already exixts");
            }
        }
    });
}
function getallBraioMapping(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                util.logData(results);
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        var str2 = "";
        var cj = 0;
        var o4;

        if (paginationType == 'next' || paginationType == '') {
            str2 = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type) ticket_type,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(b.parentPath))) as category, b.parentPath, a.url from braio_mapping a, TICKETATTRIBUTES b where a.id > ? and a.client_id = ? and a.category_id = b.id and a.DeleteFlag = 0 order by a.id Asc LIMIT ?;";
        } else if (paginationType == 'prev') {
            str2 = "select * from (select a.id,(select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type) ticket_type,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(b.parentPath))) as category, b.parentPath, a.url from braio_mapping a, TICKETATTRIBUTES b where a.id < ? and a.client_id = ? and a.category_id = b.id and a.DeleteFlag = 0 order by a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC;";
        }
        con.query(str2, [offset, data.clientId, Number(page_size)], function (err2, done2) {
            if (err2) {
                util.logData(err2);
                cb(err2, null);
            } else {
                // util.logData("done2====" + done2.length);
                if (done2.length > 0) {
                    for (let j = 0; j < done2.length; j++) {

                        var d = done2[j].parentPath.split(',');
                        var category = d[d.length - 1];

                        var str3 = "SELECT b.busi_priority_desc priority FROM BUSINESSMATRIX a, BUSINESSPRIORITY b where a.category_id = ? and a.busi_priority_id=b.id;"
                        con.query(str3, [category], function (err3, done3) {
                            if (err3) {
                                util.logData(err3);
                                cb(err3, null);
                            } else {
                                if (done3[0]) {
                                    o4 = { priority: done3[0].priority };
                                } else {
                                    o4 = { priority: '' };
                                }
                                done2[cj] = Object.assign(done2[cj], o4);
                                cj++;
                                if (done2.length === cj) {
                                    // util.logData(done2);
                                    cb(null, done2);
                                }
                            }
                        });
                    }
                } else {
                    cb(null, done2);
                }
            }
        });
    }


    function totalData(cb) {
        var str1 = "select count(a.id) count from braio_mapping a where a.client_id = ? and a.DeleteFlag = 0;";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}
function getallBraioMapping_old(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = util.preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, false, err);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                util.logData(results);
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        var str2 = "";
        var cj = 0;
        var o4;

        if (paginationType == 'next' || paginationType == '') {
            str2 = "select a.id,(select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type) ticket_type,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(b.parentPath))) as category, b.parentPath, a.url from braio_mapping a, TICKETATTRIBUTES b where a.id > ? and a.client_id = ? and a.category_id = b.id and a.DeleteFlag = 0 order by a.id Asc LIMIT ?;";
        } else if (paginationType == 'prev') {
            str2 = "select * from (select a.id,(select ATTRVAL from TICKETATTRIBUTES where id = a.ticket_type) ticket_type,(select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES where FIND_IN_SET(id,(b.parentPath))) as category, b.parentPath, a.url from braio_mapping a, TICKETATTRIBUTES b where a.id < ? and a.client_id = ? and a.category_id = b.id and a.DeleteFlag = 0 order by a.id DESC LIMIT ?) Z ORDER BY Z.id  ASC;";
        }
        con.query(str2, [offset, data.clientId, Number(page_size)], function (err2, done2) {
            if (err2) {
                util.logData(err2);
                cb(err2, null);
            } else {
                util.logData("\n\n--getallBraioMapping-->::" + done2.length);

                for (let j = 0; j < done2.length; j++) {

                    var d = done2[j].parentPath.split(',');
                    var category = d[d.length - 1];

                    var str3 = "SELECT b.busi_priority_desc priority FROM BUSINESSMATRIX a, BUSINESSPRIORITY b where a.category_id = ? and a.busi_priority_id=b.id;"
                    con.query(str3, [category], function (err3, done3) {
                        if (err3) {
                            util.logData(err3);
                            cb(err3, null);
                        } else {

                            if (done3[0]) {
                                o4 = { priority: done3[0].priority };
                            } else {
                                o4 = { priority: '' };
                            }
                            done2[cj] = Object.assign(done2[cj], o4);
                            cj++;
                            if (done2.length === cj) {
                                util.logData(done2);

                                cb(null, done2);
                            }
                        }
                    });
                }
            }
        });
    }


    function totalData(cb) {
        var str1 = "select count(a.id) count from braio_mapping a where a.client_id = ? and a.DeleteFlag = 0;";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}


function getAllTicketDetailsExtended_withoutSLA(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {

            if (data.monthTodate) {
                data.toDate = data.monthTodate + ' 23:59:59';
            } else {
                data.toDate = data.fromDate + ' 23:59:59';
            }

            data.fromDate = data.fromDate + ' 00:00:00';

            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';

            // let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
            //     "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
            //     "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
            //     ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
            //     ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
            //     ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
            //     ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
            //     ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
            //     ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
            //     " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
            //     " DATE_FORMAT(c.createdate, '%Y-%m-%d')) and a.DeleteFlag = 0 group by a.id ;";

            let sql = "select a.id ,a.ticketTypeId, a.busi_priority_id priority, g.LEVELSHORTDESC as AssigneeGroup, (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws, " +
                " USER ub where  ws.user_id = ub.id and ws.PKFIELDVAL = a.id) AssigneeName , (SELECT login_name FROM USER where id = a.createbyid) login_name , " +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType,  a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where " +
                " id = a.busi_priority_id ) busi_priority_id  , (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo, b.NAME requestorName , " +
                "(select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type, date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') " +
                " createdate, date_format (ADDTIME(coalesce( e.modifydate, e.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate, a.tName, a.longDesc, " +
                " date_format (ADDTIME(a.ticketCloseDate, '5:30:0.000000'),'%d-%M-%Y %T') ticketCloseDate FROM USER b, " +
                " WFCCLIENTRESULT_LAST_STATUS e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where  a.id in (SELECT distinct n.id FROM " +
                " WFCCLIENTRESULT m, ticket n  where n.clientId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL  and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') " +
                " AND subtime(COALESCE(?),'5:30:0.000000'))  and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id  and a.DeleteFlag = '0' and " +
                " a.id = e.PKFIELDVAL and g.id = e.supportGroupLevelId group by a.id ; ";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);

            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    let AssigeName = '';
                    let ticketCloseDate = '';
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {
                            AssigeName = details[i].AssigneeName;
                            ticketCloseDate = details[i].ticketCloseDate
                            function getTicketDetails(callback) {
                                // let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                //     " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                //     " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";


                                let sql1 = "select ? id ,?  ticketType , ?  ticket_id, ? busi_priority_id, ? requestorPSNo ,? AssigneeGroup , ? AssigneeName , ? requestorName, ? tstatus, ? source_type, ? createdate, ? modifydate, ? tName, ? longDesc, NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = ? ) aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId = ? group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = ? ) b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = ? order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("\n\nQuery OY===>  " + sql1)
                                //logData('\n\nsql1------------------------' + sql1)
                                con.query(sql1,
                                    [details[i].id, details[i].ticketType, details[i].ticket_id, details[i].busi_priority_id, details[i].requestorPSNo,
                                    details[i].AssigneeGroup, details[i].AssigneeName, details[i].requestorName, details[i].tstatus, details[i].source_type, details[i].createdate,
                                    details[i].modifydate, details[i].tName, details[i].longDesc, details[i].id, details[i].id, details[i].id, details[i].id],
                                    function (err, details1) {
                                        if (err) {
                                            util.logData(err);
                                            // conn.release();
                                            callback(err, null)
                                        } else {
                                            // console.log(details1.length);
                                            callback(null, details1[0]);
                                        }
                                    })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {


                                                        // optimizedreport table starts
                                                        var sql3 = "select id from optimizedreport where ticket_id =?;"
                                                        con.query(sql3, [details[i].id], function (err, result3) {
                                                            if (err) {
                                                                cb(err, null);
                                                            } else {
                                                                var sql569 = "update optimizedreport set ticket_ageing =? where id=? ;"
                                                                con.query(sql569, [details1[0].diff, result3[0].id], function (err, result) {
                                                                    if (err) {
                                                                        cb(err, null)
                                                                    } else {
                                                                        logData("&&&&&&&&&&&&&&------------>" + sql569);
                                                                        console.log("********^^^^^^^", result);
                                                                        cb(null, true, result);
                                                                    }
                                                                })
                                                            }
                                                        });

                                                        // optimizedreport table ends


                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  " +
                                    " FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function getTicketCategories(callback) {
                                let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + details[i].id + " order by a.parent_categoryId";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }


                            function getTicketDetailsFromOptimizedTable(callback) {
                                let sql1 = "SELECT first_response_dt, response_sla_voilated, resolution_sla_voilated, all_response_dt, all_resolution_dt,latest_analyst_name,closed_dt  FROM optimizedreport where ticket_id = " + details[i].id + ";";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        if (details1.length > 0) {
                                            callback(null, details1);
                                        } else {
                                            callback(null, [{ first_response_dt: null, response_sla_voilated: null, resolution_sla_voilated: null, all_response_dt: null, all_resolution_dt: null }]);
                                        }

                                    }
                                });
                            }


                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, getTicketCategories, getTicketDetailsFromOptimizedTable], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    let getTicketCategories = results[5];

                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }

                                    if (getTicketCategories.length > 0) {
                                        t_details.getTicketCategories = getTicketCategories;
                                    }

                                    let OptimizedTicketDetails = results[6];

                                    t_details.first_response_dt = OptimizedTicketDetails[0].first_response_dt;

                                    t_details.response_sla_voilated = OptimizedTicketDetails[0].response_sla_voilated;

                                    t_details.resolution_sla_voilated = OptimizedTicketDetails[0].resolution_sla_voilated;

                                    //all_response_dt, all_resolution_dt 
                                    t_details.SLA_Response_Date_Time = OptimizedTicketDetails[0].all_response_dt;

                                    t_details.SLA_Resolution_Date_Time = OptimizedTicketDetails[0].all_resolution_dt;

                                    t_details.Last_Analyst_NAME = OptimizedTicketDetails[0].latest_analyst_name;

                                    t_details.TicketClosure_Date_Time = OptimizedTicketDetails[0].closed_dt;

                                    //latest_analyst_name

                                    if (t_details.SLA_Response_Date_Time !== null && t_details.SLA_Response_Date_Time !== undefined && (t_details.SLA_Response_Date_Time.includes('/'))) {
                                        t_details.SLA_Response_Date_Time = t_details.SLA_Response_Date_Time.substring(t_details.SLA_Response_Date_Time.lastIndexOf("/") + 1);
                                    }

                                    if (t_details.SLA_Resolution_Date_Time !== null && t_details.SLA_Resolution_Date_Time !== undefined && (t_details.SLA_Resolution_Date_Time.includes('/'))) {
                                        t_details.SLA_Resolution_Date_Time = t_details.SLA_Resolution_Date_Time.substring(t_details.SLA_Resolution_Date_Time.lastIndexOf("/") + 1);
                                    }

                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            delete resp[i].NAME;
                                            //resp[i]['NAME'] = AssigeName;
                                            //ticketCloseDate
                                            delete resp[i].TicketClosure_Date_Time;
                                            //resp[i]['TicketClosure_Date_Time'] = ticketCloseDate;

                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;


                                            resp[i]['Response Date'] = resp[i].first_response_dt;
                                            resp[i]['Respose Violated'] = resp[i].response_sla_voilated;
                                            resp[i]['Resolution Violated'] = resp[i].resolution_sla_voilated;

                                            delete resp[i].first_response_dt;
                                            delete resp[i].response_sla_voilated;
                                            delete resp[i].resolution_sla_voilated;

                                            // let categories = resp[i].funcnality.split(',');
                                            // for (let j = 0; j < categories.length; j++) {
                                            //     let val = j + 1;
                                            //     resp[i]["Category" + val] = categories[j];
                                            // }
                                            delete resp[i].funcnality;
                                            //getTicketCategories
                                            for (let j = 0; j < resp[i].getTicketCategories.length; j++) {
                                                let val = j + 1;
                                                console.log('\ngetTicketCategories[j].child; ===> ' + JSON.stringify(resp[i].getTicketCategories[j]));
                                                resp[i]["Category" + val] = resp[i].getTicketCategories[j].child;
                                            }

                                            delete resp[i].getTicketCategories;

                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();

                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("\nDetails.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}




function getAllTicketDetailsExtended_withoutSLA_old(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';

            // let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
            //     "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
            //     "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
            //     ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
            //     ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
            //     ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
            //     ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
            //     ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
            //     ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
            //     " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
            //     " DATE_FORMAT(c.createdate, '%Y-%m-%d')) and a.DeleteFlag = 0 group by a.id ;";

            let sql = "select a.id ,a.ticketTypeId, a.busi_priority_id priority, g.LEVELSHORTDESC as AssigneeGroup, (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws, " +
                " USER ub where  ws.user_id = ub.id and ws.PKFIELDVAL = a.id) AssigneeName , (SELECT login_name FROM USER where id = a.createbyid) login_name , " +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType,  a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where " +
                " id = a.busi_priority_id ) busi_priority_id  , (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo, b.NAME requestorName , " +
                "(select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type, date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') " +
                " createdate, date_format (ADDTIME(coalesce( e.modifydate, e.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate, a.tName, a.longDesc, " +
                " date_format (ADDTIME(a.ticketCloseDate, '5:30:0.000000'),'%d-%M-%Y %T') ticketCloseDate FROM USER b, " +
                " WFCCLIENTRESULT_LAST_STATUS e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where  a.id in (SELECT distinct n.id FROM " +
                " WFCCLIENTRESULT m, ticket n  where n.clientId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL  and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') " +
                " AND subtime(COALESCE(?),'5:30:0.000000'))  and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id  and a.DeleteFlag = '0' and " +
                " a.id = e.PKFIELDVAL and g.id = e.supportGroupLevelId group by a.id ; ";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);

            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {

                            function getTicketDetails(callback) {
                                // let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                //     " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                //     " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";


                                let sql1 = "select ? id ,?  ticketType , ?  ticket_id, ? busi_priority_id, ? requestorPSNo ,? AssigneeGroup , ? AssigneeName , ? login_name , ? requestorName, ? tstatus, ? source_type, ? createdate, ? modifydate, ? tName, ? longDesc, NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = ? ) aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId = ? group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = ? ) b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = ? order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("\n\nQuery OY===>  " + sql1)
                                //logData('\n\nsql1------------------------' + sql1)
                                con.query(sql1,
                                    [details[i].id, details[i].ticketType, details[i].ticket_id, details[i].busi_priority_id, details[i].requestorPSNo,
                                    details[i].AssigneeGroup, details[i].AssigneeName, details[i].login_name, details[i].requestorName, details[i].tstatus, details[i].source_type, details[i].createdate,
                                    details[i].modifydate, details[i].tName, details[i].longDesc, details[i].id, details[i].id, details[i].id, details[i].id],
                                    function (err, details1) {
                                        if (err) {
                                            util.logData(err);
                                            // conn.release();
                                            callback(err, null)
                                        } else {
                                            // console.log(details1.length);
                                            callback(null, details1[0]);
                                        }
                                    })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  " +
                                    " FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function getTicketCategories(callback) {
                                let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + details[i].id + " order by a.parent_categoryId";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }


                            function getTicketDetailsFromOptimizedTable(callback) {
                                let sql1 = "SELECT first_response_dt, response_sla_voilated, resolution_sla_voilated, all_response_dt, all_resolution_dt  FROM optimizedreport where ticket_id = " + details[i].id + ";";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        if (details1.length > 0) {
                                            callback(null, details1);
                                        } else {
                                            callback(null, [{ first_response_dt: null, response_sla_voilated: null, resolution_sla_voilated: null, all_response_dt: null, all_resolution_dt: null }]);
                                        }

                                    }
                                });
                            }


                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, getTicketCategories, getTicketDetailsFromOptimizedTable], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    let getTicketCategories = results[5];

                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }

                                    if (getTicketCategories.length > 0) {
                                        t_details.getTicketCategories = getTicketCategories;
                                    }

                                    let OptimizedTicketDetails = results[6];

                                    t_details.first_response_dt = OptimizedTicketDetails[0].first_response_dt;

                                    t_details.response_sla_voilated = OptimizedTicketDetails[0].response_sla_voilated;

                                    t_details.resolution_sla_voilated = OptimizedTicketDetails[0].resolution_sla_voilated;

                                    //all_response_dt, all_resolution_dt 
                                    t_details.SLA_Response_Date_Time = OptimizedTicketDetails[0].all_response_dt;

                                    t_details.SLA_Resolution_Date_Time = OptimizedTicketDetails[0].all_resolution_dt;

                                    if (t_details.SLA_Response_Date_Time !== null && t_details.SLA_Response_Date_Time !== undefined && (t_details.SLA_Response_Date_Time.includes('/'))) {
                                        t_details.SLA_Response_Date_Time = t_details.SLA_Response_Date_Time.substring(t_details.SLA_Response_Date_Time.lastIndexOf("/") + 1);
                                    }

                                    if (t_details.SLA_Resolution_Date_Time !== null && t_details.SLA_Resolution_Date_Time !== undefined && (t_details.SLA_Resolution_Date_Time.includes('/'))) {
                                        t_details.SLA_Resolution_Date_Time = t_details.SLA_Resolution_Date_Time.substring(t_details.SLA_Resolution_Date_Time.lastIndexOf("/") + 1);
                                    }

                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            delete resp[i].NAME;
                                            resp[i]['NAME'] = details[i].AssigneeName;
                                            //ticketCloseDate
                                            delete resp[i].TicketClosure_Date_Time;
                                            resp[i]['TicketClosure_Date_Time'] = details[i].ticketCloseDate;

                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;


                                            resp[i]['Response Date'] = resp[i].first_response_dt;
                                            resp[i]['Respose Violated'] = resp[i].response_sla_voilated;
                                            resp[i]['Resolution Violated'] = resp[i].resolution_sla_voilated;

                                            delete resp[i].first_response_dt;
                                            delete resp[i].response_sla_voilated;
                                            delete resp[i].resolution_sla_voilated;

                                            // let categories = resp[i].funcnality.split(',');
                                            // for (let j = 0; j < categories.length; j++) {
                                            //     let val = j + 1;
                                            //     resp[i]["Category" + val] = categories[j];
                                            // }
                                            delete resp[i].funcnality;
                                            //getTicketCategories
                                            for (let j = 0; j < resp[i].getTicketCategories.length; j++) {
                                                let val = j + 1;
                                                console.log('\ngetTicketCategories[j].child; ===> ' + JSON.stringify(resp[i].getTicketCategories[j]));
                                                resp[i]["Category" + val] = resp[i].getTicketCategories[j].child;
                                            }

                                            delete resp[i].getTicketCategories;

                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();

                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("\nDetails.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}


function getAllTicketDetailsExtended_withoutSLA_old(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';

            // let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
            //     "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
            //     "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
            //     ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
            //     ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
            //     ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
            //     ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
            //     ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
            //     ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
            //     " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
            //     " DATE_FORMAT(c.createdate, '%Y-%m-%d')) and a.DeleteFlag = 0 group by a.id ;";

            let sql = "select a.id ,a.ticketTypeId, a.busi_priority_id priority, g.LEVELSHORTDESC as AssigneeGroup, (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws, " +
                " USER ub where  ws.user_id = ub.id and ws.PKFIELDVAL = a.id) AssigneeName , (SELECT login_name FROM USER where id = a.createbyid) login_name , " +
                " (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType,  a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where " +
                " id = a.busi_priority_id ) busi_priority_id  , (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo, b.NAME requestorName , " +
                "(select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type, date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') " +
                " createdate, date_format (ADDTIME(coalesce( e.modifydate, e.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate, a.tName, a.longDesc FROM USER b, " +
                " WFCCLIENTRESULT_LAST_STATUS e, BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where  a.id in (SELECT distinct n.id FROM " +
                " WFCCLIENTRESULT m, ticket n  where n.clientId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL  and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') " +
                " AND subtime(COALESCE(?),'5:30:0.000000'))  and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id  and a.DeleteFlag = '0' and " +
                " a.id = e.PKFIELDVAL and g.id = e.supportGroupLevelId group by a.id ; ";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);
          
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {

                            function getTicketDetails(callback) {
                                // let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                //     " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                //     " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";


                                let sql1 = "select ? id ,?  ticketType , ?  ticket_id, ? busi_priority_id, ? requestorPSNo ,? AssigneeGroup , ? AssigneeName , ? login_name , ? requestorName, ? tstatus, ? source_type, ? createdate, ? modifydate, ? tName, ? longDesc, NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = ? ) aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId = ? group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = ? ) b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = ? order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("\n\nQuery OY===>  " + sql1)
                                //logData('\n\nsql1------------------------' + sql1)
                                con.query(sql1,
                                    [details[i].id, details[i].ticketType, details[i].ticket_id, details[i].busi_priority_id, details[i].requestorPSNo,
                                    details[i].AssigneeGroup, details[i].AssigneeName, details[i].login_name, details[i].requestorName, details[i].tstatus, details[i].source_type, details[i].createdate,
                                    details[i].modifydate, details[i].tName, details[i].longDesc, details[i].id, details[i].id, details[i].id, details[i].id],
                                    function (err, details1) {
                                        if (err) {
                                            util.logData(err);
                                            // conn.release();
                                            callback(err, null)
                                        } else {
                                            // console.log(details1.length);
                                            callback(null, details1[0]);
                                        }
                                    })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  " +
                                    " FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function getTicketCategories(callback) {
                                let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + details[i].id + " order by a.parent_categoryId";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }


                            function getTicketDetailsFromOptimizedTable(callback) {
                                let sql1 = "SELECT first_response_dt, response_sla_voilated, resolution_sla_voilated  FROM optimizedreport where ticket_id = " + details[i].id + ";";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        if (details1.length > 0) {
                                            callback(null, details1);
                                        } else {
                                            callback(null, [{ first_response_dt: null, response_sla_voilated: null, resolution_sla_voilated: null }]);
                                        }

                                    }
                                });
                            }


                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, getTicketCategories, getTicketDetailsFromOptimizedTable], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    let getTicketCategories = results[5];

                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }

                                    if (getTicketCategories.length > 0) {
                                        t_details.getTicketCategories = getTicketCategories;
                                    }

                                    let OptimizedTicketDetails = results[6];

                                    t_details.first_response_dt = OptimizedTicketDetails[0].first_response_dt;

                                    t_details.response_sla_voilated = OptimizedTicketDetails[0].response_sla_voilated;

                                    t_details.resolution_sla_voilated = OptimizedTicketDetails[0].resolution_sla_voilated;


                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            delete resp[i].NAME;
                                            resp[i]['NAME'] = details[i].AssigneeName;
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;


                                            resp[i]['Response Date'] = resp[i].first_response_dt;
                                            resp[i]['Respose Violated'] = resp[i].response_sla_voilated;
                                            resp[i]['Resolution Violated'] = resp[i].resolution_sla_voilated;

                                            delete resp[i].first_response_dt;
                                            delete resp[i].response_sla_voilated;
                                            delete resp[i].resolution_sla_voilated;

                                            // let categories = resp[i].funcnality.split(',');
                                            // for (let j = 0; j < categories.length; j++) {
                                            //     let val = j + 1;
                                            //     resp[i]["Category" + val] = categories[j];
                                            // }
                                            delete resp[i].funcnality;
                                            //getTicketCategories
                                            for (let j = 0; j < resp[i].getTicketCategories.length; j++) {
                                                let val = j + 1;
                                                console.log('\ngetTicketCategories[j].child; ===> ' + JSON.stringify(resp[i].getTicketCategories[j]));
                                                resp[i]["Category" + val] = resp[i].getTicketCategories[j].child;
                                            }

                                            delete resp[i].getTicketCategories;

                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();

                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("\nDetails.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}





function getAllTicketDetailsExtended_withoutSLA_old_old_old_archish(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';

            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
                "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
                "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
                " DATE_FORMAT(c.createdate, '%Y-%m-%d')) and a.DeleteFlag = 0 group by a.id ;";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {

                            function getTicketDetails(callback) {
                                // let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                //     " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                //     " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";


                                let sql1 = "select ? id ,?  ticketType , ?  ticket_id, ? busi_priority_id, ? requestorPSNo ,? AssigneeGroup , ? AssigneeName , ? login_name , ? requestorName, ? tstatus, ? source_type, ? createdate, ? modifydate, ? tName, ? longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = ? ) aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId = ? group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = ? ) b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = ? order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("\n\nQuery OY===>  " + sql1)
                                //logData('\n\nsql1------------------------' + sql1)
                                con.query(sql1,
                                    [details[i].id, details[i].ticketType, details[i].ticket_id, details[i].busi_priority_id, details[i].requestorPSNo,
                                    details[i].AssigneeGroup, details[i].AssigneeName, details[i].login_name, details[i].requestorName, details[i].tstatus, details[i].source_type, details[i].createdate,
                                    details[i].modifydate, details[i].tName, details[i].longDesc, details[i].id, details[i].id, details[i].id, details[i].id],
                                    function (err, details1) {
                                        if (err) {
                                            util.logData(err);
                                            // conn.release();
                                            callback(err, null)
                                        } else {
                                            // console.log(details1.length);
                                            callback(null, details1[0]);
                                        }
                                    })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function getTicketCategories(callback) {
                                let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + details[i].id + " order by a.parent_categoryId";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }


                            function getTicketDetailsFromOptimizedTable(callback) {
                                let sql1 = "SELECT first_response_dt, response_sla_voilated, resolution_sla_voilated  FROM optimizedreport where ticket_id = " + details[i].id + ";";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }


                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, getTicketCategories, getTicketDetailsFromOptimizedTable], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    let getTicketCategories = results[5];

                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }

                                    if (getTicketCategories.length > 0) {
                                        t_details.getTicketCategories = getTicketCategories;
                                    }

                                    let OptimizedTicketDetails = results[6];

                                    t_details.first_response_dt = OptimizedTicketDetails[0].first_response_dt;

                                    t_details.response_sla_voilated = OptimizedTicketDetails[0].response_sla_voilated;

                                    t_details.resolution_sla_voilated = OptimizedTicketDetails[0].resolution_sla_voilated;


                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;

                                            resp[i]['Response Date'] = resp[i].first_response_dt;
                                            resp[i]['Respose Violated'] = resp[i].response_sla_voilated;
                                            resp[i]['Resolution Violated'] = resp[i].resolution_sla_voilated;

                                            delete resp[i].first_response_dt;
                                            delete resp[i].response_sla_voilated;
                                            delete resp[i].resolution_sla_voilated;

                                            // let categories = resp[i].funcnality.split(',');
                                            // for (let j = 0; j < categories.length; j++) {
                                            //     let val = j + 1;
                                            //     resp[i]["Category" + val] = categories[j];
                                            // }
                                            delete resp[i].funcnality;
                                            //getTicketCategories
                                            for (let j = 0; j < resp[i].getTicketCategories.length; j++) {
                                                let val = j + 1;
                                                console.log('\ngetTicketCategories[j].child; ===> ' + JSON.stringify(resp[i].getTicketCategories[j]));
                                                resp[i]["Category" + val] = resp[i].getTicketCategories[j].child;
                                            }

                                            delete resp[i].getTicketCategories;

                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();
                                                console.log("Data==>" + resp)
                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("Details.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}

function getAllTicketDetailsExtended_withoutSLA_old_by_sai(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';

            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
                "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
                "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
                " DATE_FORMAT(c.createdate, '%Y-%m-%d')) and a.DeleteFlag = 0 group by a.id ;";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {

                            function getTicketDetails(callback) {
                                // let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                //     " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                //     " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                //     " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";


                                let sql1 = "select ? id ,?  ticketType , ?  ticket_id, ? busi_priority_id, ? requestorPSNo ,? AssigneeGroup , ? AssigneeName , ? login_name , ? requestorName, ? tstatus, ? source_type, ? createdate, ? modifydate, ? tName, ? longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = ? ) aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId = ? group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = ? ) b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = ? order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("\n\nQuery OY===>  " + sql1)
                                //logData('\n\nsql1------------------------' + sql1)
                                con.query(sql1,
                                    [details[i].id, details[i].ticketType, details[i].ticket_id, details[i].busi_priority_id, details[i].requestorPSNo,
                                    details[i].AssigneeGroup, details[i].AssigneeName, details[i].login_name, details[i].requestorName, details[i].tstatus, details[i].source_type, details[i].createdate,
                                    details[i].modifydate, details[i].tName, details[i].longDesc, details[i].id, details[i].id, details[i].id, details[i].id],
                                    function (err, details1) {
                                        if (err) {
                                            util.logData(err);
                                            // conn.release();
                                            callback(err, null)
                                        } else {
                                            // console.log(details1.length);
                                            callback(null, details1[0]);
                                        }
                                    })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function getTicketCategories(callback) {
                                let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + details[i].id + " order by a.parent_categoryId";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }

                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, getTicketCategories], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    let getTicketCategories = results[5];
                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }

                                    if (getTicketCategories.length > 0) {
                                        t_details.getTicketCategories = getTicketCategories;
                                    }

                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;

                                            // let categories = resp[i].funcnality.split(',');
                                            // for (let j = 0; j < categories.length; j++) {
                                            //     let val = j + 1;
                                            //     resp[i]["Category" + val] = categories[j];
                                            // }
                                            delete resp[i].funcnality;
                                            //getTicketCategories
                                            for (let j = 0; j < resp[i].getTicketCategories.length; j++) {
                                                let val = j + 1;
                                                console.log('\ngetTicketCategories[j].child; ===> ' + JSON.stringify(resp[i].getTicketCategories[j]));
                                                resp[i]["Category" + val] = resp[i].getTicketCategories[j].child;
                                            }

                                            delete resp[i].getTicketCategories;

                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();
                                                console.log("Data==>" + resp)
                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("Details.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}



function getAllTicketDetailsExtended_withoutSLA_old3(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';

            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
                "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
                "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
                " DATE_FORMAT(c.createdate, '%Y-%m-%d')) and a.DeleteFlag = 0 group by a.id;";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {

                            function getTicketDetails(callback) {

                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("\n\nQuery OY===>  " + sql1)
                                //logData('\n\nsql1------------------------' + sql1)
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // console.log(details1.length);
                                        callback(null, details1[0]);
                                    }
                                })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function getTicketCategories(callback) {
                                let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + details[i].id + " order by a.parent_categoryId ";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }

                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, getTicketCategories], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    let getTicketCategories = results[5];
                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }

                                    if (getTicketCategories.length > 0) {
                                        t_details.getTicketCategories = getTicketCategories;
                                    }

                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;

                                            // let categories = resp[i].funcnality.split(',');
                                            // for (let j = 0; j < categories.length; j++) {
                                            //     let val = j + 1;
                                            //     resp[i]["Category" + val] = categories[j];
                                            // }

                                            //getTicketCategories
                                            for (let j = 0; j < resp[i].getTicketCategories.length; j++) {
                                                let val = j + 1;
                                                console.log('\ngetTicketCategories[j].child; ===> ' + JSON.stringify(resp[i].getTicketCategories[j]));
                                                resp[i]["Category" + val] = resp[i].getTicketCategories[j].child;
                                            }

                                            delete resp[i].getTicketCategories;
                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();
                                                console.log("Data==>" + resp)
                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("Details.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}


function getAllTicketDetailsExtended_withoutSLA_old1(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';

            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
                "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
                "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
                " DATE_FORMAT(c.createdate, '%Y-%m-%d')) and a.DeleteFlag = 0 group by a.id;";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {

                            function getTicketDetails(callback) {

                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("\n\nQuery OY===>  " + sql1)
                                //logData('\n\nsql1------------------------' + sql1)
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // console.log(details1.length);
                                        callback(null, details1[0]);
                                    }
                                })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function getTicketCategories(callback) {
                                let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                    " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + details[i].id + " ";
                                con.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });
                            }

                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, getTicketCategories], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    let getTicketCategories = results[5];
                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }
                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;

                                            // let categories = resp[i].funcnality.split(',');
                                            // for (let j = 0; j < categories.length; j++) {
                                            //     let val = j + 1;
                                            //     resp[i]["Category" + val] = categories[j];
                                            // }

                                            //getTicketCategories
                                            for (let j = 0; j < getTicketCategories.length; j++) {
                                                let val = j + 1;
                                                console.log('\ngetTicketCategories[j].child; ===> ' + JSON.stringify(getTicketCategories[j]));
                                                resp[i]["Category" + val] = getTicketCategories[j].child;
                                            }

                                            delete resp[i].funcnality;
                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();
                                                console.log("Data==>" + resp)
                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("Details.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}

function getAllTicketDetailsExtended_withoutSLA_old(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';


            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, " +
                "(SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, " +
                "a.ticket_id, (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid = ? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), " +
                " DATE_FORMAT(c.createdate, '%Y-%m-%d'));";

            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, 'Query Error......');
                } else {
                    console.log("query executed");
                    let ticketIdArray = [];
                    let ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {

                            function getTicketDetails(callback) {

                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";

                                console.log("Query===>  " + sql1)
                                logData('\n\nsql1------------------------' + sql1)
                                conn.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // console.log(details1.length);
                                        callback(null, details1[0]);
                                    }
                                })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })
                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }
                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts], function (err, results) {
                                if (err) {
                                    console.log('err ==> ' + err);
                                    conn.release();
                                    cb(err, false, err);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    t_details.ageing = ageing;

                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }
                                    resp.push(t_details);
                                    count++;

                                    if (count === details.length) {
                                        for (let i = 0; i < resp.length; i++) {
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            delete resp[i].res_sla;
                                            delete resp[i].reso_sla;

                                            let categories = resp[i].funcnality.split(',');
                                            for (let j = 0; j < categories.length; j++) {
                                                let val = j + 1;
                                                resp[i]["Category" + val] = categories[j];
                                            }
                                            delete resp[i].funcnality;
                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;

                                            if (i == resp.length - 1) {
                                                conn.release();
                                                console.log("Data==>" + resp)
                                                cb(null, true, resp);
                                            }
                                        }
                                    } else {
                                        console.log("Details.Length==>" + details.length + " =====Count===> " + count);
                                    }
                                }
                            });
                            //////END OF LOOP///////////////
                        }
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}




function getAllTicketDetailsExtended(data, cb) {
    console.log('\n\ngetAllTicketDetailsExtended ==> ' + JSON.stringify(data));
    let count = 0;
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';
            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, (SELECT login_name FROM USER where id = a.createbyid) login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, a.ticket_id " +
                ", (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d-%M-%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id ,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid=? and (Select DATE_FORMAT(?, '%Y-%m-%d')) in (DATE_FORMAT(a.createdate, '%Y-%m-%d'), DATE_FORMAT(c.createdate, '%Y-%m-%d')); ";

            //             console.log(sql);

            //             console.log(data.fromDate +"  <===>  "+ data.toDate);
            console.log('getAllTicketDetailsExtended SQL ================> ' + sql);

            console.log(data.fromDate + "  <=============== getAllTicketDetailsExtended DATE ===============>  " + data.toDate);

            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    console.log("error");
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false);
                } else {
                    console.log("query executed");

                    var ticketIdArray = [];
                    var ticketTypeIdArray = [];
                    if (details.length > 0) {
                        let resp = [];
                        for (let i = 0; i < details.length; i++) {
                            ticketIdArray[i] = details[i].id;
                            ticketTypeIdArray[i] = details[i].ticketTypeId;
                            console.log("Tkt type===>" + ticketTypeIdArray[i] + "=====> Ticketid==> " + ticketIdArray[i])

                        }
                        var responseSlaVoilated = [];
                        var resolutionSlaVoilated = [];

                        request
                            .post(REPORT_URL + '/lntCitAppsResponseResolutionVoilated')
                            .send({
                                "ticketTypeId": ticketTypeIdArray,
                                "client_id": data.clientId,
                                "ticketId": ticketIdArray
                            }).end((err, resps) => {
                                if (err) {
                                    util.logData(err);
                                    // conn.release();
                                    //callback(err, false)
                                } else {
                                    const res = JSON.parse(resps.text);
                                    if (res.success) {

                                        console.log(res.resVal)
                                        responseSlaVoilated = res.resVal.responseSlaVoilated.split(",");
                                        resolutionSlaVoilated = res.resVal.resolutionSlaVoilated.split(",");
                                        for (let j = 0; j < details.length; j++) {
                                            console.log("resp===>" + resolutionSlaVoilated[j]);
                                        }
                                        for (let i = 0; i < details.length; i++) {

                                            function getTicketDetails(callback) {
                                                /*                                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                                                                                    " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                                                                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',','\n'),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                                                                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                                                                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";
                                                
                                                
                                                
                                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " + " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " + " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " + " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " + " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";
                                                
                                                */

                                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                                    " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'')),',',' '),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";



                                                // logData('\n\nsql1------------------------'+sql1)
                                                conn.query(sql1, function (err, details1) {
                                                    if (err) {
                                                        util.logData(err);
                                                        // conn.release();
                                                        callback(err, null)
                                                    } else {
                                                        // console.log(details1.length);
                                                        callback(null, details1[0]);
                                                    }
                                                })
                                            }
                                            function getCSATComment(callback) {

                                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                                con.query(sql, function (err, details1) {
                                                    if (err) {
                                                        util.logData(err);
                                                        // conn.release();
                                                        callback(err, null)
                                                    } else {
                                                        callback(null, details1);
                                                    }
                                                })

                                            }
                                            function ageing(callback) {
                                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                                con.query(sql, function (err, details2) {
                                                    if (err) {
                                                        util.logData(err);
                                                        // conn.release();
                                                        callback(err, null)
                                                    } else {
                                                        if (details2.length > 0) {
                                                            if (details2[0].diff !== null) {
                                                                callback(null, details2[0].diff)
                                                            } else {
                                                                callback(null, "")
                                                            }
                                                        } else {
                                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                                if (err) {
                                                                    util.logData(err);
                                                                    // conn.release();
                                                                    callback(err, null)
                                                                } else {
                                                                    if (details1.length > 0 && details1[0].diff !== null) {

                                                                         // optimizedreport table starts
                                                                         var sql3 = "select id from optimizedreport where ticket_id =? ;"
                                                                         con.query(sql3, [details[i].id], function (err, result3) {
                                                                             if (err) {
                                                                                 cb(err, null);
                                                                             } else {
                                                                                 var sql569 = "update optimizedreport set ticket_ageing =? where id=?;"
                                                                                 con.query(sql569, [details1[0].diff, result3[0].id], function (err, result) {
                                                                                     if (err) {
                                                                                         cb(err, null)
                                                                                     } else {
                                                                                         logData("&&&&&&&&&&&&&&------------>" + sql569);
                                                                                         console.log("********^^^^^^^", result);
                                                                                         cb(null, true, result);
                                                                                     }
                                                                                 })
                                                                             }
                                                                         });
 
                                                                         // optimizedreport table ends

                                                                         
                                                                        callback(null, details1[0].diff)
                                                                    } else {
                                                                        callback(null, "")
                                                                    }
                                                                }
                                                            })
                                                        }
                                                        // callback(null, details);
                                                    }
                                                })
                                            }
                                            function allResolution(callback) {
                                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                                con.query(sql, [details[i].id], function (err, details1) {
                                                    if (err) {
                                                        util.logData(err);
                                                        // conn.release();
                                                        callback(err, null)
                                                    } else {
                                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                                        if (details1.length > 0) {

                                                            var id = details1[0].id;
                                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                                            // util.logData(sql1);
                                                            con.query(sql1, function (err, details2) {
                                                                if (err) {
                                                                    util.logData(err);
                                                                    // conn.release();
                                                                    callback(err, null)
                                                                } else {

                                                                    if (details2.length > 0) {
                                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                                        callback(null, details2)
                                                                    } else {
                                                                        callback(null, details1)
                                                                    }
                                                                }
                                                            })
                                                        } else {
                                                            callback(null, [])
                                                        }
                                                    }
                                                })
                                            }

                                            function efforts(callback) {
                                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                                con.query(sql, function (err, details1) {
                                                    if (err) {
                                                        util.logData(err);
                                                        // conn.release();
                                                        callback(err, null)
                                                    } else {
                                                        callback(null, details1);
                                                    }
                                                });

                                            }
                                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts,], function (err, results) {
                                                if (err) {
                                                    xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                                                    conn.release();
                                                    cb(err, false, xmlString);
                                                } else {
                                                    var t_details = results[0];
                                                    var closeComments = results[1];
                                                    var ageing = results[2];
                                                    var resolutions = results[3];
                                                    var efforts = results[4];
                                                    //   var res_sla = results[5];
                                                    t_details.ageing = ageing;
                                                    // t_details.res_sla = responseSlaVoilated[i];
                                                    //t_details.reso_sla = resolutionSlaVoilated[i];
                                                    if (closeComments.length > 0) {
                                                        t_details.closeComment = closeComments[0].csat_command
                                                    }
                                                    if (efforts.length > 0) {
                                                        t_details.efforts = efforts[0].sla_resolution_period
                                                    }
                                                    if (resolutions.length > 0) {
                                                        t_details.resolutions = resolutions;
                                                    }
                                                    resp.push(t_details);
                                                    count++;
                                                    if (count === details.length) {
                                                        // console.log("\n\n" + JSON.stringify(resp))
                                                        //xmlString = xmlString + '<Tickets>';


                                                        for (let i = 0; i < resp.length; i++) {
                                                            resp[i].Desc = resp[i].longDesc;
                                                            delete resp[i].longDesc;
                                                            resp[i].Priority = resp[i].busi_priority_id;
                                                            delete resp[i].busi_priority_id;
                                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                                            delete resp[i].requestorPSNo;
                                                            resp[i].RequestorName = resp[i].requestorName;
                                                            delete resp[i].requestorName;
                                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                                            delete resp[i].AssigneeGroup;
                                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                                            delete resp[i].AssigneeName;
                                                            resp[i].SourceType = resp[i].source_type;
                                                            delete resp[i].source_type;
                                                            resp[i].Status = resp[i].tstatus;
                                                            delete resp[i].tstatus;
                                                            resp[i].CreateDate = resp[i].createdate;
                                                            delete resp[i].createdate;
                                                            resp[i].ModifyDate = resp[i].modifydate;
                                                            delete resp[i].modifydate;
                                                            resp[i].Ageing = resp[i].ageing;
                                                            delete resp[i].ageing;
                                                            resp[i].Efforts = resp[i].efforts;
                                                            delete resp[i].efforts;
                                                            resp[i].Title = resp[i].tName;
                                                            delete resp[i].tName;
                                                            resp[i].ResponseViolated = responseSlaVoilated[i];
                                                            delete resp[i].res_sla;
                                                            resp[i].ResolutionViolated = resolutionSlaVoilated[i];
                                                            delete resp[i].reso_sla;

                                                            let categories = resp[i].funcnality.split(',');
                                                            for (let j = 0; j < categories.length; j++) {
                                                                let val = j + 1;
                                                                resp[i]["Category" + val] = categories[j];
                                                            }
                                                            delete resp[i].funcnality;
                                                            if (resp[i].solution !== null) {
                                                                const allSol = resp[i].solution;
                                                                const solutions = allSol.split('$');
                                                                const sols = [];
                                                                for (let j = 0; j < solutions.length; j++) {
                                                                    const solution = solutions[j].split('#');
                                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                                }
                                                                resp[i].Solutions = sols;

                                                            }
                                                            if (resp[i].cmmd !== null) {
                                                                const allSol = resp[i].cmmd;
                                                                const comments = allSol.split('$');
                                                                const comm = [];
                                                                for (let j = 0; j < comments.length; j++) {
                                                                    const comment = comments[j].split('#');
                                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                                }

                                                                resp[i].Comments = comm;
                                                            }
                                                            if (resp[i].resolutions !== null) {
                                                                // xmlString = xmlString + "<Resolutions>";
                                                                const resol = [];
                                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                                }
                                                                // xmlString = xmlString + "</Resolutions>";
                                                                resp[i].Resolutions = resol;
                                                            }
                                                            if (resp[i].closeComment !== null) {
                                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                                            }
                                                            delete resp[i].closeComment;
                                                            delete resp[i].resolutions;
                                                            delete resp[i].solution;
                                                            delete resp[i].cmmd;

                                                            if (i == resp.length - 1) {
                                                                conn.release();
                                                                console.log("Data==>" + resp)
                                                                cb(null, true, resp);
                                                            }
                                                        }
                                                        // xmlString = xmlString + "</Tickets>";
                                                        //conn.release();
                                                        //console.lod("Data==>"+resp)
                                                        //cb(null, true, resp);
                                                    } else {
                                                        console.log("Details.Length==>" + details.length + " =====Count===> " + count);


                                                    }

                                                }
                                            })
                                        }

                                    } else {
                                        conn.release();
                                        cb(null, false, "Error: Java Response Failure")
                                    }
                                }
                            })
                    } else {
                        conn.release();
                        cb(null, false, "No Ticket Found")
                    }
                }
            })

        }
    })

}

function getAllTicketDetailsExtended_old_1(data, cb) {
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';
            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, u.login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, a.ticket_id " +
                ", (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d/%m/%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d/%m/%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id and u.DeleteFlag = 0,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid=? and (COALESCE(c.modifydate, c.createdate)) BETWEEN  ? and ? ;";
            // console.log(sql);
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false);
                } else {
                    if (details.length > 0) {
                        let resp = [];
                        let count = 0;
                        for (let i = 0; i < details.length; i++) {
                            function getTicketDetails(callback) {
                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',','\n'),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";

                                // logData('\n\nsql1------------------------'+sql1)
                                conn.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // console.log(details1.length);
                                        callback(null, details1[0]);
                                    }
                                })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })

                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }

                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function checkResponseResolutionViolated(callback) {
                                request
                                    .post(REPORT_URL + '/lntCitAppsResponseResolutionVoilated')
                                    .send({
                                        "ticketTypeId": details[i].ticketTypeId,
                                        "client_id": data.clientId,
                                        "ticketId": details[i].id
                                    })
                                    .end((err, resp) => {
                                        if (err) {
                                            util.logData(err);
                                            // conn.release();
                                            callback(err, false)
                                        } else {
                                            // util.logData(resp)
                                            const res = JSON.parse(resp.text);
                                            if (res.success) {
                                                callback(null, res.resVal);
                                            } else {
                                                callback(err)
                                            }

                                        }
                                    });
                            }

                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, checkResponseResolutionViolated], function (err, results) {
                                if (err) {
                                    //xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                                    conn.release();
                                    cb(err, false);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    var res_sla = results[5];
                                    t_details.ageing = ageing;
                                    t_details.res_sla = res_sla.responseSlaVoilated;
                                    t_details.reso_sla = res_sla.resolutionSlaVoilated;
                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }
                                    resp.push(t_details);
                                    count++;
                                    if (count === details.length) {
                                        // console.log("\n\n" + JSON.stringify(resp))
                                        //xmlString = xmlString + '<Tickets>';
                                        for (let i = 0; i < resp.length; i++) {
                                            resp[i].Desc = resp[i].longDesc;
                                            delete resp[i].longDesc;
                                            resp[i].Priority = resp[i].busi_priority_id;
                                            delete resp[i].busi_priority_id;
                                            resp[i].RequestorPSNo = resp[i].requestorPSNo;
                                            delete resp[i].requestorPSNo;
                                            resp[i].RequestorName = resp[i].requestorName;
                                            delete resp[i].requestorName;
                                            resp[i].LatestAsigneeGroup = resp[i].AssigneeGroup;
                                            delete resp[i].AssigneeGroup;
                                            resp[i].LatestAsigneeName = resp[i].AssigneeName;
                                            delete resp[i].AssigneeName;
                                            resp[i].SourceType = resp[i].source_type;
                                            delete resp[i].source_type;
                                            resp[i].Status = resp[i].tstatus;
                                            delete resp[i].tstatus;
                                            resp[i].CreateDate = resp[i].createdate;
                                            delete resp[i].createdate;
                                            resp[i].ModifyDate = resp[i].modifydate;
                                            delete resp[i].modifydate;
                                            resp[i].Ageing = resp[i].ageing;
                                            delete resp[i].ageing;
                                            resp[i].Efforts = resp[i].efforts;
                                            delete resp[i].efforts;
                                            resp[i].Title = resp[i].tName;
                                            delete resp[i].tName;
                                            resp[i].ResponseViolated = resp[i].res_sla;
                                            delete resp[i].res_sla;
                                            resp[i].ResolutionViolated = resp[i].reso_sla;
                                            delete resp[i].reso_sla;

                                            let categories = resp[i].funcnality.split(',');
                                            for (let j = 0; j < categories.length; j++) {
                                                let val = j + 1;
                                                resp[i]["Category" + val] = categories[j];
                                            }
                                            delete resp[i].funcnality;
                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                const sols = [];
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    sols.push({ Time: solution[0], Comment: solution[1] })
                                                }
                                                resp[i].Solutions = sols;

                                            }
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                const comm = [];
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    comm.push({ Time: comment[0], Comment: comment[1] })
                                                }

                                                resp[i].Comments = comm;
                                            }
                                            if (resp[i].resolutions !== null) {
                                                // xmlString = xmlString + "<Resolutions>";
                                                const resol = [];
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    resol.push({ Time: resp[i].resolutions[k].resolution_datetime })
                                                    // xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                // xmlString = xmlString + "</Resolutions>";
                                                resp[i].Resolutions = resol;
                                            }
                                            if (resp[i].closeComment !== null) {
                                                resp[i].CSAT_Comment = resp[i].closeComment;
                                            }
                                            delete resp[i].closeComment;
                                            delete resp[i].resolutions;
                                            delete resp[i].solution;
                                            delete resp[i].cmmd;
                                            // let categories = resp[i].funcnality.split(',');
                                            // xmlString = xmlString + "<Ticket><TicketID>" + resp[i].ticket_id + "</TicketID>" +
                                            //     "<TicketType>" + resp[i].ticketType + "</TicketType>" +
                                            //     "<Priority>" + resp[i].busi_priority_id + "</Priority>" +
                                            //     "<RequestorPSNo>" + resp[i].requestorPSNo + "</RequestorPSNo>" +
                                            //     "<RequestorName>" + resp[i].requestorName + "</RequestorName>" +
                                            //     "<LatestAsigneeGroup>" + resp[i].AssigneeGroup + "</LatestAsigneeGroup>" +
                                            //     "<LatestAsigneeName>" + resp[i].AssigneeName + "</LatestAsigneeName>" +
                                            //     "<LatestAsigneePsno>" + resp[i].login_name + "</LatestAsigneePsno>" +
                                            //     "<Status>" + resp[i].tstatus + "</Status>" +
                                            //     "<SourceType>" + resp[i].source_type + "</SourceType>" +
                                            //     "<CreateDate>" + resp[i].createdate + "</CreateDate>" +
                                            //     "<ModifyDate>" + resp[i].modifydate + "</ModifyDate>" +
                                            //     "<Ageing>" + resp[i].ageing + "</Ageing>" +
                                            //     "<Efforts>" + resp[i].efforts + " min </Efforts>" +
                                            //     "<Title>" + resp[i].tName + "</Title>" +
                                            //     "<Desc>" + con.escape(resp[i].longDesc) + "</Desc>" +
                                            //     "<ResponseViolated>" + resp[i].res_sla + "</ResponseViolated>" +
                                            //     "<ResolutionViolated>" + resp[i].reso_sla + "</ResolutionViolated>"
                                            // // "<ProcessArea>" + resp[i].processArea + "</ProcessArea>" +
                                            // // "<Function>" + resp[i].funcnality + "</Function>"
                                            // for (let m = 0; m < categories.length; m++) {
                                            //     let val = m + 1;
                                            //     xmlString = xmlString + "<Category" + val + ">" + categories[m] + "</Category" + val + ">"
                                            // }
                                            // if (resp[i].solution !== null) {
                                            //     const allSol = resp[i].solution;
                                            //     const solutions = allSol.split('$');
                                            //     // console.log(JSON.stringify(solutions))
                                            //     xmlString = xmlString + "<Solutions>";
                                            //     for (let j = 0; j < solutions.length; j++) {
                                            //         const solution = solutions[j].split('#');
                                            //         xmlString = xmlString + "<Solution><Time>" + solution[0] + "</Time><Comment>" + solution[1] + "</Comment><SolutionBy>" + resp[i].NAME + "</SolutionBy></Solution>"
                                            //     }
                                            //     xmlString = xmlString + "</Solutions>";
                                            // }
                                            // if (resp[i].resolutions) {
                                            //     xmlString = xmlString + "<Resolutions>";
                                            //     for (let k = 0; k < resp[i].resolutions.length; k++) {
                                            //         xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                            //     }
                                            //     xmlString = xmlString + "</Resolutions>";
                                            // }
                                            // // console.log(JSON.stringify(resp[i].cmmd))
                                            // if (resp[i].cmmd !== null) {
                                            //     const allSol = resp[i].cmmd;
                                            //     const comments = allSol.split('$');
                                            //     // console.log(JSON.stringify(solutions))
                                            //     xmlString = xmlString + "<Comments>";
                                            //     for (let j = 0; j < comments.length; j++) {
                                            //         const comment = comments[j].split('#');
                                            //         xmlString = xmlString + "<Comment><Time>" + comment[0] + "</Time><Comment>" + comment[1] + "</Comment></Comment>"
                                            //     }
                                            //     xmlString = xmlString + "</Comments>";
                                            // }
                                            // if (resp[i].closeComment) {
                                            //     xmlString = xmlString + "<CSAT_Comment>" + resp[i].closeComment + "</CSAT_Comment>";
                                            // }
                                            // xmlString = xmlString + "</Ticket>"
                                        }
                                        // xmlString = xmlString + "</Tickets>";
                                        conn.release();
                                        cb(null, true, resp);
                                    }

                                }
                            })
                        }
                    } else {
                        // xmlString = xmlString + "<Error>No Ticket Found</Error>";
                        conn.release();
                        cb(null, false, details)
                    }
                }
            })
        }
    })

}
function getAllTicketDetailsExtended_old(data, cb) {
    con.getConnection(function (err, conn) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            data.toDate = data.fromDate + ' 23:59:59';
            data.fromDate = data.fromDate + ' 00:00:00';
            var xmlString = '<?xml version="1.0" encoding="UTF-8"?>';
            let sql = "select a.id ,a.ticketTypeId,a.busi_priority_id priority,g.LEVELSHORTDESC as AssigneeGroup, u.NAME as AssigneeName, u.login_name, (select ATTRVAL from TICKETATTRIBUTES where id = a.ticketTypeId) ticketType, a.ticket_id " +
                ", (SELECT busi_priority_desc FROM BUSINESSPRIORITY where id = a.busi_priority_id ) busi_priority_id " +
                ", (SELECT login_name FROM USER where id = a.createbyid) requestorPSNo " +
                ", (SELECT NAME FROM USER where id = a.createbyid) requestorName " +
                ", (select ATTRVAL from TICKETATTRIBUTES where id = a.tstatus) tstatus, a.source_type " +
                ", date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d/%m/%Y %T') createdate " +
                ", date_format (ADDTIME(coalesce( c.modifydate, c.createdate), '5:30:0.000000'),'%d/%m/%Y %T') modifydate " +
                ", a.tName, a.longDesc from ticket a, WFCCLIENTRESULT_LAST_STATUS c LEFT JOIN USER u ON c.user_id = u.id and u.DeleteFlag = 0,SUPPORTGROUPLEVEL g where a.id = c.PKFIELDVAL" +
                " AND c.supportGroupLevelId = g.id and a.clientid=? and (COALESCE(c.modifydate, c.createdate)) BETWEEN  ? and ? ;";
            // console.log(sql);
            conn.query(sql, [data.clientId, data.fromDate, data.toDate], function (err, details) {
                if (err) {
                    util.logData(err);
                    xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                    conn.release();
                    cb(err, false, xmlString);
                } else {
                    if (details.length > 0) {
                        let resp = [];
                        let count = 0;
                        for (let i = 0; i < details.length; i++) {
                            function getTicketDetails(callback) {
                                let sql1 = "select " + details[i].id + " id ,'" + details[i].ticketType + "' ticketType ,'" + details[i].ticket_id + "' ticket_id,' " + details[i].busi_priority_id + "' busi_priority_id,'" + details[i].requestorPSNo + "' requestorPSNo ,'" + details[i].AssigneeGroup + "' AssigneeGroup ,'" + details[i].AssigneeName + "' AssigneeName ,'" + details[i].login_name + "' login_name , " + con.escape(details[i].requestorName) + " requestorName, '" + details[i].tstatus + "' tstatus,'" + details[i].source_type + "' source_type,'" + details[i].createdate + "' createdate,'" + details[i].modifydate + "' modifydate," + con.escape(details[i].tName) + " tName," + con.escape(details[i].longDesc) + " longDesc,NAME ,resolution_Count,solution, max_sol_dt, solution_date_only, cmmd, funcnality from " +
                                    " (select id,ticket_id from ticket aa where id = " + details[i].id + ") aa " +
                                    " LEFT OUTER JOIN (SELECT a.ticketId,u.NAME,count(a.id) resolution_Count, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(a.createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', solutions) SEPARATOR '--'), '--', '$'), '') solution,date_format (ADDTIME(max(a.createdate), '5:30:0.000000'),'%d-%M-%Y %T') max_sol_dt, coalesce(replace(group_concat(concat(date_format (ADDTIME(a.createdate, '5:30:0.000000'),'%d-%M-%Y %T'),'@')),',','\n'),'') solution_date_only FROM ticketSolutions a , USER u where a.createbyid=u.id and  ticketId =" + details[i].id + " group by u.NAME) a on a.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (SELECT ticketId, COALESCE(REPLACE(GROUP_CONCAT(CONCAT(DATE_FORMAT(ADDTIME(createdate, '5:30:0.000000'), '%d-%M-%Y %T'), '#', feedback) SEPARATOR '--'), '--', '$'), '') cmmd  FROM ticketFeedBack where ticketId = " + details[i].id + ") b on b.ticketId = aa.id " +
                                    " LEFT OUTER JOIN (select ticketId, group_concat(b.ATTRVAL) funcnality from ticketCategory a, TICKETATTRIBUTES b where a.categoryId = b.id and ticketId = " + details[i].id + " order by parent_categoryId ) d on d.ticketid = aa.id ";

                                // logData('\n\nsql1------------------------'+sql1)
                                conn.query(sql1, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // console.log(details1.length);
                                        callback(null, details1[0]);
                                    }
                                })
                            }

                            function getCSATComment(callback) {

                                let sql = "SELECT ticket_id,csat_command  FROM ticketwise_csat_form where ticket_id=" + details[i].id;
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                })

                            }

                            function ageing(callback) {
                                let sql = "select tsol.id, TIME_FORMAT(TIMEDIFF(COALESCE(tsol.createdate,NOW()), t.createdate),'%H:%i:%s') diff from  ticketSolutions tsol,  ticket t where tsol.ticketId = t.id and t.id =" + details[i].id + " order by tsol.id desc limit 1";
                                con.query(sql, function (err, details2) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        if (details2.length > 0) {
                                            if (details2[0].diff !== null) {
                                                callback(null, details2[0].diff)
                                            } else {
                                                callback(null, "")
                                            }
                                        } else {
                                            let sql1 = "select t.id, TIME_FORMAT(TIMEDIFF(NOW(), t.createdate),'%H:%i:%s') diff from ticket t where t.id = ? and t.tstatus != (SELECT id FROM TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and sequence_no = 0 limit 1)";
                                            con.query(sql1, [details[i].id, data.clientId], function (err, details1) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {
                                                    if (details1.length > 0 && details1[0].diff !== null) {
                                                        callback(null, details1[0].diff)
                                                    } else {
                                                        callback(null, "")
                                                    }
                                                }
                                            })
                                        }
                                        // callback(null, details);
                                    }
                                })
                            }

                            function allResolution(callback) {
                                let sql = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime  FROM ticket_sla_response_dtls where ticketId = ? order by id limit 1 ";
                                con.query(sql, [details[i].id], function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        // util.logData("\n\n -----1-----------"+JSON.stringify(details1));
                                        if (details1.length > 0) {

                                            var id = details1[0].id;
                                            let sql1 = "SELECT ticketId,id, coalesce(date_format(ADDTIME(coalesce(report_resolution_datetime,resolution_datetime), '5:30:0.000000'),'%Y-%m-%d %T'),'') resolution_datetime " +
                                                "FROM ticket_sla_response_dtls where ticketId = " + details[i].id + " and id >" + id + " order by id ";
                                            // util.logData(sql1);
                                            con.query(sql1, function (err, details2) {
                                                if (err) {
                                                    util.logData(err);
                                                    // conn.release();
                                                    callback(err, null)
                                                } else {

                                                    if (details2.length > 0) {
                                                        details2.unshift({ resolution_datetime: details1[0].resolution_datetime });
                                                        // util.logData("\n\n -----2----------" + JSON.stringify(details2));
                                                        callback(null, details2)
                                                    } else {
                                                        callback(null, details1)
                                                    }
                                                }
                                            })
                                        } else {
                                            callback(null, [])
                                        }
                                    }
                                })
                            }

                            function efforts(callback) {
                                let sql = "SELECT a.clientid,a.ticketId,coalesce(a.sla_resolution_period,0) sla_resolution_period FROM ticket_sla_response_dtls a where a.ticketId = " + details[i].id + "  and a.deleteflag = '0'";
                                con.query(sql, function (err, details1) {
                                    if (err) {
                                        util.logData(err);
                                        // conn.release();
                                        callback(err, null)
                                    } else {
                                        callback(null, details1);
                                    }
                                });

                            }

                            function checkResponseResolutionViolated(callback) {
                                request
                                    .post(REPORT_URL + '/lntCitAppsResponseResolutionVoilated')
                                    .send({
                                        "ticketTypeId": details[i].ticketTypeId,
                                        "client_id": data.clientId,
                                        "ticketId": details[i].id
                                    })
                                    .end((err, resp) => {
                                        if (err) {
                                            util.logData(err);
                                            // conn.release();
                                            callback(err, false)
                                        } else {
                                            // util.logData(resp)
                                            const res = JSON.parse(resp.text);
                                            if (res.success) {
                                                callback(null, res.resVal);
                                            } else {
                                                callback(err)
                                            }

                                        }
                                    });
                            }

                            async.parallel([getTicketDetails, getCSATComment, ageing, allResolution, efforts, checkResponseResolutionViolated], function (err, results) {
                                if (err) {
                                    xmlString = xmlString + "<Error>Something Went Wrong</Error>";
                                    conn.release();
                                    cb(err, false, xmlString);
                                } else {
                                    var t_details = results[0];
                                    var closeComments = results[1];
                                    var ageing = results[2];
                                    var resolutions = results[3];
                                    var efforts = results[4];
                                    var res_sla = results[5];
                                    t_details.ageing = ageing;
                                    t_details.res_sla = res_sla.responseSlaVoilated;
                                    t_details.reso_sla = res_sla.resolutionSlaVoilated;
                                    if (closeComments.length > 0) {
                                        t_details.closeComment = closeComments[0].csat_command
                                    }
                                    if (efforts.length > 0) {
                                        t_details.efforts = efforts[0].sla_resolution_period
                                    }
                                    if (resolutions.length > 0) {
                                        t_details.resolutions = resolutions;
                                    }
                                    resp.push(t_details);
                                    count++;
                                    if (count === details.length) {
                                        // console.log("\n\n" + JSON.stringify(resp))
                                        xmlString = xmlString + '<Tickets>';
                                        for (let i = 0; i < resp.length; i++) {
                                            let categories = resp[i].funcnality.split(',');
                                            xmlString = xmlString + "<Ticket><TicketID>" + resp[i].ticket_id + "</TicketID>" +
                                                "<TicketType>" + resp[i].ticketType + "</TicketType>" +
                                                "<Priority>" + resp[i].busi_priority_id + "</Priority>" +
                                                "<RequestorPSNo>" + resp[i].requestorPSNo + "</RequestorPSNo>" +
                                                "<RequestorName>" + resp[i].requestorName + "</RequestorName>" +
                                                "<LatestAsigneeGroup>" + resp[i].AssigneeGroup + "</LatestAsigneeGroup>" +
                                                "<LatestAsigneeName>" + resp[i].AssigneeName + "</LatestAsigneeName>" +
                                                "<LatestAsigneePsno>" + resp[i].login_name + "</LatestAsigneePsno>" +
                                                "<Status>" + resp[i].tstatus + "</Status>" +
                                                "<SourceType>" + resp[i].source_type + "</SourceType>" +
                                                "<CreateDate>" + resp[i].createdate + "</CreateDate>" +
                                                "<ModifyDate>" + resp[i].modifydate + "</ModifyDate>" +
                                                "<Ageing>" + resp[i].ageing + "</Ageing>" +
                                                "<Efforts>" + resp[i].efforts + " min </Efforts>" +
                                                "<Title>" + resp[i].tName + "</Title>" +
                                                "<Desc>" + con.escape(resp[i].longDesc) + "</Desc>" +
                                                "<ResponseViolated>" + resp[i].res_sla + "</ResponseViolated>" +
                                                "<ResolutionViolated>" + resp[i].reso_sla + "</ResolutionViolated>"
                                            // "<ProcessArea>" + resp[i].processArea + "</ProcessArea>" +
                                            // "<Function>" + resp[i].funcnality + "</Function>"
                                            for (let m = 0; m < categories.length; m++) {
                                                let val = m + 1;
                                                xmlString = xmlString + "<Category" + val + ">" + categories[m] + "</Category" + val + ">"
                                            }
                                            if (resp[i].solution !== null) {
                                                const allSol = resp[i].solution;
                                                const solutions = allSol.split('$');
                                                // console.log(JSON.stringify(solutions))
                                                xmlString = xmlString + "<Solutions>";
                                                for (let j = 0; j < solutions.length; j++) {
                                                    const solution = solutions[j].split('#');
                                                    xmlString = xmlString + "<Solution><Time>" + solution[0] + "</Time><Comment>" + solution[1] + "</Comment><SolutionBy>" + resp[i].NAME + "</SolutionBy></Solution>"
                                                }
                                                xmlString = xmlString + "</Solutions>";
                                            }
                                            if (resp[i].resolutions) {
                                                xmlString = xmlString + "<Resolutions>";
                                                for (let k = 0; k < resp[i].resolutions.length; k++) {
                                                    xmlString = xmlString + "<Time>" + resp[i].resolutions[k].resolution_datetime + "</Time>"
                                                }
                                                xmlString = xmlString + "</Resolutions>";
                                            }
                                            // console.log(JSON.stringify(resp[i].cmmd))
                                            if (resp[i].cmmd !== null) {
                                                const allSol = resp[i].cmmd;
                                                const comments = allSol.split('$');
                                                // console.log(JSON.stringify(solutions))
                                                xmlString = xmlString + "<Comments>";
                                                for (let j = 0; j < comments.length; j++) {
                                                    const comment = comments[j].split('#');
                                                    xmlString = xmlString + "<Comment><Time>" + comment[0] + "</Time><Comment>" + comment[1] + "</Comment></Comment>"
                                                }
                                                xmlString = xmlString + "</Comments>";
                                            }
                                            if (resp[i].closeComment) {
                                                xmlString = xmlString + "<CSAT_Comment>" + resp[i].closeComment + "</CSAT_Comment>";
                                            }
                                            xmlString = xmlString + "</Ticket>"
                                        }
                                        xmlString = xmlString + "</Tickets>";
                                        conn.release();
                                        cb(null, true, xmlString);
                                    }

                                }
                            })
                        }
                    } else {
                        xmlString = xmlString + "<Error>No Ticket Found</Error>";
                        conn.release();
                        cb(null, false, xmlString)
                    }
                }
            })
        }
    })

}

function getUserDetailsByLoginIdDecrypt(data, cb) {
    let sql = 'select  NAME as name ,USERMAIL as email,USERMOBILENO as mobile,address FROM USER where login_name=? and clientId=? and DeleteFlag=0';
    con.query(sql, [data.loginId, data.clientId], function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {

            if (done.length > 0) {
                done[0].email = decryptData(done[0].email);
                done[0].mobile = decryptData(done[0].mobile);
                cb(null, true, data.loginId + "-" + done[0].email + "-" + done[0].mobile + "-" + done[0].address);
            } else {

                cb(null, false, "No Details Found");
            }
        }
    });
}

function deleteDashboardCat(data, cb) {
    con.getConnection(function (err, conn) {
        if (err) {
            logData(err);
            console.log("\n\n connections : " + con._allConnections.length)
            cb(err, null);
        } else {
            data.parentPath = data.parentPath + "%";
            let sql = "DELETE from `dashboard_category`  where cat_list in (SELECT id FROM TICKETATTRIBUTES where parentPath like ? and clientId=? and DeleteFlag=0) and user_id=? ";
            conn.query(sql, [data.parentPath, data.clientId, data.user_id], function (err, details) {
                if (err) {
                    util.logData(err);
                    conn.release();
                    cb(err, null);
                } else {
                    // console.log(details);
                    if (data.seq === 9) {
                        let sql1 = "select id from dashboard_category where client_id=? and user_id=? and seq=? and DeleteFlag=0";
                        conn.query(sql1, [data.clientId, data.user_id, data.seq], function (err, details) {
                            if (err) {
                                util.logData(err);
                                conn.release();
                                cb(err, null);
                            } else {
                                conn.release();
                                if (details.length > 0) {
                                    cb(null, true, { value: true, message: "Category removed from dashboard" })
                                } else {
                                    cb(null, true, { value: false, message: "Category removed from dashboard" })
                                }
                            }
                        })
                    } else {
                        conn.release();
                        cb(null, true, { value: false, message: "Category removed from dashboard" })
                    }
                }
            })
        }
    });
}

function insertDashboardCat(data, cb) {
    let sql3 = 'INSERT INTO `dashboard_category` (client_id, user_id, cat_list, createbyid,seq) VALUES (?,?,?,?,?);';
    con.query(sql3, [data.clientId, data.user_id, data.categoryId, data.user_id, data.seq], function (err, resp) {
        if (err) {
            util.logData(err)
            cb(err, null);
        } else {
            cb(null, true);
        }
    })
}

function deleteAllDashboardCat(data, cb) {
    con.getConnection(function (err, conn) {
        if (err) {
            logData(err);
            console.log("\n\n connections : " + con._allConnections.length)
            cb(err, null);
        } else {
            let sql2 = 'DELETE from `dashboard_category`  where client_id=? and user_id=? and cat_list in (?) and DeleteFlag=0;';
            conn.query(sql2, [data.clientId, data.user_id, data.catList], function (err, resp) {
                if (err) {
                    util.logData(err);
                    conn.release();
                    cb(err, null);
                } else {
                    let sql2 = 'DELETE from `dashboard_category`  where client_id=? and user_id=? and seq > ? and DeleteFlag=0;';
                    conn.query(sql2, [data.clientId, data.user_id, data.seq], function (err, resp) {
                        if (err) {
                            util.logData(err);
                            conn.release();
                            cb(err, null);
                        } else {
                            if (data.seq === 9) {
                                let sql1 = "select id from dashboard_category where client_id=? and user_id=? and seq=? and DeleteFlag=0";
                                conn.query(sql1, [data.clientId, data.user_id, data.seq], function (err, details) {
                                    if (err) {
                                        util.logData(err);
                                        conn.release();
                                        cb(err, null);
                                    } else {
                                        conn.release();
                                        if (details.length > 0) {
                                            cb(null, true, { value: true, message: "Category removed from dashboard" })
                                        } else {
                                            cb(null, true, { value: false, message: "Category removed from dashboard" })
                                        }
                                    }
                                })
                            } else {
                                conn.release();
                                cb(null, true, { value: false, message: "Category removed from dashboard" })
                            }
                        }
                    });
                }
            })
        }
    })
}

function changeUserPassword(data, cb) {
    bcrypt.hash(data.confirmPassword, saltRounds, function (err, hash) {
        if (err) {
            logData(err);
        } else {
            util.logData(hash);
            var sql2 = "UPDATE `USER` SET `PASSWORD`=? WHERE `id`=?;";
            con.query(sql2, [hash, data.id], function (err, result) {
                logData("---------009------>" + sql2);
                if (err) {
                    logData(err);
                    cb(err, null);
                } else {
                    cb(null, true, result.insertId);
                }
            });
        }
    })
}


function getTicketsStatusWise(data, cb) {

    var str = "";

    if (data.clientId == '' || data.clientId == 'null' || data.ticketTypeId == '' || data.ticketTypeId == null || data.sequence_no == '' || data.sequence_no == null) {
        cb(null, false, "Mandatory field(s) Missing");
    } else {

        var seq = data.sequence_no.split(",");

        str = "SELECT distinct a.id id,a.ticket_id ticket_id,f.ATTRVAL status FROM WFCCLIENTRESULT_LAST_STATUS e, TICKETATTRIBUTES f, ticket a  where a.clientid = ? and a.ticketTypeId = ?  AND a.tstatus IN (SELECT id FROM TICKETATTRIBUTES WHERE CLIENTID = ? AND ATTRID = 2 AND sequence_no IN (?) AND DeleteFlag = '0') and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL and a.tstatus = f.id and a.is_awaiting_for_user_info in ('N','R') ";

        var param = [data.clientId, data.ticketTypeId, data.clientId, seq];


        if (data.supportGroupLevelId) {
            str = str + " and e.supportGroupLevelId = ? ";
            param.push(data.supportGroupLevelId);
        }
        if (data.source_type) {
            str = str + " and a.source_type = ? ";
            param.push(data.source_type);
        }

        str = str + " order by e.id desc ; "
        con.query(str, param, function (err, done) {
            util.logData(str);
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                util.logData(done);
                cb(null, true, done);

            }
        });
    }
}


function searchCitDataForExport(data, cb) {
    if (data.grpLevel == 0) {
        searchAllCitDataForEnduser(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    } else if (data.grpLevel > 0) {
        searchAllCitDataForAnalyst(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    }
}

function searchAllCitDataForAnalyst(data, cb) {
    let sql;
    sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
        " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and aa.categoryId = cc.id) category ," +
        " a.ticket_id,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
        " escalated_to_grp_nm,a.tName,b.NAME createdBy,a.createdate createdSince,f.ATTRVAL status," +
        " d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
        " a.longDesc,a.requestedDate, a.ticketCloseDate, g.LEVELSHORTDESC , " +
        " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
    sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
        " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

    sql = sql + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
    var params = [data.clientId, data.ticketTypeId];

    if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
        // sql = sql + " and n.createdate between ? and ? ";
        sql = sql + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
        params.push(data.created_frdate + " 00:00:00");
        params.push(data.created_todate + " 23:59:00");
    }

    if (data.assign_id.length > 0) {
        sql = sql + " and m.user_id in (?)) ";
        params.push(data.assign_id);
    } else {
        sql = sql + ") ";
    }

    sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

    if (data.raisedValue !== '') {
        sql = sql + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
        params.push(data.raisedValue);
        params.push(data.clientId);
    }

    sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

    if (data.ticketStatusId.length > 0) {
        sql = sql + " and a.tstatus in (?) ";
        params.push(data.ticketStatusId);
    }

    if (data.busi_priority_id.length > 0) {
        sql = sql + " and a.busi_priority_id in (?) ";
        params.push(data.busi_priority_id);
    }

    if (data.catFilterLt != '' && data.catFilterLt != '0') {
        var cat = data.catFilterLt.split(",");
        var catVal = cat[cat.length - 1].split("#");
        sql = sql + " and a.categoryDtlsLt like '%#?%' ";
        params.push(Number(catVal[1]));
    }

    sql = sql + " ORDER BY a.id";

    util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
    util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
    con.query(sql, params, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, []);
            }
        }
    });
}

function searchAllCitDataForEnduser(data, cb) {
    let sql;
    sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
        " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and aa.categoryId = cc.id) category ," +
        " a.ticket_id,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
        " escalated_to_grp_nm,a.tName,b.NAME createdBy,a.createdate createdSince,f.ATTRVAL status," +
        " d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
        " a.longDesc,a.requestedDate, a.ticketCloseDate, g.LEVELSHORTDESC , " +
        " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
    sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
        " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  where ";

    sql = sql + " a.id = e.PKFIELDVAL  and a.clientId=? and a.ticketTypeId = ? and " +
        " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where ticketTypeId = ? and clientId=? and " +
        " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = ?),0) ) ";
    var params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.isManagement + ""];

    sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

    if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
        // sql = sql + " and a.createdate between ? and ? ";
        sql = sql + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
        params.push(data.created_frdate + " 00:00:00");
        params.push(data.created_todate + " 23:59:00");
    }

    sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

    if (data.ticketStatusId.length > 0) {
        sql = sql + " and a.tstatus in (?) ";
        params.push(data.ticketStatusId);
    }

    if (data.catFilterLt != '' && data.catFilterLt != '0') {
        var cat = data.catFilterLt.split(",");
        var catVal = cat[cat.length - 1].split("#");
        sql = sql + " and a.categoryDtlsLt like '%#?%' ";
        params.push(Number(catVal[1]));
    }

    sql = sql + " and a.createbyid = ? ORDER BY a.id";
    params.push(data.user_id);

    util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
    util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
    con.query(sql, params, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, []);
            }
        }
    });
}

function searchSscDataForExport(data, cb) {
    function getWorkingCategory(done) {
        let ticketAttrIdList = "";

        if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
            done(null, ticketAttrIdList);
        } else {
            let selectSql = "SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where clientId = ? and ticket_type = ? " +
                " and supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = 'true'),0)";
            con.query(selectSql, [data.clientId, data.ticketTypeId, data.supportgrp_id], function (err1, result1) {
                if (err1) {
                    logData(err1);
                    cb(err1, null);
                } else {
                    if (result1.length > 0) {
                        let i = 0;

                        for (; i < (result1.length - 1); i++) {
                            ticketAttrIdList += result1[i].ticketAttrId + ",";
                        }
                        ticketAttrIdList += result1[i].ticketAttrId;
                        done(null, ticketAttrIdList);
                    } else {
                        done(null, ticketAttrIdList);
                    }
                }
            });
        }

    }

    async.waterfall([
        getWorkingCategory,
        function getDataObj(workingCategoryList, done) {
            let sql;
            sql = "SELECT distinct a.id id, " +
                " a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
                " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
                " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
                " e.id  ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
                " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
                " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
            if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                sql = sql + " , l.band, l.grade, l.entity_code, l.unit, l.ic, l.sbu, l.location ";
            }
            sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
                " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g";
            if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                sql = sql + " ,LNT_employee_details l ";
            }
            if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                sql = sql + " ,USER ul ";
            }

            sql = sql + " , ticket a where  a.clientid = ?  and a.ticketTypeId = ? " +
                " and a.tstatus not in (select id from TICKETATTRIBUTES where CLIENTID = ? and ATTRID = 2 and DeleteFlag = '0' and sequence_no in (21,22)) " +
                " and a.DeleteFlag = '0' ";

            var params = [data.clientId, data.ticketTypeId, data.clientId];

            if (data.created_frdate != '' && data.created_todate != '') {
                // sql = sql + " and a.createdate between ? and ? ";
                sql = sql + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
                params.push(data.created_frdate + " 00:00:00");
                params.push(data.created_todate + " 23:59:00");
            }

            sql = sql + " and a.tstatus = f.id  and a.busi_priority_id = d.id  and a.createbyid = b.id and a.id = e.PKFIELDVAL ";

            if (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') {
                sql = sql + " and a.id=l.ticket_id  ";
            }

            if (data.isTeamLead != 'Y' && data.supportgrp_id != '0') {
                sql = sql + " and (e.supportGroupLevelId = ? or a.createor_support_grp_id = ? ) ";
                params.push(data.supportgrp_id);
                params.push(data.supportgrp_id);
            } else {
                sql = sql + "and a.working_category in (" + workingCategoryList + ")";
                //params.push(data.clientId);
                //params.push(data.ticketTypeId);
                //params.push(data.supportgrp_id);
            }
            sql = sql + " and g.id = e.supportGroupLevelId ";

            if (data.ticketTypeSeqNo !== 1 && data.ticketTypeSeqNo !== '1') {
                sql = sql + " and a.createbyid=ul.id  ";
            }

            if ((data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1') && data.isDashboardSearch !== 1) {
                sql = sql + " and a.id not in (SELECT incident_ticket_id FROM  incident_problem_ticket_mapping where deleteflag=0 and  )";
            }

            if (data.ticketStatusId != '0') {
                sql = sql + " and a.tstatus = ? ";
                params.push(data.ticketStatusId);
            }

            if (data.ticket_id != '0') {
                sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
                params.push(data.ticket_id);
            }


            if (data.busi_priority_id != '0') {
                sql = sql + " and a.busi_priority_id = ? ";
                params.push(data.busi_priority_id);
            }

            if (data.catFilterLt != '' && data.catFilterLt != '0') {
                var cat = data.catFilterLt.split(",");
                var catVal = cat[cat.length - 1].split("#")
                sql = sql + " and a.categoryDtlsLt like '%#?%' ";
                params.push(Number(catVal[1]));
            }
            //1#65,2#66,3#75,4#137,5#142

            if (data.raisedType === 1 && (data.ticketTypeSeqNo === 1 || data.ticketTypeSeqNo === '1')) {
                sql = sql + " and l.psno = ?  ";
                params.push(data.raisedValue);
            }

            if (data.grpLevel === 0) {
                if (data.assign_id != undefined && data.assign_id != '0') {
                    sql = sql + " and a.createbyid = ? ";
                    params.push(data.assign_id);
                }
            } else {
                if (data.assign_id != undefined && data.assign_id != '0') {
                    sql = sql + " and e.user_id = ? ";
                    params.push(data.assign_id);
                }
            }
            sql = sql + " ORDER BY a.id";

            util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
            util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
            con.query(sql, params, function (err, result) {
                if (err) {
                    util.logData(err);
                    cb(err, false);
                } else {
                    if (result.length > 0) {
                        const ticketIds = [];
                        util.logData("\n\n>>>>>>>> result1 >>>>>>>" + result.length);
                        for (let i = 0; i < result.length; i++) {
                            ticketIds.push(result[i].id);
                        }
                        let sql2 = "SELECT group_concat(concat(bb.header_name,'->', cc.ATTRVAL )) category  FROM ticketCategory aa, attributesHeaderMst bb, " +
                            " TICKETATTRIBUTES cc where aa.ticketId in (" + ticketIds + ") and aa.parent_categoryId = bb.id and  aa.categoryId = cc.id group by aa.ticketId";
                        // util.logData('sql2: --> ' + sql2);
                        con.query(sql2, function (err2, result2) {
                            if (err2) {
                                util.logData(err2);
                                cb(err2, null);
                            } else {
                                util.logData('2nd result length: --> ' + result2.length);
                                for (let j = 0; j < result2.length; j++) {
                                    result[j]['category'] = result2[j].category;
                                }
                                cb(null, true, result);
                            }
                        });
                    } else {
                        cb(null, true, []);
                    }
                }
            });
        }
    ],
        function (err) {
            if (err) {
                throw new Error(err);
            } else {
                util.logData(err);
            }
        });
}

function AdvancesearchTicketForChr(data, cb) {
    if (data.grpLevel == 0) {
        AdvancesearchTicketForChrEndUser(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    } else if (data.grpLevel > 0) {
        AdvancesearchTicketForChrAnalyst(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    }
}

function AdvancesearchTicketForChrAnalyst(data, cb) {
    logData("\n\nAnalyst AdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    // logData('\n\n\n********************************************************');
                    // logData('totalPage-----------------'+totalPage);
                    // logData('dataObj-----------------'+dataObj.length);
                    // logData('search result====' + JSON.stringify(results.dataObj[0].id));
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    logData('nextOffset-----------------' + nextOffset);
                    logData('previousOffset-----------------' + previousOffset);
                }
                //results['totalPage'] = 0;
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, a.busi_urgency_id, " +
            " e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

        sql = sql + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
        var params = [data.clientId, data.ticketTypeId];

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and n.createdate between ? and ? ";
            sql = sql + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.assign_id.length > 0) {
            sql = sql + " and m.user_id in (?)) ";
            params.push(data.assign_id);
        } else {
            sql = sql + ") ";
        }

        sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.raisedValue !== '') {
            sql = sql + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
            params.push(data.raisedValue);
            params.push(data.clientId);
        }

        sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql = sql + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.busi_priority_id.length > 0) {
            sql = sql + " and a.busi_priority_id in (?) ";
            params.push(data.busi_priority_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql = sql + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        sql = sql + " and a.working_category = ? ";
        params.push(data.workingCategory);

        if (paginationType == 'prev') {
            sql = sql + " and a.id<? ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id ASC";
        } else {
            sql = sql + " and a.id>? ORDER BY a.id LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --------------> ' + JSON.stringify(result));
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
                // cb(null, true, result);
            }
        });
    }

    function totalData(cb) {
        util.logData('\n\n totalData-------------------' + JSON.stringify(data));
        let sql1 = "select count(distinct a.id) count from USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

        sql1 = sql1 + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
        var params = [data.clientId, data.ticketTypeId];

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and n.createdate between ? and ? ";
            sql1 = sql1 + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        if (data.assign_id.length > 0) {
            sql1 = sql1 + " and m.user_id in (?)) ";
            params.push(data.assign_id);
        } else {
            sql1 = sql1 + ") ";
        }

        sql1 = sql1 + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.raisedValue !== '') {
            sql1 = sql1 + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
            params.push(data.raisedValue);
            params.push(data.clientId);
        }

        sql1 = sql1 + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql1 = sql1 + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.busi_priority_id.length > 0) {
            sql1 = sql1 + " and a.busi_priority_id in (?) ";
            params.push(data.busi_priority_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        sql1 = sql1 + " and a.working_category = ? ";
        params.push(data.workingCategory);

        logData("tot_query////////////////////// >" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                //util.logData('result1=' + done.length());
                cb(null, done);
            }
        });
    }
}

function AdvancesearchTicketForChrEndUser(data, cb) {
    logData("\n\nEnduser AdvancesearchTicket--------start----------------------" + new Date());
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";
    // if(data.ticket_id !== null){

    // }

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
        //funcArr = {dataObj, totalData};
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                // logData('search result====' + JSON.stringify(results));
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    // logData('\n\n\n********************************************************');
                    // logData('totalPage-----------------'+totalPage);
                    // logData('dataObj-----------------'+dataObj.length);
                    // logData('search result====' + JSON.stringify(results.dataObj[0].id));
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                    logData('nextOffset-----------------' + nextOffset);
                    logData('previousOffset-----------------' + previousOffset);
                }
                //results['totalPage'] = 0;
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        let sql;
        util.logData('+++++++++++++++' + JSON.stringify(data))
        sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
            "  FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and " +
            " aa.categoryId = cc.id) category,a.ticket_id,a.claimNo,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
            " escalated_to_grp_nm,a.busi_priority_id,a.tName,b.NAME createdBy,b.id createId,a.createdate createdSince,f.id statusId,f.ATTRVAL status," +
            " f.sequence_no seq,a.busi_impact_id,d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, a.busi_urgency_id, " +
            " e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR ," +
            " g.LEVELSHORTDESC ,g.id gid ,g.group_level,a.is_approved_problem_ticket,coalesce(sub_ticket_type,0) sub_ticket_type, " +
            " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
        sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  where ";

        sql = sql + " a.id = e.PKFIELDVAL  and a.clientId=? and a.ticketTypeId = ? and " +
            " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where ticketTypeId = ? and clientId=? and " +
            " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = ?),0) ) ";
        var params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.isManagement + ""];

        sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            // sql = sql + " and a.createdate between ? and ? ";
            sql = sql + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql = sql + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            data.ticket_id = data.ticket_id.trim();
            sql = sql + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql = sql + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        sql = sql + " and a.working_category = ? and a.createbyid = ? ";
        params.push(data.workingCategory);
        params.push(data.user_id);

        if (paginationType == 'prev') {
            sql = sql + " and a.id<? ORDER BY a.id desc LIMIT ?";
            sql = "SELECT * from (" + sql + ") Z ORDER BY Z.id ASC";
        } else {
            sql = sql + " and a.id>? ORDER BY a.id LIMIT ?";
        }

        params.push(Number(offset));
        params.push(Number(page_size));

        util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
        util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
        con.query(sql, params, function (err, result) {
            if (err) {
                util.logData(err);
                cb(err, false);
            } else {
                // util.logData('1st result length: --------------> ' + result.length);
                if (result.length > 0) {
                    cb(null, result);
                } else {
                    cb(null, []);
                }
            }
        });
    }

    function totalData(cb) {
        //let sql1;
        util.logData('\n\n totalData-------------------' + JSON.stringify(data));
        let sql1 = "select count(distinct a.id) count from USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
            " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  where";

        sql1 = sql1 + " a.id = e.PKFIELDVAL  and a.clientId=? and a.ticketTypeId = ? and " +
            " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where ticketTypeId = ? and clientId=? and " +
            " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = ?),0) ) ";
        var params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.isManagement + ""];

        sql1 = sql1 + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

        if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
            sql1 = sql1 + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
            params.push(data.created_frdate + " 00:00:00");
            params.push(data.created_todate + " 23:59:00");
        }

        sql1 = sql1 + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

        if (data.ticketStatusId.length > 0) {
            sql1 = sql1 + " and a.tstatus in (?) ";
            params.push(data.ticketStatusId);
        }

        if (data.ticket_id != '0') {
            data.ticket_id = data.ticket_id.trim();
            sql1 = sql1 + " and a.ticket_id LIKE Concat('%',?) ";
            params.push(data.ticket_id);
        }

        if (data.catFilterLt != '' && data.catFilterLt != '0') {
            var cat = data.catFilterLt.split(",");
            var catVal = cat[cat.length - 1].split("#");
            sql1 = sql1 + " and a.categoryDtlsLt like '%#?%' ";
            params.push(Number(catVal[1]));
        }

        sql1 = sql1 + " and a.working_category = ? and a.createbyid = ? ";
        params.push(data.workingCategory);
        params.push(data.user_id);

        logData("tot_query////////////////////// >" + sql1);
        logData("\n\ntot_query-params--------------------->" + params);
        con.query(sql1, params, function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                //util.logData('result1=' + done.length());
                cb(null, done);
            }
        });
    }
}

function searchAllChrDataForExport(data, cb) {
    if (data.grpLevel == 0) {
        searchAllChrDataForEnduser(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    } else if (data.grpLevel > 0) {
        searchAllChrDataForAnalyst(data, function (err, success, result) {
            if (err) {
                cb(err, null);
            } else {
                if (!success) {
                    cb(null, false, result);
                } else {
                    cb(null, true, result);
                }
            }
        });
    }
}

function searchAllChrDataForAnalyst(data, cb) {
    let sql;
    sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
        " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and aa.categoryId = cc.id) category ," +
        " a.ticket_id,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
        " escalated_to_grp_nm,a.tName,b.NAME createdBy,a.createdate createdSince,f.ATTRVAL status," +
        " d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
        " a.longDesc,a.requestedDate, a.ticketCloseDate, g.LEVELSHORTDESC , " +
        " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";

    sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
        " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a where ";

    sql = sql + " a.id in (SELECT distinct n.id FROM WFCCLIENTRESULT m, ticket n  where n.clientId=? and n.ticketTypeId = ? and n.DeleteFlag = '0' and n.id = m.PKFIELDVAL ";
    var params = [data.clientId, data.ticketTypeId];

    if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
        // sql = sql + " and n.createdate between ? and ? ";
        sql = sql + " and n.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
        params.push(data.created_frdate + " 00:00:00");
        params.push(data.created_todate + " 23:59:00");
    }

    if (data.assign_id.length > 0) {
        sql = sql + " and m.user_id in (?)) ";
        params.push(data.assign_id);
    } else {
        sql = sql + ") ";
    }

    sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

    if (data.raisedValue !== '') {
        sql = sql + " and a.original_createdbyid = (SELECT id FROM USER where login_name = ? and CLIENTID = ? and DeleteFlag=0)";
        params.push(data.raisedValue);
        params.push(data.clientId);
    }

    sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

    if (data.ticketStatusId.length > 0) {
        sql = sql + " and a.tstatus in (?) ";
        params.push(data.ticketStatusId);
    }

    if (data.busi_priority_id.length > 0) {
        sql = sql + " and a.busi_priority_id in (?) ";
        params.push(data.busi_priority_id);
    }

    if (data.catFilterLt != '' && data.catFilterLt != '0') {
        var cat = data.catFilterLt.split(",");
        var catVal = cat[cat.length - 1].split("#");
        sql = sql + " and a.categoryDtlsLt like '%#?%' ";
        params.push(Number(catVal[1]));
    }

    sql = sql + " and a.working_category = ? ";
    params.push(data.workingCategory);

    sql = sql + " ORDER BY a.id";

    util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
    util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
    con.query(sql, params, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, []);
            }
        }
    });
}

function searchAllChrDataForEnduser(data, cb) {
    let sql;
    sql = "SELECT distinct a.id id, (SELECT group_concat( concat(alphanum(bb.header_name),'->', cc.ATTRVAL )) categaryLt " +
        " FROM ticketCategory aa, attributesHeaderMst bb, TICKETATTRIBUTES cc where a.id = aa.ticketId and aa.parent_categoryId = bb.id and aa.categoryId = cc.id) category ," +
        " a.ticket_id,(SELECT sg.LEVELSHORTDESC FROM SUPPORTGROUPLEVEL sg where sg.id =coalesce(a.escalated_to_supp_grp_id,0)) " +
        " escalated_to_grp_nm,a.tName,b.NAME createdBy,a.createdate createdSince,f.ATTRVAL status," +
        " d.busi_priority_name priority, a.requesterInfo reqInfo,a.dueDate dDate, " +
        " a.longDesc,a.requestedDate, a.ticketCloseDate, g.LEVELSHORTDESC , " +
        " (select b.NAME from WFCCLIENTRESULT_LAST_STATUS ws,USER ub where ws.user_id = ub.id and ws.PKFIELDVAL = a.id) assignee ";
    sql = sql + " FROM USER b, WFCCLIENTRESULT_LAST_STATUS e, " +
        " BUSINESSPRIORITY d,TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a  where ";

    sql = sql + " a.id = e.PKFIELDVAL  and a.clientId=? and a.ticketTypeId = ? and " +
        " a.working_category in (SELECT ticketAttrId FROM SupportGrpWithTicketAttributes where ticketTypeId = ? and clientId=? and " +
        " supportGroupLevelId = coalesce((SELECT id FROM SUPPORTGROUPLEVEL where id =? and management = ?),0) ) ";
    var params = [data.clientId, data.ticketTypeId, data.ticketTypeId, data.clientId, data.supportgrp_id, data.isManagement + ""];

    sql = sql + " and a.tstatus = f.id and a.busi_priority_id = d.id and a.createbyid = b.id ";

    if (data.ticket_id === 0 && data.created_frdate != '' && data.created_todate != '') {
        // sql = sql + " and a.createdate between ? and ? ";
        sql = sql + " and a.createdate BETWEEN subtime(COALESCE(?),'5:30:0.000000') AND subtime(COALESCE(?),'5:30:0.000000')";
        params.push(data.created_frdate + " 00:00:00");
        params.push(data.created_todate + " 23:59:00");
    }

    sql = sql + " and a.DeleteFlag = '0' and a.id = e.PKFIELDVAL  and g.id = e.supportGroupLevelId ";

    if (data.ticketStatusId.length > 0) {
        sql = sql + " and a.tstatus in (?) ";
        params.push(data.ticketStatusId);
    }

    if (data.catFilterLt != '' && data.catFilterLt != '0') {
        var cat = data.catFilterLt.split(",");
        var catVal = cat[cat.length - 1].split("#");
        sql = sql + " and a.categoryDtlsLt like '%#?%' ";
        params.push(Number(catVal[1]));
    }

    sql = sql + " and a.working_category = ? and a.createbyid = ? ORDER BY a.id";
    params.push(data.workingCategory);
    params.push(data.user_id);

    util.logData("\n\n>>>>>>>> Search Query >>>>>>>" + sql);
    util.logData("\n\n>>>>>>>> params >>>>>>>" + params)
    con.query(sql, params, function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false);
        } else {
            if (result.length > 0) {
                cb(null, true, result);
            } else {
                cb(null, true, []);
            }
        }
    });
}

function getResolutionTime(data, cb) {
    let sql = "SELECT id , RESOLUTIONTIME ,supportGroupLevelId  FROM SLA_client_specific where CLIENTID = ? and busi_priority_id = ? and TICKETTYPEID = ? and deleteflag = 0;";
    con.query(sql, [data.clientId, data.priorityId, data.ticket_type], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}

function chatBoxProcess(data, cb) {
    let responseData = {};
    async.waterfall([
        function ticketCreate(done1) {
            console.log("======================Create Ticket============================");
            let createTicketData = {
                "clientId": 7,
                "ticket_type_seq": 1,
                "user_id": "601892",
                "ticketTypeId": 3052,
                "tName": "Test",
                "longDesc": "Test Desc",
                "attachmentPath": [],
                "busi_priority_id": 21,
                "tstatus": 1,
                "createdBy": "601892",
                "categoryDtlsLt": "66#3071,67#115768,68#115769,69#115770",
                "priorityType": 2,
                "sourceType": "LIVECHAT",
                "original_createdbyid": "601892",
                "userGroupId": 99,
                "requesterInfo": "braio-user@abc.com-9999999999-NA",
            }
            createTicket(createTicketData, function (err, succ, details1) {
                if (err) {
                    cb(err, 'Error in createTicket');
                } else {
                    // cb(null,true,details2);
                    responseData["ticketUiqueID"] = details1.id;
                    responseData["ticketId"] = details1.ticket_id;
                    done1(null, details1.ticket_id);
                }
            })
        },
        function getLatestWfc(Result1, done2) {
            console.log("======================latest Wfc Id============================" + Result1);
            getLatestWFCRId({ 'ticketId': Result1 }, function (err, succ, details2) {
                if (err) {
                    cb(err, 'error in getting latest wfc Id');
                } else {
                    console.log("............." + JSON.stringify(details2[0].id));
                    done2(null, details2[0].id);
                    //    cb(null,true,details2);
                }
            })
        },
        function feedback(Result2, done3) {
            console.log("======================updating feedback============================" + Result2);
            let feedBackdata = {
                WFCClientResultId: Result2,
                createdBy: "601892",
                ticketId: responseData.ticketId,
                user_id: "601892",
                clientId: 7,
                ticketTypeId: 3052,
                cat_id: 115768,
            }
            feedBackdata['feedback'] = "";

            for (let i = 0; i <= data.feedbackArray.length - 1; i++) {
                if (feedBackdata.feedback == "") {
                    feedBackdata.feedback = data.feedbackArray[i];
                } else {
                    feedBackdata.feedback = feedBackdata.feedback + "\n" + data.feedbackArray[i]
                }

            }

            console.log(feedBackdata.feedback);

            submitFeedbackTicketWise(feedBackdata, function (err, succ, details3) {
                if (err) {
                    cb(err, 'Error in submitting feedback');
                } else {
                    getLatestWFCRId({ 'ticketId': responseData.ticketId }, function (err, succ, details4) {
                        if (err) {
                            cb(err, 'error in getting latest wfc Id ==> ');
                        } else {
                            done3(null, details4[0].id);
                        }
                    })
                }
            })
        },
        function selfAssign(Result3, done4) {
            console.log("======================change status >> selfassign============================" + Result3);
            let selfAssignData =
            {
                "id": responseData.ticketId,
                "supportGroupLevelId": 203,
                "createdBy": "601892",
                "refer_user_id": "601892",
                "cat_id": "115768",  // fixed
                "parent_cat_id": 67,  //fixed
                "frdType": "Own",    // fixed
                "isDeviation": false,  // fixed
                "WFCClientResultId": Result3,
                "selected": 1,     // fixed
                "tStatus": 3060,
                "clientId": 7,
                "support_group": "BRAIO Support Group",
                "user_id": "601892"
            };

            setTimeout(function () {
                updateForwardedTicket(selfAssignData, function (err, succ, details4) {
                    if (err) {
                        cb(err, "Error in self assign");
                    } else {
                        done4(null, details4);
                    }
                })
            }, 2000);
            // console.log("=======================================================================wait for two seconds");


        },
        function addSolution(Result4, done5) {
            console.log("======================add solution ============================" + JSON.stringify(Result4));
            let solutionData = {
                "ticketId": responseData.ticketId,
                "WFCClientResultId": Result4,
                "createdBy": "601892",
                "solutions": "User response provided and live chat session closed",
                "clientId": 7,
                "rca": "",
                "ticket_type_seq": 1,
                "user_id": "601892",
                "seq_no": 2
            };
            // console.log(JSON.stringify(solutionData));
            submitSolutionsTicketWise(solutionData, function (err, succ, details5) {
                if (err) {
                    cb(err, "Error in submitting solution");
                } else {
                    done5(null, { "id": responseData.ticketUiqueID, "ticketID": responseData.ticketId });
                }
            })
        },
    ],
        function (err, results) {
            if (err) {
                cb(err, "Error in chat box process")
            } else {
                cb(null, true, results)
            }
        });

}

function getCategoryIc(data, cb) {
    var sql = "SELECT id ,ATTRVAL name FROM TICKETATTRIBUTES where DeleteFlag = 0 and CLIENTID=? and ATTRID=1 and " +
        " attrHeaderMstId in (SELECT id FROM attributesHeaderMst where CLIENTID= ? and ticket_type=? and sequence_no =1 and DeleteFlag =0);";
    con.query(sql, [data.clientId, data.clientId, data.ticketTypeId], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    });
}



function getCategoryLevel(data, cb) {
    var sql = "SELECT id, header_name name FROM attributesHeaderMst where CLIENTID= ? and ticket_type=? and sequence_no >1 and DeleteFlag =0";
    con.query(sql, [data.clientId, data.ticketTypeId], function (err, details) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, details);
        }
    });
}



function getTicketAttrClientAttributesWise_chr(data, cb) {
    var sql = 'SELECT id ,sequence_no FROM attributesHeaderMst where DeleteFlag=0 and CLIENTID=' + data.clientId +
        ' and ticket_type=? and sequence_no < ? order by sequence_no desc limit 1;';
    con.query(sql, [data.ticket_type, data.seq], function (err, result1) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result1.length > 0) {
                // var str = " SELECT a.id id, a.ATTRVAL name " +
                //     " FROM TICKETATTRIBUTES a " +
                //     " WHERE  a.DeleteFlag = '0' " +
                //     " and a.CLIENTID=" + data.clientId + " " +
                //     " and a.attrHeaderMstId = " + result1[0].id + " ";
                var str = "SELECT a.id id, (select replace(GROUP_CONCAT(ATTRVAL),',',' / ') category from TICKETATTRIBUTES " +
                    " where FIND_IN_SET(id,(a.parentPath))) name FROM TICKETATTRIBUTES a WHERE  a.CLIENTID=? and a.attrHeaderMstId = ? " +
                    "and a.DeleteFlag = '0' and FIND_IN_SET(?,(a.parentPath)) order by a.id DESC;"
                con.query(str, [data.clientId, result1[0].id, data.areaSelected1], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        cb(null, true, result);
                    }
                });
            } else {
                cb(null, true, [])
            }
        }
    })

}

function updateMailTemplateLt(data, cb) {
    let sql = "update ticket_status_nofication_mst set  subject = ?, msg_body_content = ?, modify_by_id = ?, modify_date=now() where id = ?;";
    let param = [data.subject, data.template, data.createdBy, data.selectedId];
    con.query(sql, param, function (err, done) {
        if (err) {
            util.logData(err);
            cb(err, null);
        } else {
            cb(null, true, done);
        }
    });
};

function getCategoryListSupportGroupWiseForParentId(data, cb) {
    let sql = "SELECT b.id,  b.ATTRVAL title FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b where a.ticketAttrId = b.id and a.DeleteFlag = '0' " +
        " and b.DeleteFlag = '0' and a.supportGroupLevelId = ? and a.clientId = ? and a.ticket_type = ?  and PARENT_ID = ?";
    con.query(sql, [data.groupId, data.clientId, data.ticketTypeId, data.PARENT_ID], function (err, result) {
        if (err) {
            util.logData(err);
            cb(err, false)
        } else {
            cb(null, true, result)
        }
    })
}


function getTicketCategoryDetails_SSC(data, cb) {
    logData('\n\ngetTicketCategoryDetails_SSC.......' + JSON.stringify(data) + '\n\n')
    function getCategory(callback) {
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and ATTRID='1' and (CLIENTID = " + data.clientId + " " +
            " or CLIENTID = (select clientid from ticket where id =" + data.ticketId + ") " +
            " or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=" + data.clientId + "))  " +
            " and (ticket_type = " + data.typeId + " or ticket_type = (select ticketTypeId from ticket where id =" + data.ticketId + " ))  ORDER BY sequence_no";
        // logData('\n\ngetCategory--------------' + sql)
        con.query(sql, function (err, result1) {
            if (err) {
                logData('Error1:---' + err);
                callback(err, null);
            } else {
                let count = 0;
                let arr = [];
                let arr1 = [];
                for (let i = 0; i < result1.length; i++) {
                    let sql1 = 'SELECT a.parent_categoryId parentId,a.categoryId catId,c.ATTRVAL catVal, b.header_name header ' +
                        ' FROM ticketCategory a,attributesHeaderMst b,TICKETATTRIBUTES c ' +
                        ' where a.DeleteFlag=0 and a.parent_categoryId=b.id and  a.categoryId=c.id and a.ticketId=' + data.ticketId + ' ' +
                        ' and  a.parent_categoryId=' + result1[i].id + '; ';
                    // console.log('\n\nsql1:' + sql1)
                    con.query(sql1, function (err, result) {
                        if (err) {
                            logData('Error2:---' + err);
                            callback(err, null);
                        } else {
                            count++;
                            if (result.length > 0) {
                                arr1.push(result[0]);
                            }

                            if (count === result1.length) {
                                for (let i = 0; i < result1.length; i++) {
                                    for (let j = 0; j < arr1.length; j++) {
                                        // logData(j+'---arr1:---' + arr1[j]);
                                        if (result1[i].id === arr1[j].parentId) {
                                            let val;
                                            if (i < Number(data.disableField)) {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header',
                                                        // followup_users_name: arr1[j].followup_users_name
                                                    }],
                                                    isDisabled: true
                                                }
                                            } else {
                                                val = {
                                                    id: i + 1,
                                                    options: [{ id: arr1[j].catId, title: arr1[j].catVal }, {
                                                        id: arr1[j].parentId,
                                                        title: arr1[j].header,
                                                        type: 'header'
                                                    }],
                                                }
                                            }
                                            arr.push(val);
                                            break;
                                        }
                                    }
                                }
                                callback(null, arr)
                            }
                        }
                    })
                }
            }
        });
    }

    function getStatusClient(callback) {
        //var str = 'select id, ATTRVAL name ,Attr_desc description,sequence_no seq from TICKETATTRIBUTES where DeleteFlag=0 and CLIENTID= ' + data.clientId + ' and ATTRID=2 and sequence_no NOT IN(0,2)';
        getStatusClientSSC(data, function (err, success, result) {
            if (err) {
                callback(err, null);
            } else {
                callback(null, result);
            }
        })
    }

    function getResolutionNResponseTime(callback) {
        getClientIdFromTicketTbl({
            ticketId: data.ticketId
        }, function (errCC, successCC, resCC) {
            if (errCC) {
                logData(errCC);
                callback(errCC, null);
            } else {
                data.clientId = resCC[0].clientid;
                data.typeId = resCC[0].ticketTypeId;
                getIsClientWiseSlaCalculationReq({
                    "clientId": data.clientId,
                    "ticketTypeId": data.typeId,
                    "working_category": data.cat_id
                }, function (errCU1, successCU1, detailsUC1) {
                    // util.logData('detailsUC1==========================================' + detailsUC1);
                    if (detailsUC1 == 0) {
                        var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                            " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                            " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId is null ";
                        con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                            if (err) {
                                logData('Error3:---' + err);
                                callback(err, null);
                            } else {
                                // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                                callback(null, result);
                            }
                        });
                    } else {
                        var str = "SELECT id,RESPONSETIME,RESOLUTIONTIME FROM SLA_client_specific where CLIENTID =? and TICKETTYPEID =? " +
                            " and busi_priority_id =(select busi_priority_id from ticket where id = ? )  " +
                            " and ACTIVESLA = 'true' and deleteflag = '0' and supportGroupLevelId like '%," + data.suppGrpId + ",%' ";
                        ;
                        con.query(str, [data.clientId, data.typeId, data.ticketId], function (err, result) {
                            if (err) {
                                logData('Error3:---' + err);
                                callback(err, null);
                            } else {
                                // logData('\n\n**********************************getResolutionNResponseTime**************************' + JSON.stringify(result))
                                callback(null, result);
                            }
                        });
                    }
                })
            }
        })
    }

    function getBaseCategory(callback) {
        const seq = Number(data.disableField) + 1;
        let sql = "select id from attributesHeaderMst where DeleteFlag = '0' and sequence_no=? " +
            " and (CLIENTID = " + data.clientId + " " +
            " or CLIENTID = (select clientid from ticket where id =" + data.ticketId + ") " +
            " or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=" + data.clientId + ") )" +
            " and (ticket_type=" + data.typeId + " or ticket_type = ( select ticketTypeId from ticket where id =" + data.ticketId + " ) ) ";
        con.query(sql, [seq], function (err, result1) {
            if (err) {
                logData('Error4:---' + err);
                callback(err, null);
            } else {
                let sql1 = 'select id, ATTRVAL title from TICKETATTRIBUTES where DeleteFlag=0 and attrHeaderMstId =' + result1[0].id + ' and PARENT_ID = (SELECT PARENT_ID from TICKETATTRIBUTES where id = ?) ORDER BY ATTRVAL;'
                con.query(sql1, [data.cat_id], function (err, result) {
                    if (err) {
                        logData('Error5:---' + err);
                        callback(err, null);
                    } else {
                        util.logData('base category====' + JSON.stringify(result));
                        callback(null, result)
                    }
                });
            }
        })
    }

    function getAdditionalField(callback) {
        getAddionalFieldWithValue({ ticketId: data.ticketId }, function (err, success, details) {
            if (err) {
                logData('Error6:---' + err);
                callback(err, null);
            } else {
                callback(null, details);
            }
        })
    }

    function getFollowUp(callback) {
        //let sql = 'SELECT followup_users_name FROM tbl_client_specific_master where id = (SELECT coalesce(followup_userid,0) FROM ticket_wise_followup_dtls where ticket_id = ?)';
        let sql = "SELECT coalesce(group_concat(followup_users_name) ,'') followup_users_name  FROM tbl_client_specific_master where id in (SELECT  coalesce(followup_userid,0) " +
            " FROM ticket_wise_followup_dtls where ticket_id = ? and delete_flag= '0' order by id desc )";
        logData('getFollowUp---------' + sql)
        con.query(sql, [data.ticketId], function (err, result) {
            if (err) {
                logData('Error7:---' + err);
                callback(err, null);
            } else {
                if (result.length > 0) {
                    if (result[0].followup_users_name != '')
                        callback(null, result)
                    else
                        callback(null, [])
                } else {
                    callback(null, [])
                }

            }
        })
    }

    function checkPriorityType(callback) {
        getClientIdFromTicketTbl({
            ticketId: data.ticketId
        }, function (errCC, successCC, resCC) {
            if (errCC) {
                logData(errCC);
                callback(errCC, null);
            } else {
                // logData("\n\n resCC----------------" + JSON.stringify(resCC))
                data.clientId = resCC[0].clientid;
                data.typeId = resCC[0].ticketTypeId;
                let sql = "select ticket_priority_type from ticket_priority_configuration " +
                    " where  (ticket_type=" + data.typeId + " or ticket_type = ( select ticketTypeId from ticket where id =" + data.ticketId + " ) ) "
                " and (client_id=" + data.clientId + " " +
                    " or client_id = (select clientid from ticket where id =" + data.ticketId + ") )" +
                    " and deleteflag=0";
                // logData('checkPriorityType-------' + sql)
                con.query(sql, function (err, result) {
                    if (err) {
                        logData(err);
                        callback(err, null);
                    } else {
                        if (result.length > 0) {

                            if (result[0].ticket_priority_type === 1) {
                                getBusinessUrgencyTicketTypeWise({
                                    clientId: data.clientId,
                                    ticket_type: data.typeId
                                }, function (err, success, urgency) {
                                    if (err) {
                                        logData(err);
                                        callback(err, null);
                                    } else {
                                        getBusinessImpactTicketTypeWise({
                                            clientId: data.clientId,
                                            ticket_type: data.typeId
                                        }, function (err, success, impact) {
                                            if (err) {
                                                logData(err);
                                                callback(err, null);
                                            } else {
                                                callback(null, {
                                                    type: result[0].ticket_priority_type,
                                                    impact: impact,
                                                    urgency: urgency
                                                })
                                            }
                                        })
                                    }
                                })
                            }
                            if (result[0].ticket_priority_type === 2) {
                                callback(null, { type: result[0].ticket_priority_type, impact: [], urgency: [] })
                            }
                        } else {
                            callback(null, { error: 'Please add Priority type' })
                        }
                    }
                });
            }
        })

    }

    async.parallel([getCategory, getStatusClient, getBaseCategory, getAdditionalField, getResolutionNResponseTime, getFollowUp, checkPriorityType], function (err, results) {
        if (err) {
            cb(err, null);
        } else {
            // console.log("\n\n"+JSON.stringify(results[0]));
            // console.log("\n\n"+JSON.stringify(results[2]));
            if (results[6].error) {
                cb(null, false, results[6].error)
            } else {
                for (let i = 0; i < results[2].length; i++) {
                    if (results[2][i].id !== results[0][Number(data.disableField)].options[0].id) {
                        results[0][Number(data.disableField)].options.push(results[2][i]);
                    }
                }
                cb(null, true, {
                    cat: results[0],
                    status: results[1],
                    fields: results[3],
                    expectedTime: results[4],
                    followUpName: results[5],
                    val: results[6]
                });
            }
        }
    })
}

function getAttributesParentWiseWithPriorityBasedOnSpGrp(data, cb) {

    let sql1 = "SELECT attrHeaderMstId, (SELECT category_header_id from ticket_workflow_generated_on_category where delete_flag = 0 " +
        " and client_id = ? and ticket_type_id = ?) as work_cat_id from TICKETATTRIBUTES where DeleteFlag = '0' and (CLIENTID= ? or " +
        " CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId = ? )) and PARENT_ID = ? limit 1";
    con.query(sql1, [data.clientId, data.tType, data.clientId, data.clientId, data.parentId], function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err, err1);
        } else {
            if (result1.length > 0) {
                if (result1[0].attrHeaderMstId === result1[0].work_cat_id) {
                    let sql = "SELECT ticketAttrId id,  b.ATTRVAL title, b.attachedField FROM SupportGrpWithTicketAttributes a, TICKETATTRIBUTES b " +
                        " where a.ticketAttrId = b.id and a.DeleteFlag = '0'  and b.DeleteFlag = '0' and a.supportGroupLevelId = ? " +
                        "  and a.clientId = ? and a.ticket_type = ?  and b.PARENT_ID = ?";
                    con.query(sql, [data.groupId, data.clientId, data.tType, data.parentId], function (err2, result2) {
                        if (err2) {
                            logData(err2);
                            cb(err2, null)
                        } else {
                            if (result2.length > 0) {
                                for (let i = 0; i < result2.length; i++) {
                                    result2[i].attachedField = stringToBool(result2[i].attachedField);
                                }
                                cb(null, true, { val: result2 });
                            } else {
                                if (Number(data.pType) === 2) {
                                    let sql1 = 'SELECT p.id id,p.busi_priority_name name FROM BUSINESSPRIORITY p,BUSINESSMATRIX m where p.DeleteFlag=0 and' +
                                        ' m.DeleteFlag=0 and p.id=m.busi_priority_id and (m.CLIENTID=? or m.CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and m.category_id=? ' +
                                        ' and m.ticket_type=?';
                                    con.query(sql1, [data.clientId, data.clientId, data.parentId, data.tType], function (err, result1) {
                                        if (err) {
                                            logData(err);
                                            cb(err, null);
                                        } else {
                                            cb(null, true, { priority: result1[0] });
                                        }
                                    })
                                } else {
                                    cb(null, false, "No data found");
                                }
                            }
                        }
                    })
                } else {
                    let sql = "select id,ATTRVAL title,attachedField from TICKETATTRIBUTES where DeleteFlag = '0' " +
                        " and (CLIENTID=? or CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and PARENT_ID =? ";
                    con.query(sql, [data.clientId, data.clientId, data.parentId], function (err, result) {
                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            util.logData("----------->:" + JSON.stringify(result))
                            if (result.length > 0) {
                                for (let i = 0; i < result.length; i++) {
                                    result[i].attachedField = stringToBool(result[i].attachedField);
                                }
                                cb(null, true, { val: result });
                            } else {
                                if (Number(data.pType) === 2) {
                                    let sql1 = 'SELECT p.id id,p.busi_priority_name name FROM BUSINESSPRIORITY p,BUSINESSMATRIX m where p.DeleteFlag=0 and' +
                                        ' m.DeleteFlag=0 and p.id=m.busi_priority_id and (m.CLIENTID=? or m.CLIENTID in (SELECT subclientId FROM client_subclient_mapping where masterId=?)) and m.category_id=? ' +
                                        ' and m.ticket_type=?';
                                    con.query(sql1, [data.clientId, data.clientId, data.parentId, data.tType], function (err, result1) {
                                        if (err) {
                                            logData(err);
                                            cb(err, null);
                                        } else {
                                            cb(null, true, { priority: result1[0] });
                                        }
                                    })
                                } else {
                                    cb(null, false, "No data found");
                                }
                            }
                        }
                    });
                }
            } else {
                cb(null, false, "No data found");
            }
        }
    });
}

function getAllUsersByLevel(data, cb) {
    let sql = "SELECT DISTINCT a.supportGroupLevelId as spgID, a.userId id, (select NAME from USER where USER.id = a.userId ) name FROM " +
        "supportGroupUser a, USER b where a.userId = b.id and b.DeleteFlag= '0' " +
        "and a.supportGroupLevelId in ( select id from SUPPORTGROUPLEVEL where group_level = ? and DeleteFlag = '0' " +
        "and CLIENTID= ?) and a.DeleteFlag= '0' order by name";
    con.query(sql, [data.level, data.clientId], function (err, resp) {
        if (err) {
            console.log(err);
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}



function addApproverEnduserMaster(data, cb) {
    if (data.selectedTypeValue === '1' || data.selectedTypeValue === 1) {
        let sql1 = "SELECT id from enduser_with_approver_mapping where clientId = ? and tktType = ?  and enduser_id = ? and approver_id = ? " +
            " and approver_spg = ?  and approver_status_seq = ? and prev_status_id = ? and DeleteFlag = 0;";
        con.query(sql1, [data.clientId, data.tktType, data.enduser_id, data.approver_id, data.approver_spg, data.newstatusSelected, data.prevstatusSelected], function (err1, resp1) {
            if (err1) {
                cb(err1, null);
            } else {
                if (resp1.length === 0) {
                    let sql = "INSERT INTO `enduser_with_approver_mapping` (`clientId`, `tktType`, `enduser_id`, `approver_id`, " +
                        " `approver_spg`,prev_status_id, approver_status_seq) VALUES ( ? ,  ? ,  ? ,  ? ,  ? , ? , ? );";
                    con.query(sql, [data.clientId, data.tktType, data.enduser_id, data.approver_id, data.approver_spg, data.prevstatusSelected, data.newstatusSelected], function (err, resp) {
                        if (err) {
                            cb(err, null);
                        } else {
                            cb(null, true, resp);
                        }
                    })
                } else {
                    cb(null, false, 'End User Already Mapped to Approver');
                }
            }
        })
    } else {
        let sql1 = "SELECT id from enduser_with_approver_mapping where clientId = ? and tktType = ?  and enduser_id = ? and approver_id = ? " +
            " and approver_role = ? and approver_status_seq = ? and prev_status_id = ? and DeleteFlag = 0;";
        con.query(sql1, [data.clientId, data.tktType, data.enduser_id, data.approver_id, data.roleId, data.newstatusSelected, data.prevstatusSelected], function (err1, resp1) {
            if (err1) {
                cb(err1, null);
            } else {
                if (resp1.length === 0) {
                    let sql = "INSERT INTO `enduser_with_approver_mapping` (`clientId`, `tktType`, `enduser_id`, `approver_id`, " +
                        " `approver_role`, approver_status_seq, prev_status_id ) VALUES ( ? ,  ? ,  ? ,  ? ,  ?, ? ,?  );";
                    con.query(sql, [data.clientId, data.tktType, data.enduser_id, data.approver_id, data.roleId, data.newstatusSelected, data.prevstatusSelected],
                        function (err, resp) {
                            if (err) {
                                cb(err, null);
                            } else {
                                cb(null, true, resp);
                            }
                        })
                } else {
                    cb(null, false, 'End User Already Mapped to Approver');
                }
            }
        })
    }

}



function addApproverEnduserMaster_copy(data, cb) {
    let sql1 = "SELECT id from enduser_with_approver_mapping where clientId = ? and tktType = ?  and enduser_id = ? and DeleteFlag = 0;";
    con.query(sql1, [data.clientId, data.tktType, data.enduser_id], function (err1, resp1) {
        if (err1) {
            cb(err1, null);
        } else {
            if (resp1.length === 0) {
                let sql = "INSERT INTO `enduser_with_approver_mapping` (`clientId`, `tktType`, `enduser_id`, `approver_id`, " +
                    " `approver_spg`) VALUES ( ? ,  ? ,  ? ,  ? ,  ? );";
                con.query(sql, [data.clientId, data.tktType, data.enduser_id, data.approver_id, data.approver_spg], function (err, resp) {
                    if (err) {
                        cb(err, null);
                    } else {
                        cb(null, true, resp);
                    }
                })
            } else {
                cb(null, false, 'End User Already Mapped to Approver');
            }
        }
    })
}

function deleteApproverEnduserMaster(data, cb) {
    let sql = "UPDATE `enduser_with_approver_mapping` SET `DeleteFlag` = 1 , modifybyid = ? and modifydate = now() WHERE (`id` = ?);";
    con.query(sql, [data.user_id, data.id], function (err, resp) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, resp);
        }
    })
}



function getApproverEnduserMaster(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.tktType) as tkttyp, (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.approver_status_seq) " +
                " as approver_status_seq, (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.prev_status_id) " +
                " as prev_status_id, (SELECT ROLENAME from USERROLE where id = a.approver_role) as roleName , (SELECT NAME from USER where id = a.enduser_id) as enduser, " +
                " (SELECT NAME from USER where id = a.approver_id) as approver,   (SELECT LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.approver_spg) as Approver_Group " +
                " FROM enduser_with_approver_mapping a where DeleteFlag = 0 and clientId = ? and  a.id > ? ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT a.id, (SELECT a.id, (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.tktType) as tkttyp, (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.approver_status_seq) " +
                " as approver_status_seq, (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.prev_status_id) " +
                " as prev_status_id, (SELECT ROLENAME from USERROLE where id = a.approver_role) as roleName , (SELECT NAME from USER where id = a.enduser_id) as enduser, " +
                " (SELECT NAME from USER where id = a.approver_id) as approver,   (SELECT LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.approver_spg) as Approver_Group " +
                " FROM enduser_with_approver_mapping a where DeleteFlag = 0 and clientId = ? and  a.id > ? ORDER BY a.id ASC LIMIT ?) Z ORDER BY Z.id  ASC";
        }
        util.logData('sql===' + str);
        util.logData('\n\n>>>>>>>>>>>===data = > ' + offset + ', +++++++++++++++' + page_size + ', clientId == >> ' + data.clientId);
        con.query(str, [data.clientId, offset, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from enduser_with_approver_mapping a where a.DeleteFlag = 0 and a.clientId = ?";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
    
}




function getApproverEnduserMaster_old(data, cb) {
    var page_size = data.page_size;
    var paginationType = data.paginationType;
    var data = preventSqlInjection(data);
    var offset = data.nextOffset;
    var funcArr = {};
    var str = "";

    if (offset == "0") {
        funcArr = { dataObj, totalData };
    } else {
        funcArr = { dataObj };
    }
    async.parallel(funcArr,
        function (err, results) {
            if (err) {
                cb(null, true, results);
            } else {
                if (offset == "0") {
                    var totalCount = results.totalData[0].count;
                    var divRes = totalCount / page_size;
                    var remainder = totalCount % page_size;
                    var totalPage = 0;
                    if (remainder == 0) {
                        totalPage = parseInt(divRes);
                    } else {
                        totalPage = parseInt(divRes) + 1;
                    }
                    results['totalPage'] = totalPage;
                }
                if (results.dataObj.length > 0) {
                    var nextOffset = results.dataObj[results.dataObj.length - 1].id;
                    var previousOffset = results.dataObj[0].id;
                    results['nextOffset'] = nextOffset;
                    results['previousOffset'] = previousOffset;
                }
                cb(null, true, results);
            }
        });

    function dataObj(cb) {
        if (paginationType == 'next' || paginationType == '') {
            str = "SELECT a.id, (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.tktType) as tkttyp, (SELECT NAME from USER where id = a.enduser_id) as enduser, (SELECT NAME from USER where id = a.approver_id) as approver, " +
                " (SELECT LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.approver_spg) as Approver_Group FROM enduser_with_approver_mapping a where " +
                "  DeleteFlag = 0 and clientId = ? and  a.id > ? ORDER BY a.id ASC LIMIT ?";
        } else if (paginationType == 'prev') {
            str = "SELECT * from (SELECT a.id,  (SELECT ATTRVAL from TICKETATTRIBUTES where id = a.tktType) as tkttyp, (SELECT NAME from USER where id = a.enduser_id) as enduser, (SELECT NAME from USER where id = a.approver_id) as approver, " +
                " (SELECT LEVELSHORTDESC from SUPPORTGROUPLEVEL where id = a.approver_spg) as Approver_Group FROM enduser_with_approver_mapping a where " +
                "  DeleteFlag = 0 and clientId = ? and  a.id > ? ORDER BY a.id ASC LIMIT ?) Z ORDER BY Z.id  ASC";
        }
        util.logData('sql===' + str);
        util.logData('\n\n>>>>>>>>>>>===data = > ' + offset + ', +++++++++++++++' + page_size + ', clientId == >> ' + data.clientId);
        con.query(str, [data.clientId, offset, Number(page_size)], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                cb(null, done);

            }
        });
    }

    function totalData(cb) {
        var str1 = "select count(a.id) count from enduser_with_approver_mapping a where a.DeleteFlag = 0 and a.clientId = ?";
        con.query(str1, [data.clientId], function (err, done) {
            if (err) {
                util.logData(err);
                cb(err, null);
            } else {
                // util.logData('result1=' + done);
                cb(null, done);
            }
        });
    }
}

function getMappedChildTicketDetails(data, cb) {
    function getHeader(callback) {
        getAttributesHeaderMstClientWiseWithTicketTypeSeq(data, function (err, success, result) {
            if (err) {
                callback(err, null)
            } else {
                callback(null, result)
            }
        })
    }

    function getData(callback) {
        getChildTicketDetails(data, function (err, success, result) {
            if (err) {
                callback(err, null)
            } else {
                callback(null, result)
            }
        })
    }

    async.parallel([getHeader, getData], function (err, results) {
        if (err) {
            cb(err, false)
        } else {
            cb(null, true, results)
        }
    })
}

function getChildTicketDetails(data, cb) {
    let sql = "SELECT a.id id,a.ticket_id, a.ticketTypeId, a.tName,b.NAME createdBy,a.createdate createdSince,f.ATTRVAL status,f.sequence_no seq,a.busi_impact_id, " +
        " d.busi_priority_name priority, " +
        " a.requesterInfo reqInfo,a.dueDate dDate,coalesce(a.modifydate,a.createdate) updateDate,coalesce(c.NAME,b.NAME) updateBy " +
        " ,e.id ids,a.createbyid,a.longDesc,a.requestedDate, a.ticketCloseDate,e.END_INDICATOR,g.LEVELSHORTDESC ,g.id gid " +
        " FROM USER b, WFCCLIENTRESULT e, BUSINESSPRIORITY d, TICKETATTRIBUTES f, SUPPORTGROUPLEVEL g, ticket a left join USER c  on a.modifybyid = c.id " +
        " where e.id in (select max(x.id) from WFCCLIENTRESULT x, ticket a where x.PKFIELDVAL = a.id  group by x.PKFIELDVAL) " +
        " and a.createbyid = b.id and a.id = e.PKFIELDVAL and a.busi_priority_id = d.id " +
        " and a.tstatus = f.id " +
        " and b.DeleteFlag = '0' " +
        " and coalesce(c.DeleteFlag,'0') = '0' and a.DeleteFlag = '0' " +
        " and g.id = e.supportGroupLevelId " +
        "and a.sub_ticket_type is null " +
        " and  b.DeleteFlag = '0' " +
        " and a.id in (SELECT ticket_id from child_ticket_ids where parent_id = " + data.id + "  and DeleteFlag = 0)";

    sql = sql + " order by e.id desc ";
    con.query(sql, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (result.length > 0) {
                var flg = 1;
                var le = 0;
                for (let j = 0; j < result.length; j++) {
                    let sql12 = "select m.wfcclient_result_id,m.assigned_user_id,m.assignee,coalesce(n.wfcclient_id,0) wfcclient_id from " +
                        "       (select a.id wfcclient_result_id,a.user_id assigned_user_id,b.NAME assignee " +
                        "       from WFCCLIENTRESULT a,USER b where a.user_id = b.id and a.PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") m " +
                        " left join " +
                        "       (select b.id wfcclient_result_id,a.id wfcclient_id from WFCCLIENT a , WFCCLIENTRESULT b " +
                        "       where a.id = (select max(wfcclient_id) from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and a.id = " + result[j].ids + ") and b.wfcclient_id = a.id ) n " +
                        " on m.wfcclient_result_id = n.wfcclient_result_id ";
                    con.query(sql12, function (err12, result12) {
                        if (err12) {
                            logData(err12);
                            cb(err12, null);
                        } else {
                            if (result12.length > 0) {
                                result[j]['assignee'] = result12[0].assignee;
                                result[j]['aid'] = result12[0].assigned_user_id;
                            }
                            /***********************************************************************************/
                            let sql2 = "select FIELDVAL,category_id,b.header_name parent,c.ATTRVAL child " +
                                " from WFCCLIENTRESULT a, attributesHeaderMst b, TICKETATTRIBUTES c   " +
                                " where a.FIELDVAL = c.id and a.category_id = b.id " +
                                " and a.PKFIELDVAL = " + result[j].id + " " +
                                " and a.activeFlow = '1' " +
                                " and a.serial_no = 1 " +
                                " and a.category_id = (select id from attributesHeaderMst where id in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) and  sequence_no = ((select max(sequence_no) from attributesHeaderMst where id  in (select category_id from WFCCLIENTRESULT where PKFIELDVAL = " + result[j].id + " and serial_no = 1) ))) ";
                            con.query(sql2, function (err2, result2) {
                                if (err2) {
                                    logData(err2);
                                    cb(err2, null);
                                } else {
                                    if (result2.length > 0) {
                                        result[j]['last_cat'] = result2[0].child;
                                        result[j]['last_cat_parent'] = result2[0].parent;
                                        result[j]['last_cat_id'] = result2[0].FIELDVAL;
                                        result[j]['last_cat_parent_id'] = result2[0].category_id;
                                    }
                                    /***********************************************************************************/
                                    let sql1 = "SELECT alphanum(b.header_name) parent, c.ATTRVAL child FROM ticketCategory a, attributesHeaderMst b, TICKETATTRIBUTES c " +
                                        " where a.parent_categoryId = b.id and a.categoryId = c.id and ticketId = " + result[j].id + "  ";
                                    console.log('sql1 == >> ' + sql1);
                                    le++;
                                    con.query(sql1, function (err1, result1) {
                                        if (err1) {
                                            logData(err1);
                                            cb(err1, null);
                                        } else {
                                            if (result1.length > 0) {
                                                for (let i = 0; i < result1.length; i++) {
                                                    result[j][result1[i].parent] = result1[i].child;
                                                }
                                                if (flg == result.length) {
                                                    cb(null, true, result);
                                                }
                                                flg++;
                                            } else {
                                                cb(null, true, []);
                                            }

                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            } else {
                cb(null, true, result);
            }
        }
    });
}

function getAttributesHeaderMstClientWiseWithTicketTypeSeq(data, cb) {

    var str = " SELECT c.name clientNm,a.id id,a.header_desc description,a.header_name name ,a.sequence_no seq," +
        " b.ATTRDESC attr, alphanum(a.header_name) field, d.ATTRVAL ticket_type " +
        " FROM CLIENT c, " +
        " attributesHeaderMst a , Attribute b, TICKETATTRIBUTES d " +
        " WHERE a.ATTRID = b.id  " +
        " and a.CLIENTID  = c.id " +
        " and a.ticket_type  = d.id " +
        " and a.DeleteFlag = '0' " +
        " and c.DeleteFlag = '0' " +
        " and b.DeleteFlag = '0' " +
        " and a.CLIENTID=" + data.clientId + " and a.ticket_type= (SELECT id from TICKETATTRIBUTES " +
        " where DeleteFlag = 0 and ATTRID = 3 and CLIENTID = " + data.clientId + " and sequence_no = " + data.seq + ")";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function checkAllChildInCloseStatus(data, cb) {
    let sql1 = "SELECT * FROM ticket where id in (SELECT ticket_id FROM child_ticket_ids where parent_id = ?)";
    con.query(sql1, [data.id], function (err1, result1) {
        if (err1) {
            logData(err1);
            cb(err1, null);
        } else {
            if (result1.length > 0) {
                let sql = "select (a.resolvedCnt-b.totCnt) bln, 'aa' aa from (select count(*) resolvedCnt from ticket where id in (select ticket_id from child_ticket_ids " +
                    " where parent_id =? and DeleteFlag = '0') and tstatus IN (SELECT id FROM TICKETATTRIBUTES where ATTRID =  2 and CLIENTID=? and sequence_no IN (0,2,28))) a," +
                    "  (select count(*) totCnt from child_ticket_ids where parent_id =? and DeleteFlag = '0') b ";
                console.log("checkAllChildInCloseStatus======" + sql);
                con.query(sql, [data.id, data.clientId, data.id], function (err, result) {
                    if (err) {
                        logData(err);
                        cb(err, null);
                    } else {
                        console.log("checkAllChildInCloseStatus ticketId1======" + data.id);
                        if (result[0].bln === 0) {
                            cb(null, true, "ok");
                        } else {
                            cb(null, false, "ok");
                        }
                    }
                })
            } else {
                console.log("checkAllChildInCloseStatus ticketId2======" + data.id);
                cb(null, true, "ok");
            }
        }
    })
}

function insertTktAdditionalPermission(data, cb) {
    let str = 'INSERT INTO ticket_additional_permission_mapped (clientId, ticket_id, permission_type, is_permission, approver_by_id, created_by_id) VALUES ( ? ,  ? ,  ? ,  ? ,  ? ,  ? );';
    con.query(str, [data.clientId, data.ticket_id, data.permission_type, data.is_permission, data.approver_by_id, data.created_by_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            if (data.wfid) {
                var sql5 = "INSERT INTO TicketActivityLogs (ticketId, activity_id, WFCCResult_id, active_userId,logValue ) " +
                    " VALUES (" + data.ticket_id + ",9," + data.wfid + "," + data.created_by_id + ", 'Update SAP TR Id: " + data.is_permission + "') ";
                con.query(sql5, function (err1, result1) {
                    if (err1) {
                        logData(err1);
                        cb(err1, null);
                    } else {

                        // optimizedreport table starts
                        var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                            // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                            + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                            + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                            + " from USER where id =? "
                        con.query(sql90, [data.ticket_id, data.created_by_id, data.created_by_id, data.created_by_id], function (err, result55) {
                            if (err) {
                                console.log(err);
                            } else {
                                console.log(result55);
                                var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                    + "all_analyst_ps=?,all_analyst_name=?,"
                                    + "ticket_activity_log ='Update SAP TR Id: ?',ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =? "
                                // console.log("WS@###########################",result60[0].id);
                                con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, data.is_permission, result55[0].login_name, result55[0].name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                    console.log("%^&*(*&%^&*()(*&6595639586956");
                                    if (err) {
                                        console.log("65342168451326854321698543216853241685426854", err);
                                        cb(err, null);
                                    } else {
                                        logData("********_______qwer_____>>>" + sql44);
                                        console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                        cb(null, true, result77);
                                    }
                                })
                            }
                        });

                        // optimizedreport table ends

                        cb(null, true, result1);
                    }
                });
            } else {
                cb(null, true, result);
            }
        }
    });
}


function insertTktAdditionalPermission_copy(data, cb) {
    let str = 'INSERT INTO ticket_additional_permission_mapped (clientId, ticket_id, permission_type, is_permission, approver_by_id, created_by_id) VALUES ( ? ,  ? ,  ? ,  ? ,  ? ,  ? );';
    con.query(str, [data.clientId, data.ticket_id, data.permission_type, data.is_permission, data.approver_by_id, data.created_by_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getTktAdditionalPermission(data, cb) {
    let str = "SELECT is_permission,permission_type, (SELECT NAME from USER where id = approver_by_id) as Approved_user ,approver_by_id from ticket_additional_permission_mapped  " +
        " where DeleteFlag = 0 and ticket_id = ? ";
    con.query(str, [data.ticket_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function updateTktAdditionalPermission_copy(data, cb) {
    let str = "UPDATE ticket_additional_permission_mapped  SET  is_permission = ?, approver_by_id =? and modifybyid = ? WHERE ticket_id = ?";
    con.query(str, [data.is_permission, data.approver_by_id, data.user_id, data.tid], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function updateTktAdditionalPermission(data, cb) {
    let str = '';
    let para = [];
    if (data.PermisionFor === 'update') {
        str = "UPDATE ticket_additional_permission_mapped  SET  is_permission = ?, approver_by_id =? , " +
            " modifybyid = ?, modifydate = now() WHERE ticket_id = ? and permission_type = ? ";
        para = [data.is_permission, data.approver_by_id, data.user_id, data.tid, data.permission_type]
    } else {
        str = "UPDATE ticket_additional_permission_mapped  SET  DeleteFlag = 1 , " +
            " modifybyid = ?, modifydate = now() WHERE ticket_id = ? and permission_type = ? ";
        para = [data.user_id, data.tid, data.permission_type]
    }

    con.query(str, para, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}




function getTktWrkFlowDtl(data, cb) {
    var str = "SELECT e.id, e.CLIENTID,e.work_flow_component_id, e.wfcclient_id, e.supportGroupLevelId, e.PKFIELDVAL, e.FIELDVAL, e.RESOLUTIONFIELD, " +
        " e.serial_no, e.END_INDICATOR, e.createbyid, e.createdate, e.modifybyid, e.modifydate, e.DeleteFlag, e.DeleteDate, e.delete_by_id, e.user_id, " +
        " e.frw_user_id, e.category_id, e.tStatus, e.activeFlow, e.isDeviation,a.createor_support_grp_id FROM WFCCLIENTRESULT_LAST_STATUS e, ticket a " +
        " where a.id = e.PKFIELDVAL and e.PKFIELDVAL =" + data.id + "";
    con.query(str, function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function addProblemTicketIdtoIncidentsTktsLogs(data, cb) {
    console.log('\n\naddProblemTicketIdtoIncidentsTktsLogs == >>> ' + JSON.stringify(data));
    var ticket_list = data.incident_ticket_list.split(",");
    for (let i = 0; i < ticket_list.length; i++) {
        getWorkflowResultMaxId({ "id": ticket_list[i] }, function (errI, successI, resultsI) {
            if (errI) {
                cb(errI, null);
            } else {
                let sql5 = "INSERT INTO TicketActivityLogs (ticketId,activity_id,WFCCResult_id,active_userId,logValue )  " +
                    " VALUES (" + ticket_list[i] + ",24, " + resultsI + "," + data.createdBy + ",'Problem Ticket Id: " + data.ticketno + "') ";
                logData('naddProblemTicketIdtoIncidentsTktsLogs*************************************' + sql5)
                con.query(sql5, function (err5, result51) {
                    if (err5) {
                        logData(err5);
                        cb(err5, null);
                    } else {
                        if (i === ticket_list.length - 1) {

                            // optimizedreport table starts
                            var sql90 = "Select (select id from optimizedreport where ticket_id=?) id,login_name,name,"
                                // +"replace(group_concat(concat((" + detailsB[0].supportGroupLevelId + "),'@')),',',' / ') supportgroup,"
                                + "coalesce(replace(group_concat(concat((select login_name from USER where id =?),'/')),',',' / '),'') ps,"
                                + "coalesce(replace(group_concat(concat((select name from USER where id =?),'/')),',',' / '),'') l_name"
                                + " from USER where id =? "
                            con.query(sql90, [ticket_list[i], data.createdBy, data.createdBy, data.createdBy], function (err, result55) {
                                if (err) {
                                    console.log(err);
                                } else {
                                    console.log(result55);
                                    var sql44 = "update optimizedreport set latest_analyst_ps =?, current_assignee_ps =?,latest_analyst_name=?,current_assignee_name=?,"
                                        + "all_analyst_ps=?,all_analyst_name=?,"
                                        + "ticket_activity_log ='Problem Ticket Id: ?',ticket_last_modified_dt=Now(),last_modified_id=?,last_modified_name=?,lastupdatedby=?,last_modified_dt=Now() where id =?"
                                    // console.log("WS@###########################",result60[0].id);
                                    con.query(sql44, [result55[0].login_name, result55[0].login_name, result55[0].name, result55[0].name, result55[0].ps, result55[0].l_name, data.ticketno, result55[0].login_name, result55[0].name, result55[0].name, result55[0].name, result55[0].id], function (err, result77) {
                                        console.log("%^&*(*&%^&*()(*&6595639586956");
                                        if (err) {
                                            console.log("65342168451326854321698543216853241685426854", err);
                                            cb(err, null);
                                        } else {
                                            logData("********___qwed_________>>>" + sql44);
                                            console.log("%^^^^^^^^^^^^^^^^^^^^^^^^^_____>>", result77);
                                            cb(null, true, result77);
                                        }
                                    })
                                }
                            });
                            // optimizedreport table ends
                            
                            cb(null, true, result51);
                        }

                    }
                })
            }
        });
    }
}

function getBHODDetaisl_copy(data, cb) {
    console.log('inside getBHODDetaisl == >>>> ');
    let sql = "SELECT DISTINCT (sELECT NAME FROM USER where id = approver_id) as name, (sELECT USERMAIL FROM USER where id = approver_id) as USERMAIL, " +
        " (sELECT USERMOBILENO FROM USER where id = approver_id) as USERMOBILENO from enduser_with_approver_mapping where " +
        " DeleteFlag = 0 and enduser_id = (SELECT createbyid from ticket where id = ?) and tktType = (SELECT ticketTypeId from ticket " +
        "  where id = ?)";
    con.query(sql, [data.tid, data.tid], function (err2, result) {
        if (err2) {
            logData(err2);
            cb(err2, null);
        } else {
            console.log('inside getBHODDetaisl == >>>> ' + JSON.stringify(result));
            cb(null, true, result);
        }
    });
}



function getBHODDetaisl(data, cb) {
    let sql = '';
    let paras = [];
    if (data.tktType) {
        sql = "SELECT DISTINCT (sELECT NAME FROM USER where id = approver_id) as name, approver_status_seq, approver_id, (SELECT ROLENAME from USERROLE " +
            " where id = approver_role) as roleName, approver_role, (sELECT USERMAIL FROM USER where id = approver_id) as USERMAIL, " +
            " (sELECT USERMOBILENO FROM USER where id = approver_id) as USERMOBILENO from enduser_with_approver_mapping where " +
            " DeleteFlag = 0 and enduser_id = ? and tktType =?";
        paras = [data.enduser_id, data.tktType];
    } else {
        sql = "SELECT DISTINCT (sELECT NAME FROM USER where id = approver_id) as name, (sELECT USERMAIL FROM USER where id = approver_id) as USERMAIL, " +
            " (sELECT USERMOBILENO FROM USER where id = approver_id) as USERMOBILENO , prev_status_id, approver_status_seq, approver_id, (SELECT ROLENAME from USERROLE " +
            " where id = approver_role) as roleName  from enduser_with_approver_mapping where  DeleteFlag = 0 and enduser_id = (SELECT createbyid " +
            " from ticket where id = ?) and tktType = (SELECT ticketTypeId from ticket where id = ?)";
        paras = [data.tid, data.tid];
    }
    console.log('\ninside getBHODDetaisl == >>>> ' + sql);

    con.query(sql, paras, function (err2, result) {
        if (err2) {
            logData(err2);
            cb(err2, null);
        } else {
            console.log('inside getBHODDetaisl == >>>> ' + JSON.stringify(result));
            cb(null, true, result);
        }
    });
}

function getoptimizedreportTicketDetailsReportByids(data, cb) {
    console.log('\n\ngetoptimizedreportTicketDetailsReportByids == >>> ' + JSON.stringify(data));
    con.query("SELECT * from optimizedreport where ticket_id in (" + data.tid + ");", function (err2, result) {
        if (err2) {
            logData(err2);
            cb(err2, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getUserTicketCount(data, cb) {
    let sql = "SELECT '19' id, COUNT(DISTINCT a.id) value FROM WFCCLIENTRESULT_LAST_STATUS e, ticket a WHERE a.clientid = ? " +
        " and a.ticketTypeId = ?  AND a.tstatus NOT IN (SELECT id FROM TICKETATTRIBUTES WHERE CLIENTID = ? AND ATTRID = 2 " +
        " AND sequence_no IN (0,2) AND DeleteFlag = '0') AND ((a.ticketCloseDate IS NULL AND e.END_INDICATOR = '0') " +
        " OR a.is_reopen = '1')  AND e.user_id = ? AND e.supportGroupLevelId = ? AND a.DeleteFlag = '0' AND a.id = e.PKFIELDVAL  ";
    con.query(sql, [data.clientId, data.ticketTypeId, data.clientId, data.req_user_id, data.supportgrp_id], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function getNextStatus(data, cb) {
    var str = "select id, ATTRVAL name , Attr_desc description, sequence_no seq, is_command_required from TICKETATTRIBUTES " +
        " where  CLIENTID= ?  and ATTRID = 2 and DeleteFlag= 0  and FIND_IN_SET(id, (select ticket_nxt_status_id from " +
        " ticket_status_seq_mst  where client_id = ?  and ticket_type_id = ? and delete_flag = '0' and ticket_pres_status_id = ? ))";
    logData('\n\ngetNextStatus--------------' + str)
    con.query(str, [data.client_id, data.client_id, data.ticket_type_id, data.ticket_pres_status_id], function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}

function custome_parent_child_attr_byId(data, cb) {
    console.log('\n\ncustome_parent_child_attr_byId == >>> ' + JSON.stringify(data));
    var str = "";
    let para = [];
    str = "SELECT id, attribute from custome_parent_child_attr where DeleteFlag = 0 and attr_id =2 and client_id = ? and attr_parent_id = ? order by seq_no";

    para = [data.client_id, data.attr_parent_id];

    logData('\n\ncustome_parent_child_attr_byId--------------' + str);

    con.query(str, para, function (err, result) {
        if (err) {
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}


function createBulkAssignmentTicket(data, cb) {
    for (let i = 0; i < data.ticket_ids.length; i++) {
        var str1 = "select * from bulk_assignment_ticket where ticket_id = ?";
        con.query(str1, [data.ticket_ids[i].id], function (err1, result1) {
            if (err1) {
                logData(err1);
                cb(err1, null);
            } else {
                if (result1.length > 0) {
                    if (i = data.ticket_ids.length - 1) {
                        cb(null, false, "Duplicate Data");
                    }
                } else {
                    let sql1 = "INSERT INTO `bulk_assignment_ticket` (`ticket_id`, `clientId`, `support_group`, `supportGroupLevelName`, `assignee_id`, `created_id`, `ticket_createrId`,`work_flow_id`,status_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?,?);"
                    con.query(sql1, [data.ticket_ids[i].id, data.client_id, data.support_group, data.ticket_ids[i].LEVELSHORTDESC, data.assignee_id, data.created_id, data.ticket_ids[i].createbyid, data.ticket_ids[i].ids,data.ticket_ids[i].statusId],  function (err, result) {

                        if (err) {
                            logData(err);
                            cb(err, null);
                        } else {
                            if (i = data.ticket_ids.length - 1) {
                                cb(null, true, result.insertId);

                            }
                        }
                    });
                }
            }
        })
    }
}

function getSupportGroupByLevelWise(data, cb) {
    let sql = 'select a.id ,a.LEVELSHORTDESC as name from SUPPORTGROUPLEVEL a where a.CLIENTID=? and a.group_level = ? and a.DeleteFlag=0';
    con.query(sql, [data.clientId, data.grpLevel], function (err, result) {
        if (err) {
            logData(err);
            cb(err, null);
        } else {
            cb(null, true, result);
        }
    });
}




// code written by sai for Forward to Basis

function forwardbasis(data,cb){
    console.log("================forwardbasis",data);
   var sqlFB = "select id as WFCClientResultId,user_id as refer_user_id from WFCCLIENTRESULT where PKFIELDVAL =? and supportGroupLevelId = ? order by id desc limit 1 ;"
   con.query(sqlFB,[data.ticket_id,data.supportGroupLevelId],function(err,resultFB){
    if(err){
        logData(err);
        cb(err,false);
    }else{
        logData("==================="+sqlFB);
        console.log("===========",resultFB);
        cb(null,true,resultFB);
    }
   })
}








module.exports.forwardbasis = forwardbasis;
module.exports.getSupportGroupByLevelWise = getSupportGroupByLevelWise;
module.exports.createBulkAssignmentTicket = createBulkAssignmentTicket;
module.exports.custome_parent_child_attr_byId = custome_parent_child_attr_byId;
module.exports.getNextStatus = getNextStatus;
module.exports.getUserTicketCount = getUserTicketCount;
module.exports.getoptimizedreportTicketDetailsReportByids = getoptimizedreportTicketDetailsReportByids;
module.exports.changeIncidentTicketStatusForProblem = changeIncidentTicketStatusForProblem;
module.exports.updateIncdntTcktStusForProbWthClose - updateIncdntTcktStusForProbWthClose;
module.exports.getBHODDetaisl = getBHODDetaisl;
module.exports.getTktWrkFlowDtl = getTktWrkFlowDtl;
module.exports.updateTktAdditionalPermission = updateTktAdditionalPermission;
module.exports.getTktAdditionalPermission = getTktAdditionalPermission;
module.exports.insertTktAdditionalPermission = insertTktAdditionalPermission;
module.exports.getCreaterDetail = getCreaterDetail;
module.exports.checkAllChildInCloseStatus = checkAllChildInCloseStatus;
module.exports.getAttributesHeaderMstClientWiseWithTicketTypeSeq = getAttributesHeaderMstClientWiseWithTicketTypeSeq;
module.exports.getMappedChildTicketDetails = getMappedChildTicketDetails;
module.exports.getApproverEnduserMaster = getApproverEnduserMaster;
module.exports.deleteApproverEnduserMaster = deleteApproverEnduserMaster
module.exports.addApproverEnduserMaster = addApproverEnduserMaster;
module.exports.getAllUsersByLevel = getAllUsersByLevel;

module.exports.getAttributesParentWiseWithPriorityBasedOnSpGrp = getAttributesParentWiseWithPriorityBasedOnSpGrp;
module.exports.getBusinessImpactTicketTypeWise = getBusinessImpactTicketTypeWise;
module.exports.getBusinessUrgencyTicketTypeWise = getBusinessUrgencyTicketTypeWise;
module.exports.getTicketCategoryDetails_SSC = getTicketCategoryDetails_SSC;
module.exports.updateMailTemplateLt = updateMailTemplateLt;
module.exports.getCategoryListSupportGroupWiseForParentId = getCategoryListSupportGroupWiseForParentId;
module.exports.getAllTicketDetailsExtended_withoutSLA = getAllTicketDetailsExtended_withoutSLA;
module.exports.getTicketAttrClientAttributesWise_chr = getTicketAttrClientAttributesWise_chr;
module.exports.getCategoryLevel = getCategoryLevel;
module.exports.getCategoryIc = getCategoryIc;
module.exports.chatBoxProcess = chatBoxProcess;
module.exports.getResolutionTime = getResolutionTime;
module.exports.searchAllChrDataForExport = searchAllChrDataForExport;
module.exports.AdvancesearchTicketForChr = AdvancesearchTicketForChr;

module.exports.searchSscDataForExport = searchSscDataForExport;
module.exports.searchCitDataForExport = searchCitDataForExport;
module.exports.getTicketsStatusWise = getTicketsStatusWise;
module.exports.changeUserPassword = changeUserPassword;
module.exports.deleteAllDashboardCat = deleteAllDashboardCat;
module.exports.insertDashboardCat = insertDashboardCat;
module.exports.deleteDashboardCat = deleteDashboardCat;
module.exports.getUserDetailsByLoginIdDecrypt = getUserDetailsByLoginIdDecrypt;
module.exports.getAllTicketDetailsExtended = getAllTicketDetailsExtended;
module.exports.getallBraioMapping = getallBraioMapping;
module.exports.getLastLevelCategoryByTicketType = getLastLevelCategoryByTicketType;
module.exports.updateBraioMapping = updateBraioMapping;
module.exports.insertBraioMapping = insertBraioMapping;
module.exports.deleteBraioMapping = deleteBraioMapping;
module.exports.getSupportGroupCount = getSupportGroupCount;
module.exports.getBRAIOurl = getBRAIOurl;
module.exports.updateSlaViolationMaster = updateSlaViolationMaster;
module.exports.getNotificationMenuIdTicketStatusWise = getNotificationMenuIdTicketStatusWise;
module.exports.getSlaViolationMaster = getSlaViolationMaster;
module.exports.insertSedularConfig = insertSedularConfig;
module.exports.insertEmailConfig = insertEmailConfig;
module.exports.deleteSedularConfig = deleteSedularConfig;
module.exports.getAllTicketDetails = getAllTicketDetails;
module.exports.getUserSupportGroup = getUserSupportGroup;
module.exports.getCategoryReportSupportGroupWise = getCategoryReportSupportGroupWise;
module.exports.getAllSupportGroupUserMap = getAllSupportGroupUserMap;
module.exports.getDynamicTotCountMenuTicketDtls_new = getDynamicTotCountMenuTicketDtls_new;
module.exports.getDynamicMenuTicketDtls_new = getDynamicMenuTicketDtls_new;
module.exports.getIncidentTicketTypeId = getIncidentTicketTypeId;
module.exports.AdvancesearchIncidentTicket = AdvancesearchIncidentTicket;
module.exports.getTicketCategoryDetailsDynamic = getTicketCategoryDetailsDynamic;
module.exports.getSupportGroupByClientIdOrMasterClientId = getSupportGroupByClientIdOrMasterClientId;
module.exports.getTileCountConfig = getTileCountConfig;
module.exports.deleteSupportGroupSpecificUrl = deleteSupportGroupSpecificUrl;
module.exports.getSubClientType = getSubClientType;
module.exports.getCountQuery = getCountQuery;
module.exports.searchSupportGroupUserMappingCategoryWise = searchSupportGroupUserMappingCategoryWise;
module.exports.getAllModulePageUrlMapping = getAllModulePageUrlMapping;
module.exports.getAllForwardWorkflow = getAllForwardWorkflow;
module.exports.getAllBackwardWorkflow = getAllBackwardWorkflow;
module.exports.getAllUrlWithMenus = getAllUrlWithMenus;
module.exports.searchAllPlatformUserAuth = searchAllPlatformUserAuth;
module.exports.getAllClientStatus = getAllClientStatus;
module.exports.searchAllClientStatus = searchAllClientStatus;
module.exports.getAllClientSpecificUrl = getAllClientSpecificUrl;
module.exports.searchAllClientSpecificUrl = searchAllClientSpecificUrl;
module.exports.getAllMenus = getAllMenus;
module.exports.getAllModulePageUrl = getAllModulePageUrl;
module.exports.getAllCategoryandSupportGroup = getAllCategoryandSupportGroup;
module.exports.getAllUserandSupportGroup = getAllUserandSupportGroup;
module.exports.getAllMapUserWithSupportGroup = getAllMapUserWithSupportGroup;
module.exports.getAllSupportGroup = getAllSupportGroup;
module.exports.getAllSupportGroupHolidays = getAllSupportGroupHolidays;
module.exports.getAllModuleRoleMap = getAllModuleRoleMap;
module.exports.getAllEscalation = getAllEscalation;
module.exports.getAllAutoTicketConfig = getAllAutoTicketConfig
module.exports.getAllTicketStatusFlow = getAllTicketStatusFlow;
module.exports.getAllEscalateMaster = getAllEscalateMaster
module.exports.getAllTicketCheckList = getAllTicketCheckList;
module.exports.getAllFileUploadLogs = getAllFileUploadLogs;
module.exports.getAllFollowUp = getAllFollowUp;
module.exports.getAllBusinessMatrix = getAllBusinessMatrix;
module.exports.getAllStatus = getAllStatus;
module.exports.getAllSlaClient = getAllSlaClient;
module.exports.getAllModuleRoleUserMap = getAllModuleRoleUserMap;
module.exports.updateFlowStatus = updateFlowStatus;
module.exports.getAllLevelOfCategories = getAllLevelOfCategories;
module.exports.getAllCategory = getAllCategory;
module.exports.getAllMapClientWithCategoryLevel = getAllMapClientWithCategoryLevel;
module.exports.getAllMapCategoryWithGroup = getAllMapCategoryWithGroup;
module.exports.getAllReportFields = getAllReportFields;
module.exports.getAllViewTicketMenuConfiguration = getAllViewTicketMenuConfiguration;
module.exports.getAllBusinessImpact = getAllBusinessImpact;
module.exports.getAllBusinessUrgency = getAllBusinessUrgency;
module.exports.getAllPriority = getAllPriority;
module.exports.getAllRoleData = getAllRoleData;
module.exports.getAllSupportGroupData = getAllSupportGroupData;
module.exports.searchAllRoles = searchAllRoles;
module.exports.updateClient = updateClient;
module.exports.searchAnalystByPsNo = searchAnalystByPsNo;
module.exports.searchAllEscalateMaster = searchAllEscalateMaster;
module.exports.searchAllClient = searchAllClient;
module.exports.searchAllClientAdminRoleMapping = searchAllClientAdminRoleMapping;
module.exports.searchAllRoleActionMap = searchAllRoleActionMap;
module.exports.searchAllModuleRoleMap = searchAllModuleRoleMap;
module.exports.searchAllMapRoleWithUser = searchAllMapRoleWithUser;
module.exports.searchAllRoleMapping = searchAllRoleMapping;
module.exports.searchAllMenuConfiguration = searchAllMenuConfiguration;
module.exports.searchAllModuleRoleMapping = searchAllModuleRoleMapping;
module.exports.searchAllModuleUserRoleMapping = searchAllModuleUserRoleMapping;
module.exports.searchAllRoleActionMapping = searchAllRoleActionMapping;
module.exports.searchAllRoleUserActionMapping = searchAllRoleUserActionMapping;
module.exports.searchAllCreateMenu = searchAllCreateMenu;
module.exports.searchAllModulePageUrlMappingStupa = searchAllModulePageUrlMappingStupa;
module.exports.searchAllModule = searchAllModule;
module.exports.searchAllModulePageUrlMapping = searchAllModulePageUrlMapping;
module.exports.searchAllTicketStatusFlow = searchAllTicketStatusFlow;
module.exports.searchAllTicketCheckList = searchAllTicketCheckList;
module.exports.searchAllFileUploadLogs = searchAllFileUploadLogs;
module.exports.searchAllFollowUp = searchAllFollowUp;
module.exports.searchAllEscalation = searchAllEscalation;
module.exports.searchAllBusinessMatrix = searchAllBusinessMatrix;
module.exports.searchAllStatus = searchAllStatus;
module.exports.searchAllSlaClient = searchAllSlaClient;
module.exports.searchAllPriority = searchAllPriority;
module.exports.searchAllBusinessUrgency = searchAllBusinessUrgency;
module.exports.searchAllBusinessImpact = searchAllBusinessImpact;
module.exports.searchAllViewTicketMenuConfiguration = searchAllViewTicketMenuConfiguration;
module.exports.searchAllReportFields = searchAllReportFields;
module.exports.searchAllMapCategoryWithGroup = searchAllMapCategoryWithGroup;
module.exports.searchAllMapClientWithCategoryLevel = searchAllMapClientWithCategoryLevel;
module.exports.searchAllCategory = searchAllCategory;
module.exports.searchAllLevelOfCategories = searchAllLevelOfCategories;
module.exports.searchAllCategorySlaMap = searchAllCategorySlaMap;
module.exports.searchAllSupportGroupSlaClient = searchAllSupportGroupSlaClient;
module.exports.searchAllSupportGroupHolidays = searchAllSupportGroupHolidays;
module.exports.searchAllRoleUserActionMap = searchAllRoleUserActionMap;
module.exports.searchAllMapUserWithSupportGroup = searchAllMapUserWithSupportGroup;
module.exports.searchAllModuleRoleUserMap = searchAllModuleRoleUserMap;
module.exports.searchAllRoleActionMap = searchAllRoleActionMap;
module.exports.searchAllSupportGroup = searchAllSupportGroup;
// ==========

module.exports.searchUserDetailsByPsNo = searchUserDetailsByPsNo;
module.exports.getCategoryReportUserWise = getCategoryReportUserWise;
module.exports.searchTicketByIdForChr = searchTicketByIdForChr;
module.exports.getNotifiationMaster = getNotifiationMaster;
module.exports.deleteNotification = deleteNotification;
module.exports.addNotification = addNotification;
module.exports.getAnyTicketById = getAnyTicketById;
module.exports.getTicketDetailsById = getTicketDetailsById;
// =====
module.exports.getUrlBySupportGroup = getUrlBySupportGroup;
module.exports.getSupportGroupSpecificUrl = getSupportGroupSpecificUrl;
module.exports.getActiveCategoryDetails = getActiveCategoryDetails;
module.exports.addSupportGroupSpecificUrl = addSupportGroupSpecificUrl;
module.exports.getTicketDetail = getTicketDetail;
module.exports.getClietSpecificUrl = getClietSpecificUrl;
module.exports.getSlaCalculationDoneByList = getSlaCalculationDoneByList;
module.exports.getSlaCalculation = getSlaCalculation;
module.exports.deleteSlaCalculation = deleteSlaCalculation;
module.exports.insertSlaCalculation = insertSlaCalculation;
module.exports.checkSupportGroupManagerialView = checkSupportGroupManagerialView
module.exports.calculateSupportGroupWorkingHour = calculateSupportGroupWorkingHour;
module.exports.insertSupportGroupWiseWorkingHour = insertSupportGroupWiseWorkingHour;
module.exports.getSubClient = getSubClient;
module.exports.insertMappingCategoryWithSupportGrp = insertMappingCategoryWithSupportGrp;
module.exports.getAttrHeader = getAttrHeader;
module.exports.getLntChrEndUser = getLntChrEndUser;
module.exports.getSupportGroupNotMapInCatagory = getSupportGroupNotMapInCatagory;
module.exports.deleteStatusSeq = deleteStatusSeq;
module.exports.addStatusSeq = addStatusSeq;
module.exports.getstatusSeqData = getstatusSeqData;
module.exports.getTicketCreateLoadingDtls_citapps = getTicketCreateLoadingDtls_citapps;
module.exports.getCatfromUrl = getCatfromUrl;
module.exports.getCategoryGroupMapping = getCategoryGroupMapping;
module.exports.searchAllUser = searchAllUser;
module.exports.getUserGroupRoleDetails = getUserGroupRoleDetails;
module.exports.getTicketCategoryDetails_lntchr = getTicketCategoryDetails_lntchr;
module.exports.getTicketCreateLoadingDtls_lntchr = getTicketCreateLoadingDtls_lntchr;
module.exports.getTicketStatusForCHRselfAssign = getTicketStatusForCHRselfAssign;
module.exports.getSupportGroupUserMappingCategoryWise = getSupportGroupUserMappingCategoryWise;
module.exports.mapPsnoWithGroup = mapPsnoWithGroup;
module.exports.getUserByGroupCHR = getUserByGroupCHR;
module.exports.getUserByGroup1CHR = getUserByGroup1CHR;
module.exports.getSupportGroupLevelWise = getSupportGroupLevelWise;
module.exports.getPlannedDateTimeByTicketId = getPlannedDateTimeByTicketId;
module.exports.getTicketByIdMinimal = getTicketByIdMinimal;
module.exports.getTicketByPlannedDateTime = getTicketByPlannedDateTime;
module.exports.getAdditionalFieldTypeList = getAdditionalFieldTypeList;
module.exports.getLatestWFCRId = getLatestWFCRId;
module.exports.generateSscReport = generateSscReport;
module.exports.generateTempSscReport = generateTempSscReport;
module.exports.searchUserDetails = searchUserDetails;
module.exports.getPriorityClientWise = getPriorityClientWise;
module.exports.getEscalationWorkflow = getEscalationWorkflow;
module.exports.deleteEscalationWorkflow = deleteEscalationWorkflow;
module.exports.insertEscalationWorkflow = insertEscalationWorkflow;
module.exports.updateTicketMenu = updateTicketMenu;
module.exports.PasswordChange = PasswordChange;
module.exports.updateTicketMenuConfig = updateTicketMenuConfig;
module.exports.passwordEncryption = passwordEncryption;
module.exports.getFileUploadLogs = getFileUploadLogs;
module.exports.getTicketActivityNoficationMst = getTicketActivityNoficationMst;
module.exports.insertTicketActivityNoficationMst = insertTicketActivityNoficationMst;
module.exports.deleteTicketActivityNoficationMst = deleteTicketActivityNoficationMst;
module.exports.getTicketActivityMst = getTicketActivityMst;
// ============================================================
module.exports.getTicketCategoryDetailsWithGroup = getTicketCategoryDetailsWithGroup;
module.exports.updateTicketNotificationMst = updateTicketNotificationMst;
module.exports.getCategoryByGroupForLnTCHR = getCategoryByGroupForLnTCHR;
module.exports.getSelectedDashboardCategory = getSelectedDashboardCategory;
module.exports.getTicketCreateLoadingDtlsWithGroup = getTicketCreateLoadingDtlsWithGroup;
module.exports.getCreateTicketDataWithGroup = getCreateTicketDataWithGroup;
module.exports.getMultipleAttributesParentWiseForLnTCHR = getMultipleAttributesParentWiseForLnTCHR;
module.exports.getDynamicTotCountMenuTicketDtls = getDynamicTotCountMenuTicketDtls;
module.exports.insertTicketFunc = insertTicketFunc;
module.exports.updateTicketFunc = updateTicketFunc;
module.exports.deleteTicketFunc = deleteTicketFunc;
module.exports.getTicketFunc = getTicketFunc;
module.exports.updateTicketAutoClosureTime = updateTicketAutoClosureTime;
module.exports.getTicketAutoClosureTime = getTicketAutoClosureTime;
module.exports.insertTicketAutoClosureTime = insertTicketAutoClosureTime;
module.exports.getDashboardCategory = getDashboardCategory;
module.exports.getCreateTicketData = getCreateTicketData;
module.exports.insertDashboardDB = insertDashboardDB;
module.exports.updateAdditionalFieldValue = updateAdditionalFieldValue;
module.exports.getAssetIdByTicket = getAssetIdByTicket;
module.exports.getAllLevelOneAndLevelTwoUser = getAllLevelOneAndLevelTwoUser;
module.exports.getParentTicketById = getParentTicketById;
module.exports.deleteChildTicket = deleteChildTicket;
module.exports.searchTicketByIdForCit = searchTicketByIdForCit;
module.exports.AdvancesearchTicketForCit = AdvancesearchTicketForCit;
module.exports.insertChildTicket = insertChildTicket;
module.exports.getChildTicketById = getChildTicketById;
module.exports.getCsatRatingList = getCsatRatingList;
module.exports.getCsatQuestion = getCsatQuestion;
module.exports.getSSO = getSSO;
module.exports.testQuery = testQuery;
module.exports.getTempSscReport = getTempSscReport;
// module.exports.getDashBoardDtls_new = getDashBoardDtls_new;
module.exports.deleteFunctionalityDetails = deleteFunctionalityDetails;
module.exports.getFunctionalityDetails = getFunctionalityDetails;
module.exports.mapClientWiseFunctionality = mapClientWiseFunctionality;
module.exports.getFunctionalityByClient = getFunctionalityByClient;
module.exports.getStatusByTicketTypeForIncident = getStatusByTicketTypeForIncident;
module.exports.AdvancesearchForIncidentTicket = AdvancesearchForIncidentTicket;
module.exports.getMappedLeafMenu = getMappedLeafMenu;
module.exports.getSscReportList = getSscReportList;
module.exports.getPSDetails = getPSDetails;
module.exports.getSscReport = getSscReport;
module.exports.getDistinctUrlKey = getDistinctUrlKey;
module.exports.deleteClientSpecificUrl = deleteClientSpecificUrl;
module.exports.getClientSpecificUrl = getClientSpecificUrl;
module.exports.addClientSpecificUrl = addClientSpecificUrl;
module.exports.getUrlList = getUrlList;
module.exports.searchTicketById = searchTicketById;
module.exports.getTicketCreateLoadingDtlsForSearch = getTicketCreateLoadingDtlsForSearch;
module.exports.decryptData = decryptData;
module.exports.encryptData = encryptData;
module.exports.saveToken = saveToken;
module.exports.getStatusByTicketTypeIncidentLt = getStatusByTicketTypeIncidentLt;
module.exports.getChatBotSearchTicket = getChatBotSearchTicket;
module.exports.AdvancesearchTicket = AdvancesearchTicket;
module.exports.getCategoryListSupportGroupWise = getCategoryListSupportGroupWise;
module.exports.checkOfflineDashNotification = checkOfflineDashNotification;
module.exports.updateOfflineNotificationData = updateOfflineNotificationData;
module.exports.checkOfflineNotificationData = checkOfflineNotificationData;
module.exports.updateEscalationSupportGroup = updateEscalationSupportGroup;
module.exports.getEscalationSupportGroup = getEscalationSupportGroup;
module.exports.deleteEscalationSupportGroup = deleteEscalationSupportGroup;
module.exports.insertEscalationSupportGroup = insertEscalationSupportGroup;
module.exports.deleteEscalation = deleteEscalation;
module.exports.getEscalateDetails = getEscalateDetails;
module.exports.insertEscalation = insertEscalation;
module.exports.getAllLevelOneUser = getAllLevelOneUser;
// module.exports.getDashBoardDtlsForTeamLead = getDashBoardDtlsForTeamLead;
// module.exports.getDashBoardDtlsForLeader = getDashBoardDtlsForLeader;
module.exports.getDynamicMenuTicketDtls = getDynamicMenuTicketDtls;
module.exports.updateFollowupLt = updateFollowupLt;
module.exports.deleteFollowUpLt = deleteFollowUpLt;
module.exports.getFollowupLt = getFollowupLt;
module.exports.addFollowupLt = addFollowupLt;
module.exports.deleteMailTemplateLt = deleteMailTemplateLt;
module.exports.getMailTemplateLt = getMailTemplateLt;
module.exports.insertMailTemplateLt = insertMailTemplateLt;
module.exports.getSupportGroupByTicketTypeLt = getSupportGroupByTicketTypeLt;
module.exports.getStatusByTicketTypeLt = getStatusByTicketTypeLt;
// ======================================
module.exports.checkIsLead = checkIsLead;
module.exports.getFollowupUserLt = getFollowupUserLt;
// module.exports.getDashBoardDtls = getDashBoardDtls;
module.exports.getCloseTicketInMyCategoryGroup = getCloseTicketInMyCategoryGroup;
module.exports.getLastCommentByTicketId = getLastCommentByTicketId;
module.exports.getOpenTicketInMyCategoryGroup = getOpenTicketInMyCategoryGroup;
module.exports.getPriorityForLTSSC = getPriorityForLTSSC;
module.exports.getStatusClientSSC = getStatusClientSSC;
module.exports.getRequesterInfo = getRequesterInfo;
module.exports.searchTicket = searchTicket;
module.exports.insertUserSession = insertUserSession;
module.exports.submitUserReplyFotTicketIfo = submitUserReplyFotTicketIfo;
module.exports.getWorkFlowWithPagination = getWorkFlowWithPagination;
module.exports.getLNTEmployeeDtls = getLNTEmployeeDtls;
module.exports.insertLNTEmployeeDtls = insertLNTEmployeeDtls;
module.exports.getUserDetailsByLoginId = getUserDetailsByLoginId;
module.exports.insertWFCGeneratedFor = insertWFCGeneratedFor;
module.exports.getTicketCreateLoadingDtls_lnt = getTicketCreateLoadingDtls_lnt;
module.exports.getTicketDetailForRSDB = getTicketDetailForRSDB;
module.exports.getWFCGeneratedDetails = getWFCGeneratedDetails;
module.exports.getAttributesHeaderMstTicketTypewise = getAttributesHeaderMstTicketTypewise;
// module.exports.getCategory_lnt = getCategory_lnt;
module.exports.tokenValidation = tokenValidation;
module.exports.generateToken = generateToken;
module.exports.getCategoryByTicketTypeNDynamicLevel = getCategoryByTicketTypeNDynamicLevel;
module.exports.getRSDBData = getRSDBData;
module.exports.getUrlByClient = getUrlByClient;
module.exports.getSomeVendorMst = getSomeVendorMst;
module.exports.getSalReport = getSalReport;
module.exports.getSlaCompletionPercentage = getSlaCompletionPercentage;
module.exports.checkIsTodayHoliday1 = checkIsTodayHoliday1;
module.exports.getUsersByMultiGroup = getUsersByMultiGroup;
// module.exports.getDocuActions = getDocuActions;
module.exports.getDocuTicketDetails = getDocuTicketDetails;
module.exports.getSubTicketType = getSubTicketType;
module.exports.deleteNewIncidentInProblem = deleteNewIncidentInProblem;
module.exports.getTicketById = getTicketById;
module.exports.forwardProblemTicketAfterChangesToApprover = forwardProblemTicketAfterChangesToApprover;
module.exports.addNewIncidentInProblem = addNewIncidentInProblem;
module.exports.getMappedIncidentTicketDetails = getMappedIncidentTicketDetails;
module.exports.getIncidentTicketDetailsProblemWise = getIncidentTicketDetailsProblemWise;
module.exports.getAllIncidentTicketDetails = getAllIncidentTicketDetails;
module.exports.changeTicketStatus = changeTicketStatus;
module.exports.getIncidentTicketDetails = getIncidentTicketDetails;
module.exports.approveProblemTicket = approveProblemTicket;
module.exports.getAttributesHeaderMstClientWiseWithTicket = getAttributesHeaderMstClientWiseWithTicket;
module.exports.escalationByCreatorAfterResolve = escalationByCreatorAfterResolve;
module.exports.getWFCClientBackward = getWFCClientBackward;
module.exports.getDynamicActionTicketTypeWise = getDynamicActionTicketTypeWise;
module.exports.getDynamicTabTicketTypeWise = getDynamicTabTicketTypeWise;
module.exports.deleteBackwardWorkFlow = deleteBackwardWorkFlow;
module.exports.insertAssetIds = insertAssetIds;
module.exports.mapRoleAction = mapRoleAction;
module.exports.getRoleWiseActions = getRoleWiseActions;
module.exports.getBusinessPriorityTicketTypeWise = getBusinessPriorityTicketTypeWise;
module.exports.getAttributesHeaderMstClientTicketTypeWise = getAttributesHeaderMstClientTicketTypeWise;
module.exports.getRoleUserActionMapWithClientId = getRoleUserActionMapWithClientId;
module.exports.getUsrActionMappingWithClientId = getUsrActionMappingWithClientId;
module.exports.getApiTime = getApiTime;
module.exports.insertApiTime = insertApiTime;
module.exports.getMenuDtlsAllClientWise = getMenuDtlsAllClientWise;
module.exports.getAttributesParentWiseWithPriority = getAttributesParentWiseWithPriority;
module.exports.getSlaRecalculationMstForm = getSlaRecalculationMstForm;
module.exports.insertSlaRecalculationMstForm = insertSlaRecalculationMstForm;
module.exports.getPriorityCategoryWise = getPriorityCategoryWise;
module.exports.updateReOpenTicket = updateReOpenTicket;
module.exports.getPriorityMapping = getPriorityMapping;
module.exports.getTicketPriorityConfiguration = getTicketPriorityConfiguration;
module.exports.deleteTicketPriorityConfiguration = deleteTicketPriorityConfiguration;
module.exports.updateTicketPriorityConfiguration = updateTicketPriorityConfiguration;
module.exports.insertTicketPriorityConfiguration = insertTicketPriorityConfiguration;
module.exports.getModuleRolesMappingClientWise = getModuleRolesMappingClientWise;
module.exports.getMappedModuleUserClientCWise = getMappedModuleUserClientCWise;
module.exports.getClientWiseSupportGroupList = getClientWiseSupportGroupList;
module.exports.insertTicketIdConfigure = insertTicketIdConfigure;
module.exports.getTicketIdConfigure = getTicketIdConfigure;
module.exports.getTicketEscalationDtlsSupportGrpWise = getTicketEscalationDtlsSupportGrpWise;
module.exports.insertTicketEscalationDtlsSupportGrpWise = insertTicketEscalationDtlsSupportGrpWise;
module.exports.deleteCSatFormDtls = deleteCSatFormDtls;
module.exports.updateCSatFormDtls = updateCSatFormDtls;
module.exports.getCSatFormDtls = getCSatFormDtls;
module.exports.insertCSatFormDtls = insertCSatFormDtls;
module.exports.getAddionalFieldWithValue = getAddionalFieldWithValue;
module.exports.getTicketFieldsCatWise = getTicketFieldsCatWise;
module.exports.updateAdditionalFieldTicketWise = updateAdditionalFieldTicketWise;
module.exports.getTicketExtandDtlsTicketWise = getTicketExtandDtlsTicketWise;
module.exports.getTicketExtandDtlsTicketNFieldWise = getTicketExtandDtlsTicketNFieldWise;
module.exports.getAllClients = getAllClients;
module.exports.updateMenuDtls = updateMenuDtls;
module.exports.getUrlSequence = getUrlSequence;
module.exports.mapNewUrlToModule = mapNewUrlToModule;
module.exports.getRemainingUrlDtls = getRemainingUrlDtls;
module.exports.getUnmappedLeafMenu = getUnmappedLeafMenu;
module.exports.getUrlByClient = getUrlByClient;
module.exports.deleteDynamicTabActionTicketTypeWise = deleteDynamicTabActionTicketTypeWise;
module.exports.getBackwardWorkFlowType = getBackwardWorkFlowType;
module.exports.deleteTicketExtandMstTbl = deleteTicketExtandMstTbl;
module.exports.getTicketExtandMstTbl = getTicketExtandMstTbl;
module.exports.insertTicketExtandMstTbl = insertTicketExtandMstTbl;
module.exports.getWorkflowType = getWorkflowType;
module.exports.getDynamicTabActionTicketTypeWise = getDynamicTabActionTicketTypeWise;
module.exports.insertWFCClientBackWard = insertWFCClientBackWard;
module.exports.getDynamicMenuTicketTypeWise = getDynamicMenuTicketTypeWise;
module.exports.getFirstLevelCategory = getFirstLevelCategory;
module.exports.getFirstLevelCategoryByTicket = getFirstLevelCategoryByTicket
module.exports.insertAdditionalFuncTicketTypeUserWise = insertAdditionalFuncTicketTypeUserWise;
module.exports.getAdditionalFunc = getAdditionalFunc;
module.exports.getAdditionalFuncTicketTypeUserWise = getAdditionalFuncTicketTypeUserWise;
module.exports.getAdditionalFuncTicketTypeWise = getAdditionalFuncTicketTypeWise;
module.exports.getUserWithOrWithoutVendorMapping = getUserWithOrWithoutVendorMapping;
module.exports.getSupportGrpWithoutVendor = getSupportGrpWithoutVendor;
module.exports.submitAttachmentTicketWise = submitAttachmentTicketWise;
module.exports.getAttachmentTicketWise = getAttachmentTicketWise;
module.exports.updateTicket = updateTicket;
module.exports.getLogsTicketWise = getLogsTicketWise;
module.exports.getSolutionsTicketWise = getSolutionsTicketWise;
module.exports.submitSolutionsTicketWise = submitSolutionsTicketWise;
module.exports.updateTicketStatusWithClose = updateTicketStatusWithClose;
module.exports.updateTicketStatus = updateTicketStatus;
module.exports.getCommentsByTicketId = getCommentsByTicketId;
module.exports.getUserClientWiseNotAssignInGrp = getUserClientWiseNotAssignInGrp;
module.exports.submitFeedbackTicketWise = submitFeedbackTicketWise;
module.exports.getStatusForClient = getStatusForClient;
module.exports.getAssignedByMe = getAssignedByMe;
module.exports.getMyForwardedTicketsInGroup = getMyForwardedTicketsInGroup;
module.exports.getMyForwardedTickets = getMyForwardedTickets;
module.exports.getCloseTicketInMyGroup = getCloseTicketInMyGroup;
module.exports.getMyCloseTicket = getMyCloseTicket;
module.exports.getOpenTicketInMyGroup = getOpenTicketInMyGroup;
module.exports.getTicketCategoryDetails = getTicketCategoryDetails;
module.exports.updateForwardedTicket = updateForwardedTicket;
module.exports.getNextAssigneeDtls = getNextAssigneeDtls;
module.exports.getMappedStatus = getMappedStatus;
module.exports.getMappedTicketType = getMappedTicketType;
module.exports.updateTicketCategory = updateTicketCategory;
module.exports.createTicket = createTicket;
module.exports.getTicketByMe = getTicketByMe;
module.exports.getUserByGroup = getUserByGroup;
module.exports.getUserByGroup1 = getUserByGroup1;
module.exports.getSupportGroupByCategory1 = getSupportGroupByCategory1;
module.exports.getSupportGroupByCategory = getSupportGroupByCategory;
module.exports.getLastLevelCategory = getLastLevelCategory;
module.exports.getBusinessPriorityImpactUrgencyBasis = getBusinessPriorityImpactUrgencyBasis;
module.exports.getAttributesParentWise = getAttributesParentWise;
module.exports.getTicketCreateLoadingDtls = getTicketCreateLoadingDtls;
module.exports.getComponentsByworkflowId = getComponentsByworkflowId;
module.exports.searchZone = searchZone;
module.exports.getWFCClientByClientId = getWFCClientByClientId;
module.exports.insertWorkFlow = insertWorkFlow;
module.exports.updateWorkFlow = updateWorkFlow;
module.exports.deleteWorkFlow = deleteWorkFlow;
module.exports.getWorkFlow = getWorkFlow;
module.exports.insertWorkFlowComponent = insertWorkFlowComponent;
module.exports.deleteWorkFlowComponent = deleteWorkFlowComponent;
module.exports.getWorkFlowComponent = getWorkFlowComponent;
module.exports.insertWorkFlowComponentDetails = insertWorkFlowComponentDetails;
module.exports.deleteWorkFlowComponentDetails = deleteWorkFlowComponentDetails;
module.exports.getWorkFlowComponentDetails = getWorkFlowComponentDetails;
module.exports.insertWFCClient = insertWFCClient;
module.exports.deleteWFCClient = deleteWFCClient;
module.exports.getWFCClient = getWFCClient;
module.exports.deleteTableFieldUserAction = deleteTableFieldUserAction;
module.exports.getTableFieldUserActionMap = getTableFieldUserActionMap;
module.exports.getTableFieldUserWiseActions = getTableFieldUserWiseActions;
module.exports.mapTableFieldUserAction = mapTableFieldUserAction;
module.exports.deleteTableUserAction = deleteTableUserAction;
module.exports.getTableUserActionMap = getTableUserActionMap;
module.exports.getTableUserWiseActions = getTableUserWiseActions;
module.exports.mapTableUserAction = mapTableUserAction;
module.exports.getUrlByTable = getUrlByTable;
module.exports.deleteTableUrl = deleteTableUrl;
module.exports.getTableUrlMap = getTableUrlMap;
module.exports.mapTableUrl = mapTableUrl;
module.exports.deleteTableFieldAction = deleteTableFieldAction;
module.exports.getTableFieldActionMap = getTableFieldActionMap;
module.exports.getTableFieldWiseActions = getTableFieldWiseActions;
module.exports.mapTableFieldAction = mapTableFieldAction;
module.exports.getFieldByTable = getFieldByTable;
module.exports.deleteTableAction = deleteTableAction;
module.exports.getTableActionMap = getTableActionMap;
module.exports.getTableWiseActions = getTableWiseActions;
module.exports.mapTableAction = mapTableAction;
module.exports.getMetadataTable = getMetadataTable;
module.exports.updateSupportGrpLevel = updateSupportGrpLevel;
module.exports.getBusinessMatrix = getBusinessMatrix;
module.exports.insertBusinessMatrix = insertBusinessMatrix;
module.exports.deleteBusinessMatrix = deleteBusinessMatrix;
module.exports.getSLADetails = getSLADetails;
module.exports.insertSLADetails = insertSLADetails;
module.exports.deleteSLADetails = deleteSLADetails;
module.exports.updateSLADetails = updateSLADetails;
module.exports.getSupportGroupByVendor = getSupportGroupByVendor;
module.exports.getTicketType = getTicketType;
module.exports.getMappingWithTicketAttrSuppGrp = getMappingWithTicketAttrSuppGrp;
module.exports.insertMappingWithTicketAttrSuppGrp = insertMappingWithTicketAttrSuppGrp;
module.exports.deleteMappingWithTicketAttrSuppGrp = deleteMappingWithTicketAttrSuppGrp;
module.exports.insertBusinessImpact = insertBusinessImpact;
module.exports.insertBusinessPriority = insertBusinessPriority;
module.exports.insertBusinessUrgency = insertBusinessUrgency;
module.exports.deleteBusinessImpact = deleteBusinessImpact;
module.exports.deleteBusinessPriority = deleteBusinessPriority;
module.exports.deleteBusinessUrgency = deleteBusinessUrgency;
module.exports.updateBusinessImpact = updateBusinessImpact;
module.exports.updateBusinessPriority = updateBusinessPriority;
module.exports.updateBusinessUrgency = updateBusinessUrgency;
module.exports.getBusinessImpact = getBusinessImpact;
module.exports.getBusinessPriority = getBusinessPriority;
module.exports.getBusinessUrgency = getBusinessUrgency;
module.exports.getTicketAttrClientAttributesWise = getTicketAttrClientAttributesWise;
module.exports.getTicketAttributesClientWise = getTicketAttributesClientWise;
module.exports.deleteTicketAttributesClientWise = deleteTicketAttributesClientWise;
module.exports.getAttributesHeaderMstClientWise = getAttributesHeaderMstClientWise;
module.exports.insertAttributesHeaderMstClientWise = insertAttributesHeaderMstClientWise;
module.exports.deleteAttributesHeaderMstClientWise = deleteAttributesHeaderMstClientWise;
module.exports.updateAttributesHeaderMstClientWise = updateAttributesHeaderMstClientWise;
module.exports.getRoleUserActionMapping = getRoleUserActionMapping;
module.exports.updateMenuDtlsWithUrlClientWise = updateMenuDtlsWithUrlClientWise;
module.exports.getMenuCompleteDtlsClientWise = getMenuCompleteDtlsClientWise;
module.exports.insertMenuDtlsClientWise = insertMenuDtlsClientWise;
module.exports.getMenuDtlsClientWise = getMenuDtlsClientWise;
module.exports.deleteRoleUserAction = deleteRoleUserAction;
module.exports.getTicketProperty = getTicketProperty;
module.exports.insertTicketProperty = insertTicketProperty;
module.exports.getRoleUserActionMap = getRoleUserActionMap;
module.exports.getUserWiseActions = getUserWiseActions;
module.exports.mapRoleUserAction = mapRoleUserAction;
module.exports.getDynamicMenuDtls = getDynamicMenuDtls;
module.exports.getSupportGroupByClientId = getSupportGroupByClientId;
module.exports.getSupportGroupVendorMapping = getSupportGroupVendorMapping;
module.exports.getSupportGroupSPOC = getSupportGroupSPOC;
module.exports.getSupportGroupUserMapping = getSupportGroupUserMapping;
module.exports.getSupportGrpLevel = getSupportGrpLevel;
module.exports.deleteSupportGrpLevel = deleteSupportGrpLevel;
module.exports.deleteSupportGroupVendorMapping = deleteSupportGroupVendorMapping;
module.exports.deleteSupportGroupSPOC = deleteSupportGroupSPOC;
module.exports.insertSupportGroupUserMapping = insertSupportGroupUserMapping;
module.exports.deleteSupportGroupUserMapping = deleteSupportGroupUserMapping;
module.exports.insertSupportGrpLevel = insertSupportGrpLevel;
module.exports.insertSupportGroupVendorMapping = insertSupportGroupVendorMapping;
module.exports.insertSupportGroupSPOC = insertSupportGroupSPOC;
module.exports.insertClientVendorUserMapping = insertClientVendorUserMapping;
module.exports.getClientVendorUserMapping = getClientVendorUserMapping;
module.exports.deleteClientVendorUserMapping = deleteClientVendorUserMapping;
module.exports.insertVendorMst = insertVendorMst;
module.exports.getVendorMst = getVendorMst;
module.exports.deleteVendorMst = deleteVendorMst;
module.exports.updateVendorMst = updateVendorMst;
module.exports.deleteAdminUserAuth = deleteAdminUserAuth;
module.exports.getAdminUserAuthorization = getAdminUserAuthorization;
module.exports.getAdminModule = getAdminModule;
module.exports.deleteModuleUserClient = deleteModuleUserClient;
module.exports.getMappedModuleUserClient = getMappedModuleUserClient;
module.exports.mapModuleUserClient = mapModuleUserClient;
module.exports.getUserByRole = getUserByRole;
module.exports.deleteUrlUserWise = deleteUrlUserWise;
module.exports.deleteUsrActionMapping = deleteUsrActionMapping;
module.exports.deleteClientUserRoleMapping = deleteClientUserRoleMapping;
module.exports.deleteMapModuleRole = deleteMapModuleRole;
module.exports.deleteClient = deleteClient;
// module.exports.deleteUserRoleDB = deleteUserRoleDB;
module.exports.deleteUrl = deleteUrl;
module.exports.deleteMapModuleWithClient = deleteMapModuleWithClient;
module.exports.deleteClientUserRole = deleteClientUserRole;
module.exports.getAdminUserAuth = getAdminUserAuth;
module.exports.getUserAuthorization = getUserAuthorization;
module.exports.setAdminUserAuth = setAdminUserAuth;
module.exports.createUsrActionMapping = createUsrActionMapping;
module.exports.getUsrActionMapping = getUsrActionMapping;
module.exports.getUserdetails = getUserdetails;
module.exports.getActions = getActions;
module.exports.getModuleRolesMapping = getModuleRolesMapping;
module.exports.mapModuleRole = mapModuleRole;
// module.exports.getRoleClientWise = getRoleClientWise;
module.exports.getUserClientWise = getUserClientWise;
module.exports.insertUserRoleMapping = insertUserRoleMapping;
module.exports.getUserRolesMap = getUserRolesMap;
module.exports.login = login;
module.exports.getMappedRoleWithClient = getMappedRoleWithClient;
module.exports.getMappedURL = getMappedURL;
module.exports.getClientDetails = getClientDetails;
module.exports.getModuleUrl = getModuleUrl;
module.exports.insertVendorDB = insertVendorDB;
module.exports.insertClientDB = insertClientDB;
// module.exports.insertUrlKeyDB = insertUrlKeyDB;
// module.exports.insertUserRoleDB = insertUserRoleDB;
module.exports.insertClientUserRoleDB = insertClientUserRoleDB;
module.exports.insertModuleClientDB = insertModuleClientDB;
// module.exports.insertModuleUrlMapDB = insertModuleUrlMapDB;
module.exports.insertModuleClientUserRoleMapDB = insertModuleClientUserRoleMapDB;
module.exports.insertModuleClientUserMapDB = insertModuleClientUserMapDB;
module.exports.insertUserDB = insertUserDB;
module.exports.insertRoleUserDB = insertRoleUserDB;
module.exports.allClientsDB = allClientsDB;
module.exports.allUrlKeyDB = allUrlKeyDB;
module.exports.allUrlDB = allUrlDB;
module.exports.allRolesDB = allRolesDB;
module.exports.allModulesByClientIdDB = allModulesByClientIdDB;
module.exports.allUrlByModuleClientDB = allUrlByModuleClientDB;
module.exports.allMappedModuleDB = allMappedModuleDB;
module.exports.allUserCreationListDB = allUserCreationListDB;
// module.exports.editRoleMst = editRoleMst;
// module.exports.editUrlMst = editUrlMst;
module.exports.loginlt = loginlt;
module.exports.getLoginClientList = getLoginClientList;

